(function(joo_global_object)
   {"use strict";
    var
     runtime=joo_global_object.jsoo_runtime,
     caml_check_bound=runtime.caml_check_bound,
     caml_compare=runtime.caml_compare,
     caml_equal=runtime.caml_equal,
     caml_fresh_oo_id=runtime.caml_fresh_oo_id,
     caml_list_of_js_array=runtime.caml_list_of_js_array,
     caml_ml_string_length=runtime.caml_ml_string_length,
     caml_obj_tag=runtime.caml_obj_tag,
     caml_register_global=runtime.caml_register_global,
     caml_string_compare=runtime.caml_string_compare,
     caml_string_get=runtime.caml_string_get,
     caml_string_notequal=runtime.caml_string_notequal,
     caml_string_of_jsbytes=runtime.caml_string_of_jsbytes,
     caml_sys_argv=runtime.caml_sys_argv,
     caml_sys_exit=runtime.caml_sys_exit,
     caml_sys_read_directory=runtime.caml_sys_read_directory,
     caml_sys_system_command=runtime.caml_sys_system_command,
     caml_wrap_exception=runtime.caml_wrap_exception;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4
              ?f(a0,a1,a2,a3)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3])}
    function caml_call5(f,a0,a1,a2,a3,a4)
     {return f.length == 5
              ?f(a0,a1,a2,a3,a4)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4])}
    function caml_call6(f,a0,a1,a2,a3,a4,a5)
     {return f.length == 6
              ?f(a0,a1,a2,a3,a4,a5)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5])}
    function caml_call7(f,a0,a1,a2,a3,a4,a5,a6)
     {return f.length == 7
              ?f(a0,a1,a2,a3,a4,a5,a6)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6])}
    function caml_call8(f,a0,a1,a2,a3,a4,a5,a6,a7)
     {return f.length == 8
              ?f(a0,a1,a2,a3,a4,a5,a6,a7)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6,a7])}
    function caml_call9(f,a0,a1,a2,a3,a4,a5,a6,a7,a8)
     {return f.length == 9
              ?f(a0,a1,a2,a3,a4,a5,a6,a7,a8)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6,a7,a8])}
    function caml_call17
     (f,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16)
     {return f.length == 17
              ?f(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16)
              :runtime.caml_call_gen
                (f,
                 [a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16])}
    var
     global_data=runtime.caml_get_global_data(),
     cst_Core_Import=caml_string_of_jsbytes("Core__Import"),
     cst_core=caml_string_of_jsbytes("core"),
     cst_src_import_ml=caml_string_of_jsbytes("src/import.ml"),
     cst=caml_string_of_jsbytes(""),
     cst_core$0=caml_string_of_jsbytes("core"),
     cst_core$1=caml_string_of_jsbytes("core"),
     cst_Core_Import$0=caml_string_of_jsbytes("Core__Import"),
     cst_e2BIG=caml_string_of_jsbytes("e2BIG"),
     cst_ENETUNREACH=caml_string_of_jsbytes("ENETUNREACH"),
     cst_EFAULT=caml_string_of_jsbytes("EFAULT"),
     cst_EBUSY=caml_string_of_jsbytes("EBUSY"),
     cst_E2BIG=caml_string_of_jsbytes("E2BIG"),
     cst_EACCES=caml_string_of_jsbytes("EACCES"),
     cst_EADDRINUSE=caml_string_of_jsbytes("EADDRINUSE"),
     cst_EADDRNOTAVAIL=caml_string_of_jsbytes("EADDRNOTAVAIL"),
     cst_EAFNOSUPPORT=caml_string_of_jsbytes("EAFNOSUPPORT"),
     cst_EAGAIN=caml_string_of_jsbytes("EAGAIN"),
     cst_EALREADY=caml_string_of_jsbytes("EALREADY"),
     cst_EBADF=caml_string_of_jsbytes("EBADF"),
     cst_ECHILD=caml_string_of_jsbytes("ECHILD"),
     cst_ECONNABORTED=caml_string_of_jsbytes("ECONNABORTED"),
     cst_ECONNREFUSED=caml_string_of_jsbytes("ECONNREFUSED"),
     cst_ECONNRESET=caml_string_of_jsbytes("ECONNRESET"),
     cst_EDEADLK=caml_string_of_jsbytes("EDEADLK"),
     cst_EDESTADDRREQ=caml_string_of_jsbytes("EDESTADDRREQ"),
     cst_EDOM=caml_string_of_jsbytes("EDOM"),
     cst_EEXIST=caml_string_of_jsbytes("EEXIST"),
     cst_EISDIR=caml_string_of_jsbytes("EISDIR"),
     cst_EFBIG=caml_string_of_jsbytes("EFBIG"),
     cst_EHOSTDOWN=caml_string_of_jsbytes("EHOSTDOWN"),
     cst_EHOSTUNREACH=caml_string_of_jsbytes("EHOSTUNREACH"),
     cst_EINPROGRESS=caml_string_of_jsbytes("EINPROGRESS"),
     cst_EINTR=caml_string_of_jsbytes("EINTR"),
     cst_EINVAL=caml_string_of_jsbytes("EINVAL"),
     cst_EIO=caml_string_of_jsbytes("EIO"),
     cst_EISCONN=caml_string_of_jsbytes("EISCONN"),
     cst_ELOOP=caml_string_of_jsbytes("ELOOP"),
     cst_EMFILE=caml_string_of_jsbytes("EMFILE"),
     cst_EMLINK=caml_string_of_jsbytes("EMLINK"),
     cst_EMSGSIZE=caml_string_of_jsbytes("EMSGSIZE"),
     cst_ENAMETOOLONG=caml_string_of_jsbytes("ENAMETOOLONG"),
     cst_ENETDOWN=caml_string_of_jsbytes("ENETDOWN"),
     cst_ENETRESET=caml_string_of_jsbytes("ENETRESET"),
     cst_EOVERFLOW=caml_string_of_jsbytes("EOVERFLOW"),
     cst_ENOSPC=caml_string_of_jsbytes("ENOSPC"),
     cst_ENFILE=caml_string_of_jsbytes("ENFILE"),
     cst_ENOBUFS=caml_string_of_jsbytes("ENOBUFS"),
     cst_ENODEV=caml_string_of_jsbytes("ENODEV"),
     cst_ENOENT=caml_string_of_jsbytes("ENOENT"),
     cst_ENOEXEC=caml_string_of_jsbytes("ENOEXEC"),
     cst_ENOLCK=caml_string_of_jsbytes("ENOLCK"),
     cst_ENOMEM=caml_string_of_jsbytes("ENOMEM"),
     cst_ENOPROTOOPT=caml_string_of_jsbytes("ENOPROTOOPT"),
     cst_ENOSYS=caml_string_of_jsbytes("ENOSYS"),
     cst_ENOTCONN=caml_string_of_jsbytes("ENOTCONN"),
     cst_ENOTDIR=caml_string_of_jsbytes("ENOTDIR"),
     cst_ENOTEMPTY=caml_string_of_jsbytes("ENOTEMPTY"),
     cst_ENOTSOCK=caml_string_of_jsbytes("ENOTSOCK"),
     cst_ENOTTY=caml_string_of_jsbytes("ENOTTY"),
     cst_ENXIO=caml_string_of_jsbytes("ENXIO"),
     cst_EOPNOTSUPP=caml_string_of_jsbytes("EOPNOTSUPP"),
     cst_ESOCKTNOSUPPORT=caml_string_of_jsbytes("ESOCKTNOSUPPORT"),
     cst_EPERM=caml_string_of_jsbytes("EPERM"),
     cst_EPFNOSUPPORT=caml_string_of_jsbytes("EPFNOSUPPORT"),
     cst_EPIPE=caml_string_of_jsbytes("EPIPE"),
     cst_EPROTONOSUPPORT=caml_string_of_jsbytes("EPROTONOSUPPORT"),
     cst_EPROTOTYPE=caml_string_of_jsbytes("EPROTOTYPE"),
     cst_ERANGE=caml_string_of_jsbytes("ERANGE"),
     cst_EROFS=caml_string_of_jsbytes("EROFS"),
     cst_ESHUTDOWN=caml_string_of_jsbytes("ESHUTDOWN"),
     cst_ESPIPE=caml_string_of_jsbytes("ESPIPE"),
     cst_ESRCH=caml_string_of_jsbytes("ESRCH"),
     cst_ETIMEDOUT=caml_string_of_jsbytes("ETIMEDOUT"),
     cst_ETOOMANYREFS=caml_string_of_jsbytes("ETOOMANYREFS"),
     cst_EUNKNOWNERR=caml_string_of_jsbytes("EUNKNOWNERR"),
     cst_EWOULDBLOCK=caml_string_of_jsbytes("EWOULDBLOCK"),
     cst_EXDEV=caml_string_of_jsbytes("EXDEV"),
     cst_eNFILE=caml_string_of_jsbytes("eNFILE"),
     cst_eFBIG=caml_string_of_jsbytes("eFBIG"),
     cst_eCHILD=caml_string_of_jsbytes("eCHILD"),
     cst_eACCES=caml_string_of_jsbytes("eACCES"),
     cst_eADDRINUSE=caml_string_of_jsbytes("eADDRINUSE"),
     cst_eADDRNOTAVAIL=caml_string_of_jsbytes("eADDRNOTAVAIL"),
     cst_eAFNOSUPPORT=caml_string_of_jsbytes("eAFNOSUPPORT"),
     cst_eAGAIN=caml_string_of_jsbytes("eAGAIN"),
     cst_eALREADY=caml_string_of_jsbytes("eALREADY"),
     cst_eBADF=caml_string_of_jsbytes("eBADF"),
     cst_eBUSY=caml_string_of_jsbytes("eBUSY"),
     cst_eCONNABORTED=caml_string_of_jsbytes("eCONNABORTED"),
     cst_eCONNREFUSED=caml_string_of_jsbytes("eCONNREFUSED"),
     cst_eCONNRESET=caml_string_of_jsbytes("eCONNRESET"),
     cst_eDEADLK=caml_string_of_jsbytes("eDEADLK"),
     cst_eDESTADDRREQ=caml_string_of_jsbytes("eDESTADDRREQ"),
     cst_eDOM=caml_string_of_jsbytes("eDOM"),
     cst_eEXIST=caml_string_of_jsbytes("eEXIST"),
     cst_eFAULT=caml_string_of_jsbytes("eFAULT"),
     cst_eLOOP=caml_string_of_jsbytes("eLOOP"),
     cst_eHOSTDOWN=caml_string_of_jsbytes("eHOSTDOWN"),
     cst_eHOSTUNREACH=caml_string_of_jsbytes("eHOSTUNREACH"),
     cst_eINPROGRESS=caml_string_of_jsbytes("eINPROGRESS"),
     cst_eINTR=caml_string_of_jsbytes("eINTR"),
     cst_eINVAL=caml_string_of_jsbytes("eINVAL"),
     cst_eIO=caml_string_of_jsbytes("eIO"),
     cst_eISCONN=caml_string_of_jsbytes("eISCONN"),
     cst_eISDIR=caml_string_of_jsbytes("eISDIR"),
     cst_eMFILE=caml_string_of_jsbytes("eMFILE"),
     cst_eMLINK=caml_string_of_jsbytes("eMLINK"),
     cst_eMSGSIZE=caml_string_of_jsbytes("eMSGSIZE"),
     cst_eNAMETOOLONG=caml_string_of_jsbytes("eNAMETOOLONG"),
     cst_eNETDOWN=caml_string_of_jsbytes("eNETDOWN"),
     cst_eNETRESET=caml_string_of_jsbytes("eNETRESET"),
     cst_eNETUNREACH=caml_string_of_jsbytes("eNETUNREACH"),
     cst_eOVERFLOW=caml_string_of_jsbytes("eOVERFLOW"),
     cst_eNOSYS=caml_string_of_jsbytes("eNOSYS"),
     cst_eNOBUFS=caml_string_of_jsbytes("eNOBUFS"),
     cst_eNODEV=caml_string_of_jsbytes("eNODEV"),
     cst_eNOENT=caml_string_of_jsbytes("eNOENT"),
     cst_eNOEXEC=caml_string_of_jsbytes("eNOEXEC"),
     cst_eNOLCK=caml_string_of_jsbytes("eNOLCK"),
     cst_eNOMEM=caml_string_of_jsbytes("eNOMEM"),
     cst_eNOPROTOOPT=caml_string_of_jsbytes("eNOPROTOOPT"),
     cst_eNOSPC=caml_string_of_jsbytes("eNOSPC"),
     cst_eNOTCONN=caml_string_of_jsbytes("eNOTCONN"),
     cst_eNOTDIR=caml_string_of_jsbytes("eNOTDIR"),
     cst_eNOTEMPTY=caml_string_of_jsbytes("eNOTEMPTY"),
     cst_eNOTSOCK=caml_string_of_jsbytes("eNOTSOCK"),
     cst_eNOTTY=caml_string_of_jsbytes("eNOTTY"),
     cst_eNXIO=caml_string_of_jsbytes("eNXIO"),
     cst_eOPNOTSUPP=caml_string_of_jsbytes("eOPNOTSUPP"),
     cst_eSOCKTNOSUPPORT=caml_string_of_jsbytes("eSOCKTNOSUPPORT"),
     cst_ePERM=caml_string_of_jsbytes("ePERM"),
     cst_ePFNOSUPPORT=caml_string_of_jsbytes("ePFNOSUPPORT"),
     cst_ePIPE=caml_string_of_jsbytes("ePIPE"),
     cst_ePROTONOSUPPORT=caml_string_of_jsbytes("ePROTONOSUPPORT"),
     cst_ePROTOTYPE=caml_string_of_jsbytes("ePROTOTYPE"),
     cst_eRANGE=caml_string_of_jsbytes("eRANGE"),
     cst_eROFS=caml_string_of_jsbytes("eROFS"),
     cst_eSHUTDOWN=caml_string_of_jsbytes("eSHUTDOWN"),
     cst_eSPIPE=caml_string_of_jsbytes("eSPIPE"),
     cst_eSRCH=caml_string_of_jsbytes("eSRCH"),
     cst_eTIMEDOUT=caml_string_of_jsbytes("eTIMEDOUT"),
     cst_eTOOMANYREFS=caml_string_of_jsbytes("eTOOMANYREFS"),
     cst_eUNKNOWNERR=caml_string_of_jsbytes("eUNKNOWNERR"),
     cst_eWOULDBLOCK=caml_string_of_jsbytes("eWOULDBLOCK"),
     cst_eXDEV=caml_string_of_jsbytes("eXDEV"),
     cst_e2BIG$0=caml_string_of_jsbytes("e2BIG"),
     cst_ENETUNREACH$0=caml_string_of_jsbytes("ENETUNREACH"),
     cst_EFAULT$0=caml_string_of_jsbytes("EFAULT"),
     cst_EBUSY$0=caml_string_of_jsbytes("EBUSY"),
     cst_E2BIG$0=caml_string_of_jsbytes("E2BIG"),
     cst_EACCES$0=caml_string_of_jsbytes("EACCES"),
     cst_EADDRINUSE$0=caml_string_of_jsbytes("EADDRINUSE"),
     cst_EADDRNOTAVAIL$0=caml_string_of_jsbytes("EADDRNOTAVAIL"),
     cst_EAFNOSUPPORT$0=caml_string_of_jsbytes("EAFNOSUPPORT"),
     cst_EAGAIN$0=caml_string_of_jsbytes("EAGAIN"),
     cst_EALREADY$0=caml_string_of_jsbytes("EALREADY"),
     cst_EBADF$0=caml_string_of_jsbytes("EBADF"),
     cst_ECHILD$0=caml_string_of_jsbytes("ECHILD"),
     cst_ECONNABORTED$0=caml_string_of_jsbytes("ECONNABORTED"),
     cst_ECONNREFUSED$0=caml_string_of_jsbytes("ECONNREFUSED"),
     cst_ECONNRESET$0=caml_string_of_jsbytes("ECONNRESET"),
     cst_EDEADLK$0=caml_string_of_jsbytes("EDEADLK"),
     cst_EDESTADDRREQ$0=caml_string_of_jsbytes("EDESTADDRREQ"),
     cst_EDOM$0=caml_string_of_jsbytes("EDOM"),
     cst_EEXIST$0=caml_string_of_jsbytes("EEXIST"),
     cst_EISDIR$0=caml_string_of_jsbytes("EISDIR"),
     cst_EFBIG$0=caml_string_of_jsbytes("EFBIG"),
     cst_EHOSTDOWN$0=caml_string_of_jsbytes("EHOSTDOWN"),
     cst_EHOSTUNREACH$0=caml_string_of_jsbytes("EHOSTUNREACH"),
     cst_EINPROGRESS$0=caml_string_of_jsbytes("EINPROGRESS"),
     cst_EINTR$0=caml_string_of_jsbytes("EINTR"),
     cst_EINVAL$0=caml_string_of_jsbytes("EINVAL"),
     cst_EIO$0=caml_string_of_jsbytes("EIO"),
     cst_EISCONN$0=caml_string_of_jsbytes("EISCONN"),
     cst_ELOOP$0=caml_string_of_jsbytes("ELOOP"),
     cst_EMFILE$0=caml_string_of_jsbytes("EMFILE"),
     cst_EMLINK$0=caml_string_of_jsbytes("EMLINK"),
     cst_EMSGSIZE$0=caml_string_of_jsbytes("EMSGSIZE"),
     cst_ENAMETOOLONG$0=caml_string_of_jsbytes("ENAMETOOLONG"),
     cst_ENETDOWN$0=caml_string_of_jsbytes("ENETDOWN"),
     cst_ENETRESET$0=caml_string_of_jsbytes("ENETRESET"),
     cst_EOVERFLOW$0=caml_string_of_jsbytes("EOVERFLOW"),
     cst_ENOSPC$0=caml_string_of_jsbytes("ENOSPC"),
     cst_ENFILE$0=caml_string_of_jsbytes("ENFILE"),
     cst_ENOBUFS$0=caml_string_of_jsbytes("ENOBUFS"),
     cst_ENODEV$0=caml_string_of_jsbytes("ENODEV"),
     cst_ENOENT$0=caml_string_of_jsbytes("ENOENT"),
     cst_ENOEXEC$0=caml_string_of_jsbytes("ENOEXEC"),
     cst_ENOLCK$0=caml_string_of_jsbytes("ENOLCK"),
     cst_ENOMEM$0=caml_string_of_jsbytes("ENOMEM"),
     cst_ENOPROTOOPT$0=caml_string_of_jsbytes("ENOPROTOOPT"),
     cst_ENOSYS$0=caml_string_of_jsbytes("ENOSYS"),
     cst_ENOTCONN$0=caml_string_of_jsbytes("ENOTCONN"),
     cst_ENOTDIR$0=caml_string_of_jsbytes("ENOTDIR"),
     cst_ENOTEMPTY$0=caml_string_of_jsbytes("ENOTEMPTY"),
     cst_ENOTSOCK$0=caml_string_of_jsbytes("ENOTSOCK"),
     cst_ENOTTY$0=caml_string_of_jsbytes("ENOTTY"),
     cst_ENXIO$0=caml_string_of_jsbytes("ENXIO"),
     cst_EOPNOTSUPP$0=caml_string_of_jsbytes("EOPNOTSUPP"),
     cst_ESOCKTNOSUPPORT$0=caml_string_of_jsbytes("ESOCKTNOSUPPORT"),
     cst_EPERM$0=caml_string_of_jsbytes("EPERM"),
     cst_EPFNOSUPPORT$0=caml_string_of_jsbytes("EPFNOSUPPORT"),
     cst_EPIPE$0=caml_string_of_jsbytes("EPIPE"),
     cst_EPROTONOSUPPORT$0=caml_string_of_jsbytes("EPROTONOSUPPORT"),
     cst_EPROTOTYPE$0=caml_string_of_jsbytes("EPROTOTYPE"),
     cst_ERANGE$0=caml_string_of_jsbytes("ERANGE"),
     cst_EROFS$0=caml_string_of_jsbytes("EROFS"),
     cst_ESHUTDOWN$0=caml_string_of_jsbytes("ESHUTDOWN"),
     cst_ESPIPE$0=caml_string_of_jsbytes("ESPIPE"),
     cst_ESRCH$0=caml_string_of_jsbytes("ESRCH"),
     cst_ETIMEDOUT$0=caml_string_of_jsbytes("ETIMEDOUT"),
     cst_ETOOMANYREFS$0=caml_string_of_jsbytes("ETOOMANYREFS"),
     cst_EUNKNOWNERR$0=caml_string_of_jsbytes("EUNKNOWNERR"),
     cst_EWOULDBLOCK$0=caml_string_of_jsbytes("EWOULDBLOCK"),
     cst_EXDEV$0=caml_string_of_jsbytes("EXDEV"),
     cst_eNFILE$0=caml_string_of_jsbytes("eNFILE"),
     cst_eFBIG$0=caml_string_of_jsbytes("eFBIG"),
     cst_eCHILD$0=caml_string_of_jsbytes("eCHILD"),
     cst_eACCES$0=caml_string_of_jsbytes("eACCES"),
     cst_eADDRINUSE$0=caml_string_of_jsbytes("eADDRINUSE"),
     cst_eADDRNOTAVAIL$0=caml_string_of_jsbytes("eADDRNOTAVAIL"),
     cst_eAFNOSUPPORT$0=caml_string_of_jsbytes("eAFNOSUPPORT"),
     cst_eAGAIN$0=caml_string_of_jsbytes("eAGAIN"),
     cst_eALREADY$0=caml_string_of_jsbytes("eALREADY"),
     cst_eBADF$0=caml_string_of_jsbytes("eBADF"),
     cst_eBUSY$0=caml_string_of_jsbytes("eBUSY"),
     cst_eCONNABORTED$0=caml_string_of_jsbytes("eCONNABORTED"),
     cst_eCONNREFUSED$0=caml_string_of_jsbytes("eCONNREFUSED"),
     cst_eCONNRESET$0=caml_string_of_jsbytes("eCONNRESET"),
     cst_eDEADLK$0=caml_string_of_jsbytes("eDEADLK"),
     cst_eDESTADDRREQ$0=caml_string_of_jsbytes("eDESTADDRREQ"),
     cst_eDOM$0=caml_string_of_jsbytes("eDOM"),
     cst_eEXIST$0=caml_string_of_jsbytes("eEXIST"),
     cst_eFAULT$0=caml_string_of_jsbytes("eFAULT"),
     cst_eLOOP$0=caml_string_of_jsbytes("eLOOP"),
     cst_eHOSTDOWN$0=caml_string_of_jsbytes("eHOSTDOWN"),
     cst_eHOSTUNREACH$0=caml_string_of_jsbytes("eHOSTUNREACH"),
     cst_eINPROGRESS$0=caml_string_of_jsbytes("eINPROGRESS"),
     cst_eINTR$0=caml_string_of_jsbytes("eINTR"),
     cst_eINVAL$0=caml_string_of_jsbytes("eINVAL"),
     cst_eIO$0=caml_string_of_jsbytes("eIO"),
     cst_eISCONN$0=caml_string_of_jsbytes("eISCONN"),
     cst_eISDIR$0=caml_string_of_jsbytes("eISDIR"),
     cst_eMFILE$0=caml_string_of_jsbytes("eMFILE"),
     cst_eMLINK$0=caml_string_of_jsbytes("eMLINK"),
     cst_eMSGSIZE$0=caml_string_of_jsbytes("eMSGSIZE"),
     cst_eNAMETOOLONG$0=caml_string_of_jsbytes("eNAMETOOLONG"),
     cst_eNETDOWN$0=caml_string_of_jsbytes("eNETDOWN"),
     cst_eNETRESET$0=caml_string_of_jsbytes("eNETRESET"),
     cst_eNETUNREACH$0=caml_string_of_jsbytes("eNETUNREACH"),
     cst_eOVERFLOW$0=caml_string_of_jsbytes("eOVERFLOW"),
     cst_eNOSYS$0=caml_string_of_jsbytes("eNOSYS"),
     cst_eNOBUFS$0=caml_string_of_jsbytes("eNOBUFS"),
     cst_eNODEV$0=caml_string_of_jsbytes("eNODEV"),
     cst_eNOENT$0=caml_string_of_jsbytes("eNOENT"),
     cst_eNOEXEC$0=caml_string_of_jsbytes("eNOEXEC"),
     cst_eNOLCK$0=caml_string_of_jsbytes("eNOLCK"),
     cst_eNOMEM$0=caml_string_of_jsbytes("eNOMEM"),
     cst_eNOPROTOOPT$0=caml_string_of_jsbytes("eNOPROTOOPT"),
     cst_eNOSPC$0=caml_string_of_jsbytes("eNOSPC"),
     cst_eNOTCONN$0=caml_string_of_jsbytes("eNOTCONN"),
     cst_eNOTDIR$0=caml_string_of_jsbytes("eNOTDIR"),
     cst_eNOTEMPTY$0=caml_string_of_jsbytes("eNOTEMPTY"),
     cst_eNOTSOCK$0=caml_string_of_jsbytes("eNOTSOCK"),
     cst_eNOTTY$0=caml_string_of_jsbytes("eNOTTY"),
     cst_eNXIO$0=caml_string_of_jsbytes("eNXIO"),
     cst_eOPNOTSUPP$0=caml_string_of_jsbytes("eOPNOTSUPP"),
     cst_eSOCKTNOSUPPORT$0=caml_string_of_jsbytes("eSOCKTNOSUPPORT"),
     cst_ePERM$0=caml_string_of_jsbytes("ePERM"),
     cst_ePFNOSUPPORT$0=caml_string_of_jsbytes("ePFNOSUPPORT"),
     cst_ePIPE$0=caml_string_of_jsbytes("ePIPE"),
     cst_ePROTONOSUPPORT$0=caml_string_of_jsbytes("ePROTONOSUPPORT"),
     cst_ePROTOTYPE$0=caml_string_of_jsbytes("ePROTOTYPE"),
     cst_eRANGE$0=caml_string_of_jsbytes("eRANGE"),
     cst_eROFS$0=caml_string_of_jsbytes("eROFS"),
     cst_eSHUTDOWN$0=caml_string_of_jsbytes("eSHUTDOWN"),
     cst_eSPIPE$0=caml_string_of_jsbytes("eSPIPE"),
     cst_eSRCH$0=caml_string_of_jsbytes("eSRCH"),
     cst_eTIMEDOUT$0=caml_string_of_jsbytes("eTIMEDOUT"),
     cst_eTOOMANYREFS$0=caml_string_of_jsbytes("eTOOMANYREFS"),
     cst_eUNKNOWNERR$0=caml_string_of_jsbytes("eUNKNOWNERR"),
     cst_eWOULDBLOCK$0=caml_string_of_jsbytes("eWOULDBLOCK"),
     cst_eXDEV$0=caml_string_of_jsbytes("eXDEV"),
     cst_Core_Unix_error=caml_string_of_jsbytes("Core__Unix_error"),
     cst_core$2=caml_string_of_jsbytes("core"),
     cst_src_unix_error_ml=caml_string_of_jsbytes("src/unix_error.ml"),
     cst$0=caml_string_of_jsbytes(""),
     cst_core$3=caml_string_of_jsbytes("core"),
     tp_loc=caml_string_of_jsbytes("src/unix_error.ml.error"),
     cst_core$4=caml_string_of_jsbytes("core"),
     cst_Core_Unix_error$0=caml_string_of_jsbytes("Core__Unix_error"),
     cst_HOME=caml_string_of_jsbytes("HOME"),
     cst_function=caml_string_of_jsbytes("function"),
     cst_else=caml_string_of_jsbytes("else"),
     cst_case=caml_string_of_jsbytes("case"),
     cst_coproc=caml_string_of_jsbytes("coproc"),
     cst_do=caml_string_of_jsbytes("do"),
     cst_done=caml_string_of_jsbytes("done"),
     cst_elif=caml_string_of_jsbytes("elif"),
     cst_esac=caml_string_of_jsbytes("esac"),
     cst_fi=caml_string_of_jsbytes("fi"),
     cst_for=caml_string_of_jsbytes("for"),
     cst_foreach=caml_string_of_jsbytes("foreach"),
     cst_if=caml_string_of_jsbytes("if"),
     cst_in=caml_string_of_jsbytes("in"),
     cst_nocorrect=caml_string_of_jsbytes("nocorrect"),
     cst_repeat=caml_string_of_jsbytes("repeat"),
     cst_select=caml_string_of_jsbytes("select"),
     cst_then=caml_string_of_jsbytes("then"),
     cst_time=caml_string_of_jsbytes("time"),
     cst_until=caml_string_of_jsbytes("until"),
     cst_while=caml_string_of_jsbytes("while"),
     cst_Core_Core_sys=caml_string_of_jsbytes("Core__Core_sys"),
     cst_core$5=caml_string_of_jsbytes("core"),
     cst_src_core_sys_ml=caml_string_of_jsbytes("src/core_sys.ml"),
     cst$1=caml_string_of_jsbytes(""),
     cst_core$6=caml_string_of_jsbytes("core"),
     cst_Sys_getenv_exn=caml_string_of_jsbytes("Sys.getenv_exn"),
     cst_Sys_unsafe_getenv_exn=caml_string_of_jsbytes("Sys.unsafe_getenv_exn"),
     cst_Core_Core_sys_Command_fail=
      caml_string_of_jsbytes("Core__Core_sys.Command_failed_with_status"),
     cst_Unix=caml_string_of_jsbytes("Unix"),
     cst_core$7=caml_string_of_jsbytes("core"),
     cst_Core_Core_sys$0=caml_string_of_jsbytes("Core__Core_sys"),
     cst$3=caml_string_of_jsbytes("/"),
     cst$4=caml_string_of_jsbytes("/"),
     cst_x=caml_string_of_jsbytes("x"),
     cst_Core_Core_filename=caml_string_of_jsbytes("Core__Core_filename"),
     cst_core$8=caml_string_of_jsbytes("core"),
     cst_src_core_filename_ml=caml_string_of_jsbytes("src/core_filename.ml"),
     cst$2=caml_string_of_jsbytes(""),
     cst_core$9=caml_string_of_jsbytes("core"),
     cst_core$10=caml_string_of_jsbytes("core"),
     cst_Core_Core_filename$0=caml_string_of_jsbytes("Core__Core_filename"),
     cst_Signal_default_sys_behavio=
      caml_string_of_jsbytes("Signal.default_sys_behavior: unknown signal "),
     cst_unknown_signal$0=caml_string_of_jsbytes("<unknown signal "),
     cst$6=caml_string_of_jsbytes(">"),
     cst_unknown_signal=caml_string_of_jsbytes("<unknown signal "),
     cst_Continue=caml_string_of_jsbytes("Continue"),
     cst_Dump_core=caml_string_of_jsbytes("Dump_core"),
     cst_Ignore=caml_string_of_jsbytes("Ignore"),
     cst_Stop=caml_string_of_jsbytes("Stop"),
     cst_Terminate=caml_string_of_jsbytes("Terminate"),
     cst_Continue$0=caml_string_of_jsbytes("Continue"),
     cst_Dump_core$0=caml_string_of_jsbytes("Dump_core"),
     cst_Ignore$0=caml_string_of_jsbytes("Ignore"),
     cst_Stop$0=caml_string_of_jsbytes("Stop"),
     cst_Terminate$0=caml_string_of_jsbytes("Terminate"),
     cst_Core_Signal=caml_string_of_jsbytes("Core__Signal"),
     cst_core$11=caml_string_of_jsbytes("core"),
     cst_src_signal_ml=caml_string_of_jsbytes("src/signal.ml"),
     cst$5=caml_string_of_jsbytes(""),
     cst_core$12=caml_string_of_jsbytes("core"),
     tp_loc$0=caml_string_of_jsbytes("src/signal.ml.sys_behavior"),
     tp_loc$1=caml_string_of_jsbytes("src/signal.ml.sys_behavior"),
     cst_Core_Signal_Invalid_signal=
      caml_string_of_jsbytes("Core__Signal.Invalid_signal_mnemonic_or_number"),
     cst_sigzero=caml_string_of_jsbytes("sigzero"),
     cst_sigxfsz=caml_string_of_jsbytes("sigxfsz"),
     cst_sigxcpu=caml_string_of_jsbytes("sigxcpu"),
     cst_sigvtalrm=caml_string_of_jsbytes("sigvtalrm"),
     cst_sigusr2=caml_string_of_jsbytes("sigusr2"),
     cst_sigusr1=caml_string_of_jsbytes("sigusr1"),
     cst_sigurg=caml_string_of_jsbytes("sigurg"),
     cst_sigttou=caml_string_of_jsbytes("sigttou"),
     cst_sigttin=caml_string_of_jsbytes("sigttin"),
     cst_sigtstp=caml_string_of_jsbytes("sigtstp"),
     cst_sigtrap=caml_string_of_jsbytes("sigtrap"),
     cst_sigterm=caml_string_of_jsbytes("sigterm"),
     cst_sigsys=caml_string_of_jsbytes("sigsys"),
     cst_sigstop=caml_string_of_jsbytes("sigstop"),
     cst_sigsegv=caml_string_of_jsbytes("sigsegv"),
     cst_sigquit=caml_string_of_jsbytes("sigquit"),
     cst_sigprof=caml_string_of_jsbytes("sigprof"),
     cst_sigpoll=caml_string_of_jsbytes("sigpoll"),
     cst_sigpipe=caml_string_of_jsbytes("sigpipe"),
     cst_sigkill=caml_string_of_jsbytes("sigkill"),
     cst_sigint=caml_string_of_jsbytes("sigint"),
     cst_sigill=caml_string_of_jsbytes("sigill"),
     cst_sighup=caml_string_of_jsbytes("sighup"),
     cst_sigfpe=caml_string_of_jsbytes("sigfpe"),
     cst_sigcont=caml_string_of_jsbytes("sigcont"),
     cst_sigchld=caml_string_of_jsbytes("sigchld"),
     cst_sigbus=caml_string_of_jsbytes("sigbus"),
     cst_sigalrm=caml_string_of_jsbytes("sigalrm"),
     cst_sigabrt=caml_string_of_jsbytes("sigabrt"),
     cst_Core_Signal_Expected_atom=
      caml_string_of_jsbytes("Core__Signal.Expected_atom"),
     cst_t=caml_string_of_jsbytes("t"),
     cst_src_signal_ml_238_4=caml_string_of_jsbytes("src/signal.ml:238:4"),
     cst_t$0=caml_string_of_jsbytes("t"),
     cst_t$1=caml_string_of_jsbytes("t"),
     cst_src_signal_ml_243_4=caml_string_of_jsbytes("src/signal.ml:243:4"),
     cst_t$2=caml_string_of_jsbytes("t"),
     cst_core$13=caml_string_of_jsbytes("core"),
     cst_Core_Signal$0=caml_string_of_jsbytes("Core__Signal"),
     cst_Core_Syscall_result_intf=
      caml_string_of_jsbytes("Core__Syscall_result_intf"),
     cst_core$14=caml_string_of_jsbytes("core"),
     cst_src_syscall_result_intf_ml=
      caml_string_of_jsbytes("src/syscall_result_intf.ml"),
     cst$7=caml_string_of_jsbytes(""),
     cst_core$15=caml_string_of_jsbytes("core"),
     cst_core$16=caml_string_of_jsbytes("core"),
     cst_Core_Syscall_result_intf$0=
      caml_string_of_jsbytes("Core__Syscall_result_intf"),
     cst$9=caml_string_of_jsbytes(""),
     cst_Syscall_result_cast_error_=
      caml_string_of_jsbytes
       ("Syscall_result.cast_error_exn received success value"),
     cst_Syscall_result_error_code_$0=
      caml_string_of_jsbytes
       ("Syscall_result.error_code_exn received success value"),
     cst_Syscall_result_ok_exn_rece=
      caml_string_of_jsbytes("Syscall_result.ok_exn received error value"),
     cst_src_syscall_result_ml$0=
      caml_string_of_jsbytes("src/syscall_result.ml"),
     cst_no_0_errno=caml_string_of_jsbytes(": no 0 errno"),
     cst_Syscall_result_error_code_=
      caml_string_of_jsbytes
       ("Syscall_result.error_code_exn received success value"),
     cst_Core_Syscall_result=caml_string_of_jsbytes("Core__Syscall_result"),
     cst_core$17=caml_string_of_jsbytes("core"),
     cst_src_syscall_result_ml=caml_string_of_jsbytes("src/syscall_result.ml"),
     cst$8=caml_string_of_jsbytes(""),
     cst_core$18=caml_string_of_jsbytes("core"),
     cst_core$19=caml_string_of_jsbytes("core"),
     cst_Core_Syscall_result$0=caml_string_of_jsbytes("Core__Syscall_result"),
     partial=[4,6,[0,2,2],0,[4,6,[0,2,2],0,0]],
     partial$0=
      [4,
       6,
       [0,2,2],
       0,
       [12,
        58,
        [4,
         6,
         [0,2,2],
         0,
         [4,
          6,
          [0,2,2],
          0,
          [12,
           58,
           [4,
            6,
            [0,2,2],
            0,
            [4,
             6,
             [0,2,2],
             0,
             [12,58,[4,6,[0,2,2],0,[4,6,[0,2,2],0,[12,58,partial]]]]]]]]]]],
     partial$1=[0,2,2],
     cst_allmulti=caml_string_of_jsbytes("allmulti"),
     cst_Noarp=caml_string_of_jsbytes("Noarp"),
     cst_Allmulti=caml_string_of_jsbytes("Allmulti"),
     cst_Automedia=caml_string_of_jsbytes("Automedia"),
     cst_Broadcast=caml_string_of_jsbytes("Broadcast"),
     cst_Debug=caml_string_of_jsbytes("Debug"),
     cst_Dynamic=caml_string_of_jsbytes("Dynamic"),
     cst_Loopback=caml_string_of_jsbytes("Loopback"),
     cst_Master=caml_string_of_jsbytes("Master"),
     cst_Multicast=caml_string_of_jsbytes("Multicast"),
     cst_Notrailers=caml_string_of_jsbytes("Notrailers"),
     cst_Pointopoint=caml_string_of_jsbytes("Pointopoint"),
     cst_Portsel=caml_string_of_jsbytes("Portsel"),
     cst_Promisc=caml_string_of_jsbytes("Promisc"),
     cst_Running=caml_string_of_jsbytes("Running"),
     cst_Slave=caml_string_of_jsbytes("Slave"),
     cst_Up=caml_string_of_jsbytes("Up"),
     cst_noarp=caml_string_of_jsbytes("noarp"),
     cst_automedia=caml_string_of_jsbytes("automedia"),
     cst_broadcast=caml_string_of_jsbytes("broadcast"),
     cst_debug=caml_string_of_jsbytes("debug"),
     cst_dynamic=caml_string_of_jsbytes("dynamic"),
     cst_loopback=caml_string_of_jsbytes("loopback"),
     cst_master=caml_string_of_jsbytes("master"),
     cst_multicast=caml_string_of_jsbytes("multicast"),
     cst_notrailers=caml_string_of_jsbytes("notrailers"),
     cst_pointopoint=caml_string_of_jsbytes("pointopoint"),
     cst_portsel=caml_string_of_jsbytes("portsel"),
     cst_promisc=caml_string_of_jsbytes("promisc"),
     cst_running=caml_string_of_jsbytes("running"),
     cst_slave=caml_string_of_jsbytes("slave"),
     cst_up=caml_string_of_jsbytes("up"),
     cst_allmulti$0=caml_string_of_jsbytes("allmulti"),
     cst_Noarp$0=caml_string_of_jsbytes("Noarp"),
     cst_Allmulti$0=caml_string_of_jsbytes("Allmulti"),
     cst_Automedia$0=caml_string_of_jsbytes("Automedia"),
     cst_Broadcast$0=caml_string_of_jsbytes("Broadcast"),
     cst_Debug$0=caml_string_of_jsbytes("Debug"),
     cst_Dynamic$0=caml_string_of_jsbytes("Dynamic"),
     cst_Loopback$0=caml_string_of_jsbytes("Loopback"),
     cst_Master$0=caml_string_of_jsbytes("Master"),
     cst_Multicast$0=caml_string_of_jsbytes("Multicast"),
     cst_Notrailers$0=caml_string_of_jsbytes("Notrailers"),
     cst_Pointopoint$0=caml_string_of_jsbytes("Pointopoint"),
     cst_Portsel$0=caml_string_of_jsbytes("Portsel"),
     cst_Promisc$0=caml_string_of_jsbytes("Promisc"),
     cst_Running$0=caml_string_of_jsbytes("Running"),
     cst_Slave$0=caml_string_of_jsbytes("Slave"),
     cst_Up$0=caml_string_of_jsbytes("Up"),
     cst_noarp$0=caml_string_of_jsbytes("noarp"),
     cst_automedia$0=caml_string_of_jsbytes("automedia"),
     cst_broadcast$0=caml_string_of_jsbytes("broadcast"),
     cst_debug$0=caml_string_of_jsbytes("debug"),
     cst_dynamic$0=caml_string_of_jsbytes("dynamic"),
     cst_loopback$0=caml_string_of_jsbytes("loopback"),
     cst_master$0=caml_string_of_jsbytes("master"),
     cst_multicast$0=caml_string_of_jsbytes("multicast"),
     cst_notrailers$0=caml_string_of_jsbytes("notrailers"),
     cst_pointopoint$0=caml_string_of_jsbytes("pointopoint"),
     cst_portsel$0=caml_string_of_jsbytes("portsel"),
     cst_promisc$0=caml_string_of_jsbytes("promisc"),
     cst_running$0=caml_string_of_jsbytes("running"),
     cst_slave$0=caml_string_of_jsbytes("slave"),
     cst_up$0=caml_string_of_jsbytes("up"),
     cst_mode$11=caml_string_of_jsbytes("mode"),
     cst_TCIOFF=caml_string_of_jsbytes("TCIOFF"),
     cst_TCION=caml_string_of_jsbytes("TCION"),
     cst_TCOOFF=caml_string_of_jsbytes("TCOOFF"),
     cst_TCOON=caml_string_of_jsbytes("TCOON"),
     cst_tCIOFF=caml_string_of_jsbytes("tCIOFF"),
     cst_tCION=caml_string_of_jsbytes("tCION"),
     cst_tCOOFF=caml_string_of_jsbytes("tCOOFF"),
     cst_tCOON=caml_string_of_jsbytes("tCOON"),
     cst_TCIOFF$0=caml_string_of_jsbytes("TCIOFF"),
     cst_TCION$0=caml_string_of_jsbytes("TCION"),
     cst_TCOOFF$0=caml_string_of_jsbytes("TCOOFF"),
     cst_TCOON$0=caml_string_of_jsbytes("TCOON"),
     cst_tCIOFF$0=caml_string_of_jsbytes("tCIOFF"),
     cst_tCION$0=caml_string_of_jsbytes("tCION"),
     cst_tCOOFF$0=caml_string_of_jsbytes("tCOOFF"),
     cst_tCOON$0=caml_string_of_jsbytes("tCOON"),
     cst_mode$10=caml_string_of_jsbytes("mode"),
     cst_TCIFLUSH=caml_string_of_jsbytes("TCIFLUSH"),
     cst_TCIOFLUSH=caml_string_of_jsbytes("TCIOFLUSH"),
     cst_TCOFLUSH=caml_string_of_jsbytes("TCOFLUSH"),
     cst_tCIFLUSH=caml_string_of_jsbytes("tCIFLUSH"),
     cst_tCIOFLUSH=caml_string_of_jsbytes("tCIOFLUSH"),
     cst_tCOFLUSH=caml_string_of_jsbytes("tCOFLUSH"),
     cst_TCIFLUSH$0=caml_string_of_jsbytes("TCIFLUSH"),
     cst_TCIOFLUSH$0=caml_string_of_jsbytes("TCIOFLUSH"),
     cst_TCOFLUSH$0=caml_string_of_jsbytes("TCOFLUSH"),
     cst_tCIFLUSH$0=caml_string_of_jsbytes("tCIFLUSH"),
     cst_tCIOFLUSH$0=caml_string_of_jsbytes("tCIOFLUSH"),
     cst_tCOFLUSH$0=caml_string_of_jsbytes("tCOFLUSH"),
     cst_duration=caml_string_of_jsbytes("duration"),
     cst_termios=caml_string_of_jsbytes("termios"),
     cst_mode$9=caml_string_of_jsbytes("mode"),
     cst_Unix_getnameinfo_not_found=
      caml_string_of_jsbytes("Unix.getnameinfo: not found"),
     cst_opts$0=caml_string_of_jsbytes("opts"),
     cst_addr$2=caml_string_of_jsbytes("addr"),
     cst_nI_DGRAM=caml_string_of_jsbytes("nI_DGRAM"),
     cst_NI_DGRAM=caml_string_of_jsbytes("NI_DGRAM"),
     cst_NI_NAMEREQD=caml_string_of_jsbytes("NI_NAMEREQD"),
     cst_NI_NOFQDN=caml_string_of_jsbytes("NI_NOFQDN"),
     cst_NI_NUMERICHOST=caml_string_of_jsbytes("NI_NUMERICHOST"),
     cst_NI_NUMERICSERV=caml_string_of_jsbytes("NI_NUMERICSERV"),
     cst_nI_NAMEREQD=caml_string_of_jsbytes("nI_NAMEREQD"),
     cst_nI_NOFQDN=caml_string_of_jsbytes("nI_NOFQDN"),
     cst_nI_NUMERICHOST=caml_string_of_jsbytes("nI_NUMERICHOST"),
     cst_nI_NUMERICSERV=caml_string_of_jsbytes("nI_NUMERICSERV"),
     cst_nI_DGRAM$0=caml_string_of_jsbytes("nI_DGRAM"),
     cst_NI_DGRAM$0=caml_string_of_jsbytes("NI_DGRAM"),
     cst_NI_NAMEREQD$0=caml_string_of_jsbytes("NI_NAMEREQD"),
     cst_NI_NOFQDN$0=caml_string_of_jsbytes("NI_NOFQDN"),
     cst_NI_NUMERICHOST$0=caml_string_of_jsbytes("NI_NUMERICHOST"),
     cst_NI_NUMERICSERV$0=caml_string_of_jsbytes("NI_NUMERICSERV"),
     cst_nI_NAMEREQD$0=caml_string_of_jsbytes("nI_NAMEREQD"),
     cst_nI_NOFQDN$0=caml_string_of_jsbytes("nI_NOFQDN"),
     cst_nI_NUMERICHOST$0=caml_string_of_jsbytes("nI_NUMERICHOST"),
     cst_nI_NUMERICSERV$0=caml_string_of_jsbytes("nI_NUMERICSERV"),
     cst_ni_hostname=caml_string_of_jsbytes("ni_hostname"),
     cst_ni_service=caml_string_of_jsbytes("ni_service"),
     cst_ni_service$0=caml_string_of_jsbytes("ni_service"),
     cst_ni_hostname$0=caml_string_of_jsbytes("ni_hostname"),
     cst_opts=caml_string_of_jsbytes("opts"),
     cst_service=caml_string_of_jsbytes("service"),
     cst_host=caml_string_of_jsbytes("host"),
     cst_aI_CANONNAME=caml_string_of_jsbytes("aI_CANONNAME"),
     cst_AI_CANONNAME=caml_string_of_jsbytes("AI_CANONNAME"),
     cst_AI_FAMILY=caml_string_of_jsbytes("AI_FAMILY"),
     cst_AI_NUMERICHOST=caml_string_of_jsbytes("AI_NUMERICHOST"),
     cst_AI_PASSIVE=caml_string_of_jsbytes("AI_PASSIVE"),
     cst_AI_PROTOCOL=caml_string_of_jsbytes("AI_PROTOCOL"),
     cst_AI_SOCKTYPE=caml_string_of_jsbytes("AI_SOCKTYPE"),
     cst_aI_FAMILY=caml_string_of_jsbytes("aI_FAMILY"),
     cst_aI_NUMERICHOST=caml_string_of_jsbytes("aI_NUMERICHOST"),
     cst_aI_PASSIVE=caml_string_of_jsbytes("aI_PASSIVE"),
     cst_aI_PROTOCOL=caml_string_of_jsbytes("aI_PROTOCOL"),
     cst_aI_SOCKTYPE=caml_string_of_jsbytes("aI_SOCKTYPE"),
     cst_aI_CANONNAME$0=caml_string_of_jsbytes("aI_CANONNAME"),
     cst_AI_CANONNAME$0=caml_string_of_jsbytes("AI_CANONNAME"),
     cst_AI_FAMILY$0=caml_string_of_jsbytes("AI_FAMILY"),
     cst_AI_NUMERICHOST$0=caml_string_of_jsbytes("AI_NUMERICHOST"),
     cst_AI_PASSIVE$0=caml_string_of_jsbytes("AI_PASSIVE"),
     cst_AI_PROTOCOL$0=caml_string_of_jsbytes("AI_PROTOCOL"),
     cst_AI_SOCKTYPE$0=caml_string_of_jsbytes("AI_SOCKTYPE"),
     cst_aI_FAMILY$0=caml_string_of_jsbytes("aI_FAMILY"),
     cst_aI_NUMERICHOST$0=caml_string_of_jsbytes("aI_NUMERICHOST"),
     cst_aI_PASSIVE$0=caml_string_of_jsbytes("aI_PASSIVE"),
     cst_aI_PROTOCOL$0=caml_string_of_jsbytes("aI_PROTOCOL"),
     cst_aI_SOCKTYPE$0=caml_string_of_jsbytes("aI_SOCKTYPE"),
     cst_ai_addr=caml_string_of_jsbytes("ai_addr"),
     cst_ai_canonname=caml_string_of_jsbytes("ai_canonname"),
     cst_ai_family=caml_string_of_jsbytes("ai_family"),
     cst_ai_protocol=caml_string_of_jsbytes("ai_protocol"),
     cst_ai_socktype=caml_string_of_jsbytes("ai_socktype"),
     cst_ai_canonname$0=caml_string_of_jsbytes("ai_canonname"),
     cst_ai_addr$0=caml_string_of_jsbytes("ai_addr"),
     cst_ai_protocol$0=caml_string_of_jsbytes("ai_protocol"),
     cst_ai_socktype$0=caml_string_of_jsbytes("ai_socktype"),
     cst_ai_family$0=caml_string_of_jsbytes("ai_family"),
     cst$22=caml_string_of_jsbytes(""),
     cst_val=caml_string_of_jsbytes("val"),
     cst_opt$0=caml_string_of_jsbytes("opt"),
     cst_opt=caml_string_of_jsbytes("opt"),
     cst_SO_RCVTIMEO=caml_string_of_jsbytes("SO_RCVTIMEO"),
     cst_SO_SNDTIMEO=caml_string_of_jsbytes("SO_SNDTIMEO"),
     cst_sO_RCVTIMEO=caml_string_of_jsbytes("sO_RCVTIMEO"),
     cst_sO_SNDTIMEO=caml_string_of_jsbytes("sO_SNDTIMEO"),
     cst_SO_RCVTIMEO$0=caml_string_of_jsbytes("SO_RCVTIMEO"),
     cst_SO_SNDTIMEO$0=caml_string_of_jsbytes("SO_SNDTIMEO"),
     cst_sO_RCVTIMEO$0=caml_string_of_jsbytes("sO_RCVTIMEO"),
     cst_sO_SNDTIMEO$0=caml_string_of_jsbytes("sO_SNDTIMEO"),
     cst_sO_ERROR=caml_string_of_jsbytes("sO_ERROR"),
     cst_SO_ERROR=caml_string_of_jsbytes("SO_ERROR"),
     cst_SO_RCVBUF=caml_string_of_jsbytes("SO_RCVBUF"),
     cst_SO_RCVLOWAT=caml_string_of_jsbytes("SO_RCVLOWAT"),
     cst_SO_SNDBUF=caml_string_of_jsbytes("SO_SNDBUF"),
     cst_SO_SNDLOWAT=caml_string_of_jsbytes("SO_SNDLOWAT"),
     cst_SO_TYPE=caml_string_of_jsbytes("SO_TYPE"),
     cst_sO_RCVBUF=caml_string_of_jsbytes("sO_RCVBUF"),
     cst_sO_RCVLOWAT=caml_string_of_jsbytes("sO_RCVLOWAT"),
     cst_sO_SNDBUF=caml_string_of_jsbytes("sO_SNDBUF"),
     cst_sO_SNDLOWAT=caml_string_of_jsbytes("sO_SNDLOWAT"),
     cst_sO_TYPE=caml_string_of_jsbytes("sO_TYPE"),
     cst_sO_ERROR$0=caml_string_of_jsbytes("sO_ERROR"),
     cst_SO_ERROR$0=caml_string_of_jsbytes("SO_ERROR"),
     cst_SO_RCVBUF$0=caml_string_of_jsbytes("SO_RCVBUF"),
     cst_SO_RCVLOWAT$0=caml_string_of_jsbytes("SO_RCVLOWAT"),
     cst_SO_SNDBUF$0=caml_string_of_jsbytes("SO_SNDBUF"),
     cst_SO_SNDLOWAT$0=caml_string_of_jsbytes("SO_SNDLOWAT"),
     cst_SO_TYPE$0=caml_string_of_jsbytes("SO_TYPE"),
     cst_sO_RCVBUF$0=caml_string_of_jsbytes("sO_RCVBUF"),
     cst_sO_RCVLOWAT$0=caml_string_of_jsbytes("sO_RCVLOWAT"),
     cst_sO_SNDBUF$0=caml_string_of_jsbytes("sO_SNDBUF"),
     cst_sO_SNDLOWAT$0=caml_string_of_jsbytes("sO_SNDLOWAT"),
     cst_sO_TYPE$0=caml_string_of_jsbytes("sO_TYPE"),
     cst_iPV6_ONLY=caml_string_of_jsbytes("iPV6_ONLY"),
     cst_IPV6_ONLY=caml_string_of_jsbytes("IPV6_ONLY"),
     cst_SO_ACCEPTCONN=caml_string_of_jsbytes("SO_ACCEPTCONN"),
     cst_SO_BROADCAST=caml_string_of_jsbytes("SO_BROADCAST"),
     cst_SO_DEBUG=caml_string_of_jsbytes("SO_DEBUG"),
     cst_SO_DONTROUTE=caml_string_of_jsbytes("SO_DONTROUTE"),
     cst_SO_KEEPALIVE=caml_string_of_jsbytes("SO_KEEPALIVE"),
     cst_SO_OOBINLINE=caml_string_of_jsbytes("SO_OOBINLINE"),
     cst_SO_REUSEADDR=caml_string_of_jsbytes("SO_REUSEADDR"),
     cst_TCP_NODELAY=caml_string_of_jsbytes("TCP_NODELAY"),
     cst_sO_ACCEPTCONN=caml_string_of_jsbytes("sO_ACCEPTCONN"),
     cst_sO_BROADCAST=caml_string_of_jsbytes("sO_BROADCAST"),
     cst_sO_DEBUG=caml_string_of_jsbytes("sO_DEBUG"),
     cst_sO_DONTROUTE=caml_string_of_jsbytes("sO_DONTROUTE"),
     cst_sO_KEEPALIVE=caml_string_of_jsbytes("sO_KEEPALIVE"),
     cst_sO_OOBINLINE=caml_string_of_jsbytes("sO_OOBINLINE"),
     cst_sO_REUSEADDR=caml_string_of_jsbytes("sO_REUSEADDR"),
     cst_tCP_NODELAY=caml_string_of_jsbytes("tCP_NODELAY"),
     cst_iPV6_ONLY$0=caml_string_of_jsbytes("iPV6_ONLY"),
     cst_IPV6_ONLY$0=caml_string_of_jsbytes("IPV6_ONLY"),
     cst_SO_ACCEPTCONN$0=caml_string_of_jsbytes("SO_ACCEPTCONN"),
     cst_SO_BROADCAST$0=caml_string_of_jsbytes("SO_BROADCAST"),
     cst_SO_DEBUG$0=caml_string_of_jsbytes("SO_DEBUG"),
     cst_SO_DONTROUTE$0=caml_string_of_jsbytes("SO_DONTROUTE"),
     cst_SO_KEEPALIVE$0=caml_string_of_jsbytes("SO_KEEPALIVE"),
     cst_SO_OOBINLINE$0=caml_string_of_jsbytes("SO_OOBINLINE"),
     cst_SO_REUSEADDR$0=caml_string_of_jsbytes("SO_REUSEADDR"),
     cst_TCP_NODELAY$0=caml_string_of_jsbytes("TCP_NODELAY"),
     cst_sO_ACCEPTCONN$0=caml_string_of_jsbytes("sO_ACCEPTCONN"),
     cst_sO_BROADCAST$0=caml_string_of_jsbytes("sO_BROADCAST"),
     cst_sO_DEBUG$0=caml_string_of_jsbytes("sO_DEBUG"),
     cst_sO_DONTROUTE$0=caml_string_of_jsbytes("sO_DONTROUTE"),
     cst_sO_KEEPALIVE$0=caml_string_of_jsbytes("sO_KEEPALIVE"),
     cst_sO_OOBINLINE$0=caml_string_of_jsbytes("sO_OOBINLINE"),
     cst_sO_REUSEADDR$0=caml_string_of_jsbytes("sO_REUSEADDR"),
     cst_tCP_NODELAY$0=caml_string_of_jsbytes("tCP_NODELAY"),
     cst_addr$1=caml_string_of_jsbytes("addr"),
     cst_mode$8=caml_string_of_jsbytes("mode"),
     cst_pos$7=caml_string_of_jsbytes("pos"),
     cst_addr$0=caml_string_of_jsbytes("addr"),
     cst_mode$7=caml_string_of_jsbytes("mode"),
     cst_pos$6=caml_string_of_jsbytes("pos"),
     cst_mode$6=caml_string_of_jsbytes("mode"),
     cst_pos$5=caml_string_of_jsbytes("pos"),
     cst_MSG_DONTROUTE=caml_string_of_jsbytes("MSG_DONTROUTE"),
     cst_MSG_OOB=caml_string_of_jsbytes("MSG_OOB"),
     cst_MSG_PEEK=caml_string_of_jsbytes("MSG_PEEK"),
     cst_mSG_DONTROUTE=caml_string_of_jsbytes("mSG_DONTROUTE"),
     cst_mSG_OOB=caml_string_of_jsbytes("mSG_OOB"),
     cst_mSG_PEEK=caml_string_of_jsbytes("mSG_PEEK"),
     cst_MSG_DONTROUTE$0=caml_string_of_jsbytes("MSG_DONTROUTE"),
     cst_MSG_OOB$0=caml_string_of_jsbytes("MSG_OOB"),
     cst_MSG_PEEK$0=caml_string_of_jsbytes("MSG_PEEK"),
     cst_mSG_DONTROUTE$0=caml_string_of_jsbytes("mSG_DONTROUTE"),
     cst_mSG_OOB$0=caml_string_of_jsbytes("mSG_OOB"),
     cst_mSG_PEEK$0=caml_string_of_jsbytes("mSG_PEEK"),
     cst_mode$5=caml_string_of_jsbytes("mode"),
     cst_SHUTDOWN_ALL=caml_string_of_jsbytes("SHUTDOWN_ALL"),
     cst_SHUTDOWN_RECEIVE=caml_string_of_jsbytes("SHUTDOWN_RECEIVE"),
     cst_SHUTDOWN_SEND=caml_string_of_jsbytes("SHUTDOWN_SEND"),
     cst_sHUTDOWN_ALL=caml_string_of_jsbytes("sHUTDOWN_ALL"),
     cst_sHUTDOWN_RECEIVE=caml_string_of_jsbytes("sHUTDOWN_RECEIVE"),
     cst_sHUTDOWN_SEND=caml_string_of_jsbytes("sHUTDOWN_SEND"),
     cst_SHUTDOWN_ALL$0=caml_string_of_jsbytes("SHUTDOWN_ALL"),
     cst_SHUTDOWN_RECEIVE$0=caml_string_of_jsbytes("SHUTDOWN_RECEIVE"),
     cst_SHUTDOWN_SEND$0=caml_string_of_jsbytes("SHUTDOWN_SEND"),
     cst_sHUTDOWN_ALL$0=caml_string_of_jsbytes("sHUTDOWN_ALL"),
     cst_sHUTDOWN_RECEIVE$0=caml_string_of_jsbytes("sHUTDOWN_RECEIVE"),
     cst_sHUTDOWN_SEND$0=caml_string_of_jsbytes("sHUTDOWN_SEND"),
     cst_backlog=caml_string_of_jsbytes("backlog"),
     cst_protocol=caml_string_of_jsbytes("protocol"),
     cst_kind=caml_string_of_jsbytes("kind"),
     cst_domain=caml_string_of_jsbytes("domain"),
     cst_addr=caml_string_of_jsbytes("addr"),
     cst_src_core_unix_ml_sockaddr_=
      caml_string_of_jsbytes("src/core_unix.ml.sockaddr_blocking_sexp"),
     cst_ADDR_INET$0=caml_string_of_jsbytes("ADDR_INET"),
     cst_ADDR_UNIX$0=caml_string_of_jsbytes("ADDR_UNIX"),
     cst_aDDR_INET=caml_string_of_jsbytes("aDDR_INET"),
     cst_aDDR_UNIX=caml_string_of_jsbytes("aDDR_UNIX"),
     cst_ADDR_INET$1=caml_string_of_jsbytes("ADDR_INET"),
     cst_ADDR_UNIX$1=caml_string_of_jsbytes("ADDR_UNIX"),
     cst_aDDR_INET$0=caml_string_of_jsbytes("aDDR_INET"),
     cst_aDDR_UNIX$0=caml_string_of_jsbytes("aDDR_UNIX"),
     cst_src_core_unix_ml_sockaddr=
      caml_string_of_jsbytes("src/core_unix.ml.sockaddr"),
     cst_src_core_unix_ml_socket_ty=
      caml_string_of_jsbytes("src/core_unix.ml.socket_type"),
     cst_SOCK_DGRAM=caml_string_of_jsbytes("SOCK_DGRAM"),
     cst_SOCK_RAW=caml_string_of_jsbytes("SOCK_RAW"),
     cst_SOCK_SEQPACKET=caml_string_of_jsbytes("SOCK_SEQPACKET"),
     cst_SOCK_STREAM=caml_string_of_jsbytes("SOCK_STREAM"),
     cst_sOCK_DGRAM=caml_string_of_jsbytes("sOCK_DGRAM"),
     cst_sOCK_RAW=caml_string_of_jsbytes("sOCK_RAW"),
     cst_sOCK_SEQPACKET=caml_string_of_jsbytes("sOCK_SEQPACKET"),
     cst_sOCK_STREAM=caml_string_of_jsbytes("sOCK_STREAM"),
     cst_SOCK_DGRAM$0=caml_string_of_jsbytes("SOCK_DGRAM"),
     cst_SOCK_RAW$0=caml_string_of_jsbytes("SOCK_RAW"),
     cst_SOCK_SEQPACKET$0=caml_string_of_jsbytes("SOCK_SEQPACKET"),
     cst_SOCK_STREAM$0=caml_string_of_jsbytes("SOCK_STREAM"),
     cst_sOCK_DGRAM$0=caml_string_of_jsbytes("sOCK_DGRAM"),
     cst_sOCK_RAW$0=caml_string_of_jsbytes("sOCK_RAW"),
     cst_sOCK_SEQPACKET$0=caml_string_of_jsbytes("sOCK_SEQPACKET"),
     cst_sOCK_STREAM$0=caml_string_of_jsbytes("sOCK_STREAM"),
     cst_src_core_unix_ml_socket_do=
      caml_string_of_jsbytes("src/core_unix.ml.socket_domain"),
     cst_PF_INET=caml_string_of_jsbytes("PF_INET"),
     cst_PF_INET6=caml_string_of_jsbytes("PF_INET6"),
     cst_PF_UNIX=caml_string_of_jsbytes("PF_UNIX"),
     cst_pF_INET=caml_string_of_jsbytes("pF_INET"),
     cst_pF_INET6=caml_string_of_jsbytes("pF_INET6"),
     cst_pF_UNIX=caml_string_of_jsbytes("pF_UNIX"),
     cst_PF_INET$0=caml_string_of_jsbytes("PF_INET"),
     cst_PF_INET6$0=caml_string_of_jsbytes("PF_INET6"),
     cst_PF_UNIX$0=caml_string_of_jsbytes("PF_UNIX"),
     cst_pF_INET$0=caml_string_of_jsbytes("pF_INET"),
     cst_pF_INET6$0=caml_string_of_jsbytes("pF_INET6"),
     cst_pF_UNIX$0=caml_string_of_jsbytes("pF_UNIX"),
     cst_aliases$1=caml_string_of_jsbytes("aliases"),
     cst_name$5=caml_string_of_jsbytes("name"),
     cst_port=caml_string_of_jsbytes("port"),
     cst_proto$1=caml_string_of_jsbytes("proto"),
     cst_proto$2=caml_string_of_jsbytes("proto"),
     cst_port$0=caml_string_of_jsbytes("port"),
     cst_aliases$2=caml_string_of_jsbytes("aliases"),
     cst_name$6=caml_string_of_jsbytes("name"),
     cst_aliases=caml_string_of_jsbytes("aliases"),
     cst_name$3=caml_string_of_jsbytes("name"),
     cst_proto=caml_string_of_jsbytes("proto"),
     cst_proto$0=caml_string_of_jsbytes("proto"),
     cst_aliases$0=caml_string_of_jsbytes("aliases"),
     cst_name$4=caml_string_of_jsbytes("name"),
     cst_src_core_unix_ml_Cidr_Stab=
      caml_string_of_jsbytes("src/core_unix.ml.Cidr.Stable.V1.T0.t"),
     cst_empty_addrs=caml_string_of_jsbytes("empty addrs"),
     cst_host_not_found=caml_string_of_jsbytes("host not found"),
     cst_Inet$0=caml_string_of_jsbytes("Inet"),
     cst_Inet6$0=caml_string_of_jsbytes("Inet6"),
     cst_Unix$1=caml_string_of_jsbytes("Unix"),
     cst_Inet$1=caml_string_of_jsbytes("Inet"),
     cst_Inet6$1=caml_string_of_jsbytes("Inet6"),
     cst_Unix$2=caml_string_of_jsbytes("Unix"),
     err=[2,caml_string_of_jsbytes("src/core_unix.ml.Protocol_family.t")],
     cst_dir$0=caml_string_of_jsbytes("dir"),
     cst_gecos$0=caml_string_of_jsbytes("gecos"),
     cst_gid$2=caml_string_of_jsbytes("gid"),
     cst_name$1=caml_string_of_jsbytes("name"),
     cst_passwd$0=caml_string_of_jsbytes("passwd"),
     cst_shell$0=caml_string_of_jsbytes("shell"),
     cst_uid$2=caml_string_of_jsbytes("uid"),
     cst_shell$1=caml_string_of_jsbytes("shell"),
     cst_dir$1=caml_string_of_jsbytes("dir"),
     cst_gecos$1=caml_string_of_jsbytes("gecos"),
     cst_gid$3=caml_string_of_jsbytes("gid"),
     cst_uid$3=caml_string_of_jsbytes("uid"),
     cst_passwd$1=caml_string_of_jsbytes("passwd"),
     cst_name$2=caml_string_of_jsbytes("name"),
     cst$16=caml_string_of_jsbytes("\0"),
     cst_gid$0=caml_string_of_jsbytes("gid"),
     cst_uid$0=caml_string_of_jsbytes("uid"),
     cst_it_interval=caml_string_of_jsbytes("it_interval"),
     cst_it_value=caml_string_of_jsbytes("it_value"),
     cst_it_value$0=caml_string_of_jsbytes("it_value"),
     cst_it_interval$0=caml_string_of_jsbytes("it_interval"),
     cst_ITIMER_PROF=caml_string_of_jsbytes("ITIMER_PROF"),
     cst_ITIMER_REAL=caml_string_of_jsbytes("ITIMER_REAL"),
     cst_ITIMER_VIRTUAL=caml_string_of_jsbytes("ITIMER_VIRTUAL"),
     cst_iTIMER_PROF=caml_string_of_jsbytes("iTIMER_PROF"),
     cst_iTIMER_REAL=caml_string_of_jsbytes("iTIMER_REAL"),
     cst_iTIMER_VIRTUAL=caml_string_of_jsbytes("iTIMER_VIRTUAL"),
     cst_ITIMER_PROF$0=caml_string_of_jsbytes("ITIMER_PROF"),
     cst_ITIMER_REAL$0=caml_string_of_jsbytes("ITIMER_REAL"),
     cst_ITIMER_VIRTUAL$0=caml_string_of_jsbytes("ITIMER_VIRTUAL"),
     cst_iTIMER_PROF$0=caml_string_of_jsbytes("iTIMER_PROF"),
     cst_iTIMER_REAL$0=caml_string_of_jsbytes("iTIMER_REAL"),
     cst_iTIMER_VIRTUAL$0=caml_string_of_jsbytes("iTIMER_VIRTUAL"),
     cst_tm_hour=caml_string_of_jsbytes("tm_hour"),
     cst_tm_isdst=caml_string_of_jsbytes("tm_isdst"),
     cst_tm_mday=caml_string_of_jsbytes("tm_mday"),
     cst_tm_min=caml_string_of_jsbytes("tm_min"),
     cst_tm_mon=caml_string_of_jsbytes("tm_mon"),
     cst_tm_sec=caml_string_of_jsbytes("tm_sec"),
     cst_tm_wday=caml_string_of_jsbytes("tm_wday"),
     cst_tm_yday=caml_string_of_jsbytes("tm_yday"),
     cst_tm_year=caml_string_of_jsbytes("tm_year"),
     cst_tm_isdst$0=caml_string_of_jsbytes("tm_isdst"),
     cst_tm_yday$0=caml_string_of_jsbytes("tm_yday"),
     cst_tm_wday$0=caml_string_of_jsbytes("tm_wday"),
     cst_tm_year$0=caml_string_of_jsbytes("tm_year"),
     cst_tm_mon$0=caml_string_of_jsbytes("tm_mon"),
     cst_tm_mday$0=caml_string_of_jsbytes("tm_mday"),
     cst_tm_hour$0=caml_string_of_jsbytes("tm_hour"),
     cst_tm_min$0=caml_string_of_jsbytes("tm_min"),
     cst_tm_sec$0=caml_string_of_jsbytes("tm_sec"),
     cst_tms_cstime=caml_string_of_jsbytes("tms_cstime"),
     cst_tms_cutime=caml_string_of_jsbytes("tms_cutime"),
     cst_tms_stime=caml_string_of_jsbytes("tms_stime"),
     cst_tms_utime=caml_string_of_jsbytes("tms_utime"),
     cst_tms_cstime$0=caml_string_of_jsbytes("tms_cstime"),
     cst_tms_cutime$0=caml_string_of_jsbytes("tms_cutime"),
     cst_tms_stime$0=caml_string_of_jsbytes("tms_stime"),
     cst_tms_utime$0=caml_string_of_jsbytes("tms_utime"),
     cst_timeout=caml_string_of_jsbytes("timeout"),
     cst_except=caml_string_of_jsbytes("except"),
     cst_write=caml_string_of_jsbytes("write"),
     cst_read=caml_string_of_jsbytes("read"),
     cst_link_name$0=caml_string_of_jsbytes("link_name"),
     cst_target$0=caml_string_of_jsbytes("target"),
     cst_env$1=caml_string_of_jsbytes("env"),
     cst_command$1=caml_string_of_jsbytes("command"),
     cst_command$0=caml_string_of_jsbytes("command"),
     cst_args$0=caml_string_of_jsbytes("args"),
     cst_prog$1=caml_string_of_jsbytes("prog"),
     cst_env$0=caml_string_of_jsbytes("env"),
     cst_args=caml_string_of_jsbytes("args"),
     cst_prog$0=caml_string_of_jsbytes("prog"),
     cst_working_dir=caml_string_of_jsbytes("working_dir"),
     cst_Core_Unix_create_process=
      caml_string_of_jsbytes("Core.Unix.create_process"),
     cst_bin_sh=caml_string_of_jsbytes("/bin/sh"),
     cst_bin_sh$0=caml_string_of_jsbytes("/bin/sh"),
     cst$15=caml_string_of_jsbytes("/"),
     cst$13=caml_string_of_jsbytes(""),
     cst$14=caml_string_of_jsbytes("."),
     cst_Core_Unix_create_process_e=
      caml_string_of_jsbytes
       ("Core.Unix.create_process: empty prog_search_path"),
     cst_PATH=caml_string_of_jsbytes("PATH"),
     cst_name=caml_string_of_jsbytes("name"),
     cst_dst$0=caml_string_of_jsbytes("dst"),
     cst_src$0=caml_string_of_jsbytes("src"),
     cst_perm$0=caml_string_of_jsbytes("perm"),
     cst_mode$4=caml_string_of_jsbytes("mode"),
     cst_link_name=caml_string_of_jsbytes("link_name"),
     cst_target=caml_string_of_jsbytes("target"),
     cst_dst=caml_string_of_jsbytes("dst"),
     cst_src=caml_string_of_jsbytes("src"),
     cst_st_mtime$1=caml_string_of_jsbytes("st_mtime"),
     cst_st_atime$1=caml_string_of_jsbytes("st_atime"),
     cst_st_ctime$1=caml_string_of_jsbytes("st_ctime"),
     cst_st_dev$1=caml_string_of_jsbytes("st_dev"),
     cst_st_gid$1=caml_string_of_jsbytes("st_gid"),
     cst_st_ino$1=caml_string_of_jsbytes("st_ino"),
     cst_st_kind$1=caml_string_of_jsbytes("st_kind"),
     cst_st_nlink$1=caml_string_of_jsbytes("st_nlink"),
     cst_st_perm$1=caml_string_of_jsbytes("st_perm"),
     cst_st_rdev$1=caml_string_of_jsbytes("st_rdev"),
     cst_st_size$1=caml_string_of_jsbytes("st_size"),
     cst_st_uid$1=caml_string_of_jsbytes("st_uid"),
     cst_st_ctime$2=caml_string_of_jsbytes("st_ctime"),
     cst_st_mtime$2=caml_string_of_jsbytes("st_mtime"),
     cst_st_atime$2=caml_string_of_jsbytes("st_atime"),
     cst_st_size$2=caml_string_of_jsbytes("st_size"),
     cst_st_rdev$2=caml_string_of_jsbytes("st_rdev"),
     cst_st_gid$2=caml_string_of_jsbytes("st_gid"),
     cst_st_uid$2=caml_string_of_jsbytes("st_uid"),
     cst_st_nlink$2=caml_string_of_jsbytes("st_nlink"),
     cst_st_perm$2=caml_string_of_jsbytes("st_perm"),
     cst_st_kind$2=caml_string_of_jsbytes("st_kind"),
     cst_st_ino$2=caml_string_of_jsbytes("st_ino"),
     cst_st_dev$2=caml_string_of_jsbytes("st_dev"),
     cst_len$2=caml_string_of_jsbytes("len"),
     cst_mode$3=caml_string_of_jsbytes("mode"),
     cst_pos$4=caml_string_of_jsbytes("pos"),
     cst_mode$2=caml_string_of_jsbytes("mode"),
     cst_len_passed_to_Unix_lockf_t=
      caml_string_of_jsbytes
       ("~len passed to Unix.lockf too large to fit in native int"),
     cst_f_LOCK=caml_string_of_jsbytes("f_LOCK"),
     cst_F_LOCK=caml_string_of_jsbytes("F_LOCK"),
     cst_F_RLOCK=caml_string_of_jsbytes("F_RLOCK"),
     cst_F_TEST=caml_string_of_jsbytes("F_TEST"),
     cst_F_TLOCK=caml_string_of_jsbytes("F_TLOCK"),
     cst_F_TRLOCK=caml_string_of_jsbytes("F_TRLOCK"),
     cst_F_ULOCK=caml_string_of_jsbytes("F_ULOCK"),
     cst_f_RLOCK=caml_string_of_jsbytes("f_RLOCK"),
     cst_f_TEST=caml_string_of_jsbytes("f_TEST"),
     cst_f_TLOCK=caml_string_of_jsbytes("f_TLOCK"),
     cst_f_TRLOCK=caml_string_of_jsbytes("f_TRLOCK"),
     cst_f_ULOCK=caml_string_of_jsbytes("f_ULOCK"),
     cst_f_LOCK$0=caml_string_of_jsbytes("f_LOCK"),
     cst_F_LOCK$0=caml_string_of_jsbytes("F_LOCK"),
     cst_F_RLOCK$0=caml_string_of_jsbytes("F_RLOCK"),
     cst_F_TEST$0=caml_string_of_jsbytes("F_TEST"),
     cst_F_TLOCK$0=caml_string_of_jsbytes("F_TLOCK"),
     cst_F_TRLOCK$0=caml_string_of_jsbytes("F_TRLOCK"),
     cst_F_ULOCK$0=caml_string_of_jsbytes("F_ULOCK"),
     cst_f_RLOCK$0=caml_string_of_jsbytes("f_RLOCK"),
     cst_f_TEST$0=caml_string_of_jsbytes("f_TEST"),
     cst_f_TLOCK$0=caml_string_of_jsbytes("f_TLOCK"),
     cst_f_TRLOCK$0=caml_string_of_jsbytes("f_TRLOCK"),
     cst_f_ULOCK$0=caml_string_of_jsbytes("f_ULOCK"),
     cst_mode$1=caml_string_of_jsbytes("mode"),
     cst_pos$3=caml_string_of_jsbytes("pos"),
     cst_st_mtime=caml_string_of_jsbytes("st_mtime"),
     cst_st_atime=caml_string_of_jsbytes("st_atime"),
     cst_st_ctime=caml_string_of_jsbytes("st_ctime"),
     cst_st_dev=caml_string_of_jsbytes("st_dev"),
     cst_st_gid=caml_string_of_jsbytes("st_gid"),
     cst_st_ino=caml_string_of_jsbytes("st_ino"),
     cst_st_kind=caml_string_of_jsbytes("st_kind"),
     cst_st_nlink=caml_string_of_jsbytes("st_nlink"),
     cst_st_perm=caml_string_of_jsbytes("st_perm"),
     cst_st_rdev=caml_string_of_jsbytes("st_rdev"),
     cst_st_size=caml_string_of_jsbytes("st_size"),
     cst_st_uid=caml_string_of_jsbytes("st_uid"),
     cst_st_ctime$0=caml_string_of_jsbytes("st_ctime"),
     cst_st_mtime$0=caml_string_of_jsbytes("st_mtime"),
     cst_st_atime$0=caml_string_of_jsbytes("st_atime"),
     cst_st_size$0=caml_string_of_jsbytes("st_size"),
     cst_st_rdev$0=caml_string_of_jsbytes("st_rdev"),
     cst_st_gid$0=caml_string_of_jsbytes("st_gid"),
     cst_st_uid$0=caml_string_of_jsbytes("st_uid"),
     cst_st_nlink$0=caml_string_of_jsbytes("st_nlink"),
     cst_st_perm$0=caml_string_of_jsbytes("st_perm"),
     cst_st_kind$0=caml_string_of_jsbytes("st_kind"),
     cst_st_ino$0=caml_string_of_jsbytes("st_ino"),
     cst_st_dev$0=caml_string_of_jsbytes("st_dev"),
     cst_s_BLK=caml_string_of_jsbytes("s_BLK"),
     cst_S_BLK=caml_string_of_jsbytes("S_BLK"),
     cst_S_CHR=caml_string_of_jsbytes("S_CHR"),
     cst_S_DIR=caml_string_of_jsbytes("S_DIR"),
     cst_S_FIFO=caml_string_of_jsbytes("S_FIFO"),
     cst_S_LNK=caml_string_of_jsbytes("S_LNK"),
     cst_S_REG=caml_string_of_jsbytes("S_REG"),
     cst_S_SOCK=caml_string_of_jsbytes("S_SOCK"),
     cst_s_CHR=caml_string_of_jsbytes("s_CHR"),
     cst_s_DIR=caml_string_of_jsbytes("s_DIR"),
     cst_s_FIFO=caml_string_of_jsbytes("s_FIFO"),
     cst_s_LNK=caml_string_of_jsbytes("s_LNK"),
     cst_s_REG=caml_string_of_jsbytes("s_REG"),
     cst_s_SOCK=caml_string_of_jsbytes("s_SOCK"),
     cst_s_BLK$0=caml_string_of_jsbytes("s_BLK"),
     cst_S_BLK$0=caml_string_of_jsbytes("S_BLK"),
     cst_S_CHR$0=caml_string_of_jsbytes("S_CHR"),
     cst_S_DIR$0=caml_string_of_jsbytes("S_DIR"),
     cst_S_FIFO$0=caml_string_of_jsbytes("S_FIFO"),
     cst_S_LNK$0=caml_string_of_jsbytes("S_LNK"),
     cst_S_REG$0=caml_string_of_jsbytes("S_REG"),
     cst_S_SOCK$0=caml_string_of_jsbytes("S_SOCK"),
     cst_s_CHR$0=caml_string_of_jsbytes("s_CHR"),
     cst_s_DIR$0=caml_string_of_jsbytes("s_DIR"),
     cst_s_FIFO$0=caml_string_of_jsbytes("s_FIFO"),
     cst_s_LNK$0=caml_string_of_jsbytes("s_LNK"),
     cst_s_REG$0=caml_string_of_jsbytes("s_REG"),
     cst_s_SOCK$0=caml_string_of_jsbytes("s_SOCK"),
     cst_SEEK_CUR=caml_string_of_jsbytes("SEEK_CUR"),
     cst_SEEK_END=caml_string_of_jsbytes("SEEK_END"),
     cst_SEEK_SET=caml_string_of_jsbytes("SEEK_SET"),
     cst_sEEK_CUR=caml_string_of_jsbytes("sEEK_CUR"),
     cst_sEEK_END=caml_string_of_jsbytes("sEEK_END"),
     cst_sEEK_SET=caml_string_of_jsbytes("sEEK_SET"),
     cst_SEEK_CUR$0=caml_string_of_jsbytes("SEEK_CUR"),
     cst_SEEK_END$0=caml_string_of_jsbytes("SEEK_END"),
     cst_SEEK_SET$0=caml_string_of_jsbytes("SEEK_SET"),
     cst_sEEK_CUR$0=caml_string_of_jsbytes("sEEK_CUR"),
     cst_sEEK_END$0=caml_string_of_jsbytes("sEEK_END"),
     cst_sEEK_SET$0=caml_string_of_jsbytes("sEEK_SET"),
     cst_pos$2=caml_string_of_jsbytes("pos"),
     cst_pos$1=caml_string_of_jsbytes("pos"),
     cst_mode$0=caml_string_of_jsbytes("mode"),
     cst_o_APPEND=caml_string_of_jsbytes("o_APPEND"),
     cst_O_NONBLOCK=caml_string_of_jsbytes("O_NONBLOCK"),
     cst_O_APPEND=caml_string_of_jsbytes("O_APPEND"),
     cst_O_CLOEXEC=caml_string_of_jsbytes("O_CLOEXEC"),
     cst_O_CREAT=caml_string_of_jsbytes("O_CREAT"),
     cst_O_DSYNC=caml_string_of_jsbytes("O_DSYNC"),
     cst_O_EXCL=caml_string_of_jsbytes("O_EXCL"),
     cst_O_KEEPEXEC=caml_string_of_jsbytes("O_KEEPEXEC"),
     cst_O_NOCTTY=caml_string_of_jsbytes("O_NOCTTY"),
     cst_O_RDONLY=caml_string_of_jsbytes("O_RDONLY"),
     cst_O_RDWR=caml_string_of_jsbytes("O_RDWR"),
     cst_O_RSYNC=caml_string_of_jsbytes("O_RSYNC"),
     cst_O_SHARE_DELETE=caml_string_of_jsbytes("O_SHARE_DELETE"),
     cst_O_SYNC=caml_string_of_jsbytes("O_SYNC"),
     cst_O_TRUNC=caml_string_of_jsbytes("O_TRUNC"),
     cst_O_WRONLY=caml_string_of_jsbytes("O_WRONLY"),
     cst_o_RDONLY=caml_string_of_jsbytes("o_RDONLY"),
     cst_o_CLOEXEC=caml_string_of_jsbytes("o_CLOEXEC"),
     cst_o_CREAT=caml_string_of_jsbytes("o_CREAT"),
     cst_o_DSYNC=caml_string_of_jsbytes("o_DSYNC"),
     cst_o_EXCL=caml_string_of_jsbytes("o_EXCL"),
     cst_o_KEEPEXEC=caml_string_of_jsbytes("o_KEEPEXEC"),
     cst_o_NOCTTY=caml_string_of_jsbytes("o_NOCTTY"),
     cst_o_NONBLOCK=caml_string_of_jsbytes("o_NONBLOCK"),
     cst_o_RDWR=caml_string_of_jsbytes("o_RDWR"),
     cst_o_RSYNC=caml_string_of_jsbytes("o_RSYNC"),
     cst_o_SHARE_DELETE=caml_string_of_jsbytes("o_SHARE_DELETE"),
     cst_o_SYNC=caml_string_of_jsbytes("o_SYNC"),
     cst_o_TRUNC=caml_string_of_jsbytes("o_TRUNC"),
     cst_o_WRONLY=caml_string_of_jsbytes("o_WRONLY"),
     cst_o_APPEND$0=caml_string_of_jsbytes("o_APPEND"),
     cst_O_NONBLOCK$0=caml_string_of_jsbytes("O_NONBLOCK"),
     cst_O_APPEND$0=caml_string_of_jsbytes("O_APPEND"),
     cst_O_CLOEXEC$0=caml_string_of_jsbytes("O_CLOEXEC"),
     cst_O_CREAT$0=caml_string_of_jsbytes("O_CREAT"),
     cst_O_DSYNC$0=caml_string_of_jsbytes("O_DSYNC"),
     cst_O_EXCL$0=caml_string_of_jsbytes("O_EXCL"),
     cst_O_KEEPEXEC$0=caml_string_of_jsbytes("O_KEEPEXEC"),
     cst_O_NOCTTY$0=caml_string_of_jsbytes("O_NOCTTY"),
     cst_O_RDONLY$0=caml_string_of_jsbytes("O_RDONLY"),
     cst_O_RDWR$0=caml_string_of_jsbytes("O_RDWR"),
     cst_O_RSYNC$0=caml_string_of_jsbytes("O_RSYNC"),
     cst_O_SHARE_DELETE$0=caml_string_of_jsbytes("O_SHARE_DELETE"),
     cst_O_SYNC$0=caml_string_of_jsbytes("O_SYNC"),
     cst_O_TRUNC$0=caml_string_of_jsbytes("O_TRUNC"),
     cst_O_WRONLY$0=caml_string_of_jsbytes("O_WRONLY"),
     cst_o_RDONLY$0=caml_string_of_jsbytes("o_RDONLY"),
     cst_o_CLOEXEC$0=caml_string_of_jsbytes("o_CLOEXEC"),
     cst_o_CREAT$0=caml_string_of_jsbytes("o_CREAT"),
     cst_o_DSYNC$0=caml_string_of_jsbytes("o_DSYNC"),
     cst_o_EXCL$0=caml_string_of_jsbytes("o_EXCL"),
     cst_o_KEEPEXEC$0=caml_string_of_jsbytes("o_KEEPEXEC"),
     cst_o_NOCTTY$0=caml_string_of_jsbytes("o_NOCTTY"),
     cst_o_NONBLOCK$0=caml_string_of_jsbytes("o_NONBLOCK"),
     cst_o_RDWR$0=caml_string_of_jsbytes("o_RDWR"),
     cst_o_RSYNC$0=caml_string_of_jsbytes("o_RSYNC"),
     cst_o_SHARE_DELETE$0=caml_string_of_jsbytes("o_SHARE_DELETE"),
     cst_o_SYNC$0=caml_string_of_jsbytes("o_SYNC"),
     cst_o_TRUNC$0=caml_string_of_jsbytes("o_TRUNC"),
     cst_o_WRONLY$0=caml_string_of_jsbytes("o_WRONLY"),
     cst_priority=caml_string_of_jsbytes("priority"),
     cst_command=caml_string_of_jsbytes("command"),
     cst_child_process_didn_t_exit_=
      caml_string_of_jsbytes("child process didn't exit with status 0"),
     cst_pid=caml_string_of_jsbytes("pid"),
     cst_mode=caml_string_of_jsbytes("mode"),
     cst_waitpid_syscall_returned_i=
      caml_string_of_jsbytes
       ("waitpid syscall returned invalid result for mode"),
     cst_Any=caml_string_of_jsbytes("Any"),
     cst_Group=caml_string_of_jsbytes("Group"),
     cst_My_group=caml_string_of_jsbytes("My_group"),
     cst_Pid=caml_string_of_jsbytes("Pid"),
     cst_Any$0=caml_string_of_jsbytes("Any"),
     cst_Group$0=caml_string_of_jsbytes("Group"),
     cst_My_group$0=caml_string_of_jsbytes("My_group"),
     cst_Pid$0=caml_string_of_jsbytes("Pid"),
     cst$12=caml_string_of_jsbytes("="),
     cst_Extend=caml_string_of_jsbytes("Extend"),
     cst_Override=caml_string_of_jsbytes("Override"),
     cst_Replace=caml_string_of_jsbytes("Replace"),
     cst_Replace_raw=caml_string_of_jsbytes("Replace_raw"),
     cst_Extend$0=caml_string_of_jsbytes("Extend"),
     cst_Override$0=caml_string_of_jsbytes("Override"),
     cst_Replace$0=caml_string_of_jsbytes("Replace"),
     cst_Replace_raw$0=caml_string_of_jsbytes("Replace_raw"),
     cst_env=caml_string_of_jsbytes("env"),
     cst_argv=caml_string_of_jsbytes("argv"),
     cst_prog=caml_string_of_jsbytes("prog"),
     cst_Unix_Exit_or_signal_or_sto=
      caml_string_of_jsbytes("Unix.Exit_or_signal_or_stop"),
     cst_Stop$1=caml_string_of_jsbytes("Stop"),
     cst_Stop$2=caml_string_of_jsbytes("Stop"),
     cst_Unix_Exit_or_signal=caml_string_of_jsbytes("Unix.Exit_or_signal"),
     cst_Signal=caml_string_of_jsbytes("Signal"),
     cst_Signal$0=caml_string_of_jsbytes("Signal"),
     cst_Unix_Exit=caml_string_of_jsbytes("Unix.Exit"),
     cst_exited_normally=caml_string_of_jsbytes("exited normally"),
     cst_Exit_non_zero=caml_string_of_jsbytes("Exit_non_zero"),
     cst_Exit_non_zero$0=caml_string_of_jsbytes("Exit_non_zero"),
     cst_unsetenv=caml_string_of_jsbytes("unsetenv"),
     cst_data=caml_string_of_jsbytes("data"),
     cst_key=caml_string_of_jsbytes("key"),
     cst_e2BIG$1=caml_string_of_jsbytes("e2BIG"),
     cst_ENETUNREACH$1=caml_string_of_jsbytes("ENETUNREACH"),
     cst_EFAULT$1=caml_string_of_jsbytes("EFAULT"),
     cst_EBUSY$1=caml_string_of_jsbytes("EBUSY"),
     cst_E2BIG$1=caml_string_of_jsbytes("E2BIG"),
     cst_EACCES$1=caml_string_of_jsbytes("EACCES"),
     cst_EADDRINUSE$1=caml_string_of_jsbytes("EADDRINUSE"),
     cst_EADDRNOTAVAIL$1=caml_string_of_jsbytes("EADDRNOTAVAIL"),
     cst_EAFNOSUPPORT$1=caml_string_of_jsbytes("EAFNOSUPPORT"),
     cst_EAGAIN$1=caml_string_of_jsbytes("EAGAIN"),
     cst_EALREADY$1=caml_string_of_jsbytes("EALREADY"),
     cst_EBADF$1=caml_string_of_jsbytes("EBADF"),
     cst_ECHILD$1=caml_string_of_jsbytes("ECHILD"),
     cst_ECONNABORTED$1=caml_string_of_jsbytes("ECONNABORTED"),
     cst_ECONNREFUSED$1=caml_string_of_jsbytes("ECONNREFUSED"),
     cst_ECONNRESET$1=caml_string_of_jsbytes("ECONNRESET"),
     cst_EDEADLK$1=caml_string_of_jsbytes("EDEADLK"),
     cst_EDESTADDRREQ$1=caml_string_of_jsbytes("EDESTADDRREQ"),
     cst_EDOM$1=caml_string_of_jsbytes("EDOM"),
     cst_EEXIST$1=caml_string_of_jsbytes("EEXIST"),
     cst_EISDIR$1=caml_string_of_jsbytes("EISDIR"),
     cst_EFBIG$1=caml_string_of_jsbytes("EFBIG"),
     cst_EHOSTDOWN$1=caml_string_of_jsbytes("EHOSTDOWN"),
     cst_EHOSTUNREACH$1=caml_string_of_jsbytes("EHOSTUNREACH"),
     cst_EINPROGRESS$1=caml_string_of_jsbytes("EINPROGRESS"),
     cst_EINTR$1=caml_string_of_jsbytes("EINTR"),
     cst_EINVAL$1=caml_string_of_jsbytes("EINVAL"),
     cst_EIO$1=caml_string_of_jsbytes("EIO"),
     cst_EISCONN$1=caml_string_of_jsbytes("EISCONN"),
     cst_ELOOP$1=caml_string_of_jsbytes("ELOOP"),
     cst_EMFILE$1=caml_string_of_jsbytes("EMFILE"),
     cst_EMLINK$1=caml_string_of_jsbytes("EMLINK"),
     cst_EMSGSIZE$1=caml_string_of_jsbytes("EMSGSIZE"),
     cst_ENAMETOOLONG$1=caml_string_of_jsbytes("ENAMETOOLONG"),
     cst_ENETDOWN$1=caml_string_of_jsbytes("ENETDOWN"),
     cst_ENETRESET$1=caml_string_of_jsbytes("ENETRESET"),
     cst_EOVERFLOW$1=caml_string_of_jsbytes("EOVERFLOW"),
     cst_ENOSPC$1=caml_string_of_jsbytes("ENOSPC"),
     cst_ENFILE$1=caml_string_of_jsbytes("ENFILE"),
     cst_ENOBUFS$1=caml_string_of_jsbytes("ENOBUFS"),
     cst_ENODEV$1=caml_string_of_jsbytes("ENODEV"),
     cst_ENOENT$1=caml_string_of_jsbytes("ENOENT"),
     cst_ENOEXEC$1=caml_string_of_jsbytes("ENOEXEC"),
     cst_ENOLCK$1=caml_string_of_jsbytes("ENOLCK"),
     cst_ENOMEM$1=caml_string_of_jsbytes("ENOMEM"),
     cst_ENOPROTOOPT$1=caml_string_of_jsbytes("ENOPROTOOPT"),
     cst_ENOSYS$1=caml_string_of_jsbytes("ENOSYS"),
     cst_ENOTCONN$1=caml_string_of_jsbytes("ENOTCONN"),
     cst_ENOTDIR$1=caml_string_of_jsbytes("ENOTDIR"),
     cst_ENOTEMPTY$1=caml_string_of_jsbytes("ENOTEMPTY"),
     cst_ENOTSOCK$1=caml_string_of_jsbytes("ENOTSOCK"),
     cst_ENOTTY$1=caml_string_of_jsbytes("ENOTTY"),
     cst_ENXIO$1=caml_string_of_jsbytes("ENXIO"),
     cst_EOPNOTSUPP$1=caml_string_of_jsbytes("EOPNOTSUPP"),
     cst_ESOCKTNOSUPPORT$1=caml_string_of_jsbytes("ESOCKTNOSUPPORT"),
     cst_EPERM$1=caml_string_of_jsbytes("EPERM"),
     cst_EPFNOSUPPORT$1=caml_string_of_jsbytes("EPFNOSUPPORT"),
     cst_EPIPE$1=caml_string_of_jsbytes("EPIPE"),
     cst_EPROTONOSUPPORT$1=caml_string_of_jsbytes("EPROTONOSUPPORT"),
     cst_EPROTOTYPE$1=caml_string_of_jsbytes("EPROTOTYPE"),
     cst_ERANGE$1=caml_string_of_jsbytes("ERANGE"),
     cst_EROFS$1=caml_string_of_jsbytes("EROFS"),
     cst_ESHUTDOWN$1=caml_string_of_jsbytes("ESHUTDOWN"),
     cst_ESPIPE$1=caml_string_of_jsbytes("ESPIPE"),
     cst_ESRCH$1=caml_string_of_jsbytes("ESRCH"),
     cst_ETIMEDOUT$1=caml_string_of_jsbytes("ETIMEDOUT"),
     cst_ETOOMANYREFS$1=caml_string_of_jsbytes("ETOOMANYREFS"),
     cst_EUNKNOWNERR$1=caml_string_of_jsbytes("EUNKNOWNERR"),
     cst_EWOULDBLOCK$1=caml_string_of_jsbytes("EWOULDBLOCK"),
     cst_EXDEV$1=caml_string_of_jsbytes("EXDEV"),
     cst_eNFILE$1=caml_string_of_jsbytes("eNFILE"),
     cst_eFBIG$1=caml_string_of_jsbytes("eFBIG"),
     cst_eCHILD$1=caml_string_of_jsbytes("eCHILD"),
     cst_eACCES$1=caml_string_of_jsbytes("eACCES"),
     cst_eADDRINUSE$1=caml_string_of_jsbytes("eADDRINUSE"),
     cst_eADDRNOTAVAIL$1=caml_string_of_jsbytes("eADDRNOTAVAIL"),
     cst_eAFNOSUPPORT$1=caml_string_of_jsbytes("eAFNOSUPPORT"),
     cst_eAGAIN$1=caml_string_of_jsbytes("eAGAIN"),
     cst_eALREADY$1=caml_string_of_jsbytes("eALREADY"),
     cst_eBADF$1=caml_string_of_jsbytes("eBADF"),
     cst_eBUSY$1=caml_string_of_jsbytes("eBUSY"),
     cst_eCONNABORTED$1=caml_string_of_jsbytes("eCONNABORTED"),
     cst_eCONNREFUSED$1=caml_string_of_jsbytes("eCONNREFUSED"),
     cst_eCONNRESET$1=caml_string_of_jsbytes("eCONNRESET"),
     cst_eDEADLK$1=caml_string_of_jsbytes("eDEADLK"),
     cst_eDESTADDRREQ$1=caml_string_of_jsbytes("eDESTADDRREQ"),
     cst_eDOM$1=caml_string_of_jsbytes("eDOM"),
     cst_eEXIST$1=caml_string_of_jsbytes("eEXIST"),
     cst_eFAULT$1=caml_string_of_jsbytes("eFAULT"),
     cst_eLOOP$1=caml_string_of_jsbytes("eLOOP"),
     cst_eHOSTDOWN$1=caml_string_of_jsbytes("eHOSTDOWN"),
     cst_eHOSTUNREACH$1=caml_string_of_jsbytes("eHOSTUNREACH"),
     cst_eINPROGRESS$1=caml_string_of_jsbytes("eINPROGRESS"),
     cst_eINTR$1=caml_string_of_jsbytes("eINTR"),
     cst_eINVAL$1=caml_string_of_jsbytes("eINVAL"),
     cst_eIO$1=caml_string_of_jsbytes("eIO"),
     cst_eISCONN$1=caml_string_of_jsbytes("eISCONN"),
     cst_eISDIR$1=caml_string_of_jsbytes("eISDIR"),
     cst_eMFILE$1=caml_string_of_jsbytes("eMFILE"),
     cst_eMLINK$1=caml_string_of_jsbytes("eMLINK"),
     cst_eMSGSIZE$1=caml_string_of_jsbytes("eMSGSIZE"),
     cst_eNAMETOOLONG$1=caml_string_of_jsbytes("eNAMETOOLONG"),
     cst_eNETDOWN$1=caml_string_of_jsbytes("eNETDOWN"),
     cst_eNETRESET$1=caml_string_of_jsbytes("eNETRESET"),
     cst_eNETUNREACH$1=caml_string_of_jsbytes("eNETUNREACH"),
     cst_eOVERFLOW$1=caml_string_of_jsbytes("eOVERFLOW"),
     cst_eNOSYS$1=caml_string_of_jsbytes("eNOSYS"),
     cst_eNOBUFS$1=caml_string_of_jsbytes("eNOBUFS"),
     cst_eNODEV$1=caml_string_of_jsbytes("eNODEV"),
     cst_eNOENT$1=caml_string_of_jsbytes("eNOENT"),
     cst_eNOEXEC$1=caml_string_of_jsbytes("eNOEXEC"),
     cst_eNOLCK$1=caml_string_of_jsbytes("eNOLCK"),
     cst_eNOMEM$1=caml_string_of_jsbytes("eNOMEM"),
     cst_eNOPROTOOPT$1=caml_string_of_jsbytes("eNOPROTOOPT"),
     cst_eNOSPC$1=caml_string_of_jsbytes("eNOSPC"),
     cst_eNOTCONN$1=caml_string_of_jsbytes("eNOTCONN"),
     cst_eNOTDIR$1=caml_string_of_jsbytes("eNOTDIR"),
     cst_eNOTEMPTY$1=caml_string_of_jsbytes("eNOTEMPTY"),
     cst_eNOTSOCK$1=caml_string_of_jsbytes("eNOTSOCK"),
     cst_eNOTTY$1=caml_string_of_jsbytes("eNOTTY"),
     cst_eNXIO$1=caml_string_of_jsbytes("eNXIO"),
     cst_eOPNOTSUPP$1=caml_string_of_jsbytes("eOPNOTSUPP"),
     cst_eSOCKTNOSUPPORT$1=caml_string_of_jsbytes("eSOCKTNOSUPPORT"),
     cst_ePERM$1=caml_string_of_jsbytes("ePERM"),
     cst_ePFNOSUPPORT$1=caml_string_of_jsbytes("ePFNOSUPPORT"),
     cst_ePIPE$1=caml_string_of_jsbytes("ePIPE"),
     cst_ePROTONOSUPPORT$1=caml_string_of_jsbytes("ePROTONOSUPPORT"),
     cst_ePROTOTYPE$1=caml_string_of_jsbytes("ePROTOTYPE"),
     cst_eRANGE$1=caml_string_of_jsbytes("eRANGE"),
     cst_eROFS$1=caml_string_of_jsbytes("eROFS"),
     cst_eSHUTDOWN$1=caml_string_of_jsbytes("eSHUTDOWN"),
     cst_eSPIPE$1=caml_string_of_jsbytes("eSPIPE"),
     cst_eSRCH$1=caml_string_of_jsbytes("eSRCH"),
     cst_eTIMEDOUT$1=caml_string_of_jsbytes("eTIMEDOUT"),
     cst_eTOOMANYREFS$1=caml_string_of_jsbytes("eTOOMANYREFS"),
     cst_eUNKNOWNERR$1=caml_string_of_jsbytes("eUNKNOWNERR"),
     cst_eWOULDBLOCK$1=caml_string_of_jsbytes("eWOULDBLOCK"),
     cst_eXDEV$1=caml_string_of_jsbytes("eXDEV"),
     cst_e2BIG$2=caml_string_of_jsbytes("e2BIG"),
     cst_ENETUNREACH$2=caml_string_of_jsbytes("ENETUNREACH"),
     cst_EFAULT$2=caml_string_of_jsbytes("EFAULT"),
     cst_EBUSY$2=caml_string_of_jsbytes("EBUSY"),
     cst_E2BIG$2=caml_string_of_jsbytes("E2BIG"),
     cst_EACCES$2=caml_string_of_jsbytes("EACCES"),
     cst_EADDRINUSE$2=caml_string_of_jsbytes("EADDRINUSE"),
     cst_EADDRNOTAVAIL$2=caml_string_of_jsbytes("EADDRNOTAVAIL"),
     cst_EAFNOSUPPORT$2=caml_string_of_jsbytes("EAFNOSUPPORT"),
     cst_EAGAIN$2=caml_string_of_jsbytes("EAGAIN"),
     cst_EALREADY$2=caml_string_of_jsbytes("EALREADY"),
     cst_EBADF$2=caml_string_of_jsbytes("EBADF"),
     cst_ECHILD$2=caml_string_of_jsbytes("ECHILD"),
     cst_ECONNABORTED$2=caml_string_of_jsbytes("ECONNABORTED"),
     cst_ECONNREFUSED$2=caml_string_of_jsbytes("ECONNREFUSED"),
     cst_ECONNRESET$2=caml_string_of_jsbytes("ECONNRESET"),
     cst_EDEADLK$2=caml_string_of_jsbytes("EDEADLK"),
     cst_EDESTADDRREQ$2=caml_string_of_jsbytes("EDESTADDRREQ"),
     cst_EDOM$2=caml_string_of_jsbytes("EDOM"),
     cst_EEXIST$2=caml_string_of_jsbytes("EEXIST"),
     cst_EISDIR$2=caml_string_of_jsbytes("EISDIR"),
     cst_EFBIG$2=caml_string_of_jsbytes("EFBIG"),
     cst_EHOSTDOWN$2=caml_string_of_jsbytes("EHOSTDOWN"),
     cst_EHOSTUNREACH$2=caml_string_of_jsbytes("EHOSTUNREACH"),
     cst_EINPROGRESS$2=caml_string_of_jsbytes("EINPROGRESS"),
     cst_EINTR$2=caml_string_of_jsbytes("EINTR"),
     cst_EINVAL$2=caml_string_of_jsbytes("EINVAL"),
     cst_EIO$2=caml_string_of_jsbytes("EIO"),
     cst_EISCONN$2=caml_string_of_jsbytes("EISCONN"),
     cst_ELOOP$2=caml_string_of_jsbytes("ELOOP"),
     cst_EMFILE$2=caml_string_of_jsbytes("EMFILE"),
     cst_EMLINK$2=caml_string_of_jsbytes("EMLINK"),
     cst_EMSGSIZE$2=caml_string_of_jsbytes("EMSGSIZE"),
     cst_ENAMETOOLONG$2=caml_string_of_jsbytes("ENAMETOOLONG"),
     cst_ENETDOWN$2=caml_string_of_jsbytes("ENETDOWN"),
     cst_ENETRESET$2=caml_string_of_jsbytes("ENETRESET"),
     cst_EOVERFLOW$2=caml_string_of_jsbytes("EOVERFLOW"),
     cst_ENOSPC$2=caml_string_of_jsbytes("ENOSPC"),
     cst_ENFILE$2=caml_string_of_jsbytes("ENFILE"),
     cst_ENOBUFS$2=caml_string_of_jsbytes("ENOBUFS"),
     cst_ENODEV$2=caml_string_of_jsbytes("ENODEV"),
     cst_ENOENT$2=caml_string_of_jsbytes("ENOENT"),
     cst_ENOEXEC$2=caml_string_of_jsbytes("ENOEXEC"),
     cst_ENOLCK$2=caml_string_of_jsbytes("ENOLCK"),
     cst_ENOMEM$2=caml_string_of_jsbytes("ENOMEM"),
     cst_ENOPROTOOPT$2=caml_string_of_jsbytes("ENOPROTOOPT"),
     cst_ENOSYS$2=caml_string_of_jsbytes("ENOSYS"),
     cst_ENOTCONN$2=caml_string_of_jsbytes("ENOTCONN"),
     cst_ENOTDIR$2=caml_string_of_jsbytes("ENOTDIR"),
     cst_ENOTEMPTY$2=caml_string_of_jsbytes("ENOTEMPTY"),
     cst_ENOTSOCK$2=caml_string_of_jsbytes("ENOTSOCK"),
     cst_ENOTTY$2=caml_string_of_jsbytes("ENOTTY"),
     cst_ENXIO$2=caml_string_of_jsbytes("ENXIO"),
     cst_EOPNOTSUPP$2=caml_string_of_jsbytes("EOPNOTSUPP"),
     cst_ESOCKTNOSUPPORT$2=caml_string_of_jsbytes("ESOCKTNOSUPPORT"),
     cst_EPERM$2=caml_string_of_jsbytes("EPERM"),
     cst_EPFNOSUPPORT$2=caml_string_of_jsbytes("EPFNOSUPPORT"),
     cst_EPIPE$2=caml_string_of_jsbytes("EPIPE"),
     cst_EPROTONOSUPPORT$2=caml_string_of_jsbytes("EPROTONOSUPPORT"),
     cst_EPROTOTYPE$2=caml_string_of_jsbytes("EPROTOTYPE"),
     cst_ERANGE$2=caml_string_of_jsbytes("ERANGE"),
     cst_EROFS$2=caml_string_of_jsbytes("EROFS"),
     cst_ESHUTDOWN$2=caml_string_of_jsbytes("ESHUTDOWN"),
     cst_ESPIPE$2=caml_string_of_jsbytes("ESPIPE"),
     cst_ESRCH$2=caml_string_of_jsbytes("ESRCH"),
     cst_ETIMEDOUT$2=caml_string_of_jsbytes("ETIMEDOUT"),
     cst_ETOOMANYREFS$2=caml_string_of_jsbytes("ETOOMANYREFS"),
     cst_EUNKNOWNERR$2=caml_string_of_jsbytes("EUNKNOWNERR"),
     cst_EWOULDBLOCK$2=caml_string_of_jsbytes("EWOULDBLOCK"),
     cst_EXDEV$2=caml_string_of_jsbytes("EXDEV"),
     cst_eNFILE$2=caml_string_of_jsbytes("eNFILE"),
     cst_eFBIG$2=caml_string_of_jsbytes("eFBIG"),
     cst_eCHILD$2=caml_string_of_jsbytes("eCHILD"),
     cst_eACCES$2=caml_string_of_jsbytes("eACCES"),
     cst_eADDRINUSE$2=caml_string_of_jsbytes("eADDRINUSE"),
     cst_eADDRNOTAVAIL$2=caml_string_of_jsbytes("eADDRNOTAVAIL"),
     cst_eAFNOSUPPORT$2=caml_string_of_jsbytes("eAFNOSUPPORT"),
     cst_eAGAIN$2=caml_string_of_jsbytes("eAGAIN"),
     cst_eALREADY$2=caml_string_of_jsbytes("eALREADY"),
     cst_eBADF$2=caml_string_of_jsbytes("eBADF"),
     cst_eBUSY$2=caml_string_of_jsbytes("eBUSY"),
     cst_eCONNABORTED$2=caml_string_of_jsbytes("eCONNABORTED"),
     cst_eCONNREFUSED$2=caml_string_of_jsbytes("eCONNREFUSED"),
     cst_eCONNRESET$2=caml_string_of_jsbytes("eCONNRESET"),
     cst_eDEADLK$2=caml_string_of_jsbytes("eDEADLK"),
     cst_eDESTADDRREQ$2=caml_string_of_jsbytes("eDESTADDRREQ"),
     cst_eDOM$2=caml_string_of_jsbytes("eDOM"),
     cst_eEXIST$2=caml_string_of_jsbytes("eEXIST"),
     cst_eFAULT$2=caml_string_of_jsbytes("eFAULT"),
     cst_eLOOP$2=caml_string_of_jsbytes("eLOOP"),
     cst_eHOSTDOWN$2=caml_string_of_jsbytes("eHOSTDOWN"),
     cst_eHOSTUNREACH$2=caml_string_of_jsbytes("eHOSTUNREACH"),
     cst_eINPROGRESS$2=caml_string_of_jsbytes("eINPROGRESS"),
     cst_eINTR$2=caml_string_of_jsbytes("eINTR"),
     cst_eINVAL$2=caml_string_of_jsbytes("eINVAL"),
     cst_eIO$2=caml_string_of_jsbytes("eIO"),
     cst_eISCONN$2=caml_string_of_jsbytes("eISCONN"),
     cst_eISDIR$2=caml_string_of_jsbytes("eISDIR"),
     cst_eMFILE$2=caml_string_of_jsbytes("eMFILE"),
     cst_eMLINK$2=caml_string_of_jsbytes("eMLINK"),
     cst_eMSGSIZE$2=caml_string_of_jsbytes("eMSGSIZE"),
     cst_eNAMETOOLONG$2=caml_string_of_jsbytes("eNAMETOOLONG"),
     cst_eNETDOWN$2=caml_string_of_jsbytes("eNETDOWN"),
     cst_eNETRESET$2=caml_string_of_jsbytes("eNETRESET"),
     cst_eNETUNREACH$2=caml_string_of_jsbytes("eNETUNREACH"),
     cst_eOVERFLOW$2=caml_string_of_jsbytes("eOVERFLOW"),
     cst_eNOSYS$2=caml_string_of_jsbytes("eNOSYS"),
     cst_eNOBUFS$2=caml_string_of_jsbytes("eNOBUFS"),
     cst_eNODEV$2=caml_string_of_jsbytes("eNODEV"),
     cst_eNOENT$2=caml_string_of_jsbytes("eNOENT"),
     cst_eNOEXEC$2=caml_string_of_jsbytes("eNOEXEC"),
     cst_eNOLCK$2=caml_string_of_jsbytes("eNOLCK"),
     cst_eNOMEM$2=caml_string_of_jsbytes("eNOMEM"),
     cst_eNOPROTOOPT$2=caml_string_of_jsbytes("eNOPROTOOPT"),
     cst_eNOSPC$2=caml_string_of_jsbytes("eNOSPC"),
     cst_eNOTCONN$2=caml_string_of_jsbytes("eNOTCONN"),
     cst_eNOTDIR$2=caml_string_of_jsbytes("eNOTDIR"),
     cst_eNOTEMPTY$2=caml_string_of_jsbytes("eNOTEMPTY"),
     cst_eNOTSOCK$2=caml_string_of_jsbytes("eNOTSOCK"),
     cst_eNOTTY$2=caml_string_of_jsbytes("eNOTTY"),
     cst_eNXIO$2=caml_string_of_jsbytes("eNXIO"),
     cst_eOPNOTSUPP$2=caml_string_of_jsbytes("eOPNOTSUPP"),
     cst_eSOCKTNOSUPPORT$2=caml_string_of_jsbytes("eSOCKTNOSUPPORT"),
     cst_ePERM$2=caml_string_of_jsbytes("ePERM"),
     cst_ePFNOSUPPORT$2=caml_string_of_jsbytes("ePFNOSUPPORT"),
     cst_ePIPE$2=caml_string_of_jsbytes("ePIPE"),
     cst_ePROTONOSUPPORT$2=caml_string_of_jsbytes("ePROTONOSUPPORT"),
     cst_ePROTOTYPE$2=caml_string_of_jsbytes("ePROTOTYPE"),
     cst_eRANGE$2=caml_string_of_jsbytes("eRANGE"),
     cst_eROFS$2=caml_string_of_jsbytes("eROFS"),
     cst_eSHUTDOWN$2=caml_string_of_jsbytes("eSHUTDOWN"),
     cst_eSPIPE$2=caml_string_of_jsbytes("eSPIPE"),
     cst_eSRCH$2=caml_string_of_jsbytes("eSRCH"),
     cst_eTIMEDOUT$2=caml_string_of_jsbytes("eTIMEDOUT"),
     cst_eTOOMANYREFS$2=caml_string_of_jsbytes("eTOOMANYREFS"),
     cst_eUNKNOWNERR$2=caml_string_of_jsbytes("eUNKNOWNERR"),
     cst_eWOULDBLOCK$2=caml_string_of_jsbytes("eWOULDBLOCK"),
     cst_eXDEV$2=caml_string_of_jsbytes("eXDEV"),
     cst_dir_handle=caml_string_of_jsbytes("dir_handle"),
     cst_close_on_exec=caml_string_of_jsbytes("close_on_exec"),
     cst_fd=caml_string_of_jsbytes("fd"),
     cst_gid=caml_string_of_jsbytes("gid"),
     cst_uid=caml_string_of_jsbytes("uid"),
     cst_len$1=caml_string_of_jsbytes("len"),
     cst_perm=caml_string_of_jsbytes("perm"),
     cst_filename=caml_string_of_jsbytes("filename"),
     cst_dirname=caml_string_of_jsbytes("dirname"),
     cst_Current=caml_string_of_jsbytes("Current"),
     cst_Future=caml_string_of_jsbytes("Future"),
     cst_current=caml_string_of_jsbytes("current"),
     cst_future=caml_string_of_jsbytes("future"),
     cst_Current$0=caml_string_of_jsbytes("Current"),
     cst_Future$0=caml_string_of_jsbytes("Future"),
     cst_current$0=caml_string_of_jsbytes("current"),
     cst_future$0=caml_string_of_jsbytes("future"),
     cst_Fifo=caml_string_of_jsbytes("Fifo"),
     cst_Other=caml_string_of_jsbytes("Other"),
     cst_Round_robin=caml_string_of_jsbytes("Round_robin"),
     cst_Fifo$0=caml_string_of_jsbytes("Fifo"),
     cst_Other$0=caml_string_of_jsbytes("Other"),
     cst_Round_robin$0=caml_string_of_jsbytes("Round_robin"),
     cst_machine=caml_string_of_jsbytes("machine"),
     cst_nodename=caml_string_of_jsbytes("nodename"),
     cst_release=caml_string_of_jsbytes("release"),
     cst_sysname=caml_string_of_jsbytes("sysname"),
     cst_version=caml_string_of_jsbytes("version"),
     cst_machine$0=caml_string_of_jsbytes("machine"),
     cst_version$0=caml_string_of_jsbytes("version"),
     cst_release$0=caml_string_of_jsbytes("release"),
     cst_nodename$0=caml_string_of_jsbytes("nodename"),
     cst_sysname$0=caml_string_of_jsbytes("sysname"),
     cst_writev=caml_string_of_jsbytes("writev"),
     cst_writev_assume_fd_is_nonblo=
      caml_string_of_jsbytes("writev_assume_fd_is_nonblocking"),
     cst_count_0=caml_string_of_jsbytes(": count < 0"),
     cst_count_n_iovecs=caml_string_of_jsbytes(": count > n_iovecs"),
     cst_IOVec_drop_n_length_iovec=
      caml_string_of_jsbytes("IOVec.drop: n > length iovec"),
     cst_IOVec_of_bigstring=caml_string_of_jsbytes("IOVec.of_bigstring"),
     cst_IOVec_of_string=caml_string_of_jsbytes("IOVec.of_string"),
     cst_pos_0$0=caml_string_of_jsbytes(": pos < 0"),
     cst_pos_length_buf=caml_string_of_jsbytes(": pos > length buf"),
     cst_len_0$0=caml_string_of_jsbytes(": len < 0"),
     cst_pos_len_length_buf=caml_string_of_jsbytes(": pos + len > length buf"),
     cst_buf=caml_string_of_jsbytes("buf"),
     cst_len=caml_string_of_jsbytes("len"),
     cst_pos=caml_string_of_jsbytes("pos"),
     cst_len$0=caml_string_of_jsbytes("len"),
     cst_pos$0=caml_string_of_jsbytes("pos"),
     cst_buf$0=caml_string_of_jsbytes("buf"),
     cst_sysconf_exn_value_not_avai=
      caml_string_of_jsbytes
       ("[sysconf_exn]: value not available or limit is unspecified"),
     cst_aRG_MAX=caml_string_of_jsbytes("aRG_MAX"),
     cst_PAGESIZE=caml_string_of_jsbytes("PAGESIZE"),
     cst_ARG_MAX=caml_string_of_jsbytes("ARG_MAX"),
     cst_AVPHYS_PAGES=caml_string_of_jsbytes("AVPHYS_PAGES"),
     cst_CHILD_MAX=caml_string_of_jsbytes("CHILD_MAX"),
     cst_CLK_TCK=caml_string_of_jsbytes("CLK_TCK"),
     cst_HOST_NAME_MAX=caml_string_of_jsbytes("HOST_NAME_MAX"),
     cst_IOV_MAX=caml_string_of_jsbytes("IOV_MAX"),
     cst_LOGIN_NAME_MAX=caml_string_of_jsbytes("LOGIN_NAME_MAX"),
     cst_OPEN_MAX=caml_string_of_jsbytes("OPEN_MAX"),
     cst_PHYS_PAGES=caml_string_of_jsbytes("PHYS_PAGES"),
     cst_POSIX_VERSION=caml_string_of_jsbytes("POSIX_VERSION"),
     cst_RE_DUP_MAX=caml_string_of_jsbytes("RE_DUP_MAX"),
     cst_STREAM_MAX=caml_string_of_jsbytes("STREAM_MAX"),
     cst_SYMLOOP_MAX=caml_string_of_jsbytes("SYMLOOP_MAX"),
     cst_TTY_NAME_MAX=caml_string_of_jsbytes("TTY_NAME_MAX"),
     cst_TZNAME_MAX=caml_string_of_jsbytes("TZNAME_MAX"),
     cst_pAGESIZE=caml_string_of_jsbytes("pAGESIZE"),
     cst_aVPHYS_PAGES=caml_string_of_jsbytes("aVPHYS_PAGES"),
     cst_cHILD_MAX=caml_string_of_jsbytes("cHILD_MAX"),
     cst_cLK_TCK=caml_string_of_jsbytes("cLK_TCK"),
     cst_hOST_NAME_MAX=caml_string_of_jsbytes("hOST_NAME_MAX"),
     cst_iOV_MAX=caml_string_of_jsbytes("iOV_MAX"),
     cst_lOGIN_NAME_MAX=caml_string_of_jsbytes("lOGIN_NAME_MAX"),
     cst_oPEN_MAX=caml_string_of_jsbytes("oPEN_MAX"),
     cst_pHYS_PAGES=caml_string_of_jsbytes("pHYS_PAGES"),
     cst_pOSIX_VERSION=caml_string_of_jsbytes("pOSIX_VERSION"),
     cst_rE_DUP_MAX=caml_string_of_jsbytes("rE_DUP_MAX"),
     cst_sTREAM_MAX=caml_string_of_jsbytes("sTREAM_MAX"),
     cst_sYMLOOP_MAX=caml_string_of_jsbytes("sYMLOOP_MAX"),
     cst_tTY_NAME_MAX=caml_string_of_jsbytes("tTY_NAME_MAX"),
     cst_tZNAME_MAX=caml_string_of_jsbytes("tZNAME_MAX"),
     cst_aRG_MAX$0=caml_string_of_jsbytes("aRG_MAX"),
     cst_PAGESIZE$0=caml_string_of_jsbytes("PAGESIZE"),
     cst_ARG_MAX$0=caml_string_of_jsbytes("ARG_MAX"),
     cst_AVPHYS_PAGES$0=caml_string_of_jsbytes("AVPHYS_PAGES"),
     cst_CHILD_MAX$0=caml_string_of_jsbytes("CHILD_MAX"),
     cst_CLK_TCK$0=caml_string_of_jsbytes("CLK_TCK"),
     cst_HOST_NAME_MAX$0=caml_string_of_jsbytes("HOST_NAME_MAX"),
     cst_IOV_MAX$0=caml_string_of_jsbytes("IOV_MAX"),
     cst_LOGIN_NAME_MAX$0=caml_string_of_jsbytes("LOGIN_NAME_MAX"),
     cst_OPEN_MAX$0=caml_string_of_jsbytes("OPEN_MAX"),
     cst_PHYS_PAGES$0=caml_string_of_jsbytes("PHYS_PAGES"),
     cst_POSIX_VERSION$0=caml_string_of_jsbytes("POSIX_VERSION"),
     cst_RE_DUP_MAX$0=caml_string_of_jsbytes("RE_DUP_MAX"),
     cst_STREAM_MAX$0=caml_string_of_jsbytes("STREAM_MAX"),
     cst_SYMLOOP_MAX$0=caml_string_of_jsbytes("SYMLOOP_MAX"),
     cst_TTY_NAME_MAX$0=caml_string_of_jsbytes("TTY_NAME_MAX"),
     cst_TZNAME_MAX$0=caml_string_of_jsbytes("TZNAME_MAX"),
     cst_pAGESIZE$0=caml_string_of_jsbytes("pAGESIZE"),
     cst_aVPHYS_PAGES$0=caml_string_of_jsbytes("aVPHYS_PAGES"),
     cst_cHILD_MAX$0=caml_string_of_jsbytes("cHILD_MAX"),
     cst_cLK_TCK$0=caml_string_of_jsbytes("cLK_TCK"),
     cst_hOST_NAME_MAX$0=caml_string_of_jsbytes("hOST_NAME_MAX"),
     cst_iOV_MAX$0=caml_string_of_jsbytes("iOV_MAX"),
     cst_lOGIN_NAME_MAX$0=caml_string_of_jsbytes("lOGIN_NAME_MAX"),
     cst_oPEN_MAX$0=caml_string_of_jsbytes("oPEN_MAX"),
     cst_pHYS_PAGES$0=caml_string_of_jsbytes("pHYS_PAGES"),
     cst_pOSIX_VERSION$0=caml_string_of_jsbytes("pOSIX_VERSION"),
     cst_rE_DUP_MAX$0=caml_string_of_jsbytes("rE_DUP_MAX"),
     cst_sTREAM_MAX$0=caml_string_of_jsbytes("sTREAM_MAX"),
     cst_sYMLOOP_MAX$0=caml_string_of_jsbytes("sYMLOOP_MAX"),
     cst_tTY_NAME_MAX$0=caml_string_of_jsbytes("tTY_NAME_MAX"),
     cst_tZNAME_MAX$0=caml_string_of_jsbytes("tZNAME_MAX"),
     cst_msgsnd=caml_string_of_jsbytes("msgsnd"),
     cst_idrss=caml_string_of_jsbytes("idrss"),
     cst_inblock=caml_string_of_jsbytes("inblock"),
     cst_isrss=caml_string_of_jsbytes("isrss"),
     cst_ixrss=caml_string_of_jsbytes("ixrss"),
     cst_majflt=caml_string_of_jsbytes("majflt"),
     cst_maxrss=caml_string_of_jsbytes("maxrss"),
     cst_minflt=caml_string_of_jsbytes("minflt"),
     cst_msgrcv=caml_string_of_jsbytes("msgrcv"),
     cst_nivcsw=caml_string_of_jsbytes("nivcsw"),
     cst_nsignals=caml_string_of_jsbytes("nsignals"),
     cst_nswap=caml_string_of_jsbytes("nswap"),
     cst_nvcsw=caml_string_of_jsbytes("nvcsw"),
     cst_oublock=caml_string_of_jsbytes("oublock"),
     cst_stime=caml_string_of_jsbytes("stime"),
     cst_utime=caml_string_of_jsbytes("utime"),
     cst_nivcsw$0=caml_string_of_jsbytes("nivcsw"),
     cst_nvcsw$0=caml_string_of_jsbytes("nvcsw"),
     cst_nsignals$0=caml_string_of_jsbytes("nsignals"),
     cst_msgrcv$0=caml_string_of_jsbytes("msgrcv"),
     cst_msgsnd$0=caml_string_of_jsbytes("msgsnd"),
     cst_oublock$0=caml_string_of_jsbytes("oublock"),
     cst_inblock$0=caml_string_of_jsbytes("inblock"),
     cst_nswap$0=caml_string_of_jsbytes("nswap"),
     cst_majflt$0=caml_string_of_jsbytes("majflt"),
     cst_minflt$0=caml_string_of_jsbytes("minflt"),
     cst_isrss$0=caml_string_of_jsbytes("isrss"),
     cst_idrss$0=caml_string_of_jsbytes("idrss"),
     cst_ixrss$0=caml_string_of_jsbytes("ixrss"),
     cst_maxrss$0=caml_string_of_jsbytes("maxrss"),
     cst_stime$0=caml_string_of_jsbytes("stime"),
     cst_utime$0=caml_string_of_jsbytes("utime"),
     cst_limit$3=caml_string_of_jsbytes("limit"),
     cst_resource$0=caml_string_of_jsbytes("resource"),
     cst_resource=caml_string_of_jsbytes("resource"),
     cst_core_file_size=caml_string_of_jsbytes("core_file_size"),
     cst_Core_file_size=caml_string_of_jsbytes("Core_file_size"),
     cst_Cpu_seconds=caml_string_of_jsbytes("Cpu_seconds"),
     cst_Data_segment=caml_string_of_jsbytes("Data_segment"),
     cst_File_size=caml_string_of_jsbytes("File_size"),
     cst_Nice=caml_string_of_jsbytes("Nice"),
     cst_Num_file_descriptors=caml_string_of_jsbytes("Num_file_descriptors"),
     cst_Stack=caml_string_of_jsbytes("Stack"),
     cst_Virtual_memory=caml_string_of_jsbytes("Virtual_memory"),
     cst_cpu_seconds=caml_string_of_jsbytes("cpu_seconds"),
     cst_data_segment=caml_string_of_jsbytes("data_segment"),
     cst_file_size=caml_string_of_jsbytes("file_size"),
     cst_nice=caml_string_of_jsbytes("nice"),
     cst_num_file_descriptors=caml_string_of_jsbytes("num_file_descriptors"),
     cst_stack=caml_string_of_jsbytes("stack"),
     cst_virtual_memory=caml_string_of_jsbytes("virtual_memory"),
     cst_core_file_size$0=caml_string_of_jsbytes("core_file_size"),
     cst_Core_file_size$0=caml_string_of_jsbytes("Core_file_size"),
     cst_Cpu_seconds$0=caml_string_of_jsbytes("Cpu_seconds"),
     cst_Data_segment$0=caml_string_of_jsbytes("Data_segment"),
     cst_File_size$0=caml_string_of_jsbytes("File_size"),
     cst_Nice$0=caml_string_of_jsbytes("Nice"),
     cst_Num_file_descriptors$0=caml_string_of_jsbytes("Num_file_descriptors"),
     cst_Stack$0=caml_string_of_jsbytes("Stack"),
     cst_Virtual_memory$0=caml_string_of_jsbytes("Virtual_memory"),
     cst_cpu_seconds$0=caml_string_of_jsbytes("cpu_seconds"),
     cst_data_segment$0=caml_string_of_jsbytes("data_segment"),
     cst_file_size$0=caml_string_of_jsbytes("file_size"),
     cst_nice$0=caml_string_of_jsbytes("nice"),
     cst_num_file_descriptors$0=caml_string_of_jsbytes("num_file_descriptors"),
     cst_stack$0=caml_string_of_jsbytes("stack"),
     cst_virtual_memory$0=caml_string_of_jsbytes("virtual_memory"),
     cst_cur=caml_string_of_jsbytes("cur"),
     cst_max=caml_string_of_jsbytes("max"),
     cst_max$0=caml_string_of_jsbytes("max"),
     cst_cur$0=caml_string_of_jsbytes("cur"),
     cst_Infinity$1=caml_string_of_jsbytes("Infinity"),
     cst_Limit$1=caml_string_of_jsbytes("Limit"),
     cst_infinity$1=caml_string_of_jsbytes("infinity"),
     cst_limit$1=caml_string_of_jsbytes("limit"),
     cst_Infinity$2=caml_string_of_jsbytes("Infinity"),
     cst_Limit$2=caml_string_of_jsbytes("Limit"),
     cst_infinity$2=caml_string_of_jsbytes("infinity"),
     cst_limit$2=caml_string_of_jsbytes("limit"),
     cst_Infinity=caml_string_of_jsbytes("Infinity"),
     cst_Limit=caml_string_of_jsbytes("Limit"),
     cst_infinity=caml_string_of_jsbytes("infinity"),
     cst_limit=caml_string_of_jsbytes("limit"),
     cst_Infinity$0=caml_string_of_jsbytes("Infinity"),
     cst_Limit$0=caml_string_of_jsbytes("Limit"),
     cst_infinity$0=caml_string_of_jsbytes("infinity"),
     cst_limit$0=caml_string_of_jsbytes("limit"),
     loc$0=caml_string_of_jsbytes("write_assume_fd_is_nonblocking"),
     loc=caml_string_of_jsbytes("read_assume_fd_is_nonblocking"),
     cst_pos_0=caml_string_of_jsbytes(": pos < 0"),
     cst_len_0=caml_string_of_jsbytes(": len < 0"),
     cst$11=caml_string_of_jsbytes("_"),
     cst_Core_Core_unix=caml_string_of_jsbytes("Core__Core_unix"),
     cst_core$20=caml_string_of_jsbytes("core"),
     cst_src_core_unix_ml=caml_string_of_jsbytes("src/core_unix.ml"),
     cst$10=caml_string_of_jsbytes(""),
     cst_core$21=caml_string_of_jsbytes("core"),
     tp_loc$2=caml_string_of_jsbytes("src/core_unix.ml.RLimit.Limit.t"),
     tp_loc$3=caml_string_of_jsbytes("src/core_unix.ml.RLimit.limit"),
     tp_loc$4=caml_string_of_jsbytes("src/core_unix.ml.RLimit.t"),
     tp_loc$5=caml_string_of_jsbytes("src/core_unix.ml.RLimit.resource"),
     virtual_memory=[0,6],
     cst_RLIMIT_NICE_is_not_support=
      caml_string_of_jsbytes("RLIMIT_NICE is not supported on this system"),
     tp_loc$6=caml_string_of_jsbytes("src/core_unix.ml.Resource_usage.t"),
     names=
      caml_list_of_js_array
       ([caml_string_of_jsbytes("utime"),
         caml_string_of_jsbytes("stime"),
         caml_string_of_jsbytes("maxrss"),
         caml_string_of_jsbytes("ixrss"),
         caml_string_of_jsbytes("idrss"),
         caml_string_of_jsbytes("isrss"),
         caml_string_of_jsbytes("minflt"),
         caml_string_of_jsbytes("majflt"),
         caml_string_of_jsbytes("nswap"),
         caml_string_of_jsbytes("inblock"),
         caml_string_of_jsbytes("oublock"),
         caml_string_of_jsbytes("msgsnd"),
         caml_string_of_jsbytes("msgrcv"),
         caml_string_of_jsbytes("nsignals"),
         caml_string_of_jsbytes("nvcsw"),
         caml_string_of_jsbytes("nivcsw")]),
     cst_nivcsw$1=caml_string_of_jsbytes("nivcsw"),
     cst_nvcsw$1=caml_string_of_jsbytes("nvcsw"),
     cst_nsignals$1=caml_string_of_jsbytes("nsignals"),
     cst_msgrcv$1=caml_string_of_jsbytes("msgrcv"),
     cst_msgsnd$1=caml_string_of_jsbytes("msgsnd"),
     cst_oublock$1=caml_string_of_jsbytes("oublock"),
     cst_inblock$1=caml_string_of_jsbytes("inblock"),
     cst_nswap$1=caml_string_of_jsbytes("nswap"),
     cst_majflt$1=caml_string_of_jsbytes("majflt"),
     cst_minflt$1=caml_string_of_jsbytes("minflt"),
     cst_isrss$1=caml_string_of_jsbytes("isrss"),
     cst_idrss$1=caml_string_of_jsbytes("idrss"),
     cst_ixrss$1=caml_string_of_jsbytes("ixrss"),
     cst_maxrss$1=caml_string_of_jsbytes("maxrss"),
     cst_stime$1=caml_string_of_jsbytes("stime"),
     cst_utime$1=caml_string_of_jsbytes("utime"),
     tp_loc$7=caml_string_of_jsbytes("src/core_unix.ml.sysconf"),
     tp_loc$8=caml_string_of_jsbytes("src/core_unix.ml.IOVec.t"),
     string_kind=caml_string_of_jsbytes(""),
     tp_loc$9=caml_string_of_jsbytes("src/core_unix.ml.Utsname.t"),
     tp_loc$10=caml_string_of_jsbytes("src/core_unix.ml.Scheduler.Policy.t"),
     tp_loc$11=caml_string_of_jsbytes("src/core_unix.ml.Scheduler.Policy.t"),
     tp_loc$12=caml_string_of_jsbytes("src/core_unix.ml.Mman.Mcl_flags.t"),
     tp_loc$13=caml_string_of_jsbytes("src/core_unix.ml.Error.t"),
     tp_loc$14=caml_string_of_jsbytes("src/core_unix.ml.Exit.error"),
     tp_loc$15=caml_string_of_jsbytes("src/core_unix.ml.Exit.error"),
     cst_Core_Core_unix_Exit_Exit_c=
      caml_string_of_jsbytes
       ("Core__Core_unix.Exit.Exit_code_must_be_nonnegative"),
     tp_loc$16=caml_string_of_jsbytes("src/core_unix.ml.Exit_or_signal.error"),
     tp_loc$17=caml_string_of_jsbytes("src/core_unix.ml.Exit_or_signal.error"),
     cst_Core_Core_unix_Exit_or_sig=
      caml_string_of_jsbytes
       ("Core__Core_unix.Exit_or_signal.Of_unix_got_invalid_status"),
     tp_loc$18=
      caml_string_of_jsbytes("src/core_unix.ml.Exit_or_signal_or_stop.error"),
     tp_loc$19=
      caml_string_of_jsbytes("src/core_unix.ml.Exit_or_signal_or_stop.error"),
     tp_loc$20=caml_string_of_jsbytes("src/core_unix.ml.Env.t"),
     tp_loc$21=caml_string_of_jsbytes("src/core_unix.ml.Env.t"),
     cst_Core_Core_unix_Fork_return=
      caml_string_of_jsbytes("Core__Core_unix.Fork_returned_negative_result"),
     tp_loc$22=caml_string_of_jsbytes("src/core_unix.ml.wait_on"),
     tp_loc$23=caml_string_of_jsbytes("src/core_unix.ml.wait_on"),
     tp_loc$24=caml_string_of_jsbytes("src/core_unix.ml.open_flag"),
     tp_loc$25=caml_string_of_jsbytes("src/core_unix.ml.seek_command"),
     tp_loc$26=caml_string_of_jsbytes("src/core_unix.ml.file_kind"),
     tp_loc$27=caml_string_of_jsbytes("src/core_unix.ml.Native_file.stats"),
     tp_loc$28=caml_string_of_jsbytes("src/core_unix.ml.lock_command"),
     tp_loc$29=caml_string_of_jsbytes("src/core_unix.ml.stats"),
     cst_trunc=caml_string_of_jsbytes("trunc"),
     cst_sync=caml_string_of_jsbytes("sync"),
     cst_rsync=caml_string_of_jsbytes("rsync"),
     cst_nonblock=caml_string_of_jsbytes("nonblock"),
     cst_nofollow=caml_string_of_jsbytes("nofollow"),
     cst_noctty=caml_string_of_jsbytes("noctty"),
     cst_noatime=caml_string_of_jsbytes("noatime"),
     cst_excl=caml_string_of_jsbytes("excl"),
     cst_dsync=caml_string_of_jsbytes("dsync"),
     cst_directory=caml_string_of_jsbytes("directory"),
     cst_direct=caml_string_of_jsbytes("direct"),
     cst_creat=caml_string_of_jsbytes("creat"),
     cst_cloexec=caml_string_of_jsbytes("cloexec"),
     cst_async=caml_string_of_jsbytes("async"),
     cst_append=caml_string_of_jsbytes("append"),
     cst_wronly=caml_string_of_jsbytes("wronly"),
     cst_rdwr=caml_string_of_jsbytes("rdwr"),
     cst_rdonly=caml_string_of_jsbytes("rdonly"),
     empty$1=[0,0,0,0],
     tp_loc$30=caml_string_of_jsbytes("src/core_unix.ml.process_times"),
     tp_loc$31=caml_string_of_jsbytes("src/core_unix.ml.tm"),
     tp_loc$32=caml_string_of_jsbytes("src/core_unix.ml.interval_timer"),
     tp_loc$33=
      caml_string_of_jsbytes("src/core_unix.ml.interval_timer_status"),
     names$0=
      [0,
       caml_string_of_jsbytes("name"),
       [0,
        caml_string_of_jsbytes("passwd"),
        [0,
         caml_string_of_jsbytes("uid"),
         [0,
          caml_string_of_jsbytes("gid"),
          [0,
           caml_string_of_jsbytes("gecos"),
           [0,
            caml_string_of_jsbytes("dir"),
            [0,caml_string_of_jsbytes("shell"),0]]]]]]],
     cst_shell=caml_string_of_jsbytes("shell"),
     cst_dir=caml_string_of_jsbytes("dir"),
     cst_gecos=caml_string_of_jsbytes("gecos"),
     cst_gid$1=caml_string_of_jsbytes("gid"),
     cst_uid$1=caml_string_of_jsbytes("uid"),
     cst_passwd=caml_string_of_jsbytes("passwd"),
     cst_name$0=caml_string_of_jsbytes("name"),
     tp_loc$34=caml_string_of_jsbytes("src/core_unix.ml.Passwd.t"),
     cst_Core_Core_unix_Passwd_Getb=
      caml_string_of_jsbytes("Core__Core_unix.Passwd.Getbyname"),
     cst_Core_Core_unix_Passwd_Getb$0=
      caml_string_of_jsbytes("Core__Core_unix.Passwd.Getbyuid"),
     cst_Core_Core_unix_Group_Getby=
      caml_string_of_jsbytes("Core__Core_unix.Group.Getbyname"),
     cst_Core_Core_unix_Group_Getby$0=
      caml_string_of_jsbytes("Core__Core_unix.Group.Getbygid"),
     cst_Inet6=caml_string_of_jsbytes("Inet6"),
     cst_Inet=caml_string_of_jsbytes("Inet"),
     cst_Unix$0=caml_string_of_jsbytes("Unix"),
     cst_src_core_unix_ml_2060_11=
      caml_string_of_jsbytes("src/core_unix.ml:2060:11"),
     cst_t$3=caml_string_of_jsbytes("t"),
     cst_src_core_unix_ml_2060_2=
      caml_string_of_jsbytes("src/core_unix.ml:2060:2"),
     cst_t$4=caml_string_of_jsbytes("t"),
     tp_loc$35=caml_string_of_jsbytes("src/core_unix.ml.Protocol_family.t"),
     tp_loc$36=caml_string_of_jsbytes("src/core_unix.ml.Protocol_family.t"),
     cst_t$5=caml_string_of_jsbytes("t"),
     cst_src_core_unix_ml_2098_6=
      caml_string_of_jsbytes("src/core_unix.ml:2098:6"),
     cst_t$6=caml_string_of_jsbytes("t"),
     cst_2001_db8_1=caml_string_of_jsbytes("\x0b2001:db8::1"),
     cst_2001_db8_1$0=caml_string_of_jsbytes("2001:db8::1"),
     cst_2001_db8_1$1=caml_string_of_jsbytes("2001:db8::1"),
     cst_2001_db8_1$2=caml_string_of_jsbytes("\x0b2001:db8::1"),
     cst_2001_db8_1$3=caml_string_of_jsbytes("2001:db8::1"),
     cst_2001_DB8_1=caml_string_of_jsbytes("2001:DB8::1"),
     cst_2001_db8_1_0_0_1=caml_string_of_jsbytes("\x112001:db8::1:0:0:1"),
     cst_2001_db8_1_0_0_1$0=caml_string_of_jsbytes("2001:db8::1:0:0:1"),
     cst_2001_db8_1_0_0_1$1=caml_string_of_jsbytes("2001:db8::1:0:0:1"),
     cst_2001_db8_1_0_0_1$2=caml_string_of_jsbytes("\x112001:db8::1:0:0:1"),
     cst_2001_db8_1_0_0_1$3=caml_string_of_jsbytes("2001:db8::1:0:0:1"),
     cst_2001_db8_0_0_1_1=caml_string_of_jsbytes("2001:db8:0:0:1::1"),
     cst_2001_db8_1_0_0_1$4=caml_string_of_jsbytes("\x112001:db8::1:0:0:1"),
     cst_2001_db8_1_0_0_1$5=caml_string_of_jsbytes("2001:db8::1:0:0:1"),
     cst_2001_db8_0_0_1_0_0_1=caml_string_of_jsbytes("2001:db8:0:0:1:0:0:1"),
     cst_2001_db8_0_1_1_1_1_1=
      caml_string_of_jsbytes("\x142001:db8:0:1:1:1:1:1"),
     cst_2001_db8_0_1_1_1_1_1$0=caml_string_of_jsbytes("2001:db8:0:1:1:1:1:1"),
     cst_2001_db8_0_1_1_1_1_1$1=caml_string_of_jsbytes("2001:db8:0:1:1:1:1:1"),
     cst_2001_db8_0_1_1_1_1_1$2=
      caml_string_of_jsbytes("\x142001:db8:0:1:1:1:1:1"),
     cst_2001_db8_0_1_1_1_1_1$3=caml_string_of_jsbytes("2001:db8:0:1:1:1:1:1"),
     cst_2001_db8_1_1_1_1_1=caml_string_of_jsbytes("2001:db8::1:1:1:1:1"),
     cst_2001_db8_0_1_1_1_1_1$4=
      caml_string_of_jsbytes("\x142001:db8:0:1:1:1:1:1"),
     cst_2001_db8_0_1_1_1_1_1$5=caml_string_of_jsbytes("2001:db8:0:1:1:1:1:1"),
     cst_2001_db8_0000_1_1_1_1_1=
      caml_string_of_jsbytes("2001:db8:0000:1:1:1:1:1"),
     cst_2001_db8_2_1=caml_string_of_jsbytes("\r2001:db8::2:1"),
     cst_2001_db8_2_1$0=caml_string_of_jsbytes("2001:db8::2:1"),
     cst_2001_db8_2_1$1=caml_string_of_jsbytes("2001:db8::2:1"),
     cst_2001_db8_1$4=caml_string_of_jsbytes("\x0b2001:db8::1"),
     cst_2001_db8_1$5=caml_string_of_jsbytes("2001:db8::1"),
     cst_2001_db8_1$6=caml_string_of_jsbytes("2001:db8::1"),
     cst_2001_db8_1$7=caml_string_of_jsbytes("\x0b2001:db8::1"),
     cst_2001_db8_1$8=caml_string_of_jsbytes("2001:db8::1"),
     cst_2001_0db8_0001=caml_string_of_jsbytes("2001:0db8::0001"),
     cst_ffff_192_0_2_128=caml_string_of_jsbytes("\x12::ffff:192.0.2.128"),
     cst_ffff_192_0_2_128$0=caml_string_of_jsbytes("::ffff:192.0.2.128"),
     cst_ffff_192_0_2_128$1=caml_string_of_jsbytes("::ffff:192.0.2.128"),
     cst_ffff_192_0_2_128$2=caml_string_of_jsbytes("\x12::ffff:192.0.2.128"),
     cst_ffff_192_0_2_128$3=caml_string_of_jsbytes("::ffff:192.0.2.128"),
     cst_ffff_c000_0280=caml_string_of_jsbytes("::ffff:c000:0280"),
     cst$17=caml_string_of_jsbytes("\x02::"),
     cst$18=caml_string_of_jsbytes("::"),
     cst$19=caml_string_of_jsbytes("::"),
     cst$20=caml_string_of_jsbytes("\x02::"),
     cst$21=caml_string_of_jsbytes("::"),
     cst_0_0_0_0_0_0_0_0=caml_string_of_jsbytes("0:0:0:0:0:0:0:0"),
     cst_1=caml_string_of_jsbytes("\x03::1"),
     cst_1$0=caml_string_of_jsbytes("::1"),
     cst_1$1=caml_string_of_jsbytes("::1"),
     cst_1$2=caml_string_of_jsbytes("\x03::1"),
     cst_1$3=caml_string_of_jsbytes("::1"),
     cst_0_0_0_0_0_0_0_1=caml_string_of_jsbytes("0:0:0:0:0:0:0:1"),
     cst_2001_db8_85a3_8a2e_370_733=
      caml_string_of_jsbytes("\x1c2001:db8:85a3::8a2e:370:7334"),
     cst_2001_db8_85a3_8a2e_370_733$0=
      caml_string_of_jsbytes("2001:db8:85a3::8a2e:370:7334"),
     cst_2001_db8_85a3_8a2e_370_733$1=
      caml_string_of_jsbytes("2001:db8:85a3::8a2e:370:7334"),
     cst_2001_db8_85a3_8a2e_370_733$2=
      caml_string_of_jsbytes("\x1c2001:db8:85a3::8a2e:370:7334"),
     cst_2001_db8_85a3_8a2e_370_733$3=
      caml_string_of_jsbytes("2001:db8:85a3::8a2e:370:7334"),
     cst_2001_db8_85a3_0_0_8a2e_370=
      caml_string_of_jsbytes("2001:db8:85a3:0:0:8a2e:370:7334"),
     cst_2001_db8_85a3_8a2e_370_733$4=
      caml_string_of_jsbytes("\x1c2001:db8:85a3::8a2e:370:7334"),
     cst_2001_db8_85a3_8a2e_370_733$5=
      caml_string_of_jsbytes("2001:db8:85a3::8a2e:370:7334"),
     cst_2001_0db8_85a3_0000_0000_8=
      caml_string_of_jsbytes("2001:0db8:85a3:0000:0000:8a2e:0370:7334"),
     cst_255_255_255_255=caml_string_of_jsbytes("\x0f255.255.255.255"),
     cst_255_255_255_255$0=caml_string_of_jsbytes("255.255.255.255"),
     cst_255_255_255_255$1=caml_string_of_jsbytes("255.255.255.255"),
     cst_192_168_1_101=caml_string_of_jsbytes("\r192.168.1.101"),
     cst_192_168_1_101$0=caml_string_of_jsbytes("192.168.1.101"),
     cst_192_168_1_101$1=caml_string_of_jsbytes("192.168.1.101"),
     cst_127_0_0_1=caml_string_of_jsbytes("\t127.0.0.1"),
     cst_127_0_0_1$0=caml_string_of_jsbytes("127.0.0.1"),
     cst_127_0_0_1$1=caml_string_of_jsbytes("127.0.0.1"),
     cst_10_0_0_0=caml_string_of_jsbytes("\b10.0.0.0"),
     cst_10_0_0_0$0=caml_string_of_jsbytes("10.0.0.0"),
     cst_10_0_0_0$1=caml_string_of_jsbytes("10.0.0.0"),
     cst_0_0_0_0=caml_string_of_jsbytes("\x070.0.0.0"),
     cst_0_0_0_0$0=caml_string_of_jsbytes("0.0.0.0"),
     cst_0_0_0_0$1=caml_string_of_jsbytes("0.0.0.0"),
     cst_Core_Core_unix_Host_Getbyn=
      caml_string_of_jsbytes("Core__Core_unix.Host.Getbyname"),
     cst_Core_Core_unix_Host_Getbya=
      caml_string_of_jsbytes("Core__Core_unix.Host.Getbyaddr"),
     cst_Core_Core_unix_Inet_addr_G=
      caml_string_of_jsbytes("Core__Core_unix.Inet_addr.Get_inet_addr"),
     cst_bits=caml_string_of_jsbytes("bits"),
     cst_address=caml_string_of_jsbytes("address"),
     cst_t$7=caml_string_of_jsbytes("t"),
     cst_src_core_unix_ml_2243_8=
      caml_string_of_jsbytes("src/core_unix.ml:2243:8"),
     cst_t$8=caml_string_of_jsbytes("t"),
     cst_224_0_0_0_4=caml_string_of_jsbytes("224.0.0.0/4"),
     module_name=caml_string_of_jsbytes("Core.Unix.Cidr"),
     tp_loc$37=caml_string_of_jsbytes("src/core_unix.ml.Protocol.t"),
     cst_Core_Core_unix_Protocol_Ge=
      caml_string_of_jsbytes("Core__Core_unix.Protocol.Getbyname"),
     cst_Core_Core_unix_Protocol_Ge$0=
      caml_string_of_jsbytes("Core__Core_unix.Protocol.Getbynumber"),
     tp_loc$38=caml_string_of_jsbytes("src/core_unix.ml.Service.t"),
     cst_Core_Core_unix_Service_Get=
      caml_string_of_jsbytes("Core__Core_unix.Service.Getbyname"),
     cst_Core_Core_unix_Service_Get$0=
      caml_string_of_jsbytes("Core__Core_unix.Service.Getbyport"),
     tp_loc$39=caml_string_of_jsbytes("src/core_unix.ml.socket_domain"),
     cst_socket_domain=caml_string_of_jsbytes("socket_domain"),
     cst_src_core_unix_ml_2403_0=
      caml_string_of_jsbytes("src/core_unix.ml:2403:0"),
     cst_socket_domain$0=caml_string_of_jsbytes("socket_domain"),
     tp_loc$40=caml_string_of_jsbytes("src/core_unix.ml.socket_type"),
     cst_socket_type=caml_string_of_jsbytes("socket_type"),
     cst_src_core_unix_ml_2409_0=
      caml_string_of_jsbytes("src/core_unix.ml:2409:0"),
     cst_socket_type$0=caml_string_of_jsbytes("socket_type"),
     cst_ADDR_INET=caml_string_of_jsbytes("ADDR_INET"),
     cst_ADDR_UNIX=caml_string_of_jsbytes("ADDR_UNIX"),
     cst_sockaddr=caml_string_of_jsbytes("sockaddr"),
     cst_src_core_unix_ml_2416_0=
      caml_string_of_jsbytes("src/core_unix.ml:2416:0"),
     cst_sockaddr$0=caml_string_of_jsbytes("sockaddr"),
     tp_loc$41=
      caml_string_of_jsbytes("src/core_unix.ml.sockaddr_blocking_sexp"),
     cst_ADDR_INET$2=caml_string_of_jsbytes("ADDR_INET"),
     cst_ADDR_UNIX$2=caml_string_of_jsbytes("ADDR_UNIX"),
     cst_sockaddr_blocking_sexp=
      caml_string_of_jsbytes("sockaddr_blocking_sexp"),
     cst_src_core_unix_ml_2421_0=
      caml_string_of_jsbytes("src/core_unix.ml:2421:0"),
     cst_sockaddr_blocking_sexp$0=
      caml_string_of_jsbytes("sockaddr_blocking_sexp"),
     tp_loc$42=caml_string_of_jsbytes("src/core_unix.ml.shutdown_command"),
     tp_loc$43=caml_string_of_jsbytes("src/core_unix.ml.msg_flag"),
     tp_loc$44=caml_string_of_jsbytes("src/core_unix.ml.socket_bool_option"),
     tp_loc$45=caml_string_of_jsbytes("src/core_unix.ml.socket_int_option"),
     tp_loc$46=caml_string_of_jsbytes("src/core_unix.ml.socket_float_option"),
     tp_loc$47=
      caml_string_of_jsbytes("src/core_unix.ml.addr_info_blocking_sexp"),
     tp_loc$48=caml_string_of_jsbytes("src/core_unix.ml.getaddrinfo_option"),
     tp_loc$49=caml_string_of_jsbytes("src/core_unix.ml.name_info"),
     tp_loc$50=caml_string_of_jsbytes("src/core_unix.ml.getnameinfo_option"),
     tp_loc$51=
      caml_string_of_jsbytes("src/core_unix.ml.Terminal_io.flush_queue"),
     tp_loc$52=
      caml_string_of_jsbytes("src/core_unix.ml.Terminal_io.flow_action"),
     cst_t$9=caml_string_of_jsbytes("t"),
     cst_src_core_unix_ml_2840_4=
      caml_string_of_jsbytes("src/core_unix.ml:2840:4"),
     cst_t$10=caml_string_of_jsbytes("t"),
     tp_loc$53=caml_string_of_jsbytes("src/core_unix.ml.Ifaddr.Flag.T.t"),
     all=caml_list_of_js_array([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]),
     names$1=
      [0,
       caml_string_of_jsbytes("name"),
       [0,
        caml_string_of_jsbytes("family"),
        [0,
         caml_string_of_jsbytes("flags"),
         [0,
          caml_string_of_jsbytes("address"),
          [0,
           caml_string_of_jsbytes("netmask"),
           [0,caml_string_of_jsbytes("broadcast_or_destination"),0]]]]]],
     cst_broadcast_or_destination=
      caml_string_of_jsbytes("broadcast_or_destination"),
     cst_netmask=caml_string_of_jsbytes("netmask"),
     cst_address$0=caml_string_of_jsbytes("address"),
     cst_flags=caml_string_of_jsbytes("flags"),
     cst_family=caml_string_of_jsbytes("family"),
     cst_name$7=caml_string_of_jsbytes("name"),
     cst_core$22=caml_string_of_jsbytes("core"),
     cst_Core_Core_unix$0=caml_string_of_jsbytes("Core__Core_unix"),
     cst_Core_Core_time_intf=caml_string_of_jsbytes("Core__Core_time_intf"),
     cst_core$23=caml_string_of_jsbytes("core"),
     cst_src_core_time_intf_ml=caml_string_of_jsbytes("src/core_time_intf.ml"),
     cst$23=caml_string_of_jsbytes(""),
     cst_core$24=caml_string_of_jsbytes("core"),
     cst_core$25=caml_string_of_jsbytes("core"),
     cst_Core_Core_time_intf$0=caml_string_of_jsbytes("Core__Core_time_intf"),
     cst_t$15=caml_string_of_jsbytes("t"),
     cst_src_core_time_ml_316_8=
      caml_string_of_jsbytes("src/core_time.ml:316:8"),
     cst_t$16=caml_string_of_jsbytes("t"),
     cst$28=caml_string_of_jsbytes(" "),
     cst_Time_t_of_sexp=caml_string_of_jsbytes("Time.t_of_sexp"),
     cst$27=caml_string_of_jsbytes(":"),
     cst$26=caml_string_of_jsbytes("-"),
     cst$25=caml_string_of_jsbytes(" "),
     cst_src_core_time_ml_Make_Ofda=
      caml_string_of_jsbytes("src/core_time.ml.Make.Ofday.Zoned.t"),
     cst_zone=caml_string_of_jsbytes("zone"),
     cst_ofday=caml_string_of_jsbytes("ofday"),
     cst_t$11=caml_string_of_jsbytes("t"),
     cst_src_core_time_ml_76_6=caml_string_of_jsbytes("src/core_time.ml:76:6"),
     cst_t$12=caml_string_of_jsbytes("t"),
     tp_loc$54=
      caml_string_of_jsbytes("src/core_time.ml.Make.Ofday.Zoned.sexp_repr"),
     cst_t$13=caml_string_of_jsbytes("t"),
     cst_src_core_time_ml_117_8=
      caml_string_of_jsbytes("src/core_time.ml:117:8"),
     cst_t$14=caml_string_of_jsbytes("t"),
     module_name$0=caml_string_of_jsbytes("Core.Time.Ofday.Zoned"),
     cst_Core_Core_time_Make_Time0_=
      caml_string_of_jsbytes
       ("Core__Core_time.Make(Time0)(Time).Time_string_not_absolute"),
     module_name$1=caml_string_of_jsbytes("Core.Time"),
     cst_src_core_time_ml$0=caml_string_of_jsbytes("src/core_time.ml"),
     cst_Set_equal_Set_of_list_epoc=
      caml_string_of_jsbytes
       (": <<Set.equal (Set.of_list [epoch])   (Set.t_of_s[...]>>"),
     cst_t$17=caml_string_of_jsbytes("t"),
     cst_src_core_time_ml_354_6=
      caml_string_of_jsbytes("src/core_time.ml:354:6"),
     cst_t$18=caml_string_of_jsbytes("t"),
     cst_Core_Core_time=caml_string_of_jsbytes("Core__Core_time"),
     cst_core$26=caml_string_of_jsbytes("core"),
     cst_src_core_time_ml=caml_string_of_jsbytes("src/core_time.ml"),
     cst$24=caml_string_of_jsbytes(""),
     cst_core$27=caml_string_of_jsbytes("core"),
     cst_core$28=caml_string_of_jsbytes("core"),
     cst_Core_Core_time$0=caml_string_of_jsbytes("Core__Core_time"),
     cst_src_core_time_float_ml_Sta=
      caml_string_of_jsbytes
       ("src/core_time_float.ml.Stable.Ofday.Zoned.V1.Bin_repr.t"),
     cst_Core_Core_time_float=caml_string_of_jsbytes("Core__Core_time_float"),
     cst_core$29=caml_string_of_jsbytes("core"),
     cst_src_core_time_float_ml=
      caml_string_of_jsbytes("src/core_time_float.ml"),
     cst$29=caml_string_of_jsbytes(""),
     cst_core$30=caml_string_of_jsbytes("core"),
     cst_t$19=caml_string_of_jsbytes("t"),
     cst_src_core_time_float_ml_9_4=
      caml_string_of_jsbytes("src/core_time_float.ml:9:4"),
     cst_t$20=caml_string_of_jsbytes("t"),
     cst_zone$0=caml_string_of_jsbytes("zone"),
     cst_ofday$0=caml_string_of_jsbytes("ofday"),
     cst_t$21=caml_string_of_jsbytes("t"),
     cst_src_core_time_float_ml_100=
      caml_string_of_jsbytes("src/core_time_float.ml:100:10"),
     cst_t$22=caml_string_of_jsbytes("t"),
     tp_loc$55=
      caml_string_of_jsbytes
       ("src/core_time_float.ml.Stable.Ofday.Zoned.V1.sexp_repr"),
     cst_core$31=caml_string_of_jsbytes("core"),
     cst_Core_Core_time_float$0=
      caml_string_of_jsbytes("Core__Core_time_float"),
     cst_Core_Import_time=caml_string_of_jsbytes("Core__Import_time"),
     cst_core$32=caml_string_of_jsbytes("core"),
     cst_src_import_time_ml=caml_string_of_jsbytes("src/import_time.ml"),
     cst$30=caml_string_of_jsbytes(""),
     cst_core$33=caml_string_of_jsbytes("core"),
     cst_core$34=caml_string_of_jsbytes("core"),
     cst_Core_Import_time$0=caml_string_of_jsbytes("Core__Import_time"),
     cst_Core_Time_ns_intf=caml_string_of_jsbytes("Core__Time_ns_intf"),
     cst_core$35=caml_string_of_jsbytes("core"),
     cst_src_time_ns_intf_ml=caml_string_of_jsbytes("src/time_ns_intf.ml"),
     cst$31=caml_string_of_jsbytes(""),
     cst_core$36=caml_string_of_jsbytes("core"),
     cst_core$37=caml_string_of_jsbytes("core"),
     cst_Core_Time_ns_intf$0=caml_string_of_jsbytes("Core__Time_ns_intf"),
     cst_Core_Time_common=caml_string_of_jsbytes("Core__Time_common"),
     cst_core$38=caml_string_of_jsbytes("core"),
     cst_src_time_common_ml=caml_string_of_jsbytes("src/time_common.ml"),
     cst$32=caml_string_of_jsbytes(""),
     cst_core$39=caml_string_of_jsbytes("core"),
     cst_core$40=caml_string_of_jsbytes("core"),
     cst_Core_Time_common$0=caml_string_of_jsbytes("Core__Time_common"),
     cst$35=caml_string_of_jsbytes(" "),
     cst_Time_t_of_sexp$0=caml_string_of_jsbytes("Time.t_of_sexp"),
     cst_src_core_time_ns_ml_Ofday_$0=
      caml_string_of_jsbytes
       ("src/core_time_ns.ml.Ofday.Zoned.Stable.V1.Bin_repr.t"),
     cst$34=caml_string_of_jsbytes(" "),
     cst_src_core_time_ns_ml_Ofday_=
      caml_string_of_jsbytes("src/core_time_ns.ml.Ofday.Zoned.t"),
     cst_Time_ns_Span_Option_Stable=
      caml_string_of_jsbytes
       ("Time_ns.Span.Option.Stable.V2.t_of_sexp: sexp must be a List of 0-1 Atom"),
     cst_Span_Option_value_exn_none=
      caml_string_of_jsbytes("Span.Option.value_exn none"),
     cst_src_core_time_ns_ml_64_29=
      caml_string_of_jsbytes("src/core_time_ns.ml:64:29"),
     cst_Span_Option_some_value_not=
      caml_string_of_jsbytes("Span.Option.some value not representable"),
     cst_src_core_time_ns_ml_51_24=
      caml_string_of_jsbytes("src/core_time_ns.ml:51:24"),
     cst_Core_Core_time_ns=caml_string_of_jsbytes("Core__Core_time_ns"),
     cst_core$41=caml_string_of_jsbytes("core"),
     cst_src_core_time_ns_ml=caml_string_of_jsbytes("src/core_time_ns.ml"),
     cst$33=caml_string_of_jsbytes(""),
     cst_core$42=caml_string_of_jsbytes("core"),
     cst_t$23=caml_string_of_jsbytes("t"),
     cst_src_core_time_ns_ml_18_8=
      caml_string_of_jsbytes("src/core_time_ns.ml:18:8"),
     cst_t$24=caml_string_of_jsbytes("t"),
     cst_t$25=caml_string_of_jsbytes("t"),
     cst_src_core_time_ns_ml_43_4=
      caml_string_of_jsbytes("src/core_time_ns.ml:43:4"),
     cst_t$26=caml_string_of_jsbytes("t"),
     name$4=caml_string_of_jsbytes("src/core_time_ns.ml.Span.Option.t"),
     cst_t$27=caml_string_of_jsbytes("t"),
     cst_src_core_time_ns_ml_107_10=
      caml_string_of_jsbytes("src/core_time_ns.ml:107:10"),
     cst_t$28=caml_string_of_jsbytes("t"),
     cst_t$29=caml_string_of_jsbytes("t"),
     cst_src_core_time_ns_ml_125_10=
      caml_string_of_jsbytes("src/core_time_ns.ml:125:10"),
     cst_t$30=caml_string_of_jsbytes("t"),
     cst_t$31=caml_string_of_jsbytes("t"),
     cst_src_core_time_ns_ml_156_8=
      caml_string_of_jsbytes("src/core_time_ns.ml:156:8"),
     cst_t$32=caml_string_of_jsbytes("t"),
     module_name$2=caml_string_of_jsbytes("Core.Time_ns.Span.Option"),
     cst_Core_Core_time_ns_Time_str=
      caml_string_of_jsbytes("Core__Core_time_ns.Time_string_not_absolute"),
     cst_zone$1=caml_string_of_jsbytes("zone"),
     cst_ofday$1=caml_string_of_jsbytes("ofday"),
     cst_t$33=caml_string_of_jsbytes("t"),
     cst_src_core_time_ns_ml_254_4=
      caml_string_of_jsbytes("src/core_time_ns.ml:254:4"),
     cst_t$34=caml_string_of_jsbytes("t"),
     tp_loc$56=
      caml_string_of_jsbytes("src/core_time_ns.ml.Ofday.Zoned.sexp_repr"),
     cst_t$35=caml_string_of_jsbytes("t"),
     cst_src_core_time_ns_ml_296_6=
      caml_string_of_jsbytes("src/core_time_ns.ml:296:6"),
     cst_t$36=caml_string_of_jsbytes("t"),
     module_name$3=caml_string_of_jsbytes("Core.Time_ns.Ofday.Zoned"),
     cst_zone$2=caml_string_of_jsbytes("zone"),
     cst_ofday$2=caml_string_of_jsbytes("ofday"),
     cst_t$37=caml_string_of_jsbytes("t"),
     cst_src_core_time_ns_ml_312_10=
      caml_string_of_jsbytes("src/core_time_ns.ml:312:10"),
     cst_t$38=caml_string_of_jsbytes("t"),
     tp_loc$57=
      caml_string_of_jsbytes
       ("src/core_time_ns.ml.Ofday.Zoned.Stable.V1.sexp_repr"),
     cst_t$39=caml_string_of_jsbytes("t"),
     cst_src_core_time_ns_ml_343_4=
      caml_string_of_jsbytes("src/core_time_ns.ml:343:4"),
     cst_t$40=caml_string_of_jsbytes("t"),
     name$5=caml_string_of_jsbytes("src/core_time_ns.ml.Ofday.Option.t"),
     cst_t$41=caml_string_of_jsbytes("t"),
     cst_src_core_time_ns_ml_405_10=
      caml_string_of_jsbytes("src/core_time_ns.ml:405:10"),
     cst_t$42=caml_string_of_jsbytes("t"),
     cst_t$43=caml_string_of_jsbytes("t"),
     cst_src_core_time_ns_ml_423_8=
      caml_string_of_jsbytes("src/core_time_ns.ml:423:8"),
     cst_t$44=caml_string_of_jsbytes("t"),
     module_name$4=caml_string_of_jsbytes("Core.Time_ns.Ofday.Option"),
     cst_t$45=caml_string_of_jsbytes("t"),
     cst_src_core_time_ns_ml_480_6=
      caml_string_of_jsbytes("src/core_time_ns.ml:480:6"),
     cst_t$46=caml_string_of_jsbytes("t"),
     cst_t$47=caml_string_of_jsbytes("t"),
     cst_src_core_time_ns_ml_499_2=
      caml_string_of_jsbytes("src/core_time_ns.ml:499:2"),
     cst_t$48=caml_string_of_jsbytes("t"),
     name$6=caml_string_of_jsbytes("src/core_time_ns.ml.Option.t"),
     cst_t$49=caml_string_of_jsbytes("t"),
     cst_src_core_time_ns_ml_527_8=
      caml_string_of_jsbytes("src/core_time_ns.ml:527:8"),
     cst_t$50=caml_string_of_jsbytes("t"),
     cst_t$51=caml_string_of_jsbytes("t"),
     cst_src_core_time_ns_ml_544_6=
      caml_string_of_jsbytes("src/core_time_ns.ml:544:6"),
     cst_t$52=caml_string_of_jsbytes("t"),
     module_name$5=caml_string_of_jsbytes("Core.Time_ns.Option"),
     module_name$6=caml_string_of_jsbytes("Core.Time_ns"),
     cst_core$43=caml_string_of_jsbytes("core"),
     cst_Core_Core_time_ns$0=caml_string_of_jsbytes("Core__Core_time_ns"),
     cst_Core_Interval_intf=caml_string_of_jsbytes("Core__Interval_intf"),
     cst_core$44=caml_string_of_jsbytes("core"),
     cst_src_interval_intf_ml=caml_string_of_jsbytes("src/interval_intf.ml"),
     cst$36=caml_string_of_jsbytes(""),
     cst_core$45=caml_string_of_jsbytes("core"),
     cst_core$46=caml_string_of_jsbytes("core"),
     cst_Core_Interval_intf$0=caml_string_of_jsbytes("Core__Interval_intf"),
     cst_index_out_of_bounds=caml_string_of_jsbytes("index out of bounds"),
     cst_interval_length_not_repres=
      caml_string_of_jsbytes("interval length not representable"),
     cst_t$71=caml_string_of_jsbytes("t"),
     cst_src_interval_ml_335_2=caml_string_of_jsbytes("src/interval.ml:335:2"),
     cst_t$72=caml_string_of_jsbytes("t"),
     cst_interval$3=caml_string_of_jsbytes("interval"),
     cst_src_interval_ml_336_2=caml_string_of_jsbytes("src/interval.ml:336:2"),
     cst_interval$4=caml_string_of_jsbytes("interval"),
     cst_t$73=caml_string_of_jsbytes("t"),
     cst_src_interval_ml_359_4=caml_string_of_jsbytes("src/interval.ml:359:4"),
     cst_t$74=caml_string_of_jsbytes("t"),
     cst_t$70=caml_string_of_jsbytes("t"),
     cst_Interval_t_of_sexp_error_m=
      caml_string_of_jsbytes("Interval.t_of_sexp error: malformed input"),
     cst_t$68=caml_string_of_jsbytes("t"),
     cst_Interval_set_lbound_called=
      caml_string_of_jsbytes("Interval_set.lbound called on empty set"),
     cst_Interval_set_ubound_called=
      caml_string_of_jsbytes("Interval_set.ubound called on empty set"),
     cst_Interval_set_create_interv=
      caml_string_of_jsbytes
       ("Interval_set.create: intervals were not disjoint"),
     cst_Interval_list_intersect_no=
      caml_string_of_jsbytes
       ("Interval.list_intersect: non-disjoint input list"),
     cst_Interval_ubound_exn_empty_=
      caml_string_of_jsbytes("Interval.ubound_exn: empty interval"),
     cst_Interval_lbound_exn_empty_=
      caml_string_of_jsbytes("Interval.lbound_exn: empty interval"),
     cst_Interval_bounds_exn_empty_=
      caml_string_of_jsbytes("Interval.bounds_exn: empty interval"),
     cst_t$56=caml_string_of_jsbytes("t"),
     cst_Interval_t_of_sexp_expecte=
      caml_string_of_jsbytes
       ("Interval.t_of_sexp: expected pair or empty list"),
     cst_interval$2=caml_string_of_jsbytes("interval"),
     cst_Interval$3=caml_string_of_jsbytes("Interval"),
     cst_Empty$2=caml_string_of_jsbytes("Empty"),
     cst_Empty=caml_string_of_jsbytes("Empty"),
     cst_Interval$0=caml_string_of_jsbytes("Interval"),
     cst_empty=caml_string_of_jsbytes("empty"),
     cst_interval=caml_string_of_jsbytes("interval"),
     cst_Empty$0=caml_string_of_jsbytes("Empty"),
     cst_Interval$1=caml_string_of_jsbytes("Interval"),
     cst_empty$0=caml_string_of_jsbytes("empty"),
     cst_interval$0=caml_string_of_jsbytes("interval"),
     cst_src_interval_ml_Stable_V1_=
      caml_string_of_jsbytes("src/interval.ml.Stable.V1.T.t"),
     cst_t$54=caml_string_of_jsbytes("t"),
     cst_Core_Interval=caml_string_of_jsbytes("Core__Interval"),
     cst_core$47=caml_string_of_jsbytes("core"),
     cst_src_interval_ml=caml_string_of_jsbytes("src/interval.ml"),
     cst$37=caml_string_of_jsbytes(""),
     cst_core$48=caml_string_of_jsbytes("core"),
     cst_a=caml_string_of_jsbytes("a"),
     cst_src_interval_ml_11_27=caml_string_of_jsbytes("src/interval.ml:11:27"),
     cst_a$0=caml_string_of_jsbytes("a"),
     cst_src_interval_ml_11_22=caml_string_of_jsbytes("src/interval.ml:11:22"),
     cst_Interval=caml_string_of_jsbytes("Interval"),
     cst_a$1=caml_string_of_jsbytes("a"),
     cst_t$53=caml_string_of_jsbytes("t"),
     cst_src_interval_ml_10_6=caml_string_of_jsbytes("src/interval.ml:10:6"),
     tp_loc$58=caml_string_of_jsbytes("src/interval.ml.Stable.V1.T.t"),
     cst_Interval$2=caml_string_of_jsbytes("Interval"),
     cst_Empty$1=caml_string_of_jsbytes("Empty"),
     descriptions=
      [0,
       [0,caml_string_of_jsbytes("Interval"),2],
       [0,[0,caml_string_of_jsbytes("Empty"),0],0]],
     cst_a$2=caml_string_of_jsbytes("a"),
     cst_src_interval_ml_15_25=caml_string_of_jsbytes("src/interval.ml:15:25"),
     cst_a$3=caml_string_of_jsbytes("a"),
     cst_interval$1=caml_string_of_jsbytes("interval"),
     cst_src_interval_ml_15_6=caml_string_of_jsbytes("src/interval.ml:15:6"),
     cst_a$4=caml_string_of_jsbytes("a"),
     cst_src_interval_ml_36_16=caml_string_of_jsbytes("src/interval.ml:36:16"),
     cst_a$5=caml_string_of_jsbytes("a"),
     cst_t$55=caml_string_of_jsbytes("t"),
     cst_src_interval_ml_36_4=caml_string_of_jsbytes("src/interval.ml:36:4"),
     cst_t$57=caml_string_of_jsbytes("t"),
     cst_src_interval_ml_40_8=caml_string_of_jsbytes("src/interval.ml:40:8"),
     cst_t$58=caml_string_of_jsbytes("t"),
     cst_t$59=caml_string_of_jsbytes("t"),
     cst_src_interval_ml_48_8=caml_string_of_jsbytes("src/interval.ml:48:8"),
     cst_t$60=caml_string_of_jsbytes("t"),
     cst_t$61=caml_string_of_jsbytes("t"),
     cst_src_interval_ml_56_8=caml_string_of_jsbytes("src/interval.ml:56:8"),
     cst_t$62=caml_string_of_jsbytes("t"),
     cst_t$63=caml_string_of_jsbytes("t"),
     cst_src_interval_ml_64_8=caml_string_of_jsbytes("src/interval.ml:64:8"),
     cst_t$64=caml_string_of_jsbytes("t"),
     cst_t$65=caml_string_of_jsbytes("t"),
     cst_src_interval_ml_73_8=caml_string_of_jsbytes("src/interval.ml:73:8"),
     cst_t$66=caml_string_of_jsbytes("t"),
     cst_a$6=caml_string_of_jsbytes("a"),
     cst_src_interval_ml_309_12=
      caml_string_of_jsbytes("src/interval.ml:309:12"),
     cst_a$7=caml_string_of_jsbytes("a"),
     cst_t$67=caml_string_of_jsbytes("t"),
     cst_src_interval_ml_309_0=caml_string_of_jsbytes("src/interval.ml:309:0"),
     cst_a$8=caml_string_of_jsbytes("a"),
     cst_src_interval_ml_326_14=
      caml_string_of_jsbytes("src/interval.ml:326:14"),
     cst_a$9=caml_string_of_jsbytes("a"),
     cst_t$69=caml_string_of_jsbytes("t"),
     cst_src_interval_ml_326_2=caml_string_of_jsbytes("src/interval.ml:326:2"),
     cst_core$49=caml_string_of_jsbytes("core"),
     cst_Core_Interval$0=caml_string_of_jsbytes("Core__Interval"),
     cst_Core_Stable=caml_string_of_jsbytes("Core__Stable"),
     cst_core$50=caml_string_of_jsbytes("core"),
     cst_src_stable_ml=caml_string_of_jsbytes("src/stable.ml"),
     cst$38=caml_string_of_jsbytes(""),
     cst_core$51=caml_string_of_jsbytes("core"),
     cst_core$52=caml_string_of_jsbytes("core"),
     cst_Core_Stable$0=caml_string_of_jsbytes("Core__Stable"),
     cst_Threads=caml_string_of_jsbytes("Threads:"),
     cst_status=caml_string_of_jsbytes("/status"),
     cst_proc=caml_string_of_jsbytes("/proc/"),
     cst_Thread_create_requested_to=
      caml_string_of_jsbytes("Thread.create requested to raise"),
     cst_thread=caml_string_of_jsbytes("thread"),
     cst_Core_Core_thread=caml_string_of_jsbytes("Core__Core_thread"),
     cst_core$53=caml_string_of_jsbytes("core"),
     cst_src_core_thread_ml=caml_string_of_jsbytes("src/core_thread.ml"),
     cst$39=caml_string_of_jsbytes(""),
     cst_core$54=caml_string_of_jsbytes("core"),
     cst_pthread_setaffinity_np=
      caml_string_of_jsbytes("pthread_setaffinity_np"),
     cst_pthread_getaffinity_np=
      caml_string_of_jsbytes("pthread_getaffinity_np"),
     cst_core$55=caml_string_of_jsbytes("core"),
     cst_Core_Core_thread$0=caml_string_of_jsbytes("Core__Core_thread"),
     cst_Core_Core_date_intf=caml_string_of_jsbytes("Core__Core_date_intf"),
     cst_core$56=caml_string_of_jsbytes("core"),
     cst_src_core_date_intf_ml=caml_string_of_jsbytes("src/core_date_intf.ml"),
     cst$40=caml_string_of_jsbytes(""),
     cst_core$57=caml_string_of_jsbytes("core"),
     cst_core$58=caml_string_of_jsbytes("core"),
     cst_Core_Core_date_intf$0=caml_string_of_jsbytes("Core__Core_date_intf"),
     cst_Core_Core_date=caml_string_of_jsbytes("Core__Core_date"),
     cst_core$59=caml_string_of_jsbytes("core"),
     cst_src_core_date_ml=caml_string_of_jsbytes("src/core_date.ml"),
     cst$41=caml_string_of_jsbytes(""),
     cst_core$60=caml_string_of_jsbytes("core"),
     cst_core$61=caml_string_of_jsbytes("core"),
     cst_Core_Core_date$0=caml_string_of_jsbytes("Core__Core_date"),
     cst_Core_Core_command=caml_string_of_jsbytes("Core__Core_command"),
     cst_core$62=caml_string_of_jsbytes("core"),
     cst_src_core_command_ml=caml_string_of_jsbytes("src/core_command.ml"),
     cst$42=caml_string_of_jsbytes(""),
     cst_core$63=caml_string_of_jsbytes("core"),
     cst_core$64=caml_string_of_jsbytes("core"),
     cst_Core_Core_command$0=caml_string_of_jsbytes("Core__Core_command"),
     cst_Core_Core_caml=caml_string_of_jsbytes("Core__Core_caml"),
     cst_core$65=caml_string_of_jsbytes("core"),
     cst_src_core_caml_ml=caml_string_of_jsbytes("src/core_caml.ml"),
     cst$43=caml_string_of_jsbytes(""),
     cst_core$66=caml_string_of_jsbytes("core"),
     cst_core$67=caml_string_of_jsbytes("core"),
     cst_Core_Core_caml$0=caml_string_of_jsbytes("Core__Core_caml"),
     cst_Core=caml_string_of_jsbytes("Core"),
     cst_core$68=caml_string_of_jsbytes("core"),
     cst_src_core_ml=caml_string_of_jsbytes("src/core.ml"),
     cst$44=caml_string_of_jsbytes(""),
     cst_core$69=caml_string_of_jsbytes("core"),
     cst_core$70=caml_string_of_jsbytes("core"),
     cst_Core$0=caml_string_of_jsbytes("Core"),
     Ppx_module_timer_runtime=global_data.Ppx_module_timer_runtime,
     Ppx_bench_lib_Benchmark_accumu=
      global_data.Ppx_bench_lib__Benchmark_accumulator,
     Expect_test_collector=global_data.Expect_test_collector,
     Ppx_inline_test_lib_Runtime=global_data.Ppx_inline_test_lib__Runtime,
     include=global_data.Core_kernel,
     include$0=global_data.Base__Poly0,
     Ppx_compare_lib=global_data.Ppx_compare_lib,
     Sexplib0_Sexp_conv_error=global_data.Sexplib0__Sexp_conv_error,
     Core_kernel_Arg=global_data.Core_kernel__Arg,
     Caml_unix=global_data.Caml_unix,
     Core_kernel_Array=global_data.Core_kernel__Array,
     Core_kernel_String=global_data.Core_kernel__String,
     include$3=global_data.Core_kernel__Filename,
     Core_kernel_Int=global_data.Core_kernel__Int,
     Assert_failure=global_data.Assert_failure,
     Core_kernel_Printf=global_data.Core_kernel__Printf,
     include$2=global_data.Caml,
     Stdlib_sys=global_data.Stdlib__sys,
     Sexplib0_Sexp_conv=global_data.Sexplib0__Sexp_conv,
     Stdio_Out_channel=global_data.Stdio__Out_channel,
     UnixLabels=global_data.UnixLabels,
     Base_Random=global_data.Base__Random,
     Stdlib=global_data.Stdlib,
     Stdio_In_channel=global_data.Stdio__In_channel,
     Core_kernel_List=global_data.Core_kernel__List,
     Core_kernel_Command=global_data.Core_kernel__Command,
     Base_Exn=global_data.Base__Exn,
     Core_kernel_Pid=global_data.Core_kernel__Pid,
     Core_kernel_Sexp=global_data.Core_kernel__Sexp,
     Core_kernel_Hashtbl=global_data.Core_kernel__Hashtbl,
     Bin_prot_Shape=global_data.Bin_prot__Shape,
     Core_kernel_Result=global_data.Core_kernel__Result,
     Inline_test_config=global_data.Inline_test_config,
     Core_kernel_Set=global_data.Core_kernel__Set,
     Core_kernel_Option=global_data.Core_kernel__Option,
     Core_kernel_Char=global_data.Core_kernel__Char,
     Base_Field=global_data.Base__Field,
     Bin_prot_Read=global_data.Bin_prot__Read,
     Bin_prot_Common=global_data.Bin_prot__Common,
     Bin_prot_Write=global_data.Bin_prot__Write,
     Core_kernel_Int32=global_data.Core_kernel__Int32,
     Core_kernel_Sequence=global_data.Core_kernel__Sequence,
     Base_Hash=global_data.Base__Hash,
     Error_checking_mutex=global_data.Error_checking_mutex,
     Core_kernel_Bigstring=global_data.Core_kernel__Bigstring,
     Core_kernel_Time_ns_alternate_=
      global_data.Core_kernel__Time_ns_alternate_sexp,
     Spawn=global_data.Spawn,
     Core_kernel_Int63=global_data.Core_kernel__Int63,
     Core_kernel_Int64=global_data.Core_kernel__Int64,
     Core_kernel_Ordered_collection=
      global_data.Core_kernel__Ordered_collection_common,
     Core_kernel_Bytes=global_data.Core_kernel__Bytes,
     Core_kernel_Map=global_data.Core_kernel__Map,
     Core_kernel_Or_error=global_data.Core_kernel__Or_error,
     Core_kernel_Error=global_data.Core_kernel__Error,
     Base_Buffer=global_data.Base__Buffer,
     Stdlib_format=global_data.Stdlib__format,
     Core_kernel_Hashable=global_data.Core_kernel__Hashable,
     Stdlib_bigarray=global_data.Stdlib__bigarray,
     Flags=global_data.Flags,
     Base_Sexpable=global_data.Base__Sexpable,
     Core_kernel_Binable=global_data.Core_kernel__Binable,
     Core_kernel_Comparable=global_data.Core_kernel__Comparable,
     Core_kernel_Stable_unit_test=global_data.Core_kernel__Stable_unit_test,
     Core_kernel_Sexpable=global_data.Core_kernel__Sexpable,
     Core_kernel_Comparator=global_data.Core_kernel__Comparator,
     Core_kernel_Identifiable=global_data.Core_kernel__Identifiable,
     Core_kernel_Float=global_data.Core_kernel__Float,
     CamlinternalLazy=global_data.CamlinternalLazy,
     include$13=global_data.Core_kernel__Date,
     Core_kernel_Month=global_data.Core_kernel__Month,
     Timezone=global_data.Timezone,
     Base_Pretty_printer=global_data.Base__Pretty_printer,
     Core_kernel_Ofday_float=global_data.Core_kernel__Ofday_float,
     Core_kernel_Time_float=global_data.Core_kernel__Time_float,
     Core_kernel_Span_float=global_data.Core_kernel__Span_float,
     Core_kernel_Time_ns=global_data.Core_kernel__Time_ns,
     Typerep_lib_Make_typename=global_data.Typerep_lib__Make_typename,
     Core_kernel_Quickcheck=global_data.Core_kernel__Quickcheck,
     Base_quickcheck_Shrinker=global_data.Base_quickcheck__Shrinker,
     Base_Container=global_data.Base__Container,
     Base_Binary_searchable=global_data.Base__Binary_searchable,
     Core_kernel_Stable=global_data.Core_kernel__Stable,
     Event=global_data.Event,
     include$42=global_data.Thread,
     Version_util=global_data.Version_util,
     Core=[0];
    caml_register_global(2935,Core,"Core__");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Import);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core);
    caml_call1(Expect_test_collector[4][1],cst_src_import_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$0,cst);
    var
     _a_=include[2],
     _b_=include[3],
     _c_=include[4],
     _n_=include[15],
     _r_=include[19],
     _a4_=include[122],
     _a6_=include[124],
     _a8_=include[126],
     _bj_=include[139],
     _bk_=include[140],
     _bm_=include[142],
     _bo_=include[144],
     _cz_=include[219],
     _cB_=include[221],
     _cC_=include[222],
     _cF_=include[225],
     _cL_=include[231],
     _cQ_=include[236],
     _cS_=include[238],
     _cV_=include[241],
     _do_=include[272],
     _dp_=include[273],
     _dF_=include[289],
     _dG_=include[290],
     _dW_=include[306],
     _d1_=include[311],
     _d2_=include[312],
     _d3_=include[313],
     _d5_=include[315],
     _d9_=include[319],
     _eb_=include[323],
     _ec_=include[324],
     _eg_=include[328],
     _eh_=include[329],
     _ei_=include[330],
     _ek_=include[332],
     _eo_=include[336],
     _eq_=include[338],
     _es_=include[340],
     file_perm_of_sexp=include[341],
     _ew_=include[345],
     _ex_=include[346],
     _ey_=include[347],
     _eA_=include[349],
     _eE_=include[353],
     _eG_=include[355],
     _eZ_=include[374],
     _e0_=include[375],
     _fh_=include[394],
     _fi_=include[395],
     _fj_=include[396],
     _fl_=include[398],
     _fm_=include[399],
     _fs_=include[405],
     _ft_=include[406],
     _fZ_=include[438],
     _f0_=include[439],
     _f4_=include[443],
     _f5_=include[444],
     _f6_=include[445],
     _f8_=include[447],
     _ga_=include[451],
     _ge_=include[455],
     _gf_=include[456],
     compare=include[498],
     sexp_of_t=include[502],
     _gY_=include[503],
     _ih_=include[588],
     _ij_=include[590],
     _d_=include[5],
     _e_=include[6],
     _f_=include[7],
     _g_=include[8],
     _h_=include[9],
     _i_=include[10],
     _j_=include[11],
     _k_=include[12],
     _l_=include[13],
     _m_=include[14],
     _o_=include[16],
     _p_=include[17],
     _q_=include[18],
     _s_=include[20],
     _t_=include[21],
     _u_=include[22],
     _v_=include[23],
     _w_=include[24],
     _x_=include[25],
     _y_=include[26],
     _z_=include[27],
     _A_=include[28],
     _B_=include[29],
     _C_=include[30],
     _D_=include[31],
     _E_=include[32],
     _F_=include[33],
     _G_=include[34],
     _H_=include[35],
     _I_=include[36],
     _J_=include[37],
     _K_=include[38],
     _L_=include[39],
     _M_=include[40],
     _N_=include[41],
     _O_=include[42],
     _P_=include[43],
     _Q_=include[44],
     _R_=include[45],
     _S_=include[46],
     _T_=include[47],
     _U_=include[48],
     _V_=include[49],
     _W_=include[50],
     _X_=include[51],
     _Y_=include[52],
     _Z_=include[53],
     ___=include[54],
     _$_=include[55],
     _aa_=include[56],
     _ab_=include[57],
     _ac_=include[58],
     _ad_=include[59],
     _ae_=include[60],
     _af_=include[61],
     _ag_=include[62],
     _ah_=include[63],
     _ai_=include[64],
     _aj_=include[65],
     _ak_=include[66],
     _al_=include[67],
     _am_=include[68],
     _an_=include[69],
     _ao_=include[70],
     _ap_=include[71],
     _aq_=include[72],
     _ar_=include[73],
     _as_=include[74],
     _at_=include[75],
     _au_=include[76],
     _av_=include[77],
     _aw_=include[78],
     _ax_=include[79],
     _ay_=include[80],
     _az_=include[81],
     _aA_=include[82],
     _aB_=include[83],
     _aC_=include[84],
     _aD_=include[95],
     _aE_=include[96],
     _aF_=include[97],
     _aG_=include[98],
     _aH_=include[99],
     _aI_=include[100],
     _aJ_=include[101],
     _aK_=include[102],
     _aL_=include[103],
     _aM_=include[104],
     _aN_=include[105],
     _aO_=include[106],
     _aP_=include[107],
     _aQ_=include[108],
     _aR_=include[109],
     _aS_=include[110],
     _aT_=include[111],
     _aU_=include[112],
     _aV_=include[113],
     _aW_=include[114],
     _aX_=include[115],
     _aY_=include[116],
     _aZ_=include[117],
     _a0_=include[118],
     _a1_=include[119],
     _a2_=include[120],
     _a3_=include[121],
     _a5_=include[123],
     _a7_=include[125],
     _a9_=include[127],
     _a__=include[128],
     _a$_=include[129],
     _ba_=include[130],
     _bb_=include[131],
     _bc_=include[132],
     _bd_=include[133],
     _be_=include[134],
     _bf_=include[135],
     _bg_=include[136],
     _bh_=include[137],
     _bi_=include[138],
     _bl_=include[141],
     _bn_=include[143],
     _bp_=include[145],
     _bq_=include[146],
     _br_=include[147],
     _bs_=include[148],
     _bt_=include[149],
     _bu_=include[150],
     _bv_=include[151],
     _bw_=include[152],
     _bx_=include[153],
     _by_=include[154],
     _bz_=include[155],
     _bA_=include[156],
     _bB_=include[157],
     _bC_=include[158],
     _bD_=include[159],
     _bE_=include[160],
     _bF_=include[161],
     _bG_=include[162],
     _bH_=include[163],
     _bI_=include[164],
     _bJ_=include[165],
     _bK_=include[166],
     _bL_=include[167],
     _bM_=include[168],
     _bN_=include[169],
     _bO_=include[170],
     _bP_=include[171],
     _bQ_=include[172],
     _bR_=include[173],
     _bS_=include[174],
     _bT_=include[175],
     _bU_=include[176],
     _bV_=include[177],
     _bW_=include[178],
     _bX_=include[179],
     _bY_=include[180],
     _bZ_=include[181],
     _b0_=include[182],
     _b1_=include[183],
     _b2_=include[184],
     _b3_=include[185],
     _b4_=include[186],
     _b5_=include[187],
     _b6_=include[188],
     _b7_=include[189],
     _b8_=include[190],
     _b9_=include[191],
     _b__=include[192],
     _b$_=include[193],
     _ca_=include[194],
     _cb_=include[195],
     _cc_=include[196],
     _cd_=include[197],
     _ce_=include[198],
     _cf_=include[199],
     _cg_=include[200],
     _ch_=include[201],
     _ci_=include[202],
     _cj_=include[203],
     _ck_=include[204],
     _cl_=include[205],
     _cm_=include[206],
     _cn_=include[207],
     _co_=include[208],
     _cp_=include[209],
     _cq_=include[210],
     _cr_=include[211],
     _cs_=include[212],
     _ct_=include[213],
     _cu_=include[214],
     _cv_=include[215],
     _cw_=include[216],
     _cx_=include[217],
     _cy_=include[218],
     _cA_=include[220],
     _cD_=include[223],
     _cE_=include[224],
     _cG_=include[226],
     _cH_=include[227],
     _cI_=include[228],
     _cJ_=include[229],
     _cK_=include[230],
     _cM_=include[232],
     _cN_=include[233],
     _cO_=include[234],
     _cP_=include[235],
     _cR_=include[237],
     _cT_=include[239],
     _cU_=include[240],
     _cW_=include[242],
     _cX_=include[243],
     _cY_=include[244],
     _cZ_=include[245],
     _c0_=include[246],
     _c1_=include[247],
     _c2_=include[248],
     _c3_=include[249],
     _c4_=include[250],
     _c5_=include[251],
     _c6_=include[252],
     _c7_=include[253],
     _c8_=include[254],
     _c9_=include[255],
     _c__=include[256],
     _c$_=include[257],
     _da_=include[258],
     _db_=include[259],
     _dc_=include[260],
     _dd_=include[261],
     _de_=include[262],
     _df_=include[263],
     _dg_=include[264],
     _dh_=include[265],
     _di_=include[266],
     _dj_=include[267],
     _dk_=include[268],
     _dl_=include[269],
     _dm_=include[270],
     _dn_=include[271],
     _dq_=include[274],
     _dr_=include[275],
     _ds_=include[276],
     _dt_=include[277],
     _du_=include[278],
     _dv_=include[279],
     _dw_=include[280],
     _dx_=include[281],
     _dy_=include[282],
     _dz_=include[283],
     _dA_=include[284],
     _dB_=include[285],
     _dC_=include[286],
     _dD_=include[287],
     _dE_=include[288],
     _dH_=include[291],
     _dI_=include[292],
     _dJ_=include[293],
     _dK_=include[294],
     _dL_=include[295],
     _dM_=include[296],
     _dN_=include[297],
     _dO_=include[298],
     _dP_=include[299],
     _dQ_=include[300],
     _dR_=include[301],
     _dS_=include[302],
     _dT_=include[303],
     _dU_=include[304],
     _dV_=include[305],
     _dX_=include[307],
     _dY_=include[308],
     _dZ_=include[309],
     _d0_=include[310],
     _d4_=include[314],
     _d6_=include[316],
     _d7_=include[317],
     _d8_=include[318],
     _d__=include[320],
     _d$_=include[321],
     _ea_=include[322],
     _ed_=include[325],
     _ee_=include[326],
     _ef_=include[327],
     _ej_=include[331],
     _el_=include[333],
     _em_=include[334],
     _en_=include[335],
     _ep_=include[337],
     _er_=include[339],
     _et_=include[342],
     _eu_=include[343],
     _ev_=include[344],
     _ez_=include[348],
     _eB_=include[350],
     _eC_=include[351],
     _eD_=include[352],
     _eF_=include[354],
     _eH_=include[356],
     _eI_=include[357],
     _eJ_=include[358],
     _eK_=include[359],
     _eL_=include[360],
     _eM_=include[361],
     _eN_=include[362],
     _eO_=include[363],
     _eP_=include[364],
     _eQ_=include[365],
     _eR_=include[366],
     _eS_=include[367],
     _eT_=include[368],
     _eU_=include[369],
     _eV_=include[370],
     _eW_=include[371],
     _eX_=include[372],
     _eY_=include[373],
     _e1_=include[376],
     _e2_=include[377],
     _e3_=include[378],
     _e4_=include[379],
     _e5_=include[380],
     _e6_=include[381],
     _e7_=include[382],
     _e8_=include[383],
     _e9_=include[384],
     _e__=include[385],
     _e$_=include[386],
     _fa_=include[387],
     _fb_=include[388],
     _fc_=include[389],
     _fd_=include[390],
     _fe_=include[391],
     _ff_=include[392],
     _fg_=include[393],
     _fk_=include[397],
     _fn_=include[400],
     _fo_=include[401],
     _fp_=include[402],
     _fq_=include[403],
     _fr_=include[404],
     _fu_=include[407],
     _fv_=include[408],
     _fw_=include[409],
     _fx_=include[410],
     _fy_=include[411],
     _fz_=include[412],
     _fA_=include[413],
     _fB_=include[414],
     _fC_=include[415],
     _fD_=include[416],
     _fE_=include[417],
     _fF_=include[418],
     _fG_=include[419],
     _fH_=include[420],
     _fI_=include[421],
     _fJ_=include[422],
     _fK_=include[423],
     _fL_=include[424],
     _fM_=include[425],
     _fN_=include[426],
     _fO_=include[427],
     _fP_=include[428],
     _fQ_=include[429],
     _fR_=include[430],
     _fS_=include[431],
     _fT_=include[432],
     _fU_=include[433],
     _fV_=include[434],
     _fW_=include[435],
     _fX_=include[436],
     _fY_=include[437],
     _f1_=include[440],
     _f2_=include[441],
     _f3_=include[442],
     _f7_=include[446],
     _f9_=include[448],
     _f__=include[449],
     _f$_=include[450],
     _gb_=include[452],
     _gc_=include[453],
     _gd_=include[454],
     _gg_=include[457],
     _gh_=include[458],
     _gi_=include[459],
     _gj_=include[460],
     _gk_=include[461],
     _gl_=include[462],
     _gm_=include[463],
     _gn_=include[464],
     _go_=include[465],
     _gp_=include[466],
     _gq_=include[467],
     _gr_=include[468],
     _gs_=include[469],
     _gt_=include[470],
     _gu_=include[471],
     _gv_=include[472],
     _gw_=include[473],
     _gx_=include[474],
     _gy_=include[475],
     _gz_=include[476],
     _gA_=include[477],
     _gB_=include[478],
     _gC_=include[479],
     _gD_=include[480],
     _gE_=include[481],
     _gF_=include[482],
     _gG_=include[483],
     _gH_=include[484],
     _gI_=include[485],
     _gJ_=include[486],
     _gK_=include[487],
     _gL_=include[488],
     _gM_=include[489],
     _gN_=include[490],
     _gO_=include[491],
     _gP_=include[492],
     _gQ_=include[493],
     _gR_=include[494],
     _gS_=include[495],
     _gT_=include[496],
     _gU_=include[497],
     _gV_=include[499],
     _gW_=include[500],
     _gX_=include[501],
     _gZ_=include[504],
     _g0_=include[505],
     _g1_=include[506],
     _g2_=include[507],
     _g3_=include[508],
     _g4_=include[509],
     _g5_=include[510],
     _g6_=include[511],
     _g7_=include[512],
     _g8_=include[513],
     _g9_=include[514],
     _g__=include[515],
     _g$_=include[516],
     _ha_=include[517],
     _hb_=include[518],
     _hc_=include[519],
     _hd_=include[520],
     _he_=include[521],
     _hf_=include[522],
     _hg_=include[523],
     _hh_=include[524],
     _hi_=include[525],
     _hj_=include[526],
     _hk_=include[527],
     _hl_=include[528],
     _hm_=include[529],
     _hn_=include[530],
     _ho_=include[531],
     _hp_=include[532],
     _hq_=include[533],
     _hr_=include[534],
     _hs_=include[535],
     _ht_=include[536],
     _hu_=include[537],
     _hv_=include[538],
     _hw_=include[539],
     _hx_=include[540],
     _hy_=include[541],
     _hz_=include[542],
     _hA_=include[543],
     _hB_=include[544],
     _hC_=include[545],
     _hD_=include[546],
     _hE_=include[547],
     _hF_=include[548],
     _hG_=include[549],
     _hH_=include[550],
     _hI_=include[551],
     _hJ_=include[552],
     _hK_=include[553],
     _hL_=include[554],
     _hM_=include[555],
     _hN_=include[556],
     _hO_=include[557],
     _hP_=include[558],
     _hQ_=include[559],
     _hR_=include[560],
     _hS_=include[561],
     _hT_=include[562],
     _hU_=include[563],
     _hV_=include[564],
     _hW_=include[565],
     _hX_=include[566],
     _hY_=include[567],
     _hZ_=include[568],
     _h0_=include[569],
     _h1_=include[570],
     _h2_=include[571],
     _h3_=include[572],
     _h4_=include[573],
     _h5_=include[574],
     _h6_=include[575],
     _h7_=include[576],
     _h8_=include[577],
     _h9_=include[578],
     _h__=include[579],
     _h$_=include[580],
     _ia_=include[581],
     _ib_=include[582],
     _ic_=include[583],
     _id_=include[584],
     _ie_=include[585],
     _if_=include[586],
     _ig_=include[587],
     _ii_=include[589],
     _ik_=include[591],
     _il_=include[592],
     _im_=include[593],
     _in_=include$0[1],
     _io_=include$0[2],
     _ip_=include$0[3],
     _iq_=include$0[4];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$1);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Import$0);
    var
     Core_Import=
      [0,
       _a_,
       _b_,
       _c_,
       _d_,
       _e_,
       _f_,
       _g_,
       _h_,
       _i_,
       _j_,
       _k_,
       _l_,
       _m_,
       _n_,
       _o_,
       _p_,
       _q_,
       _r_,
       _s_,
       _t_,
       _u_,
       _v_,
       _w_,
       _x_,
       _y_,
       _z_,
       _A_,
       _B_,
       _C_,
       _D_,
       _E_,
       _F_,
       _G_,
       _H_,
       _I_,
       _J_,
       _K_,
       _L_,
       _M_,
       _N_,
       _O_,
       _P_,
       _Q_,
       _R_,
       _S_,
       _T_,
       _U_,
       _V_,
       _W_,
       _X_,
       _Y_,
       _Z_,
       ___,
       _$_,
       _aa_,
       _ab_,
       _ac_,
       _ad_,
       _ae_,
       _af_,
       _ag_,
       _ah_,
       _ai_,
       _aj_,
       _ak_,
       _al_,
       _am_,
       _an_,
       _ao_,
       _ap_,
       _aq_,
       _ar_,
       _as_,
       _at_,
       _au_,
       _av_,
       _aw_,
       _ax_,
       _ay_,
       _az_,
       _aA_,
       _aB_,
       _aC_,
       _aD_,
       _aE_,
       _aF_,
       _aG_,
       _aH_,
       _aI_,
       _aJ_,
       _aK_,
       _aL_,
       _aM_,
       _aN_,
       _aO_,
       _aP_,
       _aQ_,
       _aR_,
       _aS_,
       _aT_,
       _aU_,
       _aV_,
       _aW_,
       _aX_,
       _aY_,
       _aZ_,
       _a0_,
       _a1_,
       _a2_,
       _a3_,
       _a4_,
       _a5_,
       _a6_,
       _a7_,
       _a8_,
       _a9_,
       _a__,
       _a$_,
       _ba_,
       _bb_,
       _bc_,
       _bd_,
       _be_,
       _bf_,
       _bg_,
       _bh_,
       _bi_,
       _bj_,
       _bk_,
       _bl_,
       _bm_,
       _bn_,
       _bo_,
       _bp_,
       _bq_,
       _br_,
       _bs_,
       _bt_,
       _bu_,
       _bv_,
       _bw_,
       _bx_,
       _by_,
       _bz_,
       _bA_,
       _bB_,
       _bC_,
       _bD_,
       _bE_,
       _bF_,
       _bG_,
       _bH_,
       _bI_,
       _bJ_,
       _bK_,
       _bL_,
       _bM_,
       _bN_,
       _bO_,
       _bP_,
       _bQ_,
       _bR_,
       _bS_,
       _bT_,
       _bU_,
       _bV_,
       _bW_,
       _bX_,
       _bY_,
       _bZ_,
       _b0_,
       _b1_,
       _b2_,
       _b3_,
       _b4_,
       _b5_,
       _b6_,
       _b7_,
       _b8_,
       _b9_,
       _b__,
       _b$_,
       _ca_,
       _cb_,
       _cc_,
       _cd_,
       _ce_,
       _cf_,
       _cg_,
       _ch_,
       _ci_,
       _cj_,
       _ck_,
       _cl_,
       _cm_,
       _cn_,
       _co_,
       _cp_,
       _cq_,
       _cr_,
       _cs_,
       _ct_,
       _cu_,
       _cv_,
       _cw_,
       _cx_,
       _cy_,
       _cz_,
       _cA_,
       _cB_,
       _cC_,
       _cD_,
       _cE_,
       _cF_,
       _cG_,
       _cH_,
       _cI_,
       _cJ_,
       _cK_,
       _cL_,
       _cM_,
       _cN_,
       _cO_,
       _cP_,
       _cQ_,
       _cR_,
       _cS_,
       _cT_,
       _cU_,
       _cV_,
       _cW_,
       _cX_,
       _cY_,
       _cZ_,
       _c0_,
       _c1_,
       _c2_,
       _c3_,
       _c4_,
       _c5_,
       _c6_,
       _c7_,
       _c8_,
       _c9_,
       _c__,
       _c$_,
       _da_,
       _db_,
       _dc_,
       _dd_,
       _de_,
       _df_,
       _dg_,
       _dh_,
       _di_,
       _dj_,
       _dk_,
       _dl_,
       _dm_,
       _dn_,
       _do_,
       _dp_,
       _dq_,
       _dr_,
       _ds_,
       _dt_,
       _du_,
       _dv_,
       _dw_,
       _dx_,
       _dy_,
       _dz_,
       _dA_,
       _dB_,
       _dC_,
       _dD_,
       _dE_,
       _dF_,
       _dG_,
       _dH_,
       _dI_,
       _dJ_,
       _dK_,
       _dL_,
       _dM_,
       _dN_,
       _dO_,
       _dP_,
       _dQ_,
       _dR_,
       _dS_,
       _dT_,
       _dU_,
       _dV_,
       _dW_,
       _dX_,
       _dY_,
       _dZ_,
       _d0_,
       _d1_,
       _d2_,
       _d3_,
       _d4_,
       _d5_,
       _d6_,
       _d7_,
       _d8_,
       _d9_,
       _d__,
       _d$_,
       _ea_,
       _eb_,
       _ec_,
       _ed_,
       _ee_,
       _ef_,
       _eg_,
       _eh_,
       _ei_,
       _ej_,
       _ek_,
       _el_,
       _em_,
       _en_,
       _eo_,
       _ep_,
       _eq_,
       _er_,
       _es_,
       file_perm_of_sexp,
       _et_,
       _eu_,
       _ev_,
       _ew_,
       _ex_,
       _ey_,
       _ez_,
       _eA_,
       _eB_,
       _eC_,
       _eD_,
       _eE_,
       _eF_,
       _eG_,
       _eH_,
       _eI_,
       _eJ_,
       _eK_,
       _eL_,
       _eM_,
       _eN_,
       _eO_,
       _eP_,
       _eQ_,
       _eR_,
       _eS_,
       _eT_,
       _eU_,
       _eV_,
       _eW_,
       _eX_,
       _eY_,
       _eZ_,
       _e0_,
       _e1_,
       _e2_,
       _e3_,
       _e4_,
       _e5_,
       _e6_,
       _e7_,
       _e8_,
       _e9_,
       _e__,
       _e$_,
       _fa_,
       _fb_,
       _fc_,
       _fd_,
       _fe_,
       _ff_,
       _fg_,
       _fh_,
       _fi_,
       _fj_,
       _fk_,
       _fl_,
       _fm_,
       _fn_,
       _fo_,
       _fp_,
       _fq_,
       _fr_,
       _fs_,
       _ft_,
       _fu_,
       _fv_,
       _fw_,
       _fx_,
       _fy_,
       _fz_,
       _fA_,
       _fB_,
       _fC_,
       _fD_,
       _fE_,
       _fF_,
       _fG_,
       _fH_,
       _fI_,
       _fJ_,
       _fK_,
       _fL_,
       _fM_,
       _fN_,
       _fO_,
       _fP_,
       _fQ_,
       _fR_,
       _fS_,
       _fT_,
       _fU_,
       _fV_,
       _fW_,
       _fX_,
       _fY_,
       _fZ_,
       _f0_,
       _f1_,
       _f2_,
       _f3_,
       _f4_,
       _f5_,
       _f6_,
       _f7_,
       _f8_,
       _f9_,
       _f__,
       _f$_,
       _ga_,
       _gb_,
       _gc_,
       _gd_,
       _ge_,
       _gf_,
       _gg_,
       _gh_,
       _gi_,
       _gj_,
       _gk_,
       _gl_,
       _gm_,
       _gn_,
       _go_,
       _gp_,
       _gq_,
       _gr_,
       _gs_,
       _gt_,
       _gu_,
       _gv_,
       _gw_,
       _gx_,
       _gy_,
       _gz_,
       _gA_,
       _gB_,
       _gC_,
       _gD_,
       _gE_,
       _gF_,
       _gG_,
       _gH_,
       _gI_,
       _gJ_,
       _gK_,
       _gL_,
       _gM_,
       _gN_,
       _gO_,
       _gP_,
       _gQ_,
       _gR_,
       _gS_,
       _gT_,
       _gU_,
       compare,
       _gV_,
       _gW_,
       _gX_,
       sexp_of_t,
       _gY_,
       _gZ_,
       _g0_,
       _g1_,
       _g2_,
       _g3_,
       _g4_,
       _g5_,
       _g6_,
       _g7_,
       _g8_,
       _g9_,
       _g__,
       _g$_,
       _ha_,
       _hb_,
       _hc_,
       _hd_,
       _he_,
       _hf_,
       _hg_,
       _hh_,
       _hi_,
       _hj_,
       _hk_,
       _hl_,
       _hm_,
       _hn_,
       _ho_,
       _hp_,
       _hq_,
       _hr_,
       _hs_,
       _ht_,
       _hu_,
       _hv_,
       _hw_,
       _hx_,
       _hy_,
       _hz_,
       _hA_,
       _hB_,
       _hC_,
       _hD_,
       _hE_,
       _hF_,
       _hG_,
       _hH_,
       _hI_,
       _hJ_,
       _hK_,
       _hL_,
       _hM_,
       _hN_,
       _hO_,
       _hP_,
       _hQ_,
       _hR_,
       _hS_,
       _hT_,
       _hU_,
       _hV_,
       _hW_,
       _hX_,
       _hY_,
       _hZ_,
       _h0_,
       _h1_,
       _h2_,
       _h3_,
       _h4_,
       _h5_,
       _h6_,
       _h7_,
       _h8_,
       _h9_,
       _h__,
       _h$_,
       _ia_,
       _ib_,
       _ic_,
       _id_,
       _ie_,
       _if_,
       _ig_,
       _ih_,
       _ii_,
       _ij_,
       _ik_,
       _il_,
       _im_,
       _in_,
       _io_,
       _ip_,
       _iq_];
    caml_register_global(2942,Core_Import,"Core__Import");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Unix_error);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$2);
    caml_call1(Expect_test_collector[4][1],cst_src_unix_error_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$3,cst$0);
    var
     _ir_=[0,caml_string_of_jsbytes("E2BIG")],
     _is_=[0,caml_string_of_jsbytes("EACCES")],
     _it_=[0,caml_string_of_jsbytes("EAGAIN")],
     _iu_=[0,caml_string_of_jsbytes("EBADF")],
     _iv_=[0,caml_string_of_jsbytes("EBUSY")],
     _iw_=[0,caml_string_of_jsbytes("ECHILD")],
     _ix_=[0,caml_string_of_jsbytes("EDEADLK")],
     _iy_=[0,caml_string_of_jsbytes("EDOM")],
     _iz_=[0,caml_string_of_jsbytes("EEXIST")],
     _iA_=[0,caml_string_of_jsbytes("EFAULT")],
     _iB_=[0,caml_string_of_jsbytes("EFBIG")],
     _iC_=[0,caml_string_of_jsbytes("EINTR")],
     _iD_=[0,caml_string_of_jsbytes("EINVAL")],
     _iE_=[0,caml_string_of_jsbytes("EIO")],
     _iF_=[0,caml_string_of_jsbytes("EISDIR")],
     _iG_=[0,caml_string_of_jsbytes("EMFILE")],
     _iH_=[0,caml_string_of_jsbytes("EMLINK")],
     _iI_=[0,caml_string_of_jsbytes("ENAMETOOLONG")],
     _iJ_=[0,caml_string_of_jsbytes("ENFILE")],
     _iK_=[0,caml_string_of_jsbytes("ENODEV")],
     _iL_=[0,caml_string_of_jsbytes("ENOENT")],
     _iM_=[0,caml_string_of_jsbytes("ENOEXEC")],
     _iN_=[0,caml_string_of_jsbytes("ENOLCK")],
     _iO_=[0,caml_string_of_jsbytes("ENOMEM")],
     _iP_=[0,caml_string_of_jsbytes("ENOSPC")],
     _iQ_=[0,caml_string_of_jsbytes("ENOSYS")],
     _iR_=[0,caml_string_of_jsbytes("ENOTDIR")],
     _iS_=[0,caml_string_of_jsbytes("ENOTEMPTY")],
     _iT_=[0,caml_string_of_jsbytes("ENOTTY")],
     _iU_=[0,caml_string_of_jsbytes("ENXIO")],
     _iV_=[0,caml_string_of_jsbytes("EPERM")],
     _iW_=[0,caml_string_of_jsbytes("EPIPE")],
     _iX_=[0,caml_string_of_jsbytes("ERANGE")],
     _iY_=[0,caml_string_of_jsbytes("EROFS")],
     _iZ_=[0,caml_string_of_jsbytes("ESPIPE")],
     _i0_=[0,caml_string_of_jsbytes("ESRCH")],
     _i1_=[0,caml_string_of_jsbytes("EXDEV")],
     _i2_=[0,caml_string_of_jsbytes("EWOULDBLOCK")],
     _i3_=[0,caml_string_of_jsbytes("EINPROGRESS")],
     _i4_=[0,caml_string_of_jsbytes("EALREADY")],
     _i5_=[0,caml_string_of_jsbytes("ENOTSOCK")],
     _i6_=[0,caml_string_of_jsbytes("EDESTADDRREQ")],
     _i7_=[0,caml_string_of_jsbytes("EMSGSIZE")],
     _i8_=[0,caml_string_of_jsbytes("EPROTOTYPE")],
     _i9_=[0,caml_string_of_jsbytes("ENOPROTOOPT")],
     _i__=[0,caml_string_of_jsbytes("EPROTONOSUPPORT")],
     _i$_=[0,caml_string_of_jsbytes("ESOCKTNOSUPPORT")],
     _ja_=[0,caml_string_of_jsbytes("EOPNOTSUPP")],
     _jb_=[0,caml_string_of_jsbytes("EPFNOSUPPORT")],
     _jc_=[0,caml_string_of_jsbytes("EAFNOSUPPORT")],
     _jd_=[0,caml_string_of_jsbytes("EADDRINUSE")],
     _je_=[0,caml_string_of_jsbytes("EADDRNOTAVAIL")],
     _jf_=[0,caml_string_of_jsbytes("ENETDOWN")],
     _jg_=[0,caml_string_of_jsbytes("ENETUNREACH")],
     _jh_=[0,caml_string_of_jsbytes("ENETRESET")],
     _ji_=[0,caml_string_of_jsbytes("ECONNABORTED")],
     _jj_=[0,caml_string_of_jsbytes("ECONNRESET")],
     _jk_=[0,caml_string_of_jsbytes("ENOBUFS")],
     _jl_=[0,caml_string_of_jsbytes("EISCONN")],
     _jm_=[0,caml_string_of_jsbytes("ENOTCONN")],
     _jn_=[0,caml_string_of_jsbytes("ESHUTDOWN")],
     _jo_=[0,caml_string_of_jsbytes("ETOOMANYREFS")],
     _jp_=[0,caml_string_of_jsbytes("ETIMEDOUT")],
     _jq_=[0,caml_string_of_jsbytes("ECONNREFUSED")],
     _jr_=[0,caml_string_of_jsbytes("EHOSTDOWN")],
     _js_=[0,caml_string_of_jsbytes("EHOSTUNREACH")],
     _jt_=[0,caml_string_of_jsbytes("ELOOP")],
     _ju_=[0,caml_string_of_jsbytes("EOVERFLOW")],
     _jv_=[0,caml_string_of_jsbytes("EUNKNOWNERR")],
     _jG_=
      [0,caml_string_of_jsbytes("src/core_sys.ml.Command_failed_with_status")],
     _jH_=[0,caml_string_of_jsbytes("_none_"),0,-1],
     _jy_=
      [0,
       [2,
        0,
        [11,
         caml_string_of_jsbytes(": environment variable "),
         [2,0,[11,caml_string_of_jsbytes(" is not set"),0]]]],
       caml_string_of_jsbytes("%s: environment variable %s is not set")],
     _kI_=[0,7,[0,5,[0,2,0]]],
     _kH_=[0,1],
     _kG_=
      [0,
       [2,0,[11,caml_string_of_jsbytes(".tmp."),[4,6,[0,2,6],0,[2,0,0]]]],
       caml_string_of_jsbytes("%s.tmp.%06x%s")],
     _kE_=
      [0,
       [11,caml_string_of_jsbytes("bash -c 'compgen -f "),[2,0,[12,39,0]]],
       caml_string_of_jsbytes("bash -c 'compgen -f %s'")],
     _kF_=[0,1],
     _k7_=
      [0,
       [11,
        caml_string_of_jsbytes("Signal.send_exn "),
        [2,0,[11,caml_string_of_jsbytes(" pid:"),[2,0,0]]]],
       caml_string_of_jsbytes("Signal.send_exn %s pid:%s")],
     _k4_=[0,caml_string_of_jsbytes("My_group")],
     _k5_=[0,caml_string_of_jsbytes("Group")],
     _k6_=[0,caml_string_of_jsbytes("Pid")],
     _k2_=[0,caml_string_of_jsbytes("src/signal.ml.Expected_atom")],
     _k3_=[0,caml_string_of_jsbytes("_none_"),0,-1],
     _kV_=
      [0,
       caml_string_of_jsbytes
        ("src/signal.ml.Invalid_signal_mnemonic_or_number")],
     _kW_=[0,caml_string_of_jsbytes("_none_"),0,-1],
     _kQ_=[0,caml_string_of_jsbytes("Stop")],
     _kR_=[0,caml_string_of_jsbytes("Terminate")],
     _kS_=[0,caml_string_of_jsbytes("Dump_core")],
     _kT_=[0,caml_string_of_jsbytes("Ignore")],
     _kP_=[0,caml_string_of_jsbytes("Continue")],
     _kX_=[0,1],
     _kY_=[0,1],
     _kZ_=[0,1],
     _ll_=[0,caml_string_of_jsbytes("src/syscall_result.ml"),143,23],
     _lj_=[0,caml_string_of_jsbytes("src/syscall_result.ml"),102,2861,2883],
     _li_=[0,caml_string_of_jsbytes("src/syscall_result.ml"),93,2621,2643],
     _lh_=[0,caml_string_of_jsbytes("src/syscall_result.ml"),88,2483,2505],
     _lg_=
      [0,
       [11,
        caml_string_of_jsbytes
         ("Syscall_result.create_ok received negative value ("),
        [4,0,0,0,[12,41,0]]],
       caml_string_of_jsbytes
        ("Syscall_result.create_ok received negative value (%d)")],
     _lf_=[1,[0,0]],
     _le_=[0,caml_string_of_jsbytes("src/syscall_result.ml"),17,329,352],
     _wi_=
      [0,
       [11,
        caml_string_of_jsbytes("IPv6 address is length "),
        [4,0,0,0,[12,33,0]]],
       caml_string_of_jsbytes("IPv6 address is length %d!")],
     _wh_=
      [0,
       [4,
        6,
        [0,2,2],
        0,
        [4,
         6,
         [0,2,2],
         0,
         [12,
          58,
          [4,
           6,
           [0,2,2],
           0,
           [4,
            6,
            [0,2,2],
            0,
            [12,
             58,
             [4,
              6,
              [0,2,2],
              0,
              [4,6,[0,2,2],0,[12,58,[4,6,partial$1,0,partial$0]]]]]]]]]],
       caml_string_of_jsbytes
        ("%02x%02x:%02x%02x:%02x%02x:%02x%02x:%02x%02x:%02x%02x:%02x%02x:%02x%02x")],
     _wg_=
      [0,
       [11,
        caml_string_of_jsbytes("IPv4 address is length "),
        [4,0,0,0,[12,33,0]]],
       caml_string_of_jsbytes("IPv4 address is length %d!")],
     _wf_=
      [0,
       [4,0,0,0,[12,46,[4,0,0,0,[12,46,[4,0,0,0,[12,46,[4,0,0,0,0]]]]]]],
       caml_string_of_jsbytes("%d.%d.%d.%d")],
     _vZ_=[0,caml_string_of_jsbytes("broadcast_or_destination")],
     _v0_=[0,caml_string_of_jsbytes("netmask")],
     _v1_=[0,caml_string_of_jsbytes("address")],
     _v2_=[0,caml_string_of_jsbytes("flags")],
     _v3_=[0,caml_string_of_jsbytes("family")],
     _v4_=[0,caml_string_of_jsbytes("name")],
     _vJ_=[0,caml_string_of_jsbytes("Allmulti")],
     _vK_=[0,caml_string_of_jsbytes("Automedia")],
     _vL_=[0,caml_string_of_jsbytes("Broadcast")],
     _vM_=[0,caml_string_of_jsbytes("Debug")],
     _vN_=[0,caml_string_of_jsbytes("Dynamic")],
     _vO_=[0,caml_string_of_jsbytes("Loopback")],
     _vP_=[0,caml_string_of_jsbytes("Master")],
     _vQ_=[0,caml_string_of_jsbytes("Multicast")],
     _vR_=[0,caml_string_of_jsbytes("Noarp")],
     _vS_=[0,caml_string_of_jsbytes("Notrailers")],
     _vT_=[0,caml_string_of_jsbytes("Pointopoint")],
     _vU_=[0,caml_string_of_jsbytes("Portsel")],
     _vV_=[0,caml_string_of_jsbytes("Promisc")],
     _vW_=[0,caml_string_of_jsbytes("Running")],
     _vX_=[0,caml_string_of_jsbytes("Slave")],
     _vY_=[0,caml_string_of_jsbytes("Up")],
     _vB_=[0,caml_string_of_jsbytes("Packet")],
     _vC_=[0,caml_string_of_jsbytes("Inet4")],
     _vD_=[0,caml_string_of_jsbytes("Inet6")],
     _vz_=[0,caml_string_of_jsbytes("Broadcast")],
     _vA_=[0,caml_string_of_jsbytes("Destination")],
     _vv_=[0,caml_string_of_jsbytes("TCOOFF")],
     _vw_=[0,caml_string_of_jsbytes("TCOON")],
     _vx_=[0,caml_string_of_jsbytes("TCIOFF")],
     _vy_=[0,caml_string_of_jsbytes("TCION")],
     _vs_=[0,caml_string_of_jsbytes("TCIFLUSH")],
     _vt_=[0,caml_string_of_jsbytes("TCOFLUSH")],
     _vu_=[0,caml_string_of_jsbytes("TCIOFLUSH")],
     _vp_=[0,caml_string_of_jsbytes("TCSANOW")],
     _vq_=[0,caml_string_of_jsbytes("TCSADRAIN")],
     _vr_=[0,caml_string_of_jsbytes("TCSAFLUSH")],
     _uP_=[0,caml_string_of_jsbytes("c_vstop")],
     _uQ_=[0,caml_string_of_jsbytes("c_vstart")],
     _uR_=[0,caml_string_of_jsbytes("c_vtime")],
     _uS_=[0,caml_string_of_jsbytes("c_vmin")],
     _uT_=[0,caml_string_of_jsbytes("c_veol")],
     _uU_=[0,caml_string_of_jsbytes("c_veof")],
     _uV_=[0,caml_string_of_jsbytes("c_vkill")],
     _uW_=[0,caml_string_of_jsbytes("c_verase")],
     _uX_=[0,caml_string_of_jsbytes("c_vquit")],
     _uY_=[0,caml_string_of_jsbytes("c_vintr")],
     _uZ_=[0,caml_string_of_jsbytes("c_echonl")],
     _u0_=[0,caml_string_of_jsbytes("c_echok")],
     _u1_=[0,caml_string_of_jsbytes("c_echoe")],
     _u2_=[0,caml_string_of_jsbytes("c_echo")],
     _u3_=[0,caml_string_of_jsbytes("c_noflsh")],
     _u4_=[0,caml_string_of_jsbytes("c_icanon")],
     _u5_=[0,caml_string_of_jsbytes("c_isig")],
     _u6_=[0,caml_string_of_jsbytes("c_clocal")],
     _u7_=[0,caml_string_of_jsbytes("c_hupcl")],
     _u8_=[0,caml_string_of_jsbytes("c_parodd")],
     _u9_=[0,caml_string_of_jsbytes("c_parenb")],
     _u__=[0,caml_string_of_jsbytes("c_cread")],
     _u$_=[0,caml_string_of_jsbytes("c_cstopb")],
     _va_=[0,caml_string_of_jsbytes("c_csize")],
     _vb_=[0,caml_string_of_jsbytes("c_ibaud")],
     _vc_=[0,caml_string_of_jsbytes("c_obaud")],
     _vd_=[0,caml_string_of_jsbytes("c_opost")],
     _ve_=[0,caml_string_of_jsbytes("c_ixoff")],
     _vf_=[0,caml_string_of_jsbytes("c_ixon")],
     _vg_=[0,caml_string_of_jsbytes("c_icrnl")],
     _vh_=[0,caml_string_of_jsbytes("c_igncr")],
     _vi_=[0,caml_string_of_jsbytes("c_inlcr")],
     _vj_=[0,caml_string_of_jsbytes("c_istrip")],
     _vk_=[0,caml_string_of_jsbytes("c_inpck")],
     _vl_=[0,caml_string_of_jsbytes("c_parmrk")],
     _vm_=[0,caml_string_of_jsbytes("c_ignpar")],
     _vn_=[0,caml_string_of_jsbytes("c_brkint")],
     _vo_=[0,caml_string_of_jsbytes("c_ignbrk")],
     _uN_=[0,caml_string_of_jsbytes("opts")],
     _uO_=[0,caml_string_of_jsbytes("addr")],
     _uI_=[0,caml_string_of_jsbytes("NI_NOFQDN")],
     _uJ_=[0,caml_string_of_jsbytes("NI_NUMERICHOST")],
     _uK_=[0,caml_string_of_jsbytes("NI_NAMEREQD")],
     _uL_=[0,caml_string_of_jsbytes("NI_NUMERICSERV")],
     _uM_=[0,caml_string_of_jsbytes("NI_DGRAM")],
     _uG_=[0,caml_string_of_jsbytes("ni_service")],
     _uH_=[0,caml_string_of_jsbytes("ni_hostname")],
     _uF_=[0,caml_string_of_jsbytes("src/core_unix.ml"),2693,0],
     _uz_=[0,caml_string_of_jsbytes("AI_NUMERICHOST")],
     _uA_=[0,caml_string_of_jsbytes("AI_CANONNAME")],
     _uB_=[0,caml_string_of_jsbytes("AI_PASSIVE")],
     _uC_=[0,caml_string_of_jsbytes("AI_FAMILY")],
     _uD_=[0,caml_string_of_jsbytes("AI_SOCKTYPE")],
     _uE_=[0,caml_string_of_jsbytes("AI_PROTOCOL")],
     _uu_=[0,caml_string_of_jsbytes("ai_canonname")],
     _uv_=[0,caml_string_of_jsbytes("ai_addr")],
     _uw_=[0,caml_string_of_jsbytes("ai_protocol")],
     _ux_=[0,caml_string_of_jsbytes("ai_socktype")],
     _uy_=[0,caml_string_of_jsbytes("ai_family")],
     _ut_=[0,caml_string_of_jsbytes("src/core_unix.ml"),2668,0],
     _uo_=[0,caml_string_of_jsbytes("ai_canonname")],
     _up_=[0,caml_string_of_jsbytes("ai_addr")],
     _uq_=[0,caml_string_of_jsbytes("ai_protocol")],
     _ur_=[0,caml_string_of_jsbytes("ai_socktype")],
     _us_=[0,caml_string_of_jsbytes("ai_family")],
     _uf_=[0,caml_string_of_jsbytes("SO_SNDTIMEO")],
     _ug_=[0,caml_string_of_jsbytes("SO_RCVTIMEO")],
     _ue_=[0,caml_string_of_jsbytes("SO_LINGER")],
     _t__=[0,caml_string_of_jsbytes("SO_SNDBUF")],
     _t$_=[0,caml_string_of_jsbytes("SO_RCVBUF")],
     _ua_=[0,caml_string_of_jsbytes("SO_ERROR")],
     _ub_=[0,caml_string_of_jsbytes("SO_TYPE")],
     _uc_=[0,caml_string_of_jsbytes("SO_RCVLOWAT")],
     _ud_=[0,caml_string_of_jsbytes("SO_SNDLOWAT")],
     _t1_=[0,caml_string_of_jsbytes("SO_DEBUG")],
     _t2_=[0,caml_string_of_jsbytes("SO_BROADCAST")],
     _t3_=[0,caml_string_of_jsbytes("SO_REUSEADDR")],
     _t4_=[0,caml_string_of_jsbytes("SO_KEEPALIVE")],
     _t5_=[0,caml_string_of_jsbytes("SO_DONTROUTE")],
     _t6_=[0,caml_string_of_jsbytes("SO_OOBINLINE")],
     _t7_=[0,caml_string_of_jsbytes("SO_ACCEPTCONN")],
     _t8_=[0,caml_string_of_jsbytes("TCP_NODELAY")],
     _t9_=[0,caml_string_of_jsbytes("IPV6_ONLY")],
     _tU_=[0,caml_string_of_jsbytes("MSG_OOB")],
     _tV_=[0,caml_string_of_jsbytes("MSG_DONTROUTE")],
     _tW_=[0,caml_string_of_jsbytes("MSG_PEEK")],
     _tR_=[0,caml_string_of_jsbytes("SHUTDOWN_RECEIVE")],
     _tS_=[0,caml_string_of_jsbytes("SHUTDOWN_SEND")],
     _tT_=[0,caml_string_of_jsbytes("SHUTDOWN_ALL")],
     _tQ_=[0,caml_string_of_jsbytes("")],
     _tM_=
      [1,caml_string_of_jsbytes("src/core_unix.ml.sockaddr_blocking_sexp")],
     _tG_=[0,caml_string_of_jsbytes("ADDR_UNIX")],
     _tH_=[0,caml_string_of_jsbytes("ADDR_INET")],
     _tF_=[1,caml_string_of_jsbytes("src/core_unix.ml.sockaddr")],
     _tz_=[0,caml_string_of_jsbytes("ADDR_UNIX")],
     _tA_=[0,caml_string_of_jsbytes("ADDR_INET")],
     _ty_=[1,caml_string_of_jsbytes("src/core_unix.ml.socket_type")],
     _tp_=[0,caml_string_of_jsbytes("SOCK_STREAM")],
     _tq_=[0,caml_string_of_jsbytes("SOCK_DGRAM")],
     _tr_=[0,caml_string_of_jsbytes("SOCK_RAW")],
     _ts_=[0,caml_string_of_jsbytes("SOCK_SEQPACKET")],
     _to_=[1,caml_string_of_jsbytes("src/core_unix.ml.socket_domain")],
     _tg_=[0,caml_string_of_jsbytes("PF_UNIX")],
     _th_=[0,caml_string_of_jsbytes("PF_INET")],
     _ti_=[0,caml_string_of_jsbytes("PF_INET6")],
     _te_=[0,caml_string_of_jsbytes("src/core_unix.ml.Service.Getbyport")],
     _tf_=[0,caml_string_of_jsbytes("_none_"),0,-1],
     _tb_=[0,caml_string_of_jsbytes("src/core_unix.ml.Service.Getbyname")],
     _tc_=[0,caml_string_of_jsbytes("_none_"),0,-1],
     _s8_=[0,caml_string_of_jsbytes("proto")],
     _s9_=[0,caml_string_of_jsbytes("port")],
     _s__=[0,caml_string_of_jsbytes("aliases")],
     _s$_=[0,caml_string_of_jsbytes("name")],
     _s7_=[0,caml_string_of_jsbytes("src/core_unix.ml"),2363,2],
     _s4_=[0,caml_string_of_jsbytes("src/core_unix.ml.Protocol.Getbynumber")],
     _s5_=[0,caml_string_of_jsbytes("_none_"),0,-1],
     _sY_=[0,caml_string_of_jsbytes("src/core_unix.ml.Protocol.Getbyname")],
     _sZ_=[0,caml_string_of_jsbytes("_none_"),0,-1],
     _sU_=[0,caml_string_of_jsbytes("proto")],
     _sV_=[0,caml_string_of_jsbytes("aliases")],
     _sW_=[0,caml_string_of_jsbytes("name")],
     _sT_=[0,caml_string_of_jsbytes("src/core_unix.ml"),2336,2],
     _sc_=[0,caml_string_of_jsbytes("src/core_unix.ml"),2290,4],
     _sd_=[0,caml_string_of_jsbytes("src/core_unix.ml"),2291,4],
     _sb_=[0,[2,0,[12,47,[4,0,0,0,0]]],caml_string_of_jsbytes("%s/%d")],
     _sa_=
      [0,
       [11,
        caml_string_of_jsbytes("Couldn't parse '"),
        [2,0,[11,caml_string_of_jsbytes("' into a CIDR address/bits pair"),0]]],
       caml_string_of_jsbytes
        ("Couldn't parse '%s' into a CIDR address/bits pair")],
     _r$_=
      [0,
       [4,
        0,
        0,
        0,
        [11,
         caml_string_of_jsbytes
          (" is an invalid number of mask bits (0 <= bits <= 32)"),
         0]],
       caml_string_of_jsbytes
        ("%d is an invalid number of mask bits (0 <= bits <= 32)")],
     _r6_=[0,caml_string_of_jsbytes("src/core_unix.ml"),2197,17],
     _r4_=
      [0,caml_string_of_jsbytes("src/core_unix.ml.Inet_addr.Get_inet_addr")],
     _r5_=[0,caml_string_of_jsbytes("_none_"),0,-1],
     _r0_=[0,caml_string_of_jsbytes("src/core_unix.ml.Host.Getbyaddr")],
     _r1_=[0,caml_string_of_jsbytes("_none_"),0,-1],
     _rU_=[0,caml_string_of_jsbytes("src/core_unix.ml.Host.Getbyname")],
     _rV_=[0,caml_string_of_jsbytes("_none_"),0,-1],
     _rP_=[0,caml_string_of_jsbytes("addresses")],
     _rQ_=[0,caml_string_of_jsbytes("family")],
     _rR_=[0,caml_string_of_jsbytes("aliases")],
     _rS_=[0,caml_string_of_jsbytes("name")],
     _rk_=[0,caml_string_of_jsbytes("Unix")],
     _rl_=[0,caml_string_of_jsbytes("Inet6")],
     _rj_=[0,caml_string_of_jsbytes("Inet")],
     _q__=[0,caml_string_of_jsbytes("src/core_unix.ml.Group.Getbygid")],
     _q$_=[0,caml_string_of_jsbytes("_none_"),0,-1],
     _q4_=[0,caml_string_of_jsbytes("src/core_unix.ml.Group.Getbyname")],
     _q5_=[0,caml_string_of_jsbytes("_none_"),0,-1],
     _qZ_=[0,caml_string_of_jsbytes("mem")],
     _q0_=[0,caml_string_of_jsbytes("gid")],
     _q1_=[0,caml_string_of_jsbytes("passwd")],
     _q2_=[0,caml_string_of_jsbytes("name")],
     _qU_=[0,caml_string_of_jsbytes("src/core_unix.ml.Passwd.Getbyuid")],
     _qV_=[0,caml_string_of_jsbytes("_none_"),0,-1],
     _qO_=[0,caml_string_of_jsbytes("src/core_unix.ml.Passwd.Getbyname")],
     _qP_=[0,caml_string_of_jsbytes("_none_"),0,-1],
     _qG_=[0,caml_string_of_jsbytes("shell")],
     _qH_=[0,caml_string_of_jsbytes("dir")],
     _qI_=[0,caml_string_of_jsbytes("gecos")],
     _qJ_=[0,caml_string_of_jsbytes("gid")],
     _qK_=[0,caml_string_of_jsbytes("uid")],
     _qL_=[0,caml_string_of_jsbytes("passwd")],
     _qM_=[0,caml_string_of_jsbytes("name")],
     _qF_=[0,caml_string_of_jsbytes("src/core_unix.ml"),1916,2],
     _qq_=
      [0,
       [11,
        caml_string_of_jsbytes
         ("NUL bytes are not allowed in the group and user names, but found one in "),
        [3,0,0]],
       caml_string_of_jsbytes
        ("NUL bytes are not allowed in the group and user names, but found one in %S")],
     _qo_=[0,caml_string_of_jsbytes("it_value")],
     _qp_=[0,caml_string_of_jsbytes("it_interval")],
     _qn_=[0,caml_string_of_jsbytes("src/core_unix.ml"),1855,0],
     _qk_=[0,caml_string_of_jsbytes("ITIMER_REAL")],
     _ql_=[0,caml_string_of_jsbytes("ITIMER_VIRTUAL")],
     _qm_=[0,caml_string_of_jsbytes("ITIMER_PROF")],
     _qb_=[0,caml_string_of_jsbytes("tm_isdst")],
     _qc_=[0,caml_string_of_jsbytes("tm_yday")],
     _qd_=[0,caml_string_of_jsbytes("tm_wday")],
     _qe_=[0,caml_string_of_jsbytes("tm_year")],
     _qf_=[0,caml_string_of_jsbytes("tm_mon")],
     _qg_=[0,caml_string_of_jsbytes("tm_mday")],
     _qh_=[0,caml_string_of_jsbytes("tm_hour")],
     _qi_=[0,caml_string_of_jsbytes("tm_min")],
     _qj_=[0,caml_string_of_jsbytes("tm_sec")],
     _qa_=[0,caml_string_of_jsbytes("src/core_unix.ml"),1816,0],
     _p8_=[0,caml_string_of_jsbytes("tms_cstime")],
     _p9_=[0,caml_string_of_jsbytes("tms_cutime")],
     _p__=[0,caml_string_of_jsbytes("tms_stime")],
     _p$_=[0,caml_string_of_jsbytes("tms_utime")],
     _p7_=[0,caml_string_of_jsbytes("src/core_unix.ml"),1779,0],
     _p4_=[0,caml_string_of_jsbytes("Never")],
     _p5_=[0,caml_string_of_jsbytes("Immediately")],
     _p6_=[0,caml_string_of_jsbytes("After")],
     _p1_=[0,caml_string_of_jsbytes("except")],
     _p2_=[0,caml_string_of_jsbytes("write")],
     _p3_=[0,caml_string_of_jsbytes("read")],
     _pX_=[0,-72399366,0],
     _pW_=[0,caml_string_of_jsbytes("src/core_unix.ml"),1649,14],
     _pV_=[0,2,0],
     _pU_=[0,caml_string_of_jsbytes("src/core_unix.ml"),1603,4],
     _pT_=
      [0,
       caml_string_of_jsbytes("/bin"),
       [0,caml_string_of_jsbytes("/usr/bin"),0]],
     _pP_=[0,caml_string_of_jsbytes("stderr")],
     _pQ_=[0,caml_string_of_jsbytes("stdout")],
     _pR_=[0,caml_string_of_jsbytes("stdin")],
     _pS_=[0,caml_string_of_jsbytes("pid")],
     _pN_=[0,caml_string_of_jsbytes("src/core_unix.ml"),1469,4],
     _pL_=
      [0,
       [11,caml_string_of_jsbytes("0o"),[4,10,0,0,0]],
       caml_string_of_jsbytes("0o%o")],
     _pH_=[0,caml_string_of_jsbytes("R_OK")],
     _pI_=[0,caml_string_of_jsbytes("W_OK")],
     _pJ_=[0,caml_string_of_jsbytes("X_OK")],
     _pK_=[0,caml_string_of_jsbytes("F_OK")],
     _pu_=[0,caml_string_of_jsbytes("st_ctime")],
     _pv_=[0,caml_string_of_jsbytes("st_mtime")],
     _pw_=[0,caml_string_of_jsbytes("st_atime")],
     _px_=[0,caml_string_of_jsbytes("st_size")],
     _py_=[0,caml_string_of_jsbytes("st_rdev")],
     _pz_=[0,caml_string_of_jsbytes("st_gid")],
     _pA_=[0,caml_string_of_jsbytes("st_uid")],
     _pB_=[0,caml_string_of_jsbytes("st_nlink")],
     _pC_=[0,caml_string_of_jsbytes("st_perm")],
     _pD_=[0,caml_string_of_jsbytes("st_kind")],
     _pE_=[0,caml_string_of_jsbytes("st_ino")],
     _pF_=[0,caml_string_of_jsbytes("st_dev")],
     _pt_=[0,caml_string_of_jsbytes("src/core_unix.ml"),1230,0],
     _ps_=[0,caml_string_of_jsbytes("src/core_unix.ml"),1209,2],
     _pm_=[0,caml_string_of_jsbytes("F_ULOCK")],
     _pn_=[0,caml_string_of_jsbytes("F_LOCK")],
     _po_=[0,caml_string_of_jsbytes("F_TLOCK")],
     _pp_=[0,caml_string_of_jsbytes("F_TEST")],
     _pq_=[0,caml_string_of_jsbytes("F_RLOCK")],
     _pr_=[0,caml_string_of_jsbytes("F_TRLOCK")],
     _pa_=[0,caml_string_of_jsbytes("st_ctime")],
     _pb_=[0,caml_string_of_jsbytes("st_mtime")],
     _pc_=[0,caml_string_of_jsbytes("st_atime")],
     _pd_=[0,caml_string_of_jsbytes("st_size")],
     _pe_=[0,caml_string_of_jsbytes("st_rdev")],
     _pf_=[0,caml_string_of_jsbytes("st_gid")],
     _pg_=[0,caml_string_of_jsbytes("st_uid")],
     _ph_=[0,caml_string_of_jsbytes("st_nlink")],
     _pi_=[0,caml_string_of_jsbytes("st_perm")],
     _pj_=[0,caml_string_of_jsbytes("st_kind")],
     _pk_=[0,caml_string_of_jsbytes("st_ino")],
     _pl_=[0,caml_string_of_jsbytes("st_dev")],
     _o$_=[0,caml_string_of_jsbytes("src/core_unix.ml"),1131,2],
     _o4_=[0,caml_string_of_jsbytes("S_REG")],
     _o5_=[0,caml_string_of_jsbytes("S_DIR")],
     _o6_=[0,caml_string_of_jsbytes("S_CHR")],
     _o7_=[0,caml_string_of_jsbytes("S_BLK")],
     _o8_=[0,caml_string_of_jsbytes("S_LNK")],
     _o9_=[0,caml_string_of_jsbytes("S_FIFO")],
     _o__=[0,caml_string_of_jsbytes("S_SOCK")],
     _o1_=[0,caml_string_of_jsbytes("SEEK_SET")],
     _o2_=[0,caml_string_of_jsbytes("SEEK_CUR")],
     _o3_=[0,caml_string_of_jsbytes("SEEK_END")],
     _oT_=
      [0,
       [11,
        caml_string_of_jsbytes
         ("Unix.openfile: no read or write flag specified in mode: "),
        [2,0,0]],
       caml_string_of_jsbytes
        ("Unix.openfile: no read or write flag specified in mode: %s")],
     _oS_=
      [0,
       [11,caml_string_of_jsbytes("0o"),[4,10,[0,2,3],0,0]],
       caml_string_of_jsbytes("0o%03o")],
     _oD_=[0,caml_string_of_jsbytes("O_RDONLY")],
     _oE_=[0,caml_string_of_jsbytes("O_WRONLY")],
     _oF_=[0,caml_string_of_jsbytes("O_RDWR")],
     _oG_=[0,caml_string_of_jsbytes("O_NONBLOCK")],
     _oH_=[0,caml_string_of_jsbytes("O_APPEND")],
     _oI_=[0,caml_string_of_jsbytes("O_CREAT")],
     _oJ_=[0,caml_string_of_jsbytes("O_TRUNC")],
     _oK_=[0,caml_string_of_jsbytes("O_EXCL")],
     _oL_=[0,caml_string_of_jsbytes("O_NOCTTY")],
     _oM_=[0,caml_string_of_jsbytes("O_DSYNC")],
     _oN_=[0,caml_string_of_jsbytes("O_SYNC")],
     _oO_=[0,caml_string_of_jsbytes("O_RSYNC")],
     _oP_=[0,caml_string_of_jsbytes("O_SHARE_DELETE")],
     _oQ_=[0,caml_string_of_jsbytes("O_CLOEXEC")],
     _oR_=[0,caml_string_of_jsbytes("O_KEEPEXEC")],
     _oC_=[0,caml_string_of_jsbytes("You don't have a parent process")],
     _oA_=[0,caml_string_of_jsbytes("Child_pid")],
     _oB_=[0,caml_string_of_jsbytes("src/core_unix.ml"),997,28640,28660],
     _oz_=[0,caml_string_of_jsbytes("src/core_unix.ml"),990,2],
     _oy_=[0,0,[0,1,0]],
     _ox_=[0,1,0],
     _ow_=[0,0,0],
     _ov_=[0,caml_string_of_jsbytes("src/core_unix.ml"),961,27702,27722],
     _or_=[0,caml_string_of_jsbytes("Any")],
     _os_=[0,caml_string_of_jsbytes("My_group")],
     _ot_=[0,caml_string_of_jsbytes("Group")],
     _ou_=[0,caml_string_of_jsbytes("Pid")],
     _op_=[0,caml_string_of_jsbytes("WUNTRACED")],
     _oq_=[0,caml_string_of_jsbytes("WNOHANG")],
     _on_=
      [0,
       caml_string_of_jsbytes
        ("src/core_unix.ml.Fork_returned_negative_result")],
     _oo_=[0,caml_string_of_jsbytes("_none_"),0,-1],
     _oi_=[0,caml_string_of_jsbytes("Override")],
     _oj_=[0,caml_string_of_jsbytes("Extend")],
     _ok_=[0,caml_string_of_jsbytes("Replace")],
     _ol_=[0,caml_string_of_jsbytes("Replace_raw")],
     _oh_=[0,0],
     _og_=
      [0,
       [11,
        caml_string_of_jsbytes("stopped by "),
        [2,
         0,
         [11,caml_string_of_jsbytes(" (signal number "),[4,0,0,0,[12,41,0]]]]],
       caml_string_of_jsbytes("stopped by %s (signal number %d)")],
     _of_=[0,caml_string_of_jsbytes("Stop")],
     _oe_=[0,0],
     _oc_=
      [0,
       caml_string_of_jsbytes
        ("src/core_unix.ml.Exit_or_signal.Of_unix_got_invalid_status")],
     _od_=[0,caml_string_of_jsbytes("_none_"),0,-1],
     _oa_=
      [0,
       [11,
        caml_string_of_jsbytes("died after receiving "),
        [2,
         0,
         [11,caml_string_of_jsbytes(" (signal number "),[4,0,0,0,[12,41,0]]]]],
       caml_string_of_jsbytes("died after receiving %s (signal number %d)")],
     _n$_=[0,caml_string_of_jsbytes("Signal")],
     _n__=[0,0],
     _n8_=
      [0,
       caml_string_of_jsbytes
        ("src/core_unix.ml.Exit.Exit_code_must_be_nonnegative")],
     _n9_=[0,caml_string_of_jsbytes("_none_"),0,-1],
     _n6_=
      [0,
       [11,caml_string_of_jsbytes("exited with code "),[4,0,0,0,0]],
       caml_string_of_jsbytes("exited with code %d")],
     _n5_=[0,caml_string_of_jsbytes("Exit_non_zero")],
     _n2_=[0,caml_string_of_jsbytes("WEXITED")],
     _n3_=[0,caml_string_of_jsbytes("WSIGNALED")],
     _n4_=[0,caml_string_of_jsbytes("WSTOPPED")],
     _mX_=[0,caml_string_of_jsbytes("E2BIG")],
     _mY_=[0,caml_string_of_jsbytes("EACCES")],
     _mZ_=[0,caml_string_of_jsbytes("EAGAIN")],
     _m0_=[0,caml_string_of_jsbytes("EBADF")],
     _m1_=[0,caml_string_of_jsbytes("EBUSY")],
     _m2_=[0,caml_string_of_jsbytes("ECHILD")],
     _m3_=[0,caml_string_of_jsbytes("EDEADLK")],
     _m4_=[0,caml_string_of_jsbytes("EDOM")],
     _m5_=[0,caml_string_of_jsbytes("EEXIST")],
     _m6_=[0,caml_string_of_jsbytes("EFAULT")],
     _m7_=[0,caml_string_of_jsbytes("EFBIG")],
     _m8_=[0,caml_string_of_jsbytes("EINTR")],
     _m9_=[0,caml_string_of_jsbytes("EINVAL")],
     _m__=[0,caml_string_of_jsbytes("EIO")],
     _m$_=[0,caml_string_of_jsbytes("EISDIR")],
     _na_=[0,caml_string_of_jsbytes("EMFILE")],
     _nb_=[0,caml_string_of_jsbytes("EMLINK")],
     _nc_=[0,caml_string_of_jsbytes("ENAMETOOLONG")],
     _nd_=[0,caml_string_of_jsbytes("ENFILE")],
     _ne_=[0,caml_string_of_jsbytes("ENODEV")],
     _nf_=[0,caml_string_of_jsbytes("ENOENT")],
     _ng_=[0,caml_string_of_jsbytes("ENOEXEC")],
     _nh_=[0,caml_string_of_jsbytes("ENOLCK")],
     _ni_=[0,caml_string_of_jsbytes("ENOMEM")],
     _nj_=[0,caml_string_of_jsbytes("ENOSPC")],
     _nk_=[0,caml_string_of_jsbytes("ENOSYS")],
     _nl_=[0,caml_string_of_jsbytes("ENOTDIR")],
     _nm_=[0,caml_string_of_jsbytes("ENOTEMPTY")],
     _nn_=[0,caml_string_of_jsbytes("ENOTTY")],
     _no_=[0,caml_string_of_jsbytes("ENXIO")],
     _np_=[0,caml_string_of_jsbytes("EPERM")],
     _nq_=[0,caml_string_of_jsbytes("EPIPE")],
     _nr_=[0,caml_string_of_jsbytes("ERANGE")],
     _ns_=[0,caml_string_of_jsbytes("EROFS")],
     _nt_=[0,caml_string_of_jsbytes("ESPIPE")],
     _nu_=[0,caml_string_of_jsbytes("ESRCH")],
     _nv_=[0,caml_string_of_jsbytes("EXDEV")],
     _nw_=[0,caml_string_of_jsbytes("EWOULDBLOCK")],
     _nx_=[0,caml_string_of_jsbytes("EINPROGRESS")],
     _ny_=[0,caml_string_of_jsbytes("EALREADY")],
     _nz_=[0,caml_string_of_jsbytes("ENOTSOCK")],
     _nA_=[0,caml_string_of_jsbytes("EDESTADDRREQ")],
     _nB_=[0,caml_string_of_jsbytes("EMSGSIZE")],
     _nC_=[0,caml_string_of_jsbytes("EPROTOTYPE")],
     _nD_=[0,caml_string_of_jsbytes("ENOPROTOOPT")],
     _nE_=[0,caml_string_of_jsbytes("EPROTONOSUPPORT")],
     _nF_=[0,caml_string_of_jsbytes("ESOCKTNOSUPPORT")],
     _nG_=[0,caml_string_of_jsbytes("EOPNOTSUPP")],
     _nH_=[0,caml_string_of_jsbytes("EPFNOSUPPORT")],
     _nI_=[0,caml_string_of_jsbytes("EAFNOSUPPORT")],
     _nJ_=[0,caml_string_of_jsbytes("EADDRINUSE")],
     _nK_=[0,caml_string_of_jsbytes("EADDRNOTAVAIL")],
     _nL_=[0,caml_string_of_jsbytes("ENETDOWN")],
     _nM_=[0,caml_string_of_jsbytes("ENETUNREACH")],
     _nN_=[0,caml_string_of_jsbytes("ENETRESET")],
     _nO_=[0,caml_string_of_jsbytes("ECONNABORTED")],
     _nP_=[0,caml_string_of_jsbytes("ECONNRESET")],
     _nQ_=[0,caml_string_of_jsbytes("ENOBUFS")],
     _nR_=[0,caml_string_of_jsbytes("EISCONN")],
     _nS_=[0,caml_string_of_jsbytes("ENOTCONN")],
     _nT_=[0,caml_string_of_jsbytes("ESHUTDOWN")],
     _nU_=[0,caml_string_of_jsbytes("ETOOMANYREFS")],
     _nV_=[0,caml_string_of_jsbytes("ETIMEDOUT")],
     _nW_=[0,caml_string_of_jsbytes("ECONNREFUSED")],
     _nX_=[0,caml_string_of_jsbytes("EHOSTDOWN")],
     _nY_=[0,caml_string_of_jsbytes("EHOSTUNREACH")],
     _nZ_=[0,caml_string_of_jsbytes("ELOOP")],
     _n0_=[0,caml_string_of_jsbytes("EOVERFLOW")],
     _n1_=[0,caml_string_of_jsbytes("EUNKNOWNERR")],
     _mW_=
      [0,
       [11,caml_string_of_jsbytes("0o"),[4,10,0,0,0]],
       caml_string_of_jsbytes("0o%o")],
     _mU_=[0,caml_string_of_jsbytes("Future")],
     _mV_=[0,caml_string_of_jsbytes("Current")],
     _mS_=[0,caml_string_of_jsbytes("Fifo")],
     _mT_=[0,caml_string_of_jsbytes("Other")],
     _mR_=[0,caml_string_of_jsbytes("Round_robin")],
     _mM_=[0,caml_string_of_jsbytes("machine")],
     _mN_=[0,caml_string_of_jsbytes("version")],
     _mO_=[0,caml_string_of_jsbytes("release")],
     _mP_=[0,caml_string_of_jsbytes("nodename")],
     _mQ_=[0,caml_string_of_jsbytes("sysname")],
     _mL_=[0,caml_string_of_jsbytes("src/core_unix.ml"),521,2],
     _mI_=[0,caml_string_of_jsbytes("len")],
     _mJ_=[0,caml_string_of_jsbytes("pos")],
     _mK_=[0,caml_string_of_jsbytes("buf")],
     _mH_=[0,caml_string_of_jsbytes("src/core_unix.ml"),313,2],
     _mG_=[0,caml_string_of_jsbytes("conf")],
     _mq_=[0,caml_string_of_jsbytes("ARG_MAX")],
     _mr_=[0,caml_string_of_jsbytes("CHILD_MAX")],
     _ms_=[0,caml_string_of_jsbytes("HOST_NAME_MAX")],
     _mt_=[0,caml_string_of_jsbytes("LOGIN_NAME_MAX")],
     _mu_=[0,caml_string_of_jsbytes("OPEN_MAX")],
     _mv_=[0,caml_string_of_jsbytes("PAGESIZE")],
     _mw_=[0,caml_string_of_jsbytes("RE_DUP_MAX")],
     _mx_=[0,caml_string_of_jsbytes("STREAM_MAX")],
     _my_=[0,caml_string_of_jsbytes("SYMLOOP_MAX")],
     _mz_=[0,caml_string_of_jsbytes("TTY_NAME_MAX")],
     _mA_=[0,caml_string_of_jsbytes("TZNAME_MAX")],
     _mB_=[0,caml_string_of_jsbytes("POSIX_VERSION")],
     _mC_=[0,caml_string_of_jsbytes("PHYS_PAGES")],
     _mD_=[0,caml_string_of_jsbytes("AVPHYS_PAGES")],
     _mE_=[0,caml_string_of_jsbytes("IOV_MAX")],
     _mF_=[0,caml_string_of_jsbytes("CLK_TCK")],
     _lG_=[0,caml_string_of_jsbytes("nivcsw")],
     _lH_=[0,caml_string_of_jsbytes("nvcsw")],
     _lI_=[0,caml_string_of_jsbytes("nsignals")],
     _lJ_=[0,caml_string_of_jsbytes("msgrcv")],
     _lK_=[0,caml_string_of_jsbytes("msgsnd")],
     _lL_=[0,caml_string_of_jsbytes("oublock")],
     _lM_=[0,caml_string_of_jsbytes("inblock")],
     _lN_=[0,caml_string_of_jsbytes("nswap")],
     _lO_=[0,caml_string_of_jsbytes("majflt")],
     _lP_=[0,caml_string_of_jsbytes("minflt")],
     _lQ_=[0,caml_string_of_jsbytes("isrss")],
     _lR_=[0,caml_string_of_jsbytes("idrss")],
     _lS_=[0,caml_string_of_jsbytes("ixrss")],
     _lT_=[0,caml_string_of_jsbytes("maxrss")],
     _lU_=[0,caml_string_of_jsbytes("stime")],
     _lV_=[0,caml_string_of_jsbytes("utime")],
     _lF_=[0,caml_string_of_jsbytes("src/core_unix.ml"),233,2],
     _lx_=[0,caml_string_of_jsbytes("Core_file_size")],
     _ly_=[0,caml_string_of_jsbytes("Cpu_seconds")],
     _lz_=[0,caml_string_of_jsbytes("Data_segment")],
     _lA_=[0,caml_string_of_jsbytes("File_size")],
     _lB_=[0,caml_string_of_jsbytes("Num_file_descriptors")],
     _lC_=[0,caml_string_of_jsbytes("Stack")],
     _lD_=[0,caml_string_of_jsbytes("Virtual_memory")],
     _lE_=[0,caml_string_of_jsbytes("Nice")],
     _lv_=[0,caml_string_of_jsbytes("max")],
     _lw_=[0,caml_string_of_jsbytes("cur")],
     _lu_=[0,caml_string_of_jsbytes("src/core_unix.ml"),169,2],
     _ls_=[0,caml_string_of_jsbytes("Limit")],
     _lt_=[0,caml_string_of_jsbytes("Infinity")],
     _lq_=[0,caml_string_of_jsbytes("Limit")],
     _lr_=[0,caml_string_of_jsbytes("Infinity")],
     _lp_=
      [0,
       [11,
        caml_string_of_jsbytes("Unix_ext."),
        [2,0,[11,caml_string_of_jsbytes(": pos < 0"),0]]],
       caml_string_of_jsbytes("Unix_ext.%s: pos < 0")],
     _lo_=
      [0,
       [11,
        caml_string_of_jsbytes("Unix_ext."),
        [2,0,[11,caml_string_of_jsbytes(": length(str) < pos + len"),0]]],
       caml_string_of_jsbytes("Unix_ext.%s: length(str) < pos + len")],
     _tj_=
      [0,
       [0,caml_string_of_jsbytes("PF_UNIX"),0],
       [0,
        [0,caml_string_of_jsbytes("PF_INET"),0],
        [0,[0,caml_string_of_jsbytes("PF_INET6"),0],0]]],
     _tt_=
      [0,
       [0,caml_string_of_jsbytes("SOCK_STREAM"),0],
       [0,
        [0,caml_string_of_jsbytes("SOCK_DGRAM"),0],
        [0,
         [0,caml_string_of_jsbytes("SOCK_RAW"),0],
         [0,[0,caml_string_of_jsbytes("SOCK_SEQPACKET"),0],0]]]],
     _vE_=
      [0,
       [0,caml_string_of_jsbytes("Packet"),0],
       [0,
        [0,caml_string_of_jsbytes("Inet4"),0],
        [0,[0,caml_string_of_jsbytes("Inet6"),0],0]]],
     _wz_=
      [0,
       [11,caml_string_of_jsbytes("Time.t_of_sexp: "),[2,0,0]],
       caml_string_of_jsbytes("Time.t_of_sexp: %s")],
     _wx_=
      [0,
       caml_string_of_jsbytes
        ("src/core_time.ml.Make.Time_string_not_absolute")],
     _wy_=[0,caml_string_of_jsbytes("_none_"),0,-1],
     _ww_=
      [0,
       [11,caml_string_of_jsbytes("invalid offset "),[2,0,0]],
       caml_string_of_jsbytes("invalid offset %s")],
     _wu_=
      [0,
       [11,caml_string_of_jsbytes("no dash in position "),[4,0,0,0,0]],
       caml_string_of_jsbytes("no dash in position %d")],
     _wv_=
      [0,
       [11,caml_string_of_jsbytes("input too long"),0],
       caml_string_of_jsbytes("input too long")],
     _wt_=
      [0,
       [11,
        caml_string_of_jsbytes("Time.of_string_fix_proto "),
        [2,0,[11,caml_string_of_jsbytes(": "),[2,0,0]]]],
       caml_string_of_jsbytes("Time.of_string_fix_proto %s: %s")],
     _ws_=
      [0,
       [11,caml_string_of_jsbytes("Ofday.Zoned.of_string "),[2,0,0]],
       caml_string_of_jsbytes("Ofday.Zoned.of_string %s")],
     _Bp_=
      [0,
       [11,caml_string_of_jsbytes("Time.t_of_sexp: "),[2,0,0]],
       caml_string_of_jsbytes("Time.t_of_sexp: %s")],
     _A5_=
      [0,
       [11,caml_string_of_jsbytes("Ofday.Zoned.of_string "),[2,0,0]],
       caml_string_of_jsbytes("Ofday.Zoned.of_string %s")],
     _zP_=
      [0,
       caml_string_of_jsbytes("src/core_time_ns.ml.Time_string_not_absolute")],
     _zQ_=[0,caml_string_of_jsbytes("_none_"),0,-1],
     _yI_=[0,caml_string_of_jsbytes("src/core_time_ns.ml"),110,12],
     _yE_=[0,caml_string_of_jsbytes("span")],
     _Dg_=[0,caml_string_of_jsbytes("src/interval.ml"),396,10945,10967],
     _Df_=[0,caml_string_of_jsbytes("src/interval.ml"),391,10815,10839],
     _C0_=
      [0,
       [11,
        caml_string_of_jsbytes
         ("Interval.Make.t_of_sexp error: malformed input "),
        [2,0,0]],
       caml_string_of_jsbytes
        ("Interval.Make.t_of_sexp error: malformed input %s")],
     _Cp_=[0,caml_string_of_jsbytes("src/interval.ml"),303,18],
     _Co_=[0,caml_string_of_jsbytes("src/interval.ml"),295,18],
     _BZ_=[1,0],
     _BT_=[1,caml_string_of_jsbytes("src/interval.ml.Stable.V1.T.t")],
     _BG_=[0,[0,caml_string_of_jsbytes("Empty"),0],0],
     _JJ_=
      [0,
       [2,
        0,
        [11,
         caml_string_of_jsbytes
          (": non-portable pthread extension is not supported on this platform"),
         0]],
       caml_string_of_jsbytes
        ("%s: non-portable pthread extension is not supported on this platform")],
     _JI_=[0,caml_string_of_jsbytes("id")];
    function error_of_sexp(sexp)
     {if(0 === sexp[0])
       {var
         _amN_=sexp[1],
         _amO_=caml_string_compare(_amN_,cst_e2BIG),
         switch$0=0;
        if(0 <= _amO_)
         if(0 < _amO_)
          {var _amP_=caml_string_compare(_amN_,cst_eNFILE);
           if(0 <= _amP_)
            if(0 < _amP_)
             {var _amQ_=caml_string_compare(_amN_,cst_eOVERFLOW);
              if(0 <= _amQ_)
               if(0 < _amQ_)
                {var _amR_=caml_string_compare(_amN_,cst_eSOCKTNOSUPPORT);
                 if(0 <= _amR_)
                  if(0 < _amR_)
                   if(caml_string_notequal(_amN_,cst_eSPIPE))
                    if(caml_string_notequal(_amN_,cst_eSRCH))
                     if(caml_string_notequal(_amN_,cst_eTIMEDOUT))
                      if(caml_string_notequal(_amN_,cst_eTOOMANYREFS))
                       if(caml_string_notequal(_amN_,cst_eUNKNOWNERR))
                        if(caml_string_notequal(_amN_,cst_eWOULDBLOCK))
                         {if(! caml_string_notequal(_amN_,cst_eXDEV))switch$0 = 37}
                        else
                         switch$0 = 38;
                       else
                        switch$0 = 69;
                      else
                       switch$0 = 62;
                     else
                      switch$0 = 63;
                    else
                     switch$0 = 36;
                   else
                    switch$0 = 35;
                  else
                   switch$0 = 47;
                 else
                  if(caml_string_notequal(_amN_,cst_ePERM))
                   if(caml_string_notequal(_amN_,cst_ePFNOSUPPORT))
                    if(caml_string_notequal(_amN_,cst_ePIPE))
                     if(caml_string_notequal(_amN_,cst_ePROTONOSUPPORT))
                      if(caml_string_notequal(_amN_,cst_ePROTOTYPE))
                       if(caml_string_notequal(_amN_,cst_eRANGE))
                        if(caml_string_notequal(_amN_,cst_eROFS))
                         {if(! caml_string_notequal(_amN_,cst_eSHUTDOWN))
                           switch$0 = 61}
                        else
                         switch$0 = 34;
                       else
                        switch$0 = 33;
                      else
                       switch$0 = 44;
                     else
                      switch$0 = 46;
                    else
                     switch$0 = 32;
                   else
                    switch$0 = 49;
                  else
                   switch$0 = 31}
               else
                switch$0 = 68;
              else
               {var _amS_=caml_string_compare(_amN_,cst_eNOSYS);
                if(0 <= _amS_)
                 if(0 < _amS_)
                  if(caml_string_notequal(_amN_,cst_eNOTCONN))
                   if(caml_string_notequal(_amN_,cst_eNOTDIR))
                    if(caml_string_notequal(_amN_,cst_eNOTEMPTY))
                     if(caml_string_notequal(_amN_,cst_eNOTSOCK))
                      if(caml_string_notequal(_amN_,cst_eNOTTY))
                       if(caml_string_notequal(_amN_,cst_eNXIO))
                        {if(! caml_string_notequal(_amN_,cst_eOPNOTSUPP))
                          switch$0 = 48}
                       else
                        switch$0 = 30;
                      else
                       switch$0 = 29;
                     else
                      switch$0 = 41;
                    else
                     switch$0 = 28;
                   else
                    switch$0 = 27;
                  else
                   switch$0 = 60;
                 else
                  switch$0 = 26;
                else
                 if(caml_string_notequal(_amN_,cst_eNOBUFS))
                  if(caml_string_notequal(_amN_,cst_eNODEV))
                   if(caml_string_notequal(_amN_,cst_eNOENT))
                    if(caml_string_notequal(_amN_,cst_eNOEXEC))
                     if(caml_string_notequal(_amN_,cst_eNOLCK))
                      if(caml_string_notequal(_amN_,cst_eNOMEM))
                       if(caml_string_notequal(_amN_,cst_eNOPROTOOPT))
                        {if(! caml_string_notequal(_amN_,cst_eNOSPC))switch$0 = 25}
                       else
                        switch$0 = 45;
                      else
                       switch$0 = 24;
                     else
                      switch$0 = 23;
                    else
                     switch$0 = 22;
                   else
                    switch$0 = 21;
                  else
                   switch$0 = 20;
                 else
                  switch$0 = 58}}
            else
             switch$0 = 19;
           else
            {var _amT_=caml_string_compare(_amN_,cst_eFBIG);
             if(0 <= _amT_)
              if(0 < _amT_)
               {var _amU_=caml_string_compare(_amN_,cst_eLOOP);
                if(0 <= _amU_)
                 if(0 < _amU_)
                  if(caml_string_notequal(_amN_,cst_eMFILE))
                   if(caml_string_notequal(_amN_,cst_eMLINK))
                    if(caml_string_notequal(_amN_,cst_eMSGSIZE))
                     if(caml_string_notequal(_amN_,cst_eNAMETOOLONG))
                      if(caml_string_notequal(_amN_,cst_eNETDOWN))
                       if(caml_string_notequal(_amN_,cst_eNETRESET))
                        {if(! caml_string_notequal(_amN_,cst_eNETUNREACH))
                          switch$0 = 54}
                       else
                        switch$0 = 55;
                      else
                       switch$0 = 53;
                     else
                      switch$0 = 18;
                    else
                     switch$0 = 43;
                   else
                    switch$0 = 17;
                  else
                   switch$0 = 16;
                 else
                  switch$0 = 67;
                else
                 if(caml_string_notequal(_amN_,cst_eHOSTDOWN))
                  if(caml_string_notequal(_amN_,cst_eHOSTUNREACH))
                   if(caml_string_notequal(_amN_,cst_eINPROGRESS))
                    if(caml_string_notequal(_amN_,cst_eINTR))
                     if(caml_string_notequal(_amN_,cst_eINVAL))
                      if(caml_string_notequal(_amN_,cst_eIO))
                       if(caml_string_notequal(_amN_,cst_eISCONN))
                        {if(! caml_string_notequal(_amN_,cst_eISDIR))switch$0 = 15}
                       else
                        switch$0 = 59;
                      else
                       switch$0 = 14;
                     else
                      switch$0 = 13;
                    else
                     switch$0 = 12;
                   else
                    switch$0 = 39;
                  else
                   switch$0 = 66;
                 else
                  switch$0 = 65}
              else
               switch$0 = 11;
             else
              {var _amV_=caml_string_compare(_amN_,cst_eCHILD);
               if(0 <= _amV_)
                if(0 < _amV_)
                 if(caml_string_notequal(_amN_,cst_eCONNABORTED))
                  if(caml_string_notequal(_amN_,cst_eCONNREFUSED))
                   if(caml_string_notequal(_amN_,cst_eCONNRESET))
                    if(caml_string_notequal(_amN_,cst_eDEADLK))
                     if(caml_string_notequal(_amN_,cst_eDESTADDRREQ))
                      if(caml_string_notequal(_amN_,cst_eDOM))
                       if(caml_string_notequal(_amN_,cst_eEXIST))
                        {if(! caml_string_notequal(_amN_,cst_eFAULT))switch$0 = 10}
                       else
                        switch$0 = 9;
                      else
                       switch$0 = 8;
                     else
                      switch$0 = 42;
                    else
                     switch$0 = 7;
                   else
                    switch$0 = 57;
                  else
                   switch$0 = 64;
                 else
                  switch$0 = 56;
                else
                 switch$0 = 6;
               else
                if(caml_string_notequal(_amN_,cst_eACCES))
                 if(caml_string_notequal(_amN_,cst_eADDRINUSE))
                  if(caml_string_notequal(_amN_,cst_eADDRNOTAVAIL))
                   if(caml_string_notequal(_amN_,cst_eAFNOSUPPORT))
                    if(caml_string_notequal(_amN_,cst_eAGAIN))
                     if(caml_string_notequal(_amN_,cst_eALREADY))
                      if(caml_string_notequal(_amN_,cst_eBADF))
                       {if(! caml_string_notequal(_amN_,cst_eBUSY))switch$0 = 5}
                      else
                       switch$0 = 4;
                     else
                      switch$0 = 40;
                    else
                     switch$0 = 3;
                   else
                    switch$0 = 50;
                  else
                   switch$0 = 52;
                 else
                  switch$0 = 51;
                else
                 switch$0 = 2}}}
         else
          switch$0 = 1;
        else
         {var _amW_=caml_string_compare(_amN_,cst_ENETUNREACH);
          if(0 <= _amW_)
           if(0 < _amW_)
            {var _amX_=caml_string_compare(_amN_,cst_EOVERFLOW);
             if(0 <= _amX_)
              if(0 < _amX_)
               {var _amY_=caml_string_compare(_amN_,cst_ESOCKTNOSUPPORT);
                if(0 <= _amY_)
                 if(0 < _amY_)
                  if(caml_string_notequal(_amN_,cst_ESPIPE))
                   if(caml_string_notequal(_amN_,cst_ESRCH))
                    if(caml_string_notequal(_amN_,cst_ETIMEDOUT))
                     if(caml_string_notequal(_amN_,cst_ETOOMANYREFS))
                      if(caml_string_notequal(_amN_,cst_EUNKNOWNERR))
                       if(caml_string_notequal(_amN_,cst_EWOULDBLOCK))
                        {if(! caml_string_notequal(_amN_,cst_EXDEV))switch$0 = 37}
                       else
                        switch$0 = 38;
                      else
                       switch$0 = 69;
                     else
                      switch$0 = 62;
                    else
                     switch$0 = 63;
                   else
                    switch$0 = 36;
                  else
                   switch$0 = 35;
                 else
                  switch$0 = 47;
                else
                 if(caml_string_notequal(_amN_,cst_EPERM))
                  if(caml_string_notequal(_amN_,cst_EPFNOSUPPORT))
                   if(caml_string_notequal(_amN_,cst_EPIPE))
                    if(caml_string_notequal(_amN_,cst_EPROTONOSUPPORT))
                     if(caml_string_notequal(_amN_,cst_EPROTOTYPE))
                      if(caml_string_notequal(_amN_,cst_ERANGE))
                       if(caml_string_notequal(_amN_,cst_EROFS))
                        {if(! caml_string_notequal(_amN_,cst_ESHUTDOWN))
                          switch$0 = 61}
                       else
                        switch$0 = 34;
                      else
                       switch$0 = 33;
                     else
                      switch$0 = 44;
                    else
                     switch$0 = 46;
                   else
                    switch$0 = 32;
                  else
                   switch$0 = 49;
                 else
                  switch$0 = 31}
              else
               switch$0 = 68;
             else
              {var _amZ_=caml_string_compare(_amN_,cst_ENOSPC);
               if(0 <= _amZ_)
                if(0 < _amZ_)
                 if(caml_string_notequal(_amN_,cst_ENOSYS))
                  if(caml_string_notequal(_amN_,cst_ENOTCONN))
                   if(caml_string_notequal(_amN_,cst_ENOTDIR))
                    if(caml_string_notequal(_amN_,cst_ENOTEMPTY))
                     if(caml_string_notequal(_amN_,cst_ENOTSOCK))
                      if(caml_string_notequal(_amN_,cst_ENOTTY))
                       if(caml_string_notequal(_amN_,cst_ENXIO))
                        {if(! caml_string_notequal(_amN_,cst_EOPNOTSUPP))
                          switch$0 = 48}
                       else
                        switch$0 = 30;
                      else
                       switch$0 = 29;
                     else
                      switch$0 = 41;
                    else
                     switch$0 = 28;
                   else
                    switch$0 = 27;
                  else
                   switch$0 = 60;
                 else
                  switch$0 = 26;
                else
                 switch$0 = 25;
               else
                if(caml_string_notequal(_amN_,cst_ENFILE))
                 if(caml_string_notequal(_amN_,cst_ENOBUFS))
                  if(caml_string_notequal(_amN_,cst_ENODEV))
                   if(caml_string_notequal(_amN_,cst_ENOENT))
                    if(caml_string_notequal(_amN_,cst_ENOEXEC))
                     if(caml_string_notequal(_amN_,cst_ENOLCK))
                      if(caml_string_notequal(_amN_,cst_ENOMEM))
                       {if(! caml_string_notequal(_amN_,cst_ENOPROTOOPT))
                         switch$0 = 45}
                      else
                       switch$0 = 24;
                     else
                      switch$0 = 23;
                    else
                     switch$0 = 22;
                   else
                    switch$0 = 21;
                  else
                   switch$0 = 20;
                 else
                  switch$0 = 58;
                else
                 switch$0 = 19}}
           else
            switch$0 = 54;
          else
           {var _am0_=caml_string_compare(_amN_,cst_EFAULT);
            if(0 <= _am0_)
             if(0 < _am0_)
              {var _am1_=caml_string_compare(_amN_,cst_EISDIR);
               if(0 <= _am1_)
                if(0 < _am1_)
                 if(caml_string_notequal(_amN_,cst_ELOOP))
                  if(caml_string_notequal(_amN_,cst_EMFILE))
                   if(caml_string_notequal(_amN_,cst_EMLINK))
                    if(caml_string_notequal(_amN_,cst_EMSGSIZE))
                     if(caml_string_notequal(_amN_,cst_ENAMETOOLONG))
                      if(caml_string_notequal(_amN_,cst_ENETDOWN))
                       {if(! caml_string_notequal(_amN_,cst_ENETRESET))
                         switch$0 = 55}
                      else
                       switch$0 = 53;
                     else
                      switch$0 = 18;
                    else
                     switch$0 = 43;
                   else
                    switch$0 = 17;
                  else
                   switch$0 = 16;
                 else
                  switch$0 = 67;
                else
                 switch$0 = 15;
               else
                if(caml_string_notequal(_amN_,cst_EFBIG))
                 if(caml_string_notequal(_amN_,cst_EHOSTDOWN))
                  if(caml_string_notequal(_amN_,cst_EHOSTUNREACH))
                   if(caml_string_notequal(_amN_,cst_EINPROGRESS))
                    if(caml_string_notequal(_amN_,cst_EINTR))
                     if(caml_string_notequal(_amN_,cst_EINVAL))
                      if(caml_string_notequal(_amN_,cst_EIO))
                       {if(! caml_string_notequal(_amN_,cst_EISCONN))switch$0 = 59}
                      else
                       switch$0 = 14;
                     else
                      switch$0 = 13;
                    else
                     switch$0 = 12;
                   else
                    switch$0 = 39;
                  else
                   switch$0 = 66;
                 else
                  switch$0 = 65;
                else
                 switch$0 = 11}
             else
              switch$0 = 10;
            else
             {var _am2_=caml_string_compare(_amN_,cst_EBUSY);
              if(0 <= _am2_)
               if(0 < _am2_)
                if(caml_string_notequal(_amN_,cst_ECHILD))
                 if(caml_string_notequal(_amN_,cst_ECONNABORTED))
                  if(caml_string_notequal(_amN_,cst_ECONNREFUSED))
                   if(caml_string_notequal(_amN_,cst_ECONNRESET))
                    if(caml_string_notequal(_amN_,cst_EDEADLK))
                     if(caml_string_notequal(_amN_,cst_EDESTADDRREQ))
                      if(caml_string_notequal(_amN_,cst_EDOM))
                       {if(! caml_string_notequal(_amN_,cst_EEXIST))switch$0 = 9}
                      else
                       switch$0 = 8;
                     else
                      switch$0 = 42;
                    else
                     switch$0 = 7;
                   else
                    switch$0 = 57;
                  else
                   switch$0 = 64;
                 else
                  switch$0 = 56;
                else
                 switch$0 = 6;
               else
                switch$0 = 5;
              else
               if(caml_string_notequal(_amN_,cst_E2BIG))
                if(caml_string_notequal(_amN_,cst_EACCES))
                 if(caml_string_notequal(_amN_,cst_EADDRINUSE))
                  if(caml_string_notequal(_amN_,cst_EADDRNOTAVAIL))
                   if(caml_string_notequal(_amN_,cst_EAFNOSUPPORT))
                    if(caml_string_notequal(_amN_,cst_EAGAIN))
                     if(caml_string_notequal(_amN_,cst_EALREADY))
                      {if(! caml_string_notequal(_amN_,cst_EBADF))switch$0 = 4}
                     else
                      switch$0 = 40;
                    else
                     switch$0 = 3;
                   else
                    switch$0 = 50;
                  else
                   switch$0 = 52;
                 else
                  switch$0 = 51;
                else
                 switch$0 = 2;
               else
                switch$0 = 1}}}
        var _anj_=switch$0;
        if(35 <= _anj_)
         switch(_anj_)
          {case 35:return 34;
           case 36:return 35;
           case 37:return 36;
           case 38:return 37;
           case 39:return 38;
           case 40:return 39;
           case 41:return 40;
           case 42:return 41;
           case 43:return 42;
           case 44:return 43;
           case 45:return 44;
           case 46:return 45;
           case 47:return 46;
           case 48:return 47;
           case 49:return 48;
           case 50:return 49;
           case 51:return 50;
           case 52:return 51;
           case 53:return 52;
           case 54:return 53;
           case 55:return 54;
           case 56:return 55;
           case 57:return 56;
           case 58:return 57;
           case 59:return 58;
           case 60:return 59;
           case 61:return 60;
           case 62:return 61;
           case 63:return 62;
           case 64:return 63;
           case 65:return 64;
           case 66:return 65;
           case 67:return 66;
           case 68:return 67;
           default:return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc,sexp)}
        switch(_anj_)
         {case 1:return 0;
          case 2:return 1;
          case 3:return 2;
          case 4:return 3;
          case 5:return 4;
          case 6:return 5;
          case 7:return 6;
          case 8:return 7;
          case 9:return 8;
          case 10:return 9;
          case 11:return 10;
          case 12:return 11;
          case 13:return 12;
          case 14:return 13;
          case 15:return 14;
          case 16:return 15;
          case 17:return 16;
          case 18:return 17;
          case 19:return 18;
          case 20:return 19;
          case 21:return 20;
          case 22:return 21;
          case 23:return 22;
          case 24:return 23;
          case 25:return 24;
          case 26:return 25;
          case 27:return 26;
          case 28:return 27;
          case 29:return 28;
          case 30:return 29;
          case 31:return 30;
          case 32:return 31;
          case 33:return 32;
          case 34:return 33
          }}
      else
       {var _am3_=sexp[1];
        if(! _am3_)return caml_call2(Sexplib0_Sexp_conv_error[7],tp_loc,sexp);
        var _am4_=_am3_[1];
        if(0 !== _am4_[0])
         return caml_call2(Sexplib0_Sexp_conv_error[6],tp_loc,sexp);
        var
         _am5_=_am4_[1],
         _am6_=caml_string_compare(_am5_,cst_e2BIG$0),
         switch$1=0;
        if(0 <= _am6_)
         if(0 < _am6_)
          {var _am7_=caml_string_compare(_am5_,cst_eNFILE$0);
           if(0 <= _am7_)
            if(0 < _am7_)
             {var _am8_=caml_string_compare(_am5_,cst_eOVERFLOW$0);
              if(0 <= _am8_)
               if(0 < _am8_)
                {var _am9_=caml_string_compare(_am5_,cst_eSOCKTNOSUPPORT$0);
                 if(0 <= _am9_)
                  if(0 < _am9_)
                   if(caml_string_notequal(_am5_,cst_eSPIPE$0))
                    if(caml_string_notequal(_am5_,cst_eSRCH$0))
                     if(caml_string_notequal(_am5_,cst_eTIMEDOUT$0))
                      if(caml_string_notequal(_am5_,cst_eTOOMANYREFS$0))
                       if(caml_string_notequal(_am5_,cst_eUNKNOWNERR$0))
                        if(caml_string_notequal(_am5_,cst_eWOULDBLOCK$0))
                         {if(! caml_string_notequal(_am5_,cst_eXDEV$0))switch$1 = 38}
                        else
                         switch$1 = 39;
                       else
                        switch$1 = 1;
                      else
                       switch$1 = 63;
                     else
                      switch$1 = 64;
                    else
                     switch$1 = 37;
                   else
                    switch$1 = 36;
                  else
                   switch$1 = 48;
                 else
                  if(caml_string_notequal(_am5_,cst_ePERM$0))
                   if(caml_string_notequal(_am5_,cst_ePFNOSUPPORT$0))
                    if(caml_string_notequal(_am5_,cst_ePIPE$0))
                     if(caml_string_notequal(_am5_,cst_ePROTONOSUPPORT$0))
                      if(caml_string_notequal(_am5_,cst_ePROTOTYPE$0))
                       if(caml_string_notequal(_am5_,cst_eRANGE$0))
                        if(caml_string_notequal(_am5_,cst_eROFS$0))
                         {if(! caml_string_notequal(_am5_,cst_eSHUTDOWN$0))
                           switch$1 = 62}
                        else
                         switch$1 = 35;
                       else
                        switch$1 = 34;
                      else
                       switch$1 = 45;
                     else
                      switch$1 = 47;
                    else
                     switch$1 = 33;
                   else
                    switch$1 = 50;
                  else
                   switch$1 = 32}
               else
                switch$1 = 69;
              else
               {var _am__=caml_string_compare(_am5_,cst_eNOSYS$0);
                if(0 <= _am__)
                 if(0 < _am__)
                  if(caml_string_notequal(_am5_,cst_eNOTCONN$0))
                   if(caml_string_notequal(_am5_,cst_eNOTDIR$0))
                    if(caml_string_notequal(_am5_,cst_eNOTEMPTY$0))
                     if(caml_string_notequal(_am5_,cst_eNOTSOCK$0))
                      if(caml_string_notequal(_am5_,cst_eNOTTY$0))
                       if(caml_string_notequal(_am5_,cst_eNXIO$0))
                        {if(! caml_string_notequal(_am5_,cst_eOPNOTSUPP$0))
                          switch$1 = 49}
                       else
                        switch$1 = 31;
                      else
                       switch$1 = 30;
                     else
                      switch$1 = 42;
                    else
                     switch$1 = 29;
                   else
                    switch$1 = 28;
                  else
                   switch$1 = 61;
                 else
                  switch$1 = 27;
                else
                 if(caml_string_notequal(_am5_,cst_eNOBUFS$0))
                  if(caml_string_notequal(_am5_,cst_eNODEV$0))
                   if(caml_string_notequal(_am5_,cst_eNOENT$0))
                    if(caml_string_notequal(_am5_,cst_eNOEXEC$0))
                     if(caml_string_notequal(_am5_,cst_eNOLCK$0))
                      if(caml_string_notequal(_am5_,cst_eNOMEM$0))
                       if(caml_string_notequal(_am5_,cst_eNOPROTOOPT$0))
                        {if(! caml_string_notequal(_am5_,cst_eNOSPC$0))switch$1 = 26}
                       else
                        switch$1 = 46;
                      else
                       switch$1 = 25;
                     else
                      switch$1 = 24;
                    else
                     switch$1 = 23;
                   else
                    switch$1 = 22;
                  else
                   switch$1 = 21;
                 else
                  switch$1 = 59}}
            else
             switch$1 = 20;
           else
            {var _am$_=caml_string_compare(_am5_,cst_eFBIG$0);
             if(0 <= _am$_)
              if(0 < _am$_)
               {var _ana_=caml_string_compare(_am5_,cst_eLOOP$0);
                if(0 <= _ana_)
                 if(0 < _ana_)
                  if(caml_string_notequal(_am5_,cst_eMFILE$0))
                   if(caml_string_notequal(_am5_,cst_eMLINK$0))
                    if(caml_string_notequal(_am5_,cst_eMSGSIZE$0))
                     if(caml_string_notequal(_am5_,cst_eNAMETOOLONG$0))
                      if(caml_string_notequal(_am5_,cst_eNETDOWN$0))
                       if(caml_string_notequal(_am5_,cst_eNETRESET$0))
                        {if(! caml_string_notequal(_am5_,cst_eNETUNREACH$0))
                          switch$1 = 55}
                       else
                        switch$1 = 56;
                      else
                       switch$1 = 54;
                     else
                      switch$1 = 19;
                    else
                     switch$1 = 44;
                   else
                    switch$1 = 18;
                  else
                   switch$1 = 17;
                 else
                  switch$1 = 68;
                else
                 if(caml_string_notequal(_am5_,cst_eHOSTDOWN$0))
                  if(caml_string_notequal(_am5_,cst_eHOSTUNREACH$0))
                   if(caml_string_notequal(_am5_,cst_eINPROGRESS$0))
                    if(caml_string_notequal(_am5_,cst_eINTR$0))
                     if(caml_string_notequal(_am5_,cst_eINVAL$0))
                      if(caml_string_notequal(_am5_,cst_eIO$0))
                       if(caml_string_notequal(_am5_,cst_eISCONN$0))
                        {if(! caml_string_notequal(_am5_,cst_eISDIR$0))switch$1 = 16}
                       else
                        switch$1 = 60;
                      else
                       switch$1 = 15;
                     else
                      switch$1 = 14;
                    else
                     switch$1 = 13;
                   else
                    switch$1 = 40;
                  else
                   switch$1 = 67;
                 else
                  switch$1 = 66}
              else
               switch$1 = 12;
             else
              {var _anb_=caml_string_compare(_am5_,cst_eCHILD$0);
               if(0 <= _anb_)
                if(0 < _anb_)
                 if(caml_string_notequal(_am5_,cst_eCONNABORTED$0))
                  if(caml_string_notequal(_am5_,cst_eCONNREFUSED$0))
                   if(caml_string_notequal(_am5_,cst_eCONNRESET$0))
                    if(caml_string_notequal(_am5_,cst_eDEADLK$0))
                     if(caml_string_notequal(_am5_,cst_eDESTADDRREQ$0))
                      if(caml_string_notequal(_am5_,cst_eDOM$0))
                       if(caml_string_notequal(_am5_,cst_eEXIST$0))
                        {if(! caml_string_notequal(_am5_,cst_eFAULT$0))switch$1 = 11}
                       else
                        switch$1 = 10;
                      else
                       switch$1 = 9;
                     else
                      switch$1 = 43;
                    else
                     switch$1 = 8;
                   else
                    switch$1 = 58;
                  else
                   switch$1 = 65;
                 else
                  switch$1 = 57;
                else
                 switch$1 = 7;
               else
                if(caml_string_notequal(_am5_,cst_eACCES$0))
                 if(caml_string_notequal(_am5_,cst_eADDRINUSE$0))
                  if(caml_string_notequal(_am5_,cst_eADDRNOTAVAIL$0))
                   if(caml_string_notequal(_am5_,cst_eAFNOSUPPORT$0))
                    if(caml_string_notequal(_am5_,cst_eAGAIN$0))
                     if(caml_string_notequal(_am5_,cst_eALREADY$0))
                      if(caml_string_notequal(_am5_,cst_eBADF$0))
                       {if(! caml_string_notequal(_am5_,cst_eBUSY$0))switch$1 = 6}
                      else
                       switch$1 = 5;
                     else
                      switch$1 = 41;
                    else
                     switch$1 = 4;
                   else
                    switch$1 = 51;
                  else
                   switch$1 = 53;
                 else
                  switch$1 = 52;
                else
                 switch$1 = 3}}}
         else
          switch$1 = 2;
        else
         {var _anc_=caml_string_compare(_am5_,cst_ENETUNREACH$0);
          if(0 <= _anc_)
           if(0 < _anc_)
            {var _and_=caml_string_compare(_am5_,cst_EOVERFLOW$0);
             if(0 <= _and_)
              if(0 < _and_)
               {var _ane_=caml_string_compare(_am5_,cst_ESOCKTNOSUPPORT$0);
                if(0 <= _ane_)
                 if(0 < _ane_)
                  if(caml_string_notequal(_am5_,cst_ESPIPE$0))
                   if(caml_string_notequal(_am5_,cst_ESRCH$0))
                    if(caml_string_notequal(_am5_,cst_ETIMEDOUT$0))
                     if(caml_string_notequal(_am5_,cst_ETOOMANYREFS$0))
                      if(caml_string_notequal(_am5_,cst_EUNKNOWNERR$0))
                       if(caml_string_notequal(_am5_,cst_EWOULDBLOCK$0))
                        {if(! caml_string_notequal(_am5_,cst_EXDEV$0))switch$1 = 38}
                       else
                        switch$1 = 39;
                      else
                       switch$1 = 1;
                     else
                      switch$1 = 63;
                    else
                     switch$1 = 64;
                   else
                    switch$1 = 37;
                  else
                   switch$1 = 36;
                 else
                  switch$1 = 48;
                else
                 if(caml_string_notequal(_am5_,cst_EPERM$0))
                  if(caml_string_notequal(_am5_,cst_EPFNOSUPPORT$0))
                   if(caml_string_notequal(_am5_,cst_EPIPE$0))
                    if(caml_string_notequal(_am5_,cst_EPROTONOSUPPORT$0))
                     if(caml_string_notequal(_am5_,cst_EPROTOTYPE$0))
                      if(caml_string_notequal(_am5_,cst_ERANGE$0))
                       if(caml_string_notequal(_am5_,cst_EROFS$0))
                        {if(! caml_string_notequal(_am5_,cst_ESHUTDOWN$0))
                          switch$1 = 62}
                       else
                        switch$1 = 35;
                      else
                       switch$1 = 34;
                     else
                      switch$1 = 45;
                    else
                     switch$1 = 47;
                   else
                    switch$1 = 33;
                  else
                   switch$1 = 50;
                 else
                  switch$1 = 32}
              else
               switch$1 = 69;
             else
              {var _anf_=caml_string_compare(_am5_,cst_ENOSPC$0);
               if(0 <= _anf_)
                if(0 < _anf_)
                 if(caml_string_notequal(_am5_,cst_ENOSYS$0))
                  if(caml_string_notequal(_am5_,cst_ENOTCONN$0))
                   if(caml_string_notequal(_am5_,cst_ENOTDIR$0))
                    if(caml_string_notequal(_am5_,cst_ENOTEMPTY$0))
                     if(caml_string_notequal(_am5_,cst_ENOTSOCK$0))
                      if(caml_string_notequal(_am5_,cst_ENOTTY$0))
                       if(caml_string_notequal(_am5_,cst_ENXIO$0))
                        {if(! caml_string_notequal(_am5_,cst_EOPNOTSUPP$0))
                          switch$1 = 49}
                       else
                        switch$1 = 31;
                      else
                       switch$1 = 30;
                     else
                      switch$1 = 42;
                    else
                     switch$1 = 29;
                   else
                    switch$1 = 28;
                  else
                   switch$1 = 61;
                 else
                  switch$1 = 27;
                else
                 switch$1 = 26;
               else
                if(caml_string_notequal(_am5_,cst_ENFILE$0))
                 if(caml_string_notequal(_am5_,cst_ENOBUFS$0))
                  if(caml_string_notequal(_am5_,cst_ENODEV$0))
                   if(caml_string_notequal(_am5_,cst_ENOENT$0))
                    if(caml_string_notequal(_am5_,cst_ENOEXEC$0))
                     if(caml_string_notequal(_am5_,cst_ENOLCK$0))
                      if(caml_string_notequal(_am5_,cst_ENOMEM$0))
                       {if(! caml_string_notequal(_am5_,cst_ENOPROTOOPT$0))
                         switch$1 = 46}
                      else
                       switch$1 = 25;
                     else
                      switch$1 = 24;
                    else
                     switch$1 = 23;
                   else
                    switch$1 = 22;
                  else
                   switch$1 = 21;
                 else
                  switch$1 = 59;
                else
                 switch$1 = 20}}
           else
            switch$1 = 55;
          else
           {var _ang_=caml_string_compare(_am5_,cst_EFAULT$0);
            if(0 <= _ang_)
             if(0 < _ang_)
              {var _anh_=caml_string_compare(_am5_,cst_EISDIR$0);
               if(0 <= _anh_)
                if(0 < _anh_)
                 if(caml_string_notequal(_am5_,cst_ELOOP$0))
                  if(caml_string_notequal(_am5_,cst_EMFILE$0))
                   if(caml_string_notequal(_am5_,cst_EMLINK$0))
                    if(caml_string_notequal(_am5_,cst_EMSGSIZE$0))
                     if(caml_string_notequal(_am5_,cst_ENAMETOOLONG$0))
                      if(caml_string_notequal(_am5_,cst_ENETDOWN$0))
                       {if(! caml_string_notequal(_am5_,cst_ENETRESET$0))
                         switch$1 = 56}
                      else
                       switch$1 = 54;
                     else
                      switch$1 = 19;
                    else
                     switch$1 = 44;
                   else
                    switch$1 = 18;
                  else
                   switch$1 = 17;
                 else
                  switch$1 = 68;
                else
                 switch$1 = 16;
               else
                if(caml_string_notequal(_am5_,cst_EFBIG$0))
                 if(caml_string_notequal(_am5_,cst_EHOSTDOWN$0))
                  if(caml_string_notequal(_am5_,cst_EHOSTUNREACH$0))
                   if(caml_string_notequal(_am5_,cst_EINPROGRESS$0))
                    if(caml_string_notequal(_am5_,cst_EINTR$0))
                     if(caml_string_notequal(_am5_,cst_EINVAL$0))
                      if(caml_string_notequal(_am5_,cst_EIO$0))
                       {if(! caml_string_notequal(_am5_,cst_EISCONN$0))
                         switch$1 = 60}
                      else
                       switch$1 = 15;
                     else
                      switch$1 = 14;
                    else
                     switch$1 = 13;
                   else
                    switch$1 = 40;
                  else
                   switch$1 = 67;
                 else
                  switch$1 = 66;
                else
                 switch$1 = 12}
             else
              switch$1 = 11;
            else
             {var _ani_=caml_string_compare(_am5_,cst_EBUSY$0);
              if(0 <= _ani_)
               if(0 < _ani_)
                if(caml_string_notequal(_am5_,cst_ECHILD$0))
                 if(caml_string_notequal(_am5_,cst_ECONNABORTED$0))
                  if(caml_string_notequal(_am5_,cst_ECONNREFUSED$0))
                   if(caml_string_notequal(_am5_,cst_ECONNRESET$0))
                    if(caml_string_notequal(_am5_,cst_EDEADLK$0))
                     if(caml_string_notequal(_am5_,cst_EDESTADDRREQ$0))
                      if(caml_string_notequal(_am5_,cst_EDOM$0))
                       {if(! caml_string_notequal(_am5_,cst_EEXIST$0))switch$1 = 10}
                      else
                       switch$1 = 9;
                     else
                      switch$1 = 43;
                    else
                     switch$1 = 8;
                   else
                    switch$1 = 58;
                  else
                   switch$1 = 65;
                 else
                  switch$1 = 57;
                else
                 switch$1 = 7;
               else
                switch$1 = 6;
              else
               if(caml_string_notequal(_am5_,cst_E2BIG$0))
                if(caml_string_notequal(_am5_,cst_EACCES$0))
                 if(caml_string_notequal(_am5_,cst_EADDRINUSE$0))
                  if(caml_string_notequal(_am5_,cst_EADDRNOTAVAIL$0))
                   if(caml_string_notequal(_am5_,cst_EAFNOSUPPORT$0))
                    if(caml_string_notequal(_am5_,cst_EAGAIN$0))
                     if(caml_string_notequal(_am5_,cst_EALREADY$0))
                      {if(! caml_string_notequal(_am5_,cst_EBADF$0))switch$1 = 5}
                     else
                      switch$1 = 41;
                    else
                     switch$1 = 4;
                   else
                    switch$1 = 51;
                  else
                   switch$1 = 53;
                 else
                  switch$1 = 52;
                else
                 switch$1 = 3;
               else
                switch$1 = 2}}}
        var _ank_=switch$1;
        if(35 <= _ank_)
         switch(_ank_)
          {case 35:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc,sexp);
           case 36:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc,sexp);
           case 37:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc,sexp);
           case 38:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc,sexp);
           case 39:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc,sexp);
           case 40:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc,sexp);
           case 41:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc,sexp);
           case 42:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc,sexp);
           case 43:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc,sexp);
           case 44:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc,sexp);
           case 45:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc,sexp);
           case 46:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc,sexp);
           case 47:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc,sexp);
           case 48:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc,sexp);
           case 49:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc,sexp);
           case 50:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc,sexp);
           case 51:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc,sexp);
           case 52:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc,sexp);
           case 53:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc,sexp);
           case 54:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc,sexp);
           case 55:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc,sexp);
           case 56:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc,sexp);
           case 57:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc,sexp);
           case 58:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc,sexp);
           case 59:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc,sexp);
           case 60:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc,sexp);
           case 61:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc,sexp);
           case 62:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc,sexp);
           case 63:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc,sexp);
           case 64:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc,sexp);
           case 65:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc,sexp);
           case 66:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc,sexp);
           case 67:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc,sexp);
           case 68:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc,sexp);
           default:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc,sexp)}
        switch(_ank_)
         {case 1:
           var sexp_args=_am3_[2];
           if(sexp_args && ! sexp_args[2])
            {var v0=sexp_args[1],v0$0=caml_call1(file_perm_of_sexp,v0);
             return [0,v0$0]}
           return caml_call3(Sexplib0_Sexp_conv_error[4],tp_loc,_am5_,sexp);
          case 2:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc,sexp);
          case 3:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc,sexp);
          case 4:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc,sexp);
          case 5:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc,sexp);
          case 6:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc,sexp);
          case 7:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc,sexp);
          case 8:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc,sexp);
          case 9:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc,sexp);
          case 10:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc,sexp);
          case 11:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc,sexp);
          case 12:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc,sexp);
          case 13:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc,sexp);
          case 14:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc,sexp);
          case 15:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc,sexp);
          case 16:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc,sexp);
          case 17:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc,sexp);
          case 18:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc,sexp);
          case 19:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc,sexp);
          case 20:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc,sexp);
          case 21:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc,sexp);
          case 22:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc,sexp);
          case 23:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc,sexp);
          case 24:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc,sexp);
          case 25:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc,sexp);
          case 26:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc,sexp);
          case 27:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc,sexp);
          case 28:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc,sexp);
          case 29:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc,sexp);
          case 30:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc,sexp);
          case 31:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc,sexp);
          case 32:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc,sexp);
          case 33:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc,sexp);
          case 34:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc,sexp)
          }}
      return caml_call2(Sexplib0_Sexp_conv_error[8],tp_loc,sexp)}
    function sexp_of_error(param)
     {if(typeof param === "number")
       {var _amM_=param;
        if(34 <= _amM_)
         switch(_amM_)
          {case 34:return _iZ_;
           case 35:return _i0_;
           case 36:return _i1_;
           case 37:return _i2_;
           case 38:return _i3_;
           case 39:return _i4_;
           case 40:return _i5_;
           case 41:return _i6_;
           case 42:return _i7_;
           case 43:return _i8_;
           case 44:return _i9_;
           case 45:return _i__;
           case 46:return _i$_;
           case 47:return _ja_;
           case 48:return _jb_;
           case 49:return _jc_;
           case 50:return _jd_;
           case 51:return _je_;
           case 52:return _jf_;
           case 53:return _jg_;
           case 54:return _jh_;
           case 55:return _ji_;
           case 56:return _jj_;
           case 57:return _jk_;
           case 58:return _jl_;
           case 59:return _jm_;
           case 60:return _jn_;
           case 61:return _jo_;
           case 62:return _jp_;
           case 63:return _jq_;
           case 64:return _jr_;
           case 65:return _js_;
           case 66:return _jt_;
           default:return _ju_}
        switch(_amM_)
         {case 0:return _ir_;
          case 1:return _is_;
          case 2:return _it_;
          case 3:return _iu_;
          case 4:return _iv_;
          case 5:return _iw_;
          case 6:return _ix_;
          case 7:return _iy_;
          case 8:return _iz_;
          case 9:return _iA_;
          case 10:return _iB_;
          case 11:return _iC_;
          case 12:return _iD_;
          case 13:return _iE_;
          case 14:return _iF_;
          case 15:return _iG_;
          case 16:return _iH_;
          case 17:return _iI_;
          case 18:return _iJ_;
          case 19:return _iK_;
          case 20:return _iL_;
          case 21:return _iM_;
          case 22:return _iN_;
          case 23:return _iO_;
          case 24:return _iP_;
          case 25:return _iQ_;
          case 26:return _iR_;
          case 27:return _iS_;
          case 28:return _iT_;
          case 29:return _iU_;
          case 30:return _iV_;
          case 31:return _iW_;
          case 32:return _iX_;
          default:return _iY_}}
      var v0=param[1],v0$0=caml_call1(_es_,v0);
      return [1,[0,_jv_,[0,v0$0,0]]]}
    function compare$0(a_001,match)
     {if(caml_call2(Ppx_compare_lib[1],a_001,match))return 0;
      if(typeof a_001 === "number")
       {var _amL_=a_001;
        if(34 <= _amL_)
         switch(_amL_)
          {case 34:
            if(typeof match === "number" && 34 === match)return 0;break;
           case 35:
            if(typeof match === "number" && 35 === match)return 0;break;
           case 36:
            if(typeof match === "number" && 36 === match)return 0;break;
           case 37:
            if(typeof match === "number" && 37 === match)return 0;break;
           case 38:
            if(typeof match === "number" && 38 === match)return 0;break;
           case 39:
            if(typeof match === "number" && 39 === match)return 0;break;
           case 40:
            if(typeof match === "number" && 40 === match)return 0;break;
           case 41:
            if(typeof match === "number" && 41 === match)return 0;break;
           case 42:
            if(typeof match === "number" && 42 === match)return 0;break;
           case 43:
            if(typeof match === "number" && 43 === match)return 0;break;
           case 44:
            if(typeof match === "number" && 44 === match)return 0;break;
           case 45:
            if(typeof match === "number" && 45 === match)return 0;break;
           case 46:
            if(typeof match === "number" && 46 === match)return 0;break;
           case 47:
            if(typeof match === "number" && 47 === match)return 0;break;
           case 48:
            if(typeof match === "number" && 48 === match)return 0;break;
           case 49:
            if(typeof match === "number" && 49 === match)return 0;break;
           case 50:
            if(typeof match === "number" && 50 === match)return 0;break;
           case 51:
            if(typeof match === "number" && 51 === match)return 0;break;
           case 52:
            if(typeof match === "number" && 52 === match)return 0;break;
           case 53:
            if(typeof match === "number" && 53 === match)return 0;break;
           case 54:
            if(typeof match === "number" && 54 === match)return 0;break;
           case 55:
            if(typeof match === "number" && 55 === match)return 0;break;
           case 56:
            if(typeof match === "number" && 56 === match)return 0;break;
           case 57:
            if(typeof match === "number" && 57 === match)return 0;break;
           case 58:
            if(typeof match === "number" && 58 === match)return 0;break;
           case 59:
            if(typeof match === "number" && 59 === match)return 0;break;
           case 60:
            if(typeof match === "number" && 60 === match)return 0;break;
           case 61:
            if(typeof match === "number" && 61 === match)return 0;break;
           case 62:
            if(typeof match === "number" && 62 === match)return 0;break;
           case 63:
            if(typeof match === "number" && 63 === match)return 0;break;
           case 64:
            if(typeof match === "number" && 64 === match)return 0;break;
           case 65:
            if(typeof match === "number" && 65 === match)return 0;break;
           case 66:
            if(typeof match === "number" && 66 === match)return 0;break;
           default:if(typeof match === "number" && 67 <= match)return 0}
        else
         switch(_amL_)
          {case 0:if(typeof match === "number" && ! match)return 0;return -1;
           case 1:if(typeof match === "number" && 1 === match)return 0;break;
           case 2:if(typeof match === "number" && 2 === match)return 0;break;
           case 3:if(typeof match === "number" && 3 === match)return 0;break;
           case 4:if(typeof match === "number" && 4 === match)return 0;break;
           case 5:if(typeof match === "number" && 5 === match)return 0;break;
           case 6:if(typeof match === "number" && 6 === match)return 0;break;
           case 7:if(typeof match === "number" && 7 === match)return 0;break;
           case 8:if(typeof match === "number" && 8 === match)return 0;break;
           case 9:if(typeof match === "number" && 9 === match)return 0;break;
           case 10:
            if(typeof match === "number" && 10 === match)return 0;break;
           case 11:
            if(typeof match === "number" && 11 === match)return 0;break;
           case 12:
            if(typeof match === "number" && 12 === match)return 0;break;
           case 13:
            if(typeof match === "number" && 13 === match)return 0;break;
           case 14:
            if(typeof match === "number" && 14 === match)return 0;break;
           case 15:
            if(typeof match === "number" && 15 === match)return 0;break;
           case 16:
            if(typeof match === "number" && 16 === match)return 0;break;
           case 17:
            if(typeof match === "number" && 17 === match)return 0;break;
           case 18:
            if(typeof match === "number" && 18 === match)return 0;break;
           case 19:
            if(typeof match === "number" && 19 === match)return 0;break;
           case 20:
            if(typeof match === "number" && 20 === match)return 0;break;
           case 21:
            if(typeof match === "number" && 21 === match)return 0;break;
           case 22:
            if(typeof match === "number" && 22 === match)return 0;break;
           case 23:
            if(typeof match === "number" && 23 === match)return 0;break;
           case 24:
            if(typeof match === "number" && 24 === match)return 0;break;
           case 25:
            if(typeof match === "number" && 25 === match)return 0;break;
           case 26:
            if(typeof match === "number" && 26 === match)return 0;break;
           case 27:
            if(typeof match === "number" && 27 === match)return 0;break;
           case 28:
            if(typeof match === "number" && 28 === match)return 0;break;
           case 29:
            if(typeof match === "number" && 29 === match)return 0;break;
           case 30:
            if(typeof match === "number" && 30 === match)return 0;break;
           case 31:
            if(typeof match === "number" && 31 === match)return 0;break;
           case 32:
            if(typeof match === "number" && 32 === match)return 0;break;
           default:if(typeof match === "number" && 33 === match)return 0}}
      else
       if(typeof match !== "number")
        {var b_004=match[1],a_003=a_001[1];
         return caml_call2(_eo_,a_003,b_004)}
      if(typeof match === "number" && ! match)return 1;
      if(typeof a_001 === "number" && 1 === a_001)return -1;
      if(typeof match === "number" && 1 === match)return 1;
      if(typeof a_001 === "number" && 2 === a_001)return -1;
      if(typeof match === "number" && 2 === match)return 1;
      if(typeof a_001 === "number" && 3 === a_001)return -1;
      if(typeof match === "number" && 3 === match)return 1;
      if(typeof a_001 === "number" && 4 === a_001)return -1;
      if(typeof match === "number" && 4 === match)return 1;
      if(typeof a_001 === "number" && 5 === a_001)return -1;
      if(typeof match === "number" && 5 === match)return 1;
      if(typeof a_001 === "number" && 6 === a_001)return -1;
      if(typeof match === "number" && 6 === match)return 1;
      if(typeof a_001 === "number" && 7 === a_001)return -1;
      if(typeof match === "number" && 7 === match)return 1;
      if(typeof a_001 === "number" && 8 === a_001)return -1;
      if(typeof match === "number" && 8 === match)return 1;
      if(typeof a_001 === "number" && 9 === a_001)return -1;
      if(typeof match === "number" && 9 === match)return 1;
      if(typeof a_001 === "number" && 10 === a_001)return -1;
      if(typeof match === "number" && 10 === match)return 1;
      if(typeof a_001 === "number" && 11 === a_001)return -1;
      if(typeof match === "number" && 11 === match)return 1;
      if(typeof a_001 === "number" && 12 === a_001)return -1;
      if(typeof match === "number" && 12 === match)return 1;
      if(typeof a_001 === "number" && 13 === a_001)return -1;
      if(typeof match === "number" && 13 === match)return 1;
      if(typeof a_001 === "number" && 14 === a_001)return -1;
      if(typeof match === "number" && 14 === match)return 1;
      if(typeof a_001 === "number" && 15 === a_001)return -1;
      if(typeof match === "number" && 15 === match)return 1;
      if(typeof a_001 === "number" && 16 === a_001)return -1;
      if(typeof match === "number" && 16 === match)return 1;
      if(typeof a_001 === "number" && 17 === a_001)return -1;
      if(typeof match === "number" && 17 === match)return 1;
      if(typeof a_001 === "number" && 18 === a_001)return -1;
      if(typeof match === "number" && 18 === match)return 1;
      if(typeof a_001 === "number" && 19 === a_001)return -1;
      if(typeof match === "number" && 19 === match)return 1;
      if(typeof a_001 === "number" && 20 === a_001)return -1;
      if(typeof match === "number" && 20 === match)return 1;
      if(typeof a_001 === "number" && 21 === a_001)return -1;
      if(typeof match === "number" && 21 === match)return 1;
      if(typeof a_001 === "number" && 22 === a_001)return -1;
      if(typeof match === "number" && 22 === match)return 1;
      if(typeof a_001 === "number" && 23 === a_001)return -1;
      if(typeof match === "number" && 23 === match)return 1;
      if(typeof a_001 === "number" && 24 === a_001)return -1;
      if(typeof match === "number" && 24 === match)return 1;
      if(typeof a_001 === "number" && 25 === a_001)return -1;
      if(typeof match === "number" && 25 === match)return 1;
      if(typeof a_001 === "number" && 26 === a_001)return -1;
      if(typeof match === "number" && 26 === match)return 1;
      if(typeof a_001 === "number" && 27 === a_001)return -1;
      if(typeof match === "number" && 27 === match)return 1;
      if(typeof a_001 === "number" && 28 === a_001)return -1;
      if(typeof match === "number" && 28 === match)return 1;
      if(typeof a_001 === "number" && 29 === a_001)return -1;
      if(typeof match === "number" && 29 === match)return 1;
      if(typeof a_001 === "number" && 30 === a_001)return -1;
      if(typeof match === "number" && 30 === match)return 1;
      if(typeof a_001 === "number" && 31 === a_001)return -1;
      if(typeof match === "number" && 31 === match)return 1;
      if(typeof a_001 === "number" && 32 === a_001)return -1;
      if(typeof match === "number" && 32 === match)return 1;
      if(typeof a_001 === "number" && 33 === a_001)return -1;
      if(typeof match === "number" && 33 === match)return 1;
      if(typeof a_001 === "number" && 34 === a_001)return -1;
      if(typeof match === "number" && 34 === match)return 1;
      if(typeof a_001 === "number" && 35 === a_001)return -1;
      if(typeof match === "number" && 35 === match)return 1;
      if(typeof a_001 === "number" && 36 === a_001)return -1;
      if(typeof match === "number" && 36 === match)return 1;
      if(typeof a_001 === "number" && 37 === a_001)return -1;
      if(typeof match === "number" && 37 === match)return 1;
      if(typeof a_001 === "number" && 38 === a_001)return -1;
      if(typeof match === "number" && 38 === match)return 1;
      if(typeof a_001 === "number" && 39 === a_001)return -1;
      if(typeof match === "number" && 39 === match)return 1;
      if(typeof a_001 === "number" && 40 === a_001)return -1;
      if(typeof match === "number" && 40 === match)return 1;
      if(typeof a_001 === "number" && 41 === a_001)return -1;
      if(typeof match === "number" && 41 === match)return 1;
      if(typeof a_001 === "number" && 42 === a_001)return -1;
      if(typeof match === "number" && 42 === match)return 1;
      if(typeof a_001 === "number" && 43 === a_001)return -1;
      if(typeof match === "number" && 43 === match)return 1;
      if(typeof a_001 === "number" && 44 === a_001)return -1;
      if(typeof match === "number" && 44 === match)return 1;
      if(typeof a_001 === "number" && 45 === a_001)return -1;
      if(typeof match === "number" && 45 === match)return 1;
      if(typeof a_001 === "number" && 46 === a_001)return -1;
      if(typeof match === "number" && 46 === match)return 1;
      if(typeof a_001 === "number" && 47 === a_001)return -1;
      if(typeof match === "number" && 47 === match)return 1;
      if(typeof a_001 === "number" && 48 === a_001)return -1;
      if(typeof match === "number" && 48 === match)return 1;
      if(typeof a_001 === "number" && 49 === a_001)return -1;
      if(typeof match === "number" && 49 === match)return 1;
      if(typeof a_001 === "number" && 50 === a_001)return -1;
      if(typeof match === "number" && 50 === match)return 1;
      if(typeof a_001 === "number" && 51 === a_001)return -1;
      if(typeof match === "number" && 51 === match)return 1;
      if(typeof a_001 === "number" && 52 === a_001)return -1;
      if(typeof match === "number" && 52 === match)return 1;
      if(typeof a_001 === "number" && 53 === a_001)return -1;
      if(typeof match === "number" && 53 === match)return 1;
      if(typeof a_001 === "number" && 54 === a_001)return -1;
      if(typeof match === "number" && 54 === match)return 1;
      if(typeof a_001 === "number" && 55 === a_001)return -1;
      if(typeof match === "number" && 55 === match)return 1;
      if(typeof a_001 === "number" && 56 === a_001)return -1;
      if(typeof match === "number" && 56 === match)return 1;
      if(typeof a_001 === "number" && 57 === a_001)return -1;
      if(typeof match === "number" && 57 === match)return 1;
      if(typeof a_001 === "number" && 58 === a_001)return -1;
      if(typeof match === "number" && 58 === match)return 1;
      if(typeof a_001 === "number" && 59 === a_001)return -1;
      if(typeof match === "number" && 59 === match)return 1;
      if(typeof a_001 === "number" && 60 === a_001)return -1;
      if(typeof match === "number" && 60 === match)return 1;
      if(typeof a_001 === "number" && 61 === a_001)return -1;
      if(typeof match === "number" && 61 === match)return 1;
      if(typeof a_001 === "number" && 62 === a_001)return -1;
      if(typeof match === "number" && 62 === match)return 1;
      if(typeof a_001 === "number" && 63 === a_001)return -1;
      if(typeof match === "number" && 63 === match)return 1;
      if(typeof a_001 === "number" && 64 === a_001)return -1;
      if(typeof match === "number" && 64 === match)return 1;
      if(typeof a_001 === "number" && 65 === a_001)return -1;
      if(typeof match === "number" && 65 === match)return 1;
      if(typeof a_001 === "number" && 66 === a_001)return -1;
      if(typeof match === "number" && 66 === match)return 1;
      if(typeof a_001 === "number" && 67 <= a_001)return -1;
      return 1}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$4);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Unix_error$0);
    var
     include$1=
      [0,
       error_of_sexp,
       sexp_of_error,
       compare$0,
       error_of_sexp,
       sexp_of_error,
       compare$0];
    caml_register_global(2945,include$1,"Core__Unix_error");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Core_sys);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$5);
    caml_call1(Expect_test_collector[4][1],cst_src_core_sys_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$6,cst$1);
    function getenv_f(f,var$0)
     {try
       {var _amJ_=[0,caml_call1(f,var$0)];return _amJ_}
      catch(_amK_)
       {_amK_ = caml_wrap_exception(_amK_);
        if(_amK_[1] !== _ih_ && _amK_ !== include$2[103])throw _amK_;
        return 0}}
    var _jw_=runtime.caml_sys_getenv;
    function getenv(_amI_){return getenv_f(_jw_,_amI_)}
    var _jx_=Caml_unix[7];
    function unsafe_getenv(_amH_){return getenv_f(_jx_,_amH_)}
    function getenv_exn_f(f_str,f,var$0)
     {var match=caml_call1(f,var$0);
      if(match){var x=match[1];return x}
      return caml_call4(Core_kernel_Printf[6],_jy_,f_str,var$0,0)}
    function getenv_exn(_amG_)
     {return getenv_exn_f(cst_Sys_getenv_exn,getenv,_amG_)}
    function unsafe_getenv_exn(_amF_)
     {return getenv_exn_f(cst_Sys_unsafe_getenv_exn,unsafe_getenv,_amF_)}
    function stat_check_exn(f,opt,path)
     {if(opt)var sth=opt[1],follow_symlinks=sth;else var follow_symlinks=1;
      function loop(param)
       {for(;;)
         try
          {var
            _amC_=
             follow_symlinks
              ?caml_call1(Caml_unix[42][4],path)
              :caml_call1(Caml_unix[42][5],path),
            _amD_=caml_call1(f,_amC_);
           return _amD_}
         catch(_amE_)
          {_amE_ = caml_wrap_exception(_amE_);
           if(_amE_[1] === Caml_unix[1])
            {var _amB_=_amE_[2];
             if(typeof _amB_ === "number")
              {var switcher=_amB_ - 20 | 0;
               if(6 < switcher >>> 0)
                {if(-9 === switcher)continue}
               else
                {var switcher$0=switcher - 1 | 0;
                 if(4 < switcher$0 >>> 0)return 0}}}
           throw _amE_}}
      return loop(0)}
    function stat_check(f,follow_symlinks,path)
     {try
       {var _amz_=stat_check_exn(f,follow_symlinks,path)?4448519:17505;
        return _amz_}
      catch(_amA_)
       {_amA_ = caml_wrap_exception(_amA_);
        if(_amA_[1] === Caml_unix[1])
         {var _amy_=_amA_[2];
          if(typeof _amy_ === "number")
           {var switch$0=0;
            if(1 === _amy_ || 66 === _amy_)switch$0 = 1;
            if(switch$0)return 785140586}}
        throw _amA_}}
    function _jz_(param){return 1}
    function file_exists(_amw_,_amx_){return stat_check(_jz_,_amw_,_amx_)}
    function _jA_(param){return 1}
    function file_exists_exn(_amu_,_amv_)
     {return stat_check_exn(_jA_,_amu_,_amv_)}
    function _jB_(stat){return 1 === stat[3]?1:0}
    function is_directory(_ams_,_amt_){return stat_check(_jB_,_ams_,_amt_)}
    function _jC_(stat){return 1 === stat[3]?1:0}
    function is_directory_exn(_amq_,_amr_)
     {return stat_check_exn(_jC_,_amq_,_amr_)}
    function _jD_(stat){return 0 === stat[3]?1:0}
    function is_file(_amo_,_amp_){return stat_check(_jD_,_amo_,_amp_)}
    function _jE_(stat){return 0 === stat[3]?1:0}
    function is_file_exn(_amm_,_amn_){return stat_check_exn(_jE_,_amm_,_amn_)}
    function get_argv(param){return caml_sys_argv(0)}
    var
     argv=caml_sys_argv(0),
     executable_name=Stdlib_sys[1],
     remove=runtime.caml_sys_remove,
     rename=runtime.caml_sys_rename,
     command=caml_sys_system_command,
     chdir=runtime.caml_sys_chdir;
    function getcwd(_aml_){return runtime.caml_sys_getcwd(_aml_)}
    var
     readdir=caml_sys_read_directory,
     interactive=Stdlib_sys[3],
     os_type=Stdlib_sys[4],
     word_size=Stdlib_sys[9],
     int_size=Stdlib_sys[10],
     big_endian=Stdlib_sys[11],
     Break=Stdlib_sys[44],
     catch_break=Stdlib_sys[45],
     ocaml_version=Stdlib_sys[46],
     Command_failed_with_status=
      [248,cst_Core_Core_sys_Command_fail,caml_fresh_oo_id(0)];
    function _jF_(param)
     {if(param[1] === Command_failed_with_status)
       {var
         v1=param[3],
         v0=param[2],
         v0$0=caml_call1(Core_kernel_Int[101],v0),
         v1$0=caml_call1(Core_kernel_String[101],v1);
        return [1,[0,_jG_,[0,v0$0,[0,v1$0,0]]]]}
      throw [0,Assert_failure,_jH_]}
    caml_call3(Sexplib0_Sexp_conv[51][2],0,Command_failed_with_status,_jF_);
    function command_exn(string)
     {var status=caml_sys_system_command(string),_amk_=0 !== status?1:0;
      if(_amk_)throw [0,Command_failed_with_status,status,string];
      return _amk_}
    function unix_quote(x)
     {if(! caml_call1(Core_kernel_String[5],x))
       {var
         _amg_=
          function(param)
           {var switch$0=0;
            if(62 <= param)
             {var _amj_=param - 91 | 0;
              if(5 < _amj_ >>> 0)
               {if(! (58 < (_amj_ + 27 | 0) >>> 0))switch$0 = 1}
              else
               if(4 === _amj_)switch$0 = 1}
            else
             if(43 <= param)
              {if(1 < (param - 59 | 0) >>> 0)switch$0 = 1}
             else
              if(37 === param)switch$0 = 1;
            return switch$0?1:0};
        if(caml_call2(Core_kernel_String[11],x,_amg_))
         {var _amh_=caml_string_compare(x,cst_function),switch$0=0;
          if(0 <= _amh_)
           {if
             (0
              <
              _amh_
              &&
              caml_string_notequal(x,cst_if)
              &&
              caml_string_notequal(x,cst_in)
              &&
              caml_string_notequal(x,cst_nocorrect)
              &&
              caml_string_notequal(x,cst_repeat)
              &&
              caml_string_notequal(x,cst_select)
              &&
              caml_string_notequal(x,cst_then)
              &&
              caml_string_notequal(x,cst_time)
              &&
              caml_string_notequal(x,cst_until)
              &&
              caml_string_notequal(x,cst_while))
             switch$0 = 1}
          else
           {var _ami_=caml_string_compare(x,cst_else);
            if(0 <= _ami_)
             {if
               (0
                <
                _ami_
                &&
                caml_string_notequal(x,cst_esac)
                &&
                caml_string_notequal(x,cst_fi)
                &&
                caml_string_notequal(x,cst_for)
                &&
                caml_string_notequal(x,cst_foreach))
               switch$0 = 1}
            else
             if
              (caml_string_notequal(x,cst_case)
               &&
               caml_string_notequal(x,cst_coproc)
               &&
               caml_string_notequal(x,cst_do)
               &&
               caml_string_notequal(x,cst_done)
               &&
               caml_string_notequal(x,cst_elif))
              switch$0 = 1}
          return switch$0?x:caml_call1(include$3[59],x)}}
      return caml_call1(include$3[59],x)}
    var
     quote=
      caml_string_notequal(Stdlib_sys[4],cst_Unix)?include$3[59]:unix_quote;
    function fold_dir(init,f,directory)
     {var _amf_=caml_sys_read_directory(directory);
      return caml_call3(Core_kernel_Array[21],_amf_,init,f)}
    function ls_dir(directory)
     {var _ame_=caml_sys_read_directory(directory);
      return caml_call1(Core_kernel_Array[30],_ame_)}
    function execution_mode(param)
     {return runtime.executing_bytecode(0,0,0,0,0,0)?826912853:-693027401}
    function home_directory(param)
     {var match=getenv(cst_HOME);
      if(match){var home=match[1];return home}
      var _amd_=caml_call1(Caml_unix[111],0);
      return caml_call1(Caml_unix[122],_amd_)[6]}
    var Private=[0,unix_quote];
    function override_argv(new_argv)
     {runtime.caml_sys_modify_argv(new_argv);
      Core_kernel_Arg[12][1] = 0;
      return 0}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$7);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Core_sys$0);
    var
     Core_Core_sys=
      [0,
       get_argv,
       argv,
       executable_name,
       file_exists,
       file_exists_exn,
       is_directory,
       is_file,
       is_directory_exn,
       is_file_exn,
       remove,
       rename,
       getenv,
       getenv_exn,
       unsafe_getenv,
       unsafe_getenv_exn,
       command,
       command_exn,
       quote,
       chdir,
       getcwd,
       readdir,
       fold_dir,
       ls_dir,
       interactive,
       os_type,
       word_size,
       int_size,
       big_endian,
       Break,
       catch_break,
       ocaml_version,
       execution_mode,
       home_directory,
       override_argv,
       Private];
    caml_register_global(2957,Core_Core_sys,"Core__Core_sys");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Core_filename);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$8);
    caml_call1(Expect_test_collector[4][1],cst_src_core_filename_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$9,cst$2);
    var
     _kk_=include$3[41],
     _ko_=include$3[45],
     _jI_=include$3[1],
     _jJ_=include$3[2],
     _jK_=include$3[3],
     _jL_=include$3[4],
     _jM_=include$3[5],
     _jN_=include$3[6],
     _jO_=include$3[7],
     _jP_=include$3[8],
     _jQ_=include$3[9],
     _jR_=include$3[10],
     _jS_=include$3[11],
     _jT_=include$3[12],
     _jU_=include$3[13],
     _jV_=include$3[14],
     _jW_=include$3[15],
     _jX_=include$3[16],
     _jY_=include$3[17],
     _jZ_=include$3[18],
     _j0_=include$3[19],
     _j1_=include$3[20],
     _j2_=include$3[21],
     _j3_=include$3[22],
     _j4_=include$3[23],
     _j5_=include$3[24],
     _j6_=include$3[25],
     _j7_=include$3[26],
     _j8_=include$3[27],
     _j9_=include$3[28],
     _j__=include$3[29],
     _j$_=include$3[30],
     _ka_=include$3[31],
     _kb_=include$3[32],
     _kc_=include$3[33],
     _kd_=include$3[34],
     _ke_=include$3[35],
     _kf_=include$3[36],
     _kg_=include$3[37],
     _kh_=include$3[38],
     _ki_=include$3[39],
     _kj_=include$3[40],
     _kl_=include$3[42],
     _km_=include$3[43],
     _kn_=include$3[44],
     _kp_=include$3[46],
     _kq_=include$3[47],
     _kr_=include$3[48],
     _ks_=include$3[49],
     _kt_=include$3[50],
     _ku_=include$3[51],
     _kv_=include$3[52],
     _kw_=include$3[53],
     _kx_=include$3[54],
     _ky_=include$3[55],
     _kz_=include$3[56],
     _kA_=include$3[57],
     _kB_=include$3[58],
     _kC_=include$3[59],
     _kD_=include$3[60];
    function create_arg_type(key,of_string)
     {var
       _ama_=
        [0,
         function(param,part)
          {var
            command=caml_call2(_cV_,_kE_,part),
            chan_in=caml_call1(Caml_unix[72],command),
            completions=caml_call2(Stdio_In_channel[18],0,chan_in);
           caml_call1(Caml_unix[84],chan_in);
           function _amb_(comp)
            {return runtime.caml_sys_is_directory(comp)
                     ?caml_call2(_n_,comp,cst$3)
                     :comp}
           var
            _amc_=
             caml_call2
              (Core_kernel_List[58],completions,Core_kernel_String[112]),
            completions$0=caml_call2(Core_kernel_List[71],_amc_,_amb_);
           if(completions$0 && ! completions$0[2])
            {var dir=completions$0[1];
             if(caml_call2(Core_kernel_String[50],dir,cst$4))
              return [0,dir,[0,caml_call2(_n_,dir,cst_x),0]]}
           return completions$0}];
      return caml_call3(Core_kernel_Command[2][1],_ama_,key,of_string)}
    var
     arg_type=create_arg_type(0,function(_al$_){return _al$_}),
     prng=caml_call2(Base_Random[18][3],_kF_,0);
    function retry(opt,f,prefix,suffix)
     {if(opt)var sth=opt[1],in_dir=sth;else var in_dir=_kk_;
      function escape(s)
       {function _al9_(c)
         {var switch$0=0;
          if(11 <= c)
           {var _al__=c - 39 | 0;
            if(! (8 < _al__ >>> 0))
             switch(_al__){case 0:case 6:case 8:switch$0 = 1;break}}
          else
           if(8 < (c - 1 | 0) >>> 0)switch$0 = 1;
          return switch$0?95:c}
        return caml_call2(Core_kernel_String[64],s,_al9_)}
      var prefix$0=escape(prefix),suffix$0=escape(suffix);
      function try_name(counter)
       {var counter$0=counter;
        for(;;)
         {var
           rnd=caml_call1(Base_Random[18][5],prng) & 16777215,
           name=caml_call4(Core_kernel_Printf[2],_kG_,prefix$0,rnd,suffix$0),
           name$0=caml_call2(_ko_,in_dir,name);
          try
           {var _al8_=caml_call1(f,name$0);return _al8_}
          catch(e)
           {e = caml_wrap_exception(e);
            if(e[1] !== Stdlib[11] && e[1] !== Caml_unix[1])throw e;
            if(caml_call2(Core_kernel_Int[105],counter$0,1000))throw e;
            var counter$1=counter$0 + 1 | 0,counter$0=counter$1;
            continue}}}
      return try_name(0)}
    function temp_dir(opt,in_dir,prefix,suffix)
     {if(opt)var sth=opt[1],perm=sth;else var perm=448;
      return retry
              (in_dir,
               function(name){caml_call2(Caml_unix[59],name,perm);return name},
               prefix,
               suffix)}
    function open_temp_file(opt,in_dir,prefix,suffix)
     {if(opt)var sth=opt[1],perm=sth;else var perm=384;
      return retry
              (in_dir,
               function(name)
                {return [0,
                         name,
                         caml_call5(Stdio_Out_channel[5],0,0,_kH_,[0,perm],name)]},
               prefix,
               suffix)}
    function open_temp_file_fd(opt,in_dir,prefix,suffix)
     {if(opt)var sth=opt[1],perm=sth;else var perm=384;
      return retry
              (in_dir,
               function(name)
                {return [0,name,caml_call3(UnixLabels[22],name,_kI_,perm)]},
               prefix,
               suffix)}
    function temp_file(perm,in_dir,prefix,suffix)
     {var
       match=open_temp_file(perm,in_dir,prefix,suffix),
       oc=match[2],
       name=match[1];
      caml_call1(Stdio_Out_channel[7],oc);
      return name}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$10);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Core_filename$0);
    var
     Core_Core_filename=
      [0,
       _jI_,
       _jJ_,
       _jK_,
       _jL_,
       _jM_,
       _jN_,
       _jO_,
       _jP_,
       _jQ_,
       _jR_,
       _jS_,
       _jT_,
       _jU_,
       _jV_,
       _jW_,
       _jX_,
       _jY_,
       _jZ_,
       _j0_,
       _j1_,
       _j2_,
       _j3_,
       _j4_,
       _j5_,
       _j6_,
       _j7_,
       _j8_,
       _j9_,
       _j__,
       _j$_,
       _ka_,
       _kb_,
       _kc_,
       _kd_,
       _ke_,
       _kf_,
       _kg_,
       _kh_,
       _ki_,
       _kj_,
       _kk_,
       _kl_,
       _km_,
       _kn_,
       _ko_,
       _kp_,
       _kq_,
       _kr_,
       _ks_,
       _kt_,
       _ku_,
       _kv_,
       _kw_,
       _kx_,
       _ky_,
       _kz_,
       _kA_,
       _kB_,
       _kC_,
       _kD_,
       function(_al7_){return runtime.core_unix_realpath(_al7_)},
       open_temp_file,
       open_temp_file_fd,
       temp_file,
       temp_dir,
       create_arg_type,
       arg_type];
    caml_register_global(2965,Core_Core_filename,"Core__Core_filename");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Signal);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$11);
    caml_call1(Expect_test_collector[4][1],cst_src_signal_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$12,cst$5);
    var
     Hash_queue=Core_kernel_Int[132],
     _kJ_=Core_kernel_Int[131],
     Hash_set=[0,_kJ_[1],_kJ_[2],_kJ_[3],_kJ_[4],_kJ_[5],_kJ_[6]],
     _kK_=Core_kernel_Int[130],
     Table=
      [0,
       _kK_[1],
       _kK_[2],
       _kK_[3],
       _kK_[4],
       _kK_[5],
       _kK_[6],
       _kK_[7],
       _kK_[8],
       _kK_[9],
       _kK_[10],
       _kK_[11],
       _kK_[12],
       _kK_[13],
       _kK_[14],
       _kK_[15],
       _kK_[16],
       _kK_[17],
       _kK_[18],
       _kK_[19],
       _kK_[20],
       _kK_[21],
       _kK_[22],
       _kK_[23],
       _kK_[24],
       _kK_[25],
       _kK_[26],
       _kK_[27],
       _kK_[28],
       _kK_[29],
       _kK_[30],
       _kK_[31],
       _kK_[32],
       _kK_[33],
       _kK_[34],
       _kK_[35],
       _kK_[36],
       _kK_[37],
       _kK_[38],
       _kK_[39],
       _kK_[40],
       _kK_[41],
       _kK_[42],
       _kK_[43],
       _kK_[44],
       _kK_[45],
       _kK_[46],
       _kK_[47],
       _kK_[48],
       _kK_[49],
       _kK_[50],
       _kK_[51],
       _kK_[52],
       _kK_[53],
       _kK_[54],
       _kK_[55],
       _kK_[56],
       _kK_[57],
       _kK_[58],
       _kK_[59],
       _kK_[60],
       _kK_[61],
       _kK_[62],
       _kK_[63],
       _kK_[64],
       _kK_[65],
       _kK_[66],
       _kK_[67],
       _kK_[68],
       _kK_[69],
       _kK_[70],
       _kK_[71],
       _kK_[72],
       _kK_[73],
       _kK_[74],
       _kK_[75],
       _kK_[76],
       _kK_[77],
       _kK_[78],
       _kK_[79],
       _kK_[80],
       _kK_[81],
       _kK_[82],
       _kK_[83]],
     hashable=Core_kernel_Int[129],
     hash=Core_kernel_Int[128],
     hash_fold_t=Core_kernel_Int[127],
     compare$1=Core_kernel_Int[112],
     _kL_=Core_kernel_Int[126],
     _kM_=_kL_[1],
     Set=
      [0,
       [0,_kM_[1],_kM_[2],_kM_[11]],
       _kL_[2],
       _kL_[3],
       _kL_[4],
       _kL_[5],
       _kL_[6],
       _kL_[7],
       _kL_[8],
       _kL_[9],
       _kL_[10],
       _kL_[11],
       _kL_[12],
       _kL_[13],
       _kL_[14],
       _kL_[15],
       _kL_[16],
       _kL_[17],
       _kL_[18],
       _kL_[19],
       _kL_[20],
       _kL_[21],
       _kL_[22],
       _kL_[23],
       _kL_[24],
       _kL_[25],
       _kL_[26],
       _kL_[27],
       _kL_[28],
       _kL_[29],
       _kL_[30],
       _kL_[31],
       _kL_[32],
       _kL_[33],
       _kL_[34],
       _kL_[35],
       _kL_[36],
       _kL_[37],
       _kL_[38],
       _kL_[39],
       _kL_[40],
       _kL_[41],
       _kL_[42],
       _kL_[43],
       _kL_[44],
       _kL_[45],
       _kL_[46],
       _kL_[47],
       _kL_[48],
       _kL_[49],
       _kL_[50],
       _kL_[51],
       _kL_[52],
       _kL_[53],
       _kL_[54],
       _kL_[55],
       _kL_[56],
       _kL_[57],
       _kL_[58],
       _kL_[59],
       _kL_[60],
       _kL_[61],
       _kL_[62],
       _kL_[63],
       _kL_[64],
       _kL_[65],
       _kL_[66],
       _kL_[67],
       _kL_[68],
       _kL_[69],
       _kL_[70],
       _kL_[71],
       _kL_[72],
       _kL_[73],
       _kL_[74],
       _kL_[75]],
     _kN_=Core_kernel_Int[125],
     _kO_=_kN_[1],
     Map=
      [0,
       [0,_kO_[9],_kO_[10],_kO_[11]],
       _kN_[2],
       _kN_[3],
       _kN_[4],
       _kN_[5],
       _kN_[6],
       _kN_[7],
       _kN_[8],
       _kN_[9],
       _kN_[10],
       _kN_[11],
       _kN_[12],
       _kN_[13],
       _kN_[14],
       _kN_[15],
       _kN_[16],
       _kN_[17],
       _kN_[18],
       _kN_[19],
       _kN_[20],
       _kN_[21],
       _kN_[22],
       _kN_[23],
       _kN_[24],
       _kN_[25],
       _kN_[26],
       _kN_[27],
       _kN_[28],
       _kN_[29],
       _kN_[30],
       _kN_[31],
       _kN_[32],
       _kN_[33],
       _kN_[34],
       _kN_[35],
       _kN_[36],
       _kN_[37],
       _kN_[38],
       _kN_[39],
       _kN_[40],
       _kN_[41],
       _kN_[42],
       _kN_[43],
       _kN_[44],
       _kN_[45],
       _kN_[46],
       _kN_[47],
       _kN_[48],
       _kN_[49],
       _kN_[50],
       _kN_[51],
       _kN_[52],
       _kN_[53],
       _kN_[54],
       _kN_[55],
       _kN_[56],
       _kN_[57],
       _kN_[58],
       _kN_[59],
       _kN_[60],
       _kN_[61],
       _kN_[62],
       _kN_[63],
       _kN_[64],
       _kN_[65],
       _kN_[66],
       _kN_[67],
       _kN_[68],
       _kN_[69],
       _kN_[70],
       _kN_[71],
       _kN_[72],
       _kN_[73],
       _kN_[74],
       _kN_[75],
       _kN_[76],
       _kN_[77],
       _kN_[78],
       _kN_[79],
       _kN_[80],
       _kN_[81],
       _kN_[82],
       _kN_[83],
       _kN_[84],
       _kN_[85],
       _kN_[86],
       _kN_[87],
       _kN_[88],
       _kN_[89],
       _kN_[90],
       _kN_[91],
       _kN_[92],
       _kN_[93],
       _kN_[94],
       _kN_[95],
       _kN_[96],
       _kN_[97],
       _kN_[98],
       _kN_[99],
       _kN_[100],
       _kN_[101],
       _kN_[102]],
     Replace_polymorphic_compare=Core_kernel_Int[123],
     validate_bound=Core_kernel_Int[122],
     validate_ubound=Core_kernel_Int[121],
     validate_lbound=Core_kernel_Int[120],
     comparator=Core_kernel_Int[124],
     clamp=Core_kernel_Int[119],
     clamp_exn=Core_kernel_Int[118],
     between=Core_kernel_Int[117],
     descending=Core_kernel_Int[116],
     ascending=Core_kernel_Int[115],
     max=Core_kernel_Int[114],
     min=Core_kernel_Int[113],
     symbol=Core_kernel_Int[110],
     symbol$0=Core_kernel_Int[109],
     symbol$1=Core_kernel_Int[108],
     symbol$2=Core_kernel_Int[107],
     symbol$3=Core_kernel_Int[106],
     symbol$4=Core_kernel_Int[105],
     bin_t=Core_kernel_Int[99],
     bin_reader_t=Core_kernel_Int[98],
     bin_writer_t=Core_kernel_Int[97],
     bin_shape_t=Core_kernel_Int[96],
     bin_read_t=Core_kernel_Int[95],
     bin_read_t$0=Core_kernel_Int[94],
     bin_write_t=Core_kernel_Int[93],
     bin_size_t=Core_kernel_Int[92];
    function of_system_int(t)
     {return runtime.ml_nonportable_to_caml_signal_number(t)}
    function to_system_int(t)
     {return runtime.ml_caml_to_nonportable_signal_number(t)}
    function of_caml_int(t){return t}
    function to_caml_int(t){return t}
    function sys_behavior_of_sexp(sexp)
     {if(0 === sexp[0])
       {var atom=sexp[1];
        return caml_string_notequal(atom,cst_Continue)
                ?caml_string_notequal(atom,cst_Dump_core)
                  ?caml_string_notequal(atom,cst_Ignore)
                    ?caml_string_notequal(atom,cst_Stop)
                      ?caml_string_notequal(atom,cst_Terminate)
                        ?caml_call1(Sexplib0_Sexp_conv_error[19],0)
                        :530911809
                      :926227490
                    :-950194894
                  :497016682
                :192584839}
      var _al5_=sexp[1];
      if(_al5_)
       {var _al6_=_al5_[1];
        if(0 === _al6_[0])
         {var atom$0=_al6_[1];
          return caml_string_notequal(atom$0,cst_Continue$0)
                  ?caml_string_notequal(atom$0,cst_Dump_core$0)
                    ?caml_string_notequal(atom$0,cst_Ignore$0)
                      ?caml_string_notequal(atom$0,cst_Stop$0)
                        ?caml_string_notequal(atom$0,cst_Terminate$0)
                          ?caml_call1(Sexplib0_Sexp_conv_error[19],0)
                          :caml_call2(Sexplib0_Sexp_conv_error[21],tp_loc$0,sexp)
                        :caml_call2(Sexplib0_Sexp_conv_error[21],tp_loc$0,sexp)
                      :caml_call2(Sexplib0_Sexp_conv_error[21],tp_loc$0,sexp)
                    :caml_call2(Sexplib0_Sexp_conv_error[21],tp_loc$0,sexp)
                  :caml_call2(Sexplib0_Sexp_conv_error[21],tp_loc$0,sexp)}
        return caml_call2(Sexplib0_Sexp_conv_error[24],tp_loc$0,sexp)}
      return caml_call2(Sexplib0_Sexp_conv_error[25],tp_loc$0,sexp)}
    function sys_behavior_of_sexp$0(sexp)
     {try
       {var _al3_=sys_behavior_of_sexp(sexp);return _al3_}
      catch(_al4_)
       {_al4_ = caml_wrap_exception(_al4_);
        if(_al4_ === Sexplib0_Sexp_conv_error[18])
         return caml_call2(Sexplib0_Sexp_conv_error[20],tp_loc$1,sexp);
        throw _al4_}}
    function sexp_of_sys_behavior(param)
     {return 192584839 === param
              ?_kP_
              :530911809 <= param
                ?926227490 <= param?_kQ_:_kR_
                :497016682 <= param?_kS_:_kT_}
    function equal(t$0,t){return caml_call2(symbol$2,t$0,t)}
    var
     abrt=Stdlib_sys[16],
     alrm=Stdlib_sys[17],
     bus=Stdlib_sys[37],
     chld=Stdlib_sys[29],
     cont=Stdlib_sys[30],
     fpe=Stdlib_sys[18],
     hup=Stdlib_sys[19],
     ill=Stdlib_sys[20],
     int$0=Stdlib_sys[21],
     kill=Stdlib_sys[22],
     pipe=Stdlib_sys[23],
     poll=Stdlib_sys[38],
     prof=Stdlib_sys[36],
     quit=Stdlib_sys[24],
     segv=Stdlib_sys[25],
     stop=Stdlib_sys[31],
     sys=Stdlib_sys[39],
     term=Stdlib_sys[26],
     trap=Stdlib_sys[40],
     tstp=Stdlib_sys[32],
     ttin=Stdlib_sys[33],
     ttou=Stdlib_sys[34],
     urg=Stdlib_sys[41],
     usr1=Stdlib_sys[27],
     usr2=Stdlib_sys[28],
     vtalrm=Stdlib_sys[35],
     xcpu=Stdlib_sys[42],
     xfsz=Stdlib_sys[43],
     Invalid_signal_mnemonic_or_num=
      [248,cst_Core_Signal_Invalid_signal,caml_fresh_oo_id(0)],
     zero=0;
    function _kU_(param)
     {if(param[1] === Invalid_signal_mnemonic_or_num)
       {var v0=param[2],v0$0=caml_call1(_ge_,v0);
        return [1,[0,_kV_,[0,v0$0,0]]]}
      throw [0,Assert_failure,_kW_]}
    caml_call3
     (Sexplib0_Sexp_conv[51][2],0,Invalid_signal_mnemonic_or_num,_kU_);
    var
     known=
      [0,
       [0,cst_sigabrt,abrt,497016682,1],
       [0,
        [0,cst_sigalrm,alrm,530911809,1],
        [0,
         [0,cst_sigbus,bus,497016682,2],
         [0,
          [0,cst_sigchld,chld,-950194894,1],
          [0,
           [0,cst_sigcont,cont,192584839,1],
           [0,
            [0,cst_sigfpe,fpe,497016682,1],
            [0,
             [0,cst_sighup,hup,530911809,1],
             [0,
              [0,cst_sigill,ill,497016682,1],
              [0,
               [0,cst_sigint,int$0,530911809,1],
               [0,
                [0,cst_sigkill,kill,530911809,1],
                [0,
                 [0,cst_sigpipe,pipe,530911809,1],
                 [0,
                  [0,cst_sigpoll,poll,530911809,2],
                  [0,
                   [0,cst_sigprof,prof,530911809,1],
                   [0,
                    [0,cst_sigquit,quit,497016682,1],
                    [0,
                     [0,cst_sigsegv,segv,497016682,1],
                     [0,
                      [0,cst_sigstop,stop,926227490,1],
                      [0,
                       [0,cst_sigsys,sys,497016682,2],
                       [0,
                        [0,cst_sigterm,term,530911809,1],
                        [0,
                         [0,cst_sigtrap,trap,497016682,2],
                         [0,
                          [0,cst_sigtstp,tstp,926227490,1],
                          [0,
                           [0,cst_sigttin,ttin,926227490,1],
                           [0,
                            [0,cst_sigttou,ttou,926227490,1],
                            [0,
                             [0,cst_sigurg,urg,-950194894,2],
                             [0,
                              [0,cst_sigusr1,usr1,530911809,1],
                              [0,
                               [0,cst_sigusr2,usr2,530911809,1],
                               [0,
                                [0,cst_sigvtalrm,vtalrm,530911809,1],
                                [0,
                                 [0,cst_sigxcpu,xcpu,497016682,2],
                                 [0,
                                  [0,cst_sigxfsz,xfsz,497016682,2],
                                  [0,[0,cst_sigzero,zero,-950194894,1],0]]]]]]]]]]]]]]]]]]]]]]]]]]]]],
     name_and_version_by_t=caml_call3(Core_kernel_Int[130][4],0,_kX_,0),
     t_by_name=caml_call3(Core_kernel_String[130][4],0,_kY_,0),
     behavior_by_t=caml_call3(Core_kernel_Int[130][4],0,_kZ_,0);
    function _k0_(param)
     {var stable_version=param[4],behavior=param[3],t=param[2],name=param[1];
      caml_call3
       (Core_kernel_Hashtbl[34],
        name_and_version_by_t,
        t,
        [0,name,stable_version]);
      caml_call3(Core_kernel_Hashtbl[34],t_by_name,name,t);
      return caml_call3(Core_kernel_Hashtbl[34],behavior_by_t,t,behavior)}
    caml_call2(Core_kernel_List[9],known,_k0_);
    function to_string_with_version(t,requested_version)
     {var match=caml_call2(Core_kernel_Hashtbl[52],name_and_version_by_t,t);
      if(match)
       {var match$0=match[1],needed_version=match$0[2],string=match$0[1];
        if(caml_call2(symbol$4,requested_version,needed_version))return string}
      return caml_call2
              (_n_,
               cst_unknown_signal,
               caml_call2(_n_,caml_call1(Core_kernel_Int[103],t),cst$6))}
    function of_string(s)
     {var
       _alZ_=caml_call2(Core_kernel_String[63],0,s),
       s$0=caml_call1(Core_kernel_String[30],_alZ_),
       match=caml_call2(Core_kernel_Hashtbl[52],t_by_name,s$0);
      if(match){var sn=match[1];return sn}
      if(caml_call2(Core_kernel_String[51],s$0,cst_unknown_signal$0))
       try
        {var
          _al0_=caml_call3(Core_kernel_String[87],s$0,16,-1),
          _al1_=caml_call1(Core_kernel_Int[102],_al0_);
         return _al1_}
       catch(_al2_){throw [0,Invalid_signal_mnemonic_or_num,s$0]}
      throw [0,Invalid_signal_mnemonic_or_num,s$0]}
    function default_sys_behavior(t)
     {var match=caml_call2(Core_kernel_Hashtbl[52],behavior_by_t,t);
      if(match){var behavior=match[1];return behavior}
      var
       _alY_=
        caml_call2
         (_n_,
          cst_Signal_default_sys_behavio,
          caml_call1(Core_kernel_Int[103],t));
      throw [0,Stdlib[6],_alY_]}
    var Expected_atom=[248,cst_Core_Signal_Expected_atom,caml_fresh_oo_id(0)];
    function _k1_(param)
     {if(param[1] === Expected_atom)
       {var v0=param[2],v0$0=caml_call1(Core_kernel_Sexp[88],v0);
        return [1,[0,_k2_,[0,v0$0,0]]]}
      throw [0,Assert_failure,_k3_]}
    caml_call3(Sexplib0_Sexp_conv[51][2],0,Expected_atom,_k1_);
    function sexp_of_t_with_version(t,version)
     {return [0,to_string_with_version(t,version)]}
    function to_string(s){return to_string_with_version(s,2)}
    function sexp_of_t$0(t){return sexp_of_t_with_version(t,1)}
    function t_of_sexp(s)
     {if(0 === s[0]){var s$0=s[1];return of_string(s$0)}
      throw [0,Expected_atom,s]}
    function sexp_of_pid_spec(param)
     {if(typeof param === "number")return _k4_;
      if(757211935 <= param[1])
       {var v0=param[2];
        return [1,[0,_k5_,[0,caml_call1(Core_kernel_Pid[10],v0),0]]]}
      var v0$0=param[2];
      return [1,[0,_k6_,[0,caml_call1(Core_kernel_Pid[10],v0$0),0]]]}
    function pid_spec_to_int(param)
     {if(typeof param === "number")return 0;
      if(757211935 <= param[1])
       {var pid=param[2];return - caml_call1(Core_kernel_Pid[43],pid) | 0}
      var pid$0=param[2];
      return caml_call1(Core_kernel_Pid[43],pid$0)}
    function send(signal,pid_spec)
     {try
       {var _alV_=pid_spec_to_int(pid_spec);
        caml_call2(UnixLabels[87],_alV_,signal);
        var _alW_=17724;
        return _alW_}
      catch(_alX_)
       {_alX_ = caml_wrap_exception(_alX_);
        if(_alX_[1] === Caml_unix[1])
         {var _alU_=_alX_[2];
          if(typeof _alU_ === "number" && 35 === _alU_)return -658003819}
        throw _alX_}}
    function send_i(t,pid_spec){send(t,pid_spec);return 0}
    function send_exn(t,pid_spec)
     {var match=send(t,pid_spec);
      if(17724 <= match)return 0;
      var
       _alS_=pid_spec_to_int(pid_spec),
       _alT_=caml_call1(Core_kernel_Int[103],_alS_);
      return caml_call4(_cz_,_k7_,to_string(t),_alT_,0)}
    function signal(t,behavior)
     {if(typeof behavior === "number")
       var _alQ_=-384499551 <= behavior?0:1;
      else
       var
        f$0=behavior[2],
        _alQ_=
         [0,
          function(t)
           {function _alR_(param){return caml_call1(f$0,t)}
            return caml_call1(Base_Exn[14],_alR_)}];
      var param=runtime.caml_install_signal_handler(t,_alQ_);
      if(typeof param === "number")return param?-950194894:-384499551;
      var f=param[1];
      return [0,-325978168,f]}
    function set(t,behavior){return 0}
    function handle(t,f){return 0}
    function handle_default(t){return 0}
    function ignore(t){return 0}
    function sigprocmask(mode,sigs)
     {var mode$0=-18967500 === mode?2:4150146 <= mode?0:1;
      return caml_call2(Caml_unix[94],mode$0,sigs)}
    var _k8_=Caml_unix[95],_k9_=Caml_unix[96];
    function can_send_to(pid)
     {try
       {send_exn(zero,[0,4001835,pid]);var _alO_=1;return _alO_}
      catch(_alP_){return 0}}
    var
     _k__=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t),0,bin_shape_t],0],
     _k$_=caml_call1(Bin_prot_Shape[4][1],cst_src_signal_ml_238_4),
     group=caml_call2(Bin_prot_Shape[6],_k$_,_k__),
     _la_=caml_call1(Bin_prot_Shape[2][1],cst_t$0),
     bin_shape_t$0=caml_call1(caml_call2(Bin_prot_Shape[14],group,_la_),0),
     bin_writer_t$0=[0,bin_size_t,bin_write_t],
     bin_reader_t$0=[0,bin_read_t$0,bin_read_t],
     bin_t$0=[0,bin_shape_t$0,bin_writer_t$0,bin_reader_t$0];
    function sexp_of_t$1(t){return sexp_of_t_with_version(t,2)}
    var
     _lb_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$1),0,bin_shape_t],0],
     _lc_=caml_call1(Bin_prot_Shape[4][1],cst_src_signal_ml_243_4),
     group$0=caml_call2(Bin_prot_Shape[6],_lc_,_lb_),
     _ld_=caml_call1(Bin_prot_Shape[2][1],cst_t$2),
     bin_shape_t$1=caml_call1(caml_call2(Bin_prot_Shape[14],group$0,_ld_),0),
     bin_writer_t$1=[0,bin_size_t,bin_write_t],
     bin_reader_t$1=[0,bin_read_t$0,bin_read_t],
     bin_t$1=[0,bin_shape_t$1,bin_writer_t$1,bin_reader_t$1];
    function sexp_of_t$2(t){return sexp_of_t_with_version(t,1)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$13);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Signal$0);
    var
     Core_Signal=
      [0,
       bin_size_t,
       bin_write_t,
       bin_read_t$0,
       bin_read_t,
       bin_shape_t,
       bin_writer_t,
       bin_reader_t,
       bin_t,
       t_of_sexp,
       sexp_of_t$0,
       symbol$4,
       symbol$3,
       symbol$2,
       symbol$1,
       symbol$0,
       symbol,
       min,
       max,
       ascending,
       descending,
       between,
       clamp_exn,
       clamp,
       comparator,
       validate_lbound,
       validate_ubound,
       validate_bound,
       Replace_polymorphic_compare,
       Map,
       Set,
       compare$1,
       hash_fold_t,
       hash,
       hashable,
       Table,
       Hash_set,
       Hash_queue,
       of_string,
       equal,
       of_system_int,
       to_system_int,
       of_caml_int,
       to_caml_int,
       to_string,
       sexp_of_sys_behavior,
       sys_behavior_of_sexp$0,
       sys_behavior_of_sexp,
       default_sys_behavior,
       handle_default,
       ignore,
       sexp_of_pid_spec,
       send,
       send_i,
       send_exn,
       can_send_to,
       sigprocmask,
       _k8_,
       _k9_,
       abrt,
       alrm,
       bus,
       chld,
       cont,
       fpe,
       hup,
       ill,
       int$0,
       kill,
       pipe,
       poll,
       prof,
       quit,
       segv,
       sys,
       stop,
       term,
       trap,
       tstp,
       ttin,
       ttou,
       urg,
       usr1,
       usr2,
       vtalrm,
       xcpu,
       xfsz,
       zero,
       [0,signal,set,handle],
       [0,
        [0,
         bin_size_t,
         bin_write_t,
         bin_read_t$0,
         bin_read_t,
         bin_shape_t$0,
         bin_writer_t$0,
         bin_reader_t$0,
         bin_t$0,
         compare$1,
         t_of_sexp,
         sexp_of_t$1],
        [0,
         bin_size_t,
         bin_write_t,
         bin_read_t$0,
         bin_read_t,
         bin_shape_t$1,
         bin_writer_t$1,
         bin_reader_t$1,
         bin_t$1,
         compare$1,
         t_of_sexp,
         sexp_of_t$2]]];
    caml_register_global(2971,Core_Signal,"Core__Signal");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Syscall_result_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$14);
    caml_call1(Expect_test_collector[4][1],cst_src_syscall_result_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$15,cst$7);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$16);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Syscall_result_intf$0);
    var Core_Syscall_result_intf=[0];
    caml_register_global
     (2972,Core_Syscall_result_intf,"Core__Syscall_result_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Syscall_result);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$17);
    caml_call1(Expect_test_collector[4][1],cst_src_syscall_result_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$18,cst$8);
    function create_error(err)
     {return - runtime.core_code_of_unix_error(err) | 0}
    function is_ok(t){return caml_call2(Core_kernel_Int[74][7],t,0)}
    function is_error(t){return caml_call2(Core_kernel_Int[74][11],t,0)}
    function error_exn(t)
     {var
       _alN_=
        is_ok(t)
         ?caml_call5(_cB_,0,_le_,cst_Syscall_result_error_code_,t,_es_)
         :- t | 0;
      return runtime.core_unix_error_of_code(_alN_)}
    function Make(M,_alE_)
     {function _alF_(i){return [1,runtime.core_unix_error_of_code(i)]}
      var preallocated_errnos=caml_call2(Core_kernel_Array[37],64,_alF_);
      function _alG_(param)
       {return caml_equal(caml_check_bound(preallocated_errnos,0)[1],_lf_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_no_0_errno,
        0,
        cst_src_syscall_result_ml$0,
        33,
        2,
        84,
        _alG_);
      var
       num_preallocated_errnos=
        caml_call1(Core_kernel_Array[18],preallocated_errnos),
       compare=Core_kernel_Int[112],
       equal=Core_kernel_Int[111];
      function loop(i,rev_acc)
       {var i$0=i,rev_acc$0=rev_acc;
        for(;;)
         {if(2048 === i$0)return caml_call1(Core_kernel_Array[84],rev_acc$0);
          try
           {var m=caml_call1(M[4],i$0)}
          catch(_alM_){return caml_call1(Core_kernel_Array[84],rev_acc$0)}
          var
           rev_acc$1=[0,[0,m],rev_acc$0],
           i$1=i$0 + 1 | 0,
           i$0=i$1,
           rev_acc$0=rev_acc$1;
          continue}}
      var
       preallocated_ms=loop(0,0),
       num_preallocated_ms=caml_call1(Core_kernel_Array[18],preallocated_ms);
      function create_ok(x)
       {var t=caml_call1(M[3],x);return 0 <= t?t:caml_call3(_cz_,_lg_,t,0)}
      function to_result(t)
       {if(is_ok(t))
         return t < num_preallocated_ms
                 ?preallocated_ms[1 + t]
                 :[0,caml_call1(M[4],t)];
        var errno=- t | 0;
        return errno < num_preallocated_errnos
                ?preallocated_errnos[1 + errno]
                :[1,runtime.core_unix_error_of_code(errno)]}
      function sexp_of_t(t)
       {var _alL_=to_result(t);
        return caml_call1
                (caml_call2(Core_kernel_Result[10],M[1],sexp_of_error),_alL_)}
      function ok_exn(t)
       {return is_ok(t)
                ?caml_call1(M[4],t)
                :caml_call5
                  (_cB_,0,_lh_,cst_Syscall_result_ok_exn_rece,t,sexp_of_t)}
      function error_code_exn(t)
       {return is_ok(t)
                ?caml_call5
                  (_cB_,0,_li_,cst_Syscall_result_error_code_$0,t,sexp_of_t)
                :- t | 0}
      function error_exn(t)
       {return runtime.core_unix_error_of_code(error_code_exn(t))}
      function reinterpret_error_exn(t)
       {return is_ok(t)
                ?caml_call5
                  (_cB_,0,_lj_,cst_Syscall_result_cast_error_,t,sexp_of_t)
                :t}
      function ok_or_unix_error_exn(t,syscall_name)
       {if(is_ok(t))return caml_call1(M[4],t);
        var _alK_=runtime.core_unix_error_of_code(- t | 0);
        throw [0,UnixLabels[1],_alK_,syscall_name,cst$9]}
      function ok_or_unix_error_with_args_exn(t,syscall_name,x,sexp_of_x)
       {if(is_ok(t))return caml_call1(M[4],t);
        var
         _alH_=caml_call1(sexp_of_x,x),
         _alI_=caml_call1(Core_kernel_Sexp[81],_alH_),
         _alJ_=runtime.core_unix_error_of_code(- t | 0);
        throw [0,UnixLabels[1],_alJ_,syscall_name,_alI_]}
      function is_none(t){return is_error(t)}
      function unchecked_value(t){return caml_call1(M[4],t)}
      var
       Optional_syntax=[0,is_none,unchecked_value],
       Optional_syntax$0=[0,Optional_syntax];
      function of_int(t){return t}
      var
       length_preallocated_errnos=
        caml_call1(Core_kernel_Array[18],preallocated_errnos),
       length_preallocated_ms=
        caml_call1(Core_kernel_Array[18],preallocated_ms),
       Private=[0,of_int,length_preallocated_errnos,length_preallocated_ms];
      return [0,
              preallocated_errnos,
              num_preallocated_errnos,
              compare,
              equal,
              preallocated_ms,
              num_preallocated_ms,
              create_ok,
              create_error,
              is_ok,
              is_error,
              to_result,
              sexp_of_t,
              ok_exn,
              error_code_exn,
              error_exn,
              reinterpret_error_exn,
              ok_or_unix_error_exn,
              ok_or_unix_error_with_args_exn,
              is_none,
              unchecked_value,
              Optional_syntax$0,
              Private]}
    var
     Int=
      Make
       ([0,
         Core_kernel_Int[101],
         Core_kernel_Int[112],
         Core_kernel_Int[77],
         Core_kernel_Int[4]],
        [0]),
     _lk_=[0];
    function of_int_exn(n){if(0 === n)return 0;throw [0,Assert_failure,_ll_]}
    function to_int(param){return 0}
    var
     Unit=Make([0,sexp_of_t,compare,to_int,of_int_exn],_lk_),
     unit=caml_call1(Unit[7],0);
    function ignore_ok_value(t){return caml_call2(Core_kernel_Int[113],t,0)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$19);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Syscall_result$0);
    var
     _lm_=
      [0,
       Unit[3],
       Unit[12],
       Unit[4],
       Unit[7],
       Unit[8],
       Unit[9],
       Unit[10],
       Unit[11],
       Unit[13],
       Unit[15],
       Unit[16],
       Unit[17],
       Unit[18],
       Unit[21],
       Unit[22]],
     _ln_=
      [0,
       Int[3],
       Int[12],
       Int[4],
       Int[7],
       Int[8],
       Int[9],
       Int[10],
       Int[11],
       Int[13],
       Int[15],
       Int[16],
       Int[17],
       Int[18],
       Int[21],
       Int[22]],
     Syscall_result=
      [0,
       function(_alC_,_alB_)
        {var _alD_=Make(_alC_,_alB_);
         return [0,
                 _alD_[3],
                 _alD_[12],
                 _alD_[4],
                 _alD_[7],
                 _alD_[8],
                 _alD_[9],
                 _alD_[10],
                 _alD_[11],
                 _alD_[13],
                 _alD_[15],
                 _alD_[16],
                 _alD_[17],
                 _alD_[18],
                 _alD_[21],
                 _alD_[22]]},
       _ln_,
       _lm_,
       create_error,
       unit,
       is_ok,
       is_error,
       error_exn,
       ignore_ok_value];
    caml_register_global(2975,Syscall_result,"Core__Syscall_result");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Core_unix);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$20);
    caml_call1(Expect_test_collector[4][1],cst_src_core_unix_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$21,cst$10);
    function atom(x){return [0,x]}
    function record(l)
     {function _alA_(param)
       {var value=param[2],name=param[1];return [1,[0,[0,name],[0,value,0]]]}
      return [1,caml_call2(Core_kernel_List[71],l,_alA_)]}
    function retry_until_no_eintr(f)
     {for(;;)
       try
        {var _aly_=caml_call1(f,0);return _aly_}
       catch(_alz_)
        {_alz_ = caml_wrap_exception(_alz_);
         if(_alz_[1] === UnixLabels[1])
          {var _alx_=_alz_[2];
           if(typeof _alx_ === "number" && 11 === _alx_)continue}
         throw _alz_}}
    function improve(opt,f,make_arg_sexps)
     {if(opt)var sth=opt[1],restart=sth;else var restart=0;
      try
       {var _alw_=restart?retry_until_no_eintr(f):caml_call1(f,0);
        return _alw_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] === UnixLabels[1])
         {var
           s=exn[3],
           e=exn[2],
           buf=caml_call1(Base_Buffer[2],100),
           fmt=caml_call1(Stdlib_format[109],buf);
          caml_call2(Stdlib_format[40],fmt,10000);
          var _alv_=record(caml_call1(make_arg_sexps,0));
          caml_call2(Core_kernel_Sexp[69],fmt,_alv_);
          caml_call2(Stdlib_format[36],fmt,0);
          var arg_str=caml_call1(Base_Buffer[3],buf);
          throw [0,UnixLabels[1],e,s,arg_str]}
        throw exn}}
    function of_string$0(string)
     {return caml_call1(Core_kernel_Int[102],string)}
    function to_string$0(t){return caml_call1(Core_kernel_Int[103],t)}
    function hash$0(t){return caml_call1(Core_kernel_Int[128],t)}
    function compare$2(t1,t2){return caml_call2(Core_kernel_Int[112],t1,t2)}
    function sexp_of_t$3(t)
     {var _alu_=_ij_?caml_call2(Core_kernel_Int[108],t,2):_ij_;
      return _alu_?caml_call1(Sexplib0_Sexp_conv[7],cst$11):caml_call1(_es_,t)}
    var
     include$4=
      caml_call1(Core_kernel_Hashable[2],[0,compare$2,sexp_of_t$3,hash$0]),
     compare$3=include$4[1],
     hash_fold_t$0=include$4[2],
     hash$1=include$4[3],
     hashable$0=include$4[4],
     Table$0=include$4[5],
     Hash_set$0=include$4[6],
     Hash_queue$0=include$4[7];
    function equal$0(t1,t2){return caml_call2(_cL_,t1,t2)}
    var sprintf=Core_kernel_Printf[2];
    function readdir_ino_opt(dh)
     {try
       {var entry=runtime.core_unix_readdir_ino_stub(dh)}
      catch(_alt_)
       {_alt_ = caml_wrap_exception(_alt_);
        if(_alt_ === Stdlib[12])return 0;
        throw _alt_}
      return [0,entry]}
    function check_bytes_args(loc,str,pos,len)
     {if(pos < 0)caml_call1(_a_,caml_call2(_n_,loc,cst_pos_0));
      if(len < 0)caml_call1(_a_,caml_call2(_n_,loc,cst_len_0));
      var
       str_len=caml_call1(Core_kernel_Bytes[49],str),
       _als_=str_len < (pos + len | 0)?1:0;
      return _als_
              ?caml_call1(_a_,caml_call2(Core_kernel_Printf[2],_lo_,loc))
              :_als_}
    function get_opt_pos(loc,param)
     {if(param)
       {var pos=param[1];
        if(pos < 0)caml_call1(_a_,caml_call2(Core_kernel_Printf[2],_lp_,loc));
        return pos}
      return 0}
    function get_opt_len(str,pos,param)
     {if(param){var len=param[1];return len}
      return caml_call1(Core_kernel_Bytes[49],str) - pos | 0}
    function read_assume_fd_is_nonblocking(fd,pos,len,buf)
     {var pos$0=get_opt_pos(loc,pos),len$0=get_opt_len(buf,pos$0,len);
      check_bytes_args(loc,buf,pos$0,len$0);
      return runtime.core_unix_read_assume_fd_is_nonblocking_stub
              (fd,buf,pos$0,len$0)}
    function write_assume_fd_is_nonblocking(fd,pos,len,buf)
     {var pos$0=get_opt_pos(loc$0,pos),len$0=get_opt_len(buf,pos$0,len);
      check_bytes_args(loc$0,buf,pos$0,len$0);
      return runtime.core_unix_write_assume_fd_is_nonblocking_stub
              (fd,buf,pos$0,len$0)}
    function mknod(opt,_alr_,_alq_,_alp_,pathname)
     {if(opt)var sth=opt[1],file_kind=sth;else var file_kind=0;
      if(_alr_)var sth$0=_alr_[1],perm=sth$0;else var perm=384;
      if(_alq_)var sth$1=_alq_[1],major=sth$1;else var major=0;
      if(_alp_)var sth$2=_alp_[1],minor=sth$2;else var minor=0;
      return runtime.core_unix_mknod_stub(pathname,file_kind,perm,major,minor)}
    function t_of_sexp$0(sexp)
     {if(0 === sexp[0])
       {var _all_=sexp[1],switch$0=0;
        if(caml_string_notequal(_all_,cst_Infinity))
         {var switch$1=0;
          if(caml_string_notequal(_all_,cst_Limit))
           if(caml_string_notequal(_all_,cst_infinity))
            {if(caml_string_notequal(_all_,cst_limit))
              {switch$0 = 1;switch$1 = 1}}
           else
            switch$1 = 1;
          if(! switch$1)
           return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$2,sexp)}
        if(! switch$0)return 0}
      else
       {var _alm_=sexp[1];
        if(! _alm_)
         return caml_call2(Sexplib0_Sexp_conv_error[7],tp_loc$2,sexp);
        var _aln_=_alm_[1];
        if(0 !== _aln_[0])
         return caml_call2(Sexplib0_Sexp_conv_error[6],tp_loc$2,sexp);
        var _alo_=_aln_[1],switch$2=0;
        if(caml_string_notequal(_alo_,cst_Infinity$0))
         {var switch$3=0;
          if(caml_string_notequal(_alo_,cst_Limit$0))
           if(caml_string_notequal(_alo_,cst_infinity$0))
            {if(caml_string_notequal(_alo_,cst_limit$0))
              {switch$2 = 1;switch$3 = 1}}
           else
            switch$3 = 1;
          if(! switch$3)
           {var sexp_args=_alm_[2];
            if(sexp_args && ! sexp_args[2])
             {var v0=sexp_args[1],v0$0=caml_call1(_e0_,v0);return [0,v0$0]}
            return caml_call3(Sexplib0_Sexp_conv_error[4],tp_loc$2,_alo_,sexp)}}
        if(! switch$2)
         return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$2,sexp)}
      return caml_call2(Sexplib0_Sexp_conv_error[8],tp_loc$2,sexp)}
    function sexp_of_t$4(param)
     {if(param)
       {var v0=param[1],v0$0=caml_call1(_eZ_,v0);
        return [1,[0,_lq_,[0,v0$0,0]]]}
      return _lr_}
    function max$0(t1,match)
     {if(t1 && match)
       {var n2=match[1],n1=t1[1];
        return [0,caml_call2(Core_kernel_Int64[115],n1,n2)]}
      return 0}
    function min$0(t1,t2)
     {if(t1)
       {if(t2)
         {var n2=t2[1],n1=t1[1];
          return [0,caml_call2(Core_kernel_Int64[114],n1,n2)]}
        var t=t1}
      else
       var t=t2;
      return t}
    function limit_of_sexp(sexp)
     {if(0 === sexp[0])
       {var _alh_=sexp[1],switch$0=0;
        if(caml_string_notequal(_alh_,cst_Infinity$1))
         {var switch$1=0;
          if(caml_string_notequal(_alh_,cst_Limit$1))
           if(caml_string_notequal(_alh_,cst_infinity$1))
            {if(caml_string_notequal(_alh_,cst_limit$1))
              {switch$0 = 1;switch$1 = 1}}
           else
            switch$1 = 1;
          if(! switch$1)
           return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$3,sexp)}
        if(! switch$0)return 0}
      else
       {var _ali_=sexp[1];
        if(! _ali_)
         return caml_call2(Sexplib0_Sexp_conv_error[7],tp_loc$3,sexp);
        var _alj_=_ali_[1];
        if(0 !== _alj_[0])
         return caml_call2(Sexplib0_Sexp_conv_error[6],tp_loc$3,sexp);
        var _alk_=_alj_[1],switch$2=0;
        if(caml_string_notequal(_alk_,cst_Infinity$2))
         {var switch$3=0;
          if(caml_string_notequal(_alk_,cst_Limit$2))
           if(caml_string_notequal(_alk_,cst_infinity$2))
            {if(caml_string_notequal(_alk_,cst_limit$2))
              {switch$2 = 1;switch$3 = 1}}
           else
            switch$3 = 1;
          if(! switch$3)
           {var sexp_args=_ali_[2];
            if(sexp_args && ! sexp_args[2])
             {var v0=sexp_args[1],v0$0=caml_call1(_e0_,v0);return [0,v0$0]}
            return caml_call3(Sexplib0_Sexp_conv_error[4],tp_loc$3,_alk_,sexp)}}
        if(! switch$2)
         return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$3,sexp)}
      return caml_call2(Sexplib0_Sexp_conv_error[8],tp_loc$3,sexp)}
    function sexp_of_limit(param)
     {if(param)
       {var v0=param[1],v0$0=caml_call1(_eZ_,v0);
        return [1,[0,_ls_,[0,v0$0,0]]]}
      return _lt_}
    function t_of_sexp$1(sexp)
     {if(0 === sexp[0])
       return caml_call2(Sexplib0_Sexp_conv_error[16],tp_loc$4,sexp);
      var
       field_sexps=sexp[1],
       cur_field=[0,0],
       max_field=[0,0],
       duplicates=[0,0],
       extra=[0,0],
       param=field_sexps;
      for(;;)
       {if(param)
         {var _ak$_=param[1];
          if(1 === _ak$_[0])
           {var _ala_=_ak$_[1];
            if(_ala_)
             {var _alb_=_ala_[1];
              if(0 === _alb_[0])
               {var _alc_=_ala_[2],_ald_=_alb_[1],switch$0=0;
                if(! _alc_ || ! _alc_[2])switch$0 = 1;
                if(switch$0)
                 {var
                   tail=param[2],
                   field_sexp$2=
                    function(_alg_)
                     {function field_sexp(param)
                       {if(_alg_)
                         {if(_alg_[2])throw [0,Assert_failure,_lu_];
                          var x=_alg_[1];
                          return x}
                        return caml_call2
                                (Sexplib0_Sexp_conv_error[10],tp_loc$4,sexp)}
                      return field_sexp},
                   field_sexp=field_sexp$2(_alc_);
                  if(caml_string_notequal(_ald_,cst_cur))
                   if(caml_string_notequal(_ald_,cst_max))
                    {if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_ald_,extra[1]]}
                   else
                    if(max_field[1])
                     duplicates[1] = [0,_ald_,duplicates[1]];
                    else
                     {var
                       field_sexp$0=field_sexp(0),
                       fvalue=limit_of_sexp(field_sexp$0);
                      max_field[1] = [0,fvalue]}
                  else
                   if(cur_field[1])
                    duplicates[1] = [0,_ald_,duplicates[1]];
                   else
                    {var
                      field_sexp$1=field_sexp(0),
                      fvalue$0=limit_of_sexp(field_sexp$1);
                     cur_field[1] = [0,fvalue$0]}
                  var param=tail;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[10],tp_loc$4,_ak$_)}
        if(duplicates[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],tp_loc$4,duplicates[1],sexp);
        if(extra[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[13],tp_loc$4,extra[1],sexp);
        var _ale_=cur_field[1],_alf_=max_field[1];
        if(_ale_ && _alf_)
         {var max_value=_alf_[1],cur_value=_ale_[1];
          return [0,cur_value,max_value]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[15],
                 tp_loc$4,
                 sexp,
                 [0,
                  [0,0 === cur_field[1]?1:0,cst_cur$0],
                  [0,[0,0 === max_field[1]?1:0,cst_max$0],0]])}}
    function sexp_of_t$5(param)
     {var
       v_max=param[2],
       v_cur=param[1],
       arg=sexp_of_limit(v_max),
       bnds=[0,[1,[0,_lv_,[0,arg,0]]],0],
       arg$0=sexp_of_limit(v_cur),
       bnds$0=[0,[1,[0,_lw_,[0,arg$0,0]]],bnds];
      return [1,bnds$0]}
    function sexp_of_resource(param)
     {switch(param)
       {case 0:return _lx_;
        case 1:return _ly_;
        case 2:return _lz_;
        case 3:return _lA_;
        case 4:return _lB_;
        case 5:return _lC_;
        case 6:return _lD_;
        default:return _lE_}}
    var
     nice=caml_call1(Core_kernel_Or_error[45],cst_RLIMIT_NICE_is_not_support),
     core_file_size=0,
     cpu_seconds=1,
     data_segment=2,
     file_size=3,
     num_file_descriptors=4,
     stack=5;
    function resource_of_sexp(sexp)
     {var switch$0=0;
      if(0 === sexp[0])
       {var
         _ak5_=sexp[1],
         _ak6_=caml_string_compare(_ak5_,cst_core_file_size),
         switch$1=0;
        if(0 <= _ak6_)
         {if(0 < _ak6_)
           if(caml_string_notequal(_ak5_,cst_cpu_seconds))
            if(caml_string_notequal(_ak5_,cst_data_segment))
             if(caml_string_notequal(_ak5_,cst_file_size))
              if(caml_string_notequal(_ak5_,cst_nice))
               if(caml_string_notequal(_ak5_,cst_num_file_descriptors))
                if(caml_string_notequal(_ak5_,cst_stack))
                 if(caml_string_notequal(_ak5_,cst_virtual_memory))
                  {switch$0 = 1;switch$1 = 8}
                 else
                  switch$1 = 6;
                else
                 switch$1 = 5;
               else
                switch$1 = 4;
              else
               switch$1 = 7;
             else
              switch$1 = 3;
            else
             switch$1 = 2;
           else
            switch$1 = 1}
        else
         if(caml_string_notequal(_ak5_,cst_Core_file_size))
          if(caml_string_notequal(_ak5_,cst_Cpu_seconds))
           if(caml_string_notequal(_ak5_,cst_Data_segment))
            if(caml_string_notequal(_ak5_,cst_File_size))
             if(caml_string_notequal(_ak5_,cst_Nice))
              if(caml_string_notequal(_ak5_,cst_Num_file_descriptors))
               if(caml_string_notequal(_ak5_,cst_Stack))
                if(caml_string_notequal(_ak5_,cst_Virtual_memory))
                 {switch$0 = 1;switch$1 = 8}
                else
                 switch$1 = 6;
               else
                switch$1 = 5;
              else
               switch$1 = 4;
             else
              switch$1 = 7;
            else
             switch$1 = 3;
           else
            switch$1 = 2;
          else
           switch$1 = 1;
        switch(switch$1)
         {case 8:break;
          case 0:var resource=0;break;
          case 1:var resource=1;break;
          case 2:var resource=2;break;
          case 3:var resource=3;break;
          case 4:var resource=4;break;
          case 5:var resource=5;break;
          case 6:var resource=6;break;
          default:var resource=7}}
      else
       {var _ak7_=sexp[1];
        if(_ak7_)
         {var _ak8_=_ak7_[1];
          if(0 === _ak8_[0])
           {var
             _ak9_=_ak8_[1],
             _ak__=caml_string_compare(_ak9_,cst_core_file_size$0),
             switch$2=0;
            if(0 <= _ak__)
             {if(0 < _ak__)
               if(caml_string_notequal(_ak9_,cst_cpu_seconds$0))
                if(caml_string_notequal(_ak9_,cst_data_segment$0))
                 if(caml_string_notequal(_ak9_,cst_file_size$0))
                  if(caml_string_notequal(_ak9_,cst_nice$0))
                   if(caml_string_notequal(_ak9_,cst_num_file_descriptors$0))
                    if(caml_string_notequal(_ak9_,cst_stack$0))
                     if(caml_string_notequal(_ak9_,cst_virtual_memory$0))
                      {switch$0 = 1;switch$2 = 8}
                     else
                      switch$2 = 6;
                    else
                     switch$2 = 5;
                   else
                    switch$2 = 4;
                  else
                   switch$2 = 7;
                 else
                  switch$2 = 3;
                else
                 switch$2 = 2;
               else
                switch$2 = 1}
            else
             if(caml_string_notequal(_ak9_,cst_Core_file_size$0))
              if(caml_string_notequal(_ak9_,cst_Cpu_seconds$0))
               if(caml_string_notequal(_ak9_,cst_Data_segment$0))
                if(caml_string_notequal(_ak9_,cst_File_size$0))
                 if(caml_string_notequal(_ak9_,cst_Nice$0))
                  if(caml_string_notequal(_ak9_,cst_Num_file_descriptors$0))
                   if(caml_string_notequal(_ak9_,cst_Stack$0))
                    if(caml_string_notequal(_ak9_,cst_Virtual_memory$0))
                     {switch$0 = 1;switch$2 = 8}
                    else
                     switch$2 = 6;
                   else
                    switch$2 = 5;
                  else
                   switch$2 = 4;
                 else
                  switch$2 = 7;
                else
                 switch$2 = 3;
               else
                switch$2 = 2;
              else
               switch$2 = 1;
            switch(switch$2)
             {case 8:break;
              case 0:
               var
                resource=
                 caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$5,sexp);
               break;
              case 1:
               var
                resource=
                 caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$5,sexp);
               break;
              case 2:
               var
                resource=
                 caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$5,sexp);
               break;
              case 3:
               var
                resource=
                 caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$5,sexp);
               break;
              case 4:
               var
                resource=
                 caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$5,sexp);
               break;
              case 5:
               var
                resource=
                 caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$5,sexp);
               break;
              case 6:
               var
                resource=
                 caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$5,sexp);
               break;
              default:
               var
                resource=
                 caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$5,sexp)}}
          else
           var resource=caml_call2(Sexplib0_Sexp_conv_error[6],tp_loc$5,sexp)}
        else
         var resource=caml_call2(Sexplib0_Sexp_conv_error[7],tp_loc$5,sexp)}
      if(switch$0)
       var resource=caml_call2(Sexplib0_Sexp_conv_error[8],tp_loc$5,sexp);
      if(7 <= resource)
       {if(0 === nice[0]){var resource$0=nice[1];return resource$0}
        var error=nice[1];
        return caml_call2(_bk_,caml_call1(Core_kernel_Error[8],error),sexp)}
      return resource}
    function get(resource)
     {function _ak4_(param)
       {return [0,[0,cst_resource,sexp_of_resource(resource)],0]}
      return improve
              (0,
               function(param){return runtime.core_unix_getrlimit(resource)},
               _ak4_)}
    function set$0(resource,t)
     {function _ak2_(param)
       {var _ak3_=[0,[0,cst_limit$3,sexp_of_t$5(t)],0];
        return [0,[0,cst_resource$0,sexp_of_resource(resource)],_ak3_]}
      return improve
              (0,
               function(param){return runtime.core_unix_setrlimit(resource,t)},
               _ak2_)}
    function t_of_sexp$2(sexp)
     {if(0 === sexp[0])
       return caml_call2(Sexplib0_Sexp_conv_error[16],tp_loc$6,sexp);
      var
       field_sexps=sexp[1],
       utime_field=[0,0],
       stime_field=[0,0],
       maxrss_field=[0,0],
       ixrss_field=[0,0],
       idrss_field=[0,0],
       isrss_field=[0,0],
       minflt_field=[0,0],
       majflt_field=[0,0],
       nswap_field=[0,0],
       inblock_field=[0,0],
       oublock_field=[0,0],
       msgsnd_field=[0,0],
       msgrcv_field=[0,0],
       nsignals_field=[0,0],
       nvcsw_field=[0,0],
       nivcsw_field=[0,0],
       duplicates=[0,0],
       extra=[0,0],
       param=field_sexps;
      for(;;)
       {if(param)
         {var _akG_=param[1];
          if(1 === _akG_[0])
           {var _akH_=_akG_[1];
            if(_akH_)
             {var _akI_=_akH_[1];
              if(0 === _akI_[0])
               {var _akJ_=_akH_[2],_akK_=_akI_[1],switch$1=0;
                if(! _akJ_ || ! _akJ_[2])switch$1 = 1;
                if(switch$1)
                 {var
                   tail=param[2],
                   field_sexp$16=
                    function(_ak1_)
                     {function field_sexp(param)
                       {if(_ak1_)
                         {if(_ak1_[2])throw [0,Assert_failure,_lF_];
                          var x=_ak1_[1];
                          return x}
                        return caml_call2
                                (Sexplib0_Sexp_conv_error[10],tp_loc$6,sexp)}
                      return field_sexp},
                   field_sexp=field_sexp$16(_akJ_),
                   switch$0=caml_string_compare(_akK_,cst_msgsnd),
                   switch$2=0;
                  if(0 <= switch$0)
                   if(0 < switch$0)
                    if(caml_string_notequal(_akK_,cst_nivcsw))
                     if(caml_string_notequal(_akK_,cst_nsignals))
                      if(caml_string_notequal(_akK_,cst_nswap))
                       if(caml_string_notequal(_akK_,cst_nvcsw))
                        if(caml_string_notequal(_akK_,cst_oublock))
                         if(caml_string_notequal(_akK_,cst_stime))
                          if(caml_string_notequal(_akK_,cst_utime))
                           switch$2 = 1;
                          else
                           if(utime_field[1])
                            duplicates[1] = [0,_akK_,duplicates[1]];
                           else
                            {var
                              field_sexp$0=field_sexp(0),
                              fvalue=caml_call1(_ec_,field_sexp$0);
                             utime_field[1] = [0,fvalue]}
                         else
                          if(stime_field[1])
                           duplicates[1] = [0,_akK_,duplicates[1]];
                          else
                           {var
                             field_sexp$1=field_sexp(0),
                             fvalue$0=caml_call1(_ec_,field_sexp$1);
                            stime_field[1] = [0,fvalue$0]}
                        else
                         if(oublock_field[1])
                          duplicates[1] = [0,_akK_,duplicates[1]];
                         else
                          {var
                            field_sexp$2=field_sexp(0),
                            fvalue$1=caml_call1(_e0_,field_sexp$2);
                           oublock_field[1] = [0,fvalue$1]}
                       else
                        if(nvcsw_field[1])
                         duplicates[1] = [0,_akK_,duplicates[1]];
                        else
                         {var
                           field_sexp$3=field_sexp(0),
                           fvalue$2=caml_call1(_e0_,field_sexp$3);
                          nvcsw_field[1] = [0,fvalue$2]}
                      else
                       if(nswap_field[1])
                        duplicates[1] = [0,_akK_,duplicates[1]];
                       else
                        {var
                          field_sexp$4=field_sexp(0),
                          fvalue$3=caml_call1(_e0_,field_sexp$4);
                         nswap_field[1] = [0,fvalue$3]}
                     else
                      if(nsignals_field[1])
                       duplicates[1] = [0,_akK_,duplicates[1]];
                      else
                       {var
                         field_sexp$5=field_sexp(0),
                         fvalue$4=caml_call1(_e0_,field_sexp$5);
                        nsignals_field[1] = [0,fvalue$4]}
                    else
                     if(nivcsw_field[1])
                      duplicates[1] = [0,_akK_,duplicates[1]];
                     else
                      {var
                        field_sexp$6=field_sexp(0),
                        fvalue$5=caml_call1(_e0_,field_sexp$6);
                       nivcsw_field[1] = [0,fvalue$5]}
                   else
                    if(msgsnd_field[1])
                     duplicates[1] = [0,_akK_,duplicates[1]];
                    else
                     {var
                       field_sexp$7=field_sexp(0),
                       fvalue$6=caml_call1(_e0_,field_sexp$7);
                      msgsnd_field[1] = [0,fvalue$6]}
                  else
                   if(caml_string_notequal(_akK_,cst_idrss))
                    if(caml_string_notequal(_akK_,cst_inblock))
                     if(caml_string_notequal(_akK_,cst_isrss))
                      if(caml_string_notequal(_akK_,cst_ixrss))
                       if(caml_string_notequal(_akK_,cst_majflt))
                        if(caml_string_notequal(_akK_,cst_maxrss))
                         if(caml_string_notequal(_akK_,cst_minflt))
                          if(caml_string_notequal(_akK_,cst_msgrcv))
                           switch$2 = 1;
                          else
                           if(msgrcv_field[1])
                            duplicates[1] = [0,_akK_,duplicates[1]];
                           else
                            {var
                              field_sexp$8=field_sexp(0),
                              fvalue$7=caml_call1(_e0_,field_sexp$8);
                             msgrcv_field[1] = [0,fvalue$7]}
                         else
                          if(minflt_field[1])
                           duplicates[1] = [0,_akK_,duplicates[1]];
                          else
                           {var
                             field_sexp$9=field_sexp(0),
                             fvalue$8=caml_call1(_e0_,field_sexp$9);
                            minflt_field[1] = [0,fvalue$8]}
                        else
                         if(maxrss_field[1])
                          duplicates[1] = [0,_akK_,duplicates[1]];
                         else
                          {var
                            field_sexp$10=field_sexp(0),
                            fvalue$9=caml_call1(_e0_,field_sexp$10);
                           maxrss_field[1] = [0,fvalue$9]}
                       else
                        if(majflt_field[1])
                         duplicates[1] = [0,_akK_,duplicates[1]];
                        else
                         {var
                           field_sexp$11=field_sexp(0),
                           fvalue$10=caml_call1(_e0_,field_sexp$11);
                          majflt_field[1] = [0,fvalue$10]}
                      else
                       if(ixrss_field[1])
                        duplicates[1] = [0,_akK_,duplicates[1]];
                       else
                        {var
                          field_sexp$12=field_sexp(0),
                          fvalue$11=caml_call1(_e0_,field_sexp$12);
                         ixrss_field[1] = [0,fvalue$11]}
                     else
                      if(isrss_field[1])
                       duplicates[1] = [0,_akK_,duplicates[1]];
                      else
                       {var
                         field_sexp$13=field_sexp(0),
                         fvalue$12=caml_call1(_e0_,field_sexp$13);
                        isrss_field[1] = [0,fvalue$12]}
                    else
                     if(inblock_field[1])
                      duplicates[1] = [0,_akK_,duplicates[1]];
                     else
                      {var
                        field_sexp$14=field_sexp(0),
                        fvalue$13=caml_call1(_e0_,field_sexp$14);
                       inblock_field[1] = [0,fvalue$13]}
                   else
                    if(idrss_field[1])
                     duplicates[1] = [0,_akK_,duplicates[1]];
                    else
                     {var
                       field_sexp$15=field_sexp(0),
                       fvalue$14=caml_call1(_e0_,field_sexp$15);
                      idrss_field[1] = [0,fvalue$14]}
                  if(switch$2 && Sexplib0_Sexp_conv[26][1])
                   extra[1] = [0,_akK_,extra[1]];
                  var param=tail;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[10],tp_loc$6,_akG_)}
        if(duplicates[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],tp_loc$6,duplicates[1],sexp);
        if(extra[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[13],tp_loc$6,extra[1],sexp);
        var
         _akL_=utime_field[1],
         _akM_=stime_field[1],
         _akN_=maxrss_field[1],
         _akO_=ixrss_field[1],
         _akP_=idrss_field[1],
         _akQ_=isrss_field[1],
         _akR_=minflt_field[1],
         _akS_=majflt_field[1],
         _akT_=nswap_field[1],
         _akU_=inblock_field[1],
         _akV_=oublock_field[1],
         _akW_=msgsnd_field[1],
         _akX_=msgrcv_field[1],
         _akY_=nsignals_field[1],
         _akZ_=nvcsw_field[1],
         _ak0_=nivcsw_field[1];
        if
         (_akL_
          &&
          _akM_
          &&
          _akN_
          &&
          _akO_
          &&
          _akP_
          &&
          _akQ_
          &&
          _akR_
          &&
          _akS_
          &&
          _akT_
          &&
          _akU_
          &&
          _akV_
          &&
          _akW_
          &&
          _akX_
          &&
          _akY_
          &&
          _akZ_
          &&
          _ak0_)
         {var
           nivcsw_value=_ak0_[1],
           nvcsw_value=_akZ_[1],
           nsignals_value=_akY_[1],
           msgrcv_value=_akX_[1],
           msgsnd_value=_akW_[1],
           oublock_value=_akV_[1],
           inblock_value=_akU_[1],
           nswap_value=_akT_[1],
           majflt_value=_akS_[1],
           minflt_value=_akR_[1],
           isrss_value=_akQ_[1],
           idrss_value=_akP_[1],
           ixrss_value=_akO_[1],
           maxrss_value=_akN_[1],
           stime_value=_akM_[1],
           utime_value=_akL_[1];
          return [0,
                  utime_value,
                  stime_value,
                  maxrss_value,
                  ixrss_value,
                  idrss_value,
                  isrss_value,
                  minflt_value,
                  majflt_value,
                  nswap_value,
                  inblock_value,
                  oublock_value,
                  msgsnd_value,
                  msgrcv_value,
                  nsignals_value,
                  nvcsw_value,
                  nivcsw_value]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[15],
                 tp_loc$6,
                 sexp,
                 [0,
                  [0,0 === utime_field[1]?1:0,cst_utime$0],
                  [0,
                   [0,0 === stime_field[1]?1:0,cst_stime$0],
                   [0,
                    [0,0 === maxrss_field[1]?1:0,cst_maxrss$0],
                    [0,
                     [0,0 === ixrss_field[1]?1:0,cst_ixrss$0],
                     [0,
                      [0,0 === idrss_field[1]?1:0,cst_idrss$0],
                      [0,
                       [0,0 === isrss_field[1]?1:0,cst_isrss$0],
                       [0,
                        [0,0 === minflt_field[1]?1:0,cst_minflt$0],
                        [0,
                         [0,0 === majflt_field[1]?1:0,cst_majflt$0],
                         [0,
                          [0,0 === nswap_field[1]?1:0,cst_nswap$0],
                          [0,
                           [0,0 === inblock_field[1]?1:0,cst_inblock$0],
                           [0,
                            [0,0 === oublock_field[1]?1:0,cst_oublock$0],
                            [0,
                             [0,0 === msgsnd_field[1]?1:0,cst_msgsnd$0],
                             [0,
                              [0,0 === msgrcv_field[1]?1:0,cst_msgrcv$0],
                              [0,
                               [0,0 === nsignals_field[1]?1:0,cst_nsignals$0],
                               [0,
                                [0,0 === nvcsw_field[1]?1:0,cst_nvcsw$0],
                                [0,[0,0 === nivcsw_field[1]?1:0,cst_nivcsw$0],0]]]]]]]]]]]]]]]])}}
    function sexp_of_t$6(param)
     {var
       v_nivcsw=param[16],
       v_nvcsw=param[15],
       v_nsignals=param[14],
       v_msgrcv=param[13],
       v_msgsnd=param[12],
       v_oublock=param[11],
       v_inblock=param[10],
       v_nswap=param[9],
       v_majflt=param[8],
       v_minflt=param[7],
       v_isrss=param[6],
       v_idrss=param[5],
       v_ixrss=param[4],
       v_maxrss=param[3],
       v_stime=param[2],
       v_utime=param[1],
       arg=caml_call1(_eZ_,v_nivcsw),
       bnds=[0,[1,[0,_lG_,[0,arg,0]]],0],
       arg$0=caml_call1(_eZ_,v_nvcsw),
       bnds$0=[0,[1,[0,_lH_,[0,arg$0,0]]],bnds],
       arg$1=caml_call1(_eZ_,v_nsignals),
       bnds$1=[0,[1,[0,_lI_,[0,arg$1,0]]],bnds$0],
       arg$2=caml_call1(_eZ_,v_msgrcv),
       bnds$2=[0,[1,[0,_lJ_,[0,arg$2,0]]],bnds$1],
       arg$3=caml_call1(_eZ_,v_msgsnd),
       bnds$3=[0,[1,[0,_lK_,[0,arg$3,0]]],bnds$2],
       arg$4=caml_call1(_eZ_,v_oublock),
       bnds$4=[0,[1,[0,_lL_,[0,arg$4,0]]],bnds$3],
       arg$5=caml_call1(_eZ_,v_inblock),
       bnds$5=[0,[1,[0,_lM_,[0,arg$5,0]]],bnds$4],
       arg$6=caml_call1(_eZ_,v_nswap),
       bnds$6=[0,[1,[0,_lN_,[0,arg$6,0]]],bnds$5],
       arg$7=caml_call1(_eZ_,v_majflt),
       bnds$7=[0,[1,[0,_lO_,[0,arg$7,0]]],bnds$6],
       arg$8=caml_call1(_eZ_,v_minflt),
       bnds$8=[0,[1,[0,_lP_,[0,arg$8,0]]],bnds$7],
       arg$9=caml_call1(_eZ_,v_isrss),
       bnds$9=[0,[1,[0,_lQ_,[0,arg$9,0]]],bnds$8],
       arg$10=caml_call1(_eZ_,v_idrss),
       bnds$10=[0,[1,[0,_lR_,[0,arg$10,0]]],bnds$9],
       arg$11=caml_call1(_eZ_,v_ixrss),
       bnds$11=[0,[1,[0,_lS_,[0,arg$11,0]]],bnds$10],
       arg$12=caml_call1(_eZ_,v_maxrss),
       bnds$12=[0,[1,[0,_lT_,[0,arg$12,0]]],bnds$11],
       arg$13=caml_call1(_eb_,v_stime),
       bnds$13=[0,[1,[0,_lU_,[0,arg$13,0]]],bnds$12],
       arg$14=caml_call1(_eb_,v_utime),
       bnds$14=[0,[1,[0,_lV_,[0,arg$14,0]]],bnds$13];
      return [1,bnds$14]}
    function nivcsw(r){return r[16]}
    function nvcsw(r){return r[15]}
    function nsignals(r){return r[14]}
    function msgrcv(r){return r[13]}
    function msgsnd(r){return r[12]}
    function oublock(r){return r[11]}
    function inblock(r){return r[10]}
    function nswap(r){return r[9]}
    function majflt(r){return r[8]}
    function minflt(r){return r[7]}
    function isrss(r){return r[6]}
    function idrss(r){return r[5]}
    function ixrss(r){return r[4]}
    function maxrss(r){return r[3]}
    function stime(r){return r[2]}
    function utime(r){return r[1]}
    function _lW_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              v]}
    var
     _lX_=0,
     nivcsw$0=[0,function(param){return 0},cst_nivcsw$1,_lX_,nivcsw,_lW_];
    function _lY_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              v,
              r[16]]}
    var
     _lZ_=0,
     nvcsw$0=[0,function(param){return 0},cst_nvcsw$1,_lZ_,nvcsw,_lY_];
    function _l0_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              v,
              r[15],
              r[16]]}
    var
     _l1_=0,
     nsignals$0=
      [0,function(param){return 0},cst_nsignals$1,_l1_,nsignals,_l0_];
    function _l2_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              v,
              r[14],
              r[15],
              r[16]]}
    var
     _l3_=0,
     msgrcv$0=[0,function(param){return 0},cst_msgrcv$1,_l3_,msgrcv,_l2_];
    function _l4_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              v,
              r[13],
              r[14],
              r[15],
              r[16]]}
    var
     _l5_=0,
     msgsnd$0=[0,function(param){return 0},cst_msgsnd$1,_l5_,msgsnd,_l4_];
    function _l6_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              v,
              r[12],
              r[13],
              r[14],
              r[15],
              r[16]]}
    var
     _l7_=0,
     oublock$0=[0,function(param){return 0},cst_oublock$1,_l7_,oublock,_l6_];
    function _l8_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              v,
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16]]}
    var
     _l9_=0,
     inblock$0=[0,function(param){return 0},cst_inblock$1,_l9_,inblock,_l8_];
    function _l__(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              v,
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16]]}
    var
     _l$_=0,
     nswap$0=[0,function(param){return 0},cst_nswap$1,_l$_,nswap,_l__];
    function _ma_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              v,
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16]]}
    var
     _mb_=0,
     majflt$0=[0,function(param){return 0},cst_majflt$1,_mb_,majflt,_ma_];
    function _mc_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              v,
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16]]}
    var
     _md_=0,
     minflt$0=[0,function(param){return 0},cst_minflt$1,_md_,minflt,_mc_];
    function _me_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              v,
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16]]}
    var
     _mf_=0,
     isrss$0=[0,function(param){return 0},cst_isrss$1,_mf_,isrss,_me_];
    function _mg_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              v,
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16]]}
    var
     _mh_=0,
     idrss$0=[0,function(param){return 0},cst_idrss$1,_mh_,idrss,_mg_];
    function _mi_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              v,
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16]]}
    var
     _mj_=0,
     ixrss$0=[0,function(param){return 0},cst_ixrss$1,_mj_,ixrss,_mi_];
    function _mk_(r,v)
     {return [0,
              r[1],
              r[2],
              v,
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16]]}
    var
     _ml_=0,
     maxrss$0=[0,function(param){return 0},cst_maxrss$1,_ml_,maxrss,_mk_];
    function _mm_(r,v)
     {return [0,
              r[1],
              v,
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16]]}
    var
     _mn_=0,
     stime$0=[0,function(param){return 0},cst_stime$1,_mn_,stime,_mm_];
    function _mo_(r,v)
     {return [0,
              v,
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16]]}
    var
     _mp_=0,
     utime$0=[0,function(param){return 0},cst_utime$1,_mp_,utime,_mo_];
    function make_creator
     (utime_fun,
      stime_fun,
      maxrss_fun,
      ixrss_fun,
      idrss_fun,
      isrss_fun,
      minflt_fun,
      majflt_fun,
      nswap_fun,
      inblock_fun,
      oublock_fun,
      msgsnd_fun,
      msgrcv_fun,
      nsignals_fun,
      nvcsw_fun,
      nivcsw_fun,
      compile_acc)
     {var
       match=caml_call2(utime_fun,utime$0,compile_acc),
       compile_acc$0=match[2],
       utime_gen=match[1],
       match$0=caml_call2(stime_fun,stime$0,compile_acc$0),
       compile_acc$1=match$0[2],
       stime_gen=match$0[1],
       match$1=caml_call2(maxrss_fun,maxrss$0,compile_acc$1),
       compile_acc$2=match$1[2],
       maxrss_gen=match$1[1],
       match$2=caml_call2(ixrss_fun,ixrss$0,compile_acc$2),
       compile_acc$3=match$2[2],
       ixrss_gen=match$2[1],
       match$3=caml_call2(idrss_fun,idrss$0,compile_acc$3),
       compile_acc$4=match$3[2],
       idrss_gen=match$3[1],
       match$4=caml_call2(isrss_fun,isrss$0,compile_acc$4),
       compile_acc$5=match$4[2],
       isrss_gen=match$4[1],
       match$5=caml_call2(minflt_fun,minflt$0,compile_acc$5),
       compile_acc$6=match$5[2],
       minflt_gen=match$5[1],
       match$6=caml_call2(majflt_fun,majflt$0,compile_acc$6),
       compile_acc$7=match$6[2],
       majflt_gen=match$6[1],
       match$7=caml_call2(nswap_fun,nswap$0,compile_acc$7),
       compile_acc$8=match$7[2],
       nswap_gen=match$7[1],
       match$8=caml_call2(inblock_fun,inblock$0,compile_acc$8),
       compile_acc$9=match$8[2],
       inblock_gen=match$8[1],
       match$9=caml_call2(oublock_fun,oublock$0,compile_acc$9),
       compile_acc$10=match$9[2],
       oublock_gen=match$9[1],
       match$10=caml_call2(msgsnd_fun,msgsnd$0,compile_acc$10),
       compile_acc$11=match$10[2],
       msgsnd_gen=match$10[1],
       match$11=caml_call2(msgrcv_fun,msgrcv$0,compile_acc$11),
       compile_acc$12=match$11[2],
       msgrcv_gen=match$11[1],
       match$12=caml_call2(nsignals_fun,nsignals$0,compile_acc$12),
       compile_acc$13=match$12[2],
       nsignals_gen=match$12[1],
       match$13=caml_call2(nvcsw_fun,nvcsw$0,compile_acc$13),
       compile_acc$14=match$13[2],
       nvcsw_gen=match$13[1],
       match$14=caml_call2(nivcsw_fun,nivcsw$0,compile_acc$14),
       compile_acc$15=match$14[2],
       nivcsw_gen=match$14[1];
      return [0,
              function(acc)
               {var
                 utime=caml_call1(utime_gen,acc),
                 stime=caml_call1(stime_gen,acc),
                 maxrss=caml_call1(maxrss_gen,acc),
                 ixrss=caml_call1(ixrss_gen,acc),
                 idrss=caml_call1(idrss_gen,acc),
                 isrss=caml_call1(isrss_gen,acc),
                 minflt=caml_call1(minflt_gen,acc),
                 majflt=caml_call1(majflt_gen,acc),
                 nswap=caml_call1(nswap_gen,acc),
                 inblock=caml_call1(inblock_gen,acc),
                 oublock=caml_call1(oublock_gen,acc),
                 msgsnd=caml_call1(msgsnd_gen,acc),
                 msgrcv=caml_call1(msgrcv_gen,acc),
                 nsignals=caml_call1(nsignals_gen,acc),
                 nvcsw=caml_call1(nvcsw_gen,acc),
                 nivcsw=caml_call1(nivcsw_gen,acc);
                return [0,
                        utime,
                        stime,
                        maxrss,
                        ixrss,
                        idrss,
                        isrss,
                        minflt,
                        majflt,
                        nswap,
                        inblock,
                        oublock,
                        msgsnd,
                        msgrcv,
                        nsignals,
                        nvcsw,
                        nivcsw]},
              compile_acc$15]}
    function create
     (utime,
      stime,
      maxrss,
      ixrss,
      idrss,
      isrss,
      minflt,
      majflt,
      nswap,
      inblock,
      oublock,
      msgsnd,
      msgrcv,
      nsignals,
      nvcsw,
      nivcsw)
     {return [0,
              utime,
              stime,
              maxrss,
              ixrss,
              idrss,
              isrss,
              minflt,
              majflt,
              nswap,
              inblock,
              oublock,
              msgsnd,
              msgrcv,
              nsignals,
              nvcsw,
              nivcsw]}
    function map
     (utime_fun,
      stime_fun,
      maxrss_fun,
      ixrss_fun,
      idrss_fun,
      isrss_fun,
      minflt_fun,
      majflt_fun,
      nswap_fun,
      inblock_fun,
      oublock_fun,
      msgsnd_fun,
      msgrcv_fun,
      nsignals_fun,
      nvcsw_fun,
      nivcsw_fun)
     {var
       _akr_=caml_call1(nivcsw_fun,nivcsw$0),
       _aks_=caml_call1(nvcsw_fun,nvcsw$0),
       _akt_=caml_call1(nsignals_fun,nsignals$0),
       _aku_=caml_call1(msgrcv_fun,msgrcv$0),
       _akv_=caml_call1(msgsnd_fun,msgsnd$0),
       _akw_=caml_call1(oublock_fun,oublock$0),
       _akx_=caml_call1(inblock_fun,inblock$0),
       _aky_=caml_call1(nswap_fun,nswap$0),
       _akz_=caml_call1(majflt_fun,majflt$0),
       _akA_=caml_call1(minflt_fun,minflt$0),
       _akB_=caml_call1(isrss_fun,isrss$0),
       _akC_=caml_call1(idrss_fun,idrss$0),
       _akD_=caml_call1(ixrss_fun,ixrss$0),
       _akE_=caml_call1(maxrss_fun,maxrss$0),
       _akF_=caml_call1(stime_fun,stime$0);
      return [0,
              caml_call1(utime_fun,utime$0),
              _akF_,
              _akE_,
              _akD_,
              _akC_,
              _akB_,
              _akA_,
              _akz_,
              _aky_,
              _akx_,
              _akw_,
              _akv_,
              _aku_,
              _akt_,
              _aks_,
              _akr_]}
    function iter
     (utime_fun,
      stime_fun,
      maxrss_fun,
      ixrss_fun,
      idrss_fun,
      isrss_fun,
      minflt_fun,
      majflt_fun,
      nswap_fun,
      inblock_fun,
      oublock_fun,
      msgsnd_fun,
      msgrcv_fun,
      nsignals_fun,
      nvcsw_fun,
      nivcsw_fun)
     {caml_call1(utime_fun,utime$0);
      caml_call1(stime_fun,stime$0);
      caml_call1(maxrss_fun,maxrss$0);
      caml_call1(ixrss_fun,ixrss$0);
      caml_call1(idrss_fun,idrss$0);
      caml_call1(isrss_fun,isrss$0);
      caml_call1(minflt_fun,minflt$0);
      caml_call1(majflt_fun,majflt$0);
      caml_call1(nswap_fun,nswap$0);
      caml_call1(inblock_fun,inblock$0);
      caml_call1(oublock_fun,oublock$0);
      caml_call1(msgsnd_fun,msgsnd$0);
      caml_call1(msgrcv_fun,msgrcv$0);
      caml_call1(nsignals_fun,nsignals$0);
      caml_call1(nvcsw_fun,nvcsw$0);
      return caml_call1(nivcsw_fun,nivcsw$0)}
    function fold
     (init,
      utime_fun,
      stime_fun,
      maxrss_fun,
      ixrss_fun,
      idrss_fun,
      isrss_fun,
      minflt_fun,
      majflt_fun,
      nswap_fun,
      inblock_fun,
      oublock_fun,
      msgsnd_fun,
      msgrcv_fun,
      nsignals_fun,
      nvcsw_fun,
      nivcsw_fun)
     {return caml_call2
              (nivcsw_fun,
               caml_call2
                (nvcsw_fun,
                 caml_call2
                  (nsignals_fun,
                   caml_call2
                    (msgrcv_fun,
                     caml_call2
                      (msgsnd_fun,
                       caml_call2
                        (oublock_fun,
                         caml_call2
                          (inblock_fun,
                           caml_call2
                            (nswap_fun,
                             caml_call2
                              (majflt_fun,
                               caml_call2
                                (minflt_fun,
                                 caml_call2
                                  (isrss_fun,
                                   caml_call2
                                    (idrss_fun,
                                     caml_call2
                                      (ixrss_fun,
                                       caml_call2
                                        (maxrss_fun,
                                         caml_call2
                                          (stime_fun,caml_call2(utime_fun,init,utime$0),stime$0),
                                         maxrss$0),
                                       ixrss$0),
                                     idrss$0),
                                   isrss$0),
                                 minflt$0),
                               majflt$0),
                             nswap$0),
                           inblock$0),
                         oublock$0),
                       msgsnd$0),
                     msgrcv$0),
                   nsignals$0),
                 nvcsw$0),
               nivcsw$0)}
    function map_poly(record)
     {var
       _akc_=[0,caml_call1(record[1],nivcsw$0),0],
       _akd_=[0,caml_call1(record[1],nvcsw$0),_akc_],
       _ake_=[0,caml_call1(record[1],nsignals$0),_akd_],
       _akf_=[0,caml_call1(record[1],msgrcv$0),_ake_],
       _akg_=[0,caml_call1(record[1],msgsnd$0),_akf_],
       _akh_=[0,caml_call1(record[1],oublock$0),_akg_],
       _aki_=[0,caml_call1(record[1],inblock$0),_akh_],
       _akj_=[0,caml_call1(record[1],nswap$0),_aki_],
       _akk_=[0,caml_call1(record[1],majflt$0),_akj_],
       _akl_=[0,caml_call1(record[1],minflt$0),_akk_],
       _akm_=[0,caml_call1(record[1],isrss$0),_akl_],
       _akn_=[0,caml_call1(record[1],idrss$0),_akm_],
       _ako_=[0,caml_call1(record[1],ixrss$0),_akn_],
       _akp_=[0,caml_call1(record[1],maxrss$0),_ako_],
       _akq_=[0,caml_call1(record[1],stime$0),_akp_];
      return [0,caml_call1(record[1],utime$0),_akq_]}
    function for_all
     (utime_fun,
      stime_fun,
      maxrss_fun,
      ixrss_fun,
      idrss_fun,
      isrss_fun,
      minflt_fun,
      majflt_fun,
      nswap_fun,
      inblock_fun,
      oublock_fun,
      msgsnd_fun,
      msgrcv_fun,
      nsignals_fun,
      nvcsw_fun,
      nivcsw_fun)
     {var
       _ajZ_=caml_call1(utime_fun,utime$0),
       _aj0_=_ajZ_?caml_call1(stime_fun,stime$0):_ajZ_,
       _aj1_=_aj0_?caml_call1(maxrss_fun,maxrss$0):_aj0_,
       _aj2_=_aj1_?caml_call1(ixrss_fun,ixrss$0):_aj1_,
       _aj3_=_aj2_?caml_call1(idrss_fun,idrss$0):_aj2_,
       _aj4_=_aj3_?caml_call1(isrss_fun,isrss$0):_aj3_,
       _aj5_=_aj4_?caml_call1(minflt_fun,minflt$0):_aj4_,
       _aj6_=_aj5_?caml_call1(majflt_fun,majflt$0):_aj5_,
       _aj7_=_aj6_?caml_call1(nswap_fun,nswap$0):_aj6_,
       _aj8_=_aj7_?caml_call1(inblock_fun,inblock$0):_aj7_,
       _aj9_=_aj8_?caml_call1(oublock_fun,oublock$0):_aj8_,
       _aj__=_aj9_?caml_call1(msgsnd_fun,msgsnd$0):_aj9_,
       _aj$_=_aj__?caml_call1(msgrcv_fun,msgrcv$0):_aj__,
       _aka_=_aj$_?caml_call1(nsignals_fun,nsignals$0):_aj$_,
       _akb_=_aka_?caml_call1(nvcsw_fun,nvcsw$0):_aka_;
      return _akb_?caml_call1(nivcsw_fun,nivcsw$0):_akb_}
    function exists
     (utime_fun,
      stime_fun,
      maxrss_fun,
      ixrss_fun,
      idrss_fun,
      isrss_fun,
      minflt_fun,
      majflt_fun,
      nswap_fun,
      inblock_fun,
      oublock_fun,
      msgsnd_fun,
      msgrcv_fun,
      nsignals_fun,
      nvcsw_fun,
      nivcsw_fun)
     {var
       _ajY_=caml_call1(utime_fun,utime$0),
       _ajK_=_ajY_ || caml_call1(stime_fun,stime$0),
       _ajL_=_ajK_ || caml_call1(maxrss_fun,maxrss$0),
       _ajM_=_ajL_ || caml_call1(ixrss_fun,ixrss$0),
       _ajN_=_ajM_ || caml_call1(idrss_fun,idrss$0),
       _ajO_=_ajN_ || caml_call1(isrss_fun,isrss$0),
       _ajP_=_ajO_ || caml_call1(minflt_fun,minflt$0),
       _ajQ_=_ajP_ || caml_call1(majflt_fun,majflt$0),
       _ajR_=_ajQ_ || caml_call1(nswap_fun,nswap$0),
       _ajS_=_ajR_ || caml_call1(inblock_fun,inblock$0),
       _ajT_=_ajS_ || caml_call1(oublock_fun,oublock$0),
       _ajU_=_ajT_ || caml_call1(msgsnd_fun,msgsnd$0),
       _ajV_=_ajU_ || caml_call1(msgrcv_fun,msgrcv$0),
       _ajW_=_ajV_ || caml_call1(nsignals_fun,nsignals$0),
       _ajX_=_ajW_ || caml_call1(nvcsw_fun,nvcsw$0);
      return _ajX_?_ajX_:caml_call1(nivcsw_fun,nivcsw$0)}
    function to_list
     (utime_fun,
      stime_fun,
      maxrss_fun,
      ixrss_fun,
      idrss_fun,
      isrss_fun,
      minflt_fun,
      majflt_fun,
      nswap_fun,
      inblock_fun,
      oublock_fun,
      msgsnd_fun,
      msgrcv_fun,
      nsignals_fun,
      nvcsw_fun,
      nivcsw_fun)
     {var
       _ajv_=[0,caml_call1(nivcsw_fun,nivcsw$0),0],
       _ajw_=[0,caml_call1(nvcsw_fun,nvcsw$0),_ajv_],
       _ajx_=[0,caml_call1(nsignals_fun,nsignals$0),_ajw_],
       _ajy_=[0,caml_call1(msgrcv_fun,msgrcv$0),_ajx_],
       _ajz_=[0,caml_call1(msgsnd_fun,msgsnd$0),_ajy_],
       _ajA_=[0,caml_call1(oublock_fun,oublock$0),_ajz_],
       _ajB_=[0,caml_call1(inblock_fun,inblock$0),_ajA_],
       _ajC_=[0,caml_call1(nswap_fun,nswap$0),_ajB_],
       _ajD_=[0,caml_call1(majflt_fun,majflt$0),_ajC_],
       _ajE_=[0,caml_call1(minflt_fun,minflt$0),_ajD_],
       _ajF_=[0,caml_call1(isrss_fun,isrss$0),_ajE_],
       _ajG_=[0,caml_call1(idrss_fun,idrss$0),_ajF_],
       _ajH_=[0,caml_call1(ixrss_fun,ixrss$0),_ajG_],
       _ajI_=[0,caml_call1(maxrss_fun,maxrss$0),_ajH_],
       _ajJ_=[0,caml_call1(stime_fun,stime$0),_ajI_];
      return [0,caml_call1(utime_fun,utime$0),_ajJ_]}
    function iter$0
     (record,
      utime_fun,
      stime_fun,
      maxrss_fun,
      ixrss_fun,
      idrss_fun,
      isrss_fun,
      minflt_fun,
      majflt_fun,
      nswap_fun,
      inblock_fun,
      oublock_fun,
      msgsnd_fun,
      msgrcv_fun,
      nsignals_fun,
      nvcsw_fun,
      nivcsw_fun)
     {caml_call3(utime_fun,utime$0,record,record[1]);
      caml_call3(stime_fun,stime$0,record,record[2]);
      caml_call3(maxrss_fun,maxrss$0,record,record[3]);
      caml_call3(ixrss_fun,ixrss$0,record,record[4]);
      caml_call3(idrss_fun,idrss$0,record,record[5]);
      caml_call3(isrss_fun,isrss$0,record,record[6]);
      caml_call3(minflt_fun,minflt$0,record,record[7]);
      caml_call3(majflt_fun,majflt$0,record,record[8]);
      caml_call3(nswap_fun,nswap$0,record,record[9]);
      caml_call3(inblock_fun,inblock$0,record,record[10]);
      caml_call3(oublock_fun,oublock$0,record,record[11]);
      caml_call3(msgsnd_fun,msgsnd$0,record,record[12]);
      caml_call3(msgrcv_fun,msgrcv$0,record,record[13]);
      caml_call3(nsignals_fun,nsignals$0,record,record[14]);
      caml_call3(nvcsw_fun,nvcsw$0,record,record[15]);
      return caml_call3(nivcsw_fun,nivcsw$0,record,record[16])}
    function fold$0
     (record,
      init,
      utime_fun,
      stime_fun,
      maxrss_fun,
      ixrss_fun,
      idrss_fun,
      isrss_fun,
      minflt_fun,
      majflt_fun,
      nswap_fun,
      inblock_fun,
      oublock_fun,
      msgsnd_fun,
      msgrcv_fun,
      nsignals_fun,
      nvcsw_fun,
      nivcsw_fun)
     {var
       _ajg_=record[16],
       _ajh_=record[15],
       _aji_=record[14],
       _ajj_=record[13],
       _ajk_=record[12],
       _ajl_=record[11],
       _ajm_=record[10],
       _ajn_=record[9],
       _ajo_=record[8],
       _ajp_=record[7],
       _ajq_=record[6],
       _ajr_=record[5],
       _ajs_=record[4],
       _ajt_=record[3],
       _aju_=record[2];
      return caml_call4
              (nivcsw_fun,
               caml_call4
                (nvcsw_fun,
                 caml_call4
                  (nsignals_fun,
                   caml_call4
                    (msgrcv_fun,
                     caml_call4
                      (msgsnd_fun,
                       caml_call4
                        (oublock_fun,
                         caml_call4
                          (inblock_fun,
                           caml_call4
                            (nswap_fun,
                             caml_call4
                              (majflt_fun,
                               caml_call4
                                (minflt_fun,
                                 caml_call4
                                  (isrss_fun,
                                   caml_call4
                                    (idrss_fun,
                                     caml_call4
                                      (ixrss_fun,
                                       caml_call4
                                        (maxrss_fun,
                                         caml_call4
                                          (stime_fun,
                                           caml_call4(utime_fun,init,utime$0,record,record[1]),
                                           stime$0,
                                           record,
                                           _aju_),
                                         maxrss$0,
                                         record,
                                         _ajt_),
                                       ixrss$0,
                                       record,
                                       _ajs_),
                                     idrss$0,
                                     record,
                                     _ajr_),
                                   isrss$0,
                                   record,
                                   _ajq_),
                                 minflt$0,
                                 record,
                                 _ajp_),
                               majflt$0,
                               record,
                               _ajo_),
                             nswap$0,
                             record,
                             _ajn_),
                           inblock$0,
                           record,
                           _ajm_),
                         oublock$0,
                         record,
                         _ajl_),
                       msgsnd$0,
                       record,
                       _ajk_),
                     msgrcv$0,
                     record,
                     _ajj_),
                   nsignals$0,
                   record,
                   _aji_),
                 nvcsw$0,
                 record,
                 _ajh_),
               nivcsw$0,
               record,
               _ajg_)}
    function for_all$0
     (record,
      utime_fun,
      stime_fun,
      maxrss_fun,
      ixrss_fun,
      idrss_fun,
      isrss_fun,
      minflt_fun,
      majflt_fun,
      nswap_fun,
      inblock_fun,
      oublock_fun,
      msgsnd_fun,
      msgrcv_fun,
      nsignals_fun,
      nvcsw_fun,
      nivcsw_fun)
     {var
       _ai3_=caml_call3(utime_fun,utime$0,record,record[1]),
       _ai4_=_ai3_?caml_call3(stime_fun,stime$0,record,record[2]):_ai3_,
       _ai5_=_ai4_?caml_call3(maxrss_fun,maxrss$0,record,record[3]):_ai4_,
       _ai6_=_ai5_?caml_call3(ixrss_fun,ixrss$0,record,record[4]):_ai5_,
       _ai7_=_ai6_?caml_call3(idrss_fun,idrss$0,record,record[5]):_ai6_,
       _ai8_=_ai7_?caml_call3(isrss_fun,isrss$0,record,record[6]):_ai7_,
       _ai9_=_ai8_?caml_call3(minflt_fun,minflt$0,record,record[7]):_ai8_,
       _ai__=_ai9_?caml_call3(majflt_fun,majflt$0,record,record[8]):_ai9_,
       _ai$_=_ai__?caml_call3(nswap_fun,nswap$0,record,record[9]):_ai__,
       _aja_=_ai$_?caml_call3(inblock_fun,inblock$0,record,record[10]):_ai$_,
       _ajb_=_aja_?caml_call3(oublock_fun,oublock$0,record,record[11]):_aja_,
       _ajc_=_ajb_?caml_call3(msgsnd_fun,msgsnd$0,record,record[12]):_ajb_,
       _ajd_=_ajc_?caml_call3(msgrcv_fun,msgrcv$0,record,record[13]):_ajc_,
       _aje_=_ajd_?caml_call3(nsignals_fun,nsignals$0,record,record[14]):_ajd_,
       _ajf_=_aje_?caml_call3(nvcsw_fun,nvcsw$0,record,record[15]):_aje_;
      return _ajf_?caml_call3(nivcsw_fun,nivcsw$0,record,record[16]):_ajf_}
    function exists$0
     (record,
      utime_fun,
      stime_fun,
      maxrss_fun,
      ixrss_fun,
      idrss_fun,
      isrss_fun,
      minflt_fun,
      majflt_fun,
      nswap_fun,
      inblock_fun,
      oublock_fun,
      msgsnd_fun,
      msgrcv_fun,
      nsignals_fun,
      nvcsw_fun,
      nivcsw_fun)
     {var
       _ai2_=caml_call3(utime_fun,utime$0,record,record[1]),
       _aiO_=_ai2_ || caml_call3(stime_fun,stime$0,record,record[2]),
       _aiP_=_aiO_ || caml_call3(maxrss_fun,maxrss$0,record,record[3]),
       _aiQ_=_aiP_ || caml_call3(ixrss_fun,ixrss$0,record,record[4]),
       _aiR_=_aiQ_ || caml_call3(idrss_fun,idrss$0,record,record[5]),
       _aiS_=_aiR_ || caml_call3(isrss_fun,isrss$0,record,record[6]),
       _aiT_=_aiS_ || caml_call3(minflt_fun,minflt$0,record,record[7]),
       _aiU_=_aiT_ || caml_call3(majflt_fun,majflt$0,record,record[8]),
       _aiV_=_aiU_ || caml_call3(nswap_fun,nswap$0,record,record[9]),
       _aiW_=_aiV_ || caml_call3(inblock_fun,inblock$0,record,record[10]),
       _aiX_=_aiW_ || caml_call3(oublock_fun,oublock$0,record,record[11]),
       _aiY_=_aiX_ || caml_call3(msgsnd_fun,msgsnd$0,record,record[12]),
       _aiZ_=_aiY_ || caml_call3(msgrcv_fun,msgrcv$0,record,record[13]),
       _ai0_=_aiZ_ || caml_call3(nsignals_fun,nsignals$0,record,record[14]),
       _ai1_=_ai0_ || caml_call3(nvcsw_fun,nvcsw$0,record,record[15]);
      return _ai1_?_ai1_:caml_call3(nivcsw_fun,nivcsw$0,record,record[16])}
    function to_list$0
     (record,
      utime_fun,
      stime_fun,
      maxrss_fun,
      ixrss_fun,
      idrss_fun,
      isrss_fun,
      minflt_fun,
      majflt_fun,
      nswap_fun,
      inblock_fun,
      oublock_fun,
      msgsnd_fun,
      msgrcv_fun,
      nsignals_fun,
      nvcsw_fun,
      nivcsw_fun)
     {var
       _aiz_=[0,caml_call3(nivcsw_fun,nivcsw$0,record,record[16]),0],
       _aiA_=[0,caml_call3(nvcsw_fun,nvcsw$0,record,record[15]),_aiz_],
       _aiB_=[0,caml_call3(nsignals_fun,nsignals$0,record,record[14]),_aiA_],
       _aiC_=[0,caml_call3(msgrcv_fun,msgrcv$0,record,record[13]),_aiB_],
       _aiD_=[0,caml_call3(msgsnd_fun,msgsnd$0,record,record[12]),_aiC_],
       _aiE_=[0,caml_call3(oublock_fun,oublock$0,record,record[11]),_aiD_],
       _aiF_=[0,caml_call3(inblock_fun,inblock$0,record,record[10]),_aiE_],
       _aiG_=[0,caml_call3(nswap_fun,nswap$0,record,record[9]),_aiF_],
       _aiH_=[0,caml_call3(majflt_fun,majflt$0,record,record[8]),_aiG_],
       _aiI_=[0,caml_call3(minflt_fun,minflt$0,record,record[7]),_aiH_],
       _aiJ_=[0,caml_call3(isrss_fun,isrss$0,record,record[6]),_aiI_],
       _aiK_=[0,caml_call3(idrss_fun,idrss$0,record,record[5]),_aiJ_],
       _aiL_=[0,caml_call3(ixrss_fun,ixrss$0,record,record[4]),_aiK_],
       _aiM_=[0,caml_call3(maxrss_fun,maxrss$0,record,record[3]),_aiL_],
       _aiN_=[0,caml_call3(stime_fun,stime$0,record,record[2]),_aiM_];
      return [0,caml_call3(utime_fun,utime$0,record,record[1]),_aiN_]}
    function map$0
     (record,
      utime_fun,
      stime_fun,
      maxrss_fun,
      ixrss_fun,
      idrss_fun,
      isrss_fun,
      minflt_fun,
      majflt_fun,
      nswap_fun,
      inblock_fun,
      oublock_fun,
      msgsnd_fun,
      msgrcv_fun,
      nsignals_fun,
      nvcsw_fun,
      nivcsw_fun)
     {var
       _aik_=caml_call3(nivcsw_fun,nivcsw$0,record,record[16]),
       _ail_=caml_call3(nvcsw_fun,nvcsw$0,record,record[15]),
       _aim_=caml_call3(nsignals_fun,nsignals$0,record,record[14]),
       _ain_=caml_call3(msgrcv_fun,msgrcv$0,record,record[13]),
       _aio_=caml_call3(msgsnd_fun,msgsnd$0,record,record[12]),
       _aip_=caml_call3(oublock_fun,oublock$0,record,record[11]),
       _aiq_=caml_call3(inblock_fun,inblock$0,record,record[10]),
       _air_=caml_call3(nswap_fun,nswap$0,record,record[9]),
       _ais_=caml_call3(majflt_fun,majflt$0,record,record[8]),
       _ait_=caml_call3(minflt_fun,minflt$0,record,record[7]),
       _aiu_=caml_call3(isrss_fun,isrss$0,record,record[6]),
       _aiv_=caml_call3(idrss_fun,idrss$0,record,record[5]),
       _aiw_=caml_call3(ixrss_fun,ixrss$0,record,record[4]),
       _aix_=caml_call3(maxrss_fun,maxrss$0,record,record[3]),
       _aiy_=caml_call3(stime_fun,stime$0,record,record[2]);
      return [0,
              caml_call3(utime_fun,utime$0,record,record[1]),
              _aiy_,
              _aix_,
              _aiw_,
              _aiv_,
              _aiu_,
              _ait_,
              _ais_,
              _air_,
              _aiq_,
              _aip_,
              _aio_,
              _ain_,
              _aim_,
              _ail_,
              _aik_]}
    function set_all_mutable_fields(record)
     {caml_call1(Base_Field[1][1],record);return 0}
    var
     Direct=
      [0,
       iter$0,
       fold$0,
       for_all$0,
       exists$0,
       to_list$0,
       map$0,
       set_all_mutable_fields];
    function get$0(who)
     {var _aij_=925480876 <= who?0:1;
      return runtime.core_unix_getrusage(_aij_)}
    function add(t1,t2)
     {var
       _ah7_=caml_call2(Core_kernel_Int64[20],t1[16],t2[16]),
       _ah8_=caml_call2(Core_kernel_Int64[20],t1[15],t2[15]),
       _ah9_=caml_call2(Core_kernel_Int64[20],t1[14],t2[14]),
       _ah__=caml_call2(Core_kernel_Int64[20],t1[13],t2[13]),
       _ah$_=caml_call2(Core_kernel_Int64[20],t1[12],t2[12]),
       _aia_=caml_call2(Core_kernel_Int64[20],t1[11],t2[11]),
       _aib_=caml_call2(Core_kernel_Int64[20],t1[10],t2[10]),
       _aic_=caml_call2(Core_kernel_Int64[20],t1[9],t2[9]),
       _aid_=caml_call2(Core_kernel_Int64[20],t1[8],t2[8]),
       _aie_=caml_call2(Core_kernel_Int64[20],t1[7],t2[7]),
       _aif_=caml_call2(Core_kernel_Int64[20],t1[6],t2[6]),
       _aig_=caml_call2(Core_kernel_Int64[20],t1[5],t2[5]),
       _aih_=caml_call2(Core_kernel_Int64[20],t1[4],t2[4]),
       _aii_=caml_call2(Core_kernel_Int64[20],t1[3],t2[3]);
      return [0,
              t1[1] + t2[1],
              t1[2] + t2[2],
              _aii_,
              _aih_,
              _aig_,
              _aif_,
              _aie_,
              _aid_,
              _aic_,
              _aib_,
              _aia_,
              _ah$_,
              _ah__,
              _ah9_,
              _ah8_,
              _ah7_]}
    function sysconf_of_sexp(sexp)
     {if(0 === sexp[0])
       {var
         _ahX_=sexp[1],
         _ahY_=caml_string_compare(_ahX_,cst_aRG_MAX),
         switch$0=0;
        if(0 <= _ahY_)
         if(0 < _ahY_)
          {var _ahZ_=caml_string_compare(_ahX_,cst_pAGESIZE);
           if(0 <= _ahZ_)
            if(0 < _ahZ_)
             if(caml_string_notequal(_ahX_,cst_pHYS_PAGES))
              if(caml_string_notequal(_ahX_,cst_pOSIX_VERSION))
               if(caml_string_notequal(_ahX_,cst_rE_DUP_MAX))
                if(caml_string_notequal(_ahX_,cst_sTREAM_MAX))
                 if(caml_string_notequal(_ahX_,cst_sYMLOOP_MAX))
                  if(caml_string_notequal(_ahX_,cst_tTY_NAME_MAX))
                   {if(! caml_string_notequal(_ahX_,cst_tZNAME_MAX))
                     switch$0 = 11}
                  else
                   switch$0 = 10;
                 else
                  switch$0 = 9;
                else
                 switch$0 = 8;
               else
                switch$0 = 7;
              else
               switch$0 = 12;
             else
              switch$0 = 13;
            else
             switch$0 = 6;
           else
            if(caml_string_notequal(_ahX_,cst_aVPHYS_PAGES))
             if(caml_string_notequal(_ahX_,cst_cHILD_MAX))
              if(caml_string_notequal(_ahX_,cst_cLK_TCK))
               if(caml_string_notequal(_ahX_,cst_hOST_NAME_MAX))
                if(caml_string_notequal(_ahX_,cst_iOV_MAX))
                 if(caml_string_notequal(_ahX_,cst_lOGIN_NAME_MAX))
                  {if(! caml_string_notequal(_ahX_,cst_oPEN_MAX))switch$0 = 5}
                 else
                  switch$0 = 4;
                else
                 switch$0 = 15;
               else
                switch$0 = 3;
              else
               switch$0 = 16;
             else
              switch$0 = 2;
            else
             switch$0 = 14}
         else
          switch$0 = 1;
        else
         {var _ah0_=caml_string_compare(_ahX_,cst_PAGESIZE);
          if(0 <= _ah0_)
           if(0 < _ah0_)
            if(caml_string_notequal(_ahX_,cst_PHYS_PAGES))
             if(caml_string_notequal(_ahX_,cst_POSIX_VERSION))
              if(caml_string_notequal(_ahX_,cst_RE_DUP_MAX))
               if(caml_string_notequal(_ahX_,cst_STREAM_MAX))
                if(caml_string_notequal(_ahX_,cst_SYMLOOP_MAX))
                 if(caml_string_notequal(_ahX_,cst_TTY_NAME_MAX))
                  {if(! caml_string_notequal(_ahX_,cst_TZNAME_MAX))
                    switch$0 = 11}
                 else
                  switch$0 = 10;
                else
                 switch$0 = 9;
               else
                switch$0 = 8;
              else
               switch$0 = 7;
             else
              switch$0 = 12;
            else
             switch$0 = 13;
           else
            switch$0 = 6;
          else
           if(caml_string_notequal(_ahX_,cst_ARG_MAX))
            if(caml_string_notequal(_ahX_,cst_AVPHYS_PAGES))
             if(caml_string_notequal(_ahX_,cst_CHILD_MAX))
              if(caml_string_notequal(_ahX_,cst_CLK_TCK))
               if(caml_string_notequal(_ahX_,cst_HOST_NAME_MAX))
                if(caml_string_notequal(_ahX_,cst_IOV_MAX))
                 if(caml_string_notequal(_ahX_,cst_LOGIN_NAME_MAX))
                  {if(! caml_string_notequal(_ahX_,cst_OPEN_MAX))switch$0 = 5}
                 else
                  switch$0 = 4;
                else
                 switch$0 = 15;
               else
                switch$0 = 3;
              else
               switch$0 = 16;
             else
              switch$0 = 2;
            else
             switch$0 = 14;
           else
            switch$0 = 1}
        switch(switch$0)
         {case 1:return 0;
          case 2:return 1;
          case 3:return 2;
          case 4:return 3;
          case 5:return 4;
          case 6:return 5;
          case 7:return 6;
          case 8:return 7;
          case 9:return 8;
          case 10:return 9;
          case 11:return 10;
          case 12:return 11;
          case 13:return 12;
          case 14:return 13;
          case 15:return 14;
          case 16:return 15
          }}
      else
       {var _ah1_=sexp[1];
        if(! _ah1_)
         return caml_call2(Sexplib0_Sexp_conv_error[7],tp_loc$7,sexp);
        var _ah2_=_ah1_[1];
        if(0 !== _ah2_[0])
         return caml_call2(Sexplib0_Sexp_conv_error[6],tp_loc$7,sexp);
        var
         _ah3_=_ah2_[1],
         _ah4_=caml_string_compare(_ah3_,cst_aRG_MAX$0),
         switch$1=0;
        if(0 <= _ah4_)
         if(0 < _ah4_)
          {var _ah5_=caml_string_compare(_ah3_,cst_pAGESIZE$0);
           if(0 <= _ah5_)
            if(0 < _ah5_)
             if(caml_string_notequal(_ah3_,cst_pHYS_PAGES$0))
              if(caml_string_notequal(_ah3_,cst_pOSIX_VERSION$0))
               if(caml_string_notequal(_ah3_,cst_rE_DUP_MAX$0))
                if(caml_string_notequal(_ah3_,cst_sTREAM_MAX$0))
                 if(caml_string_notequal(_ah3_,cst_sYMLOOP_MAX$0))
                  if(caml_string_notequal(_ah3_,cst_tTY_NAME_MAX$0))
                   {if(! caml_string_notequal(_ah3_,cst_tZNAME_MAX$0))
                     switch$1 = 11}
                  else
                   switch$1 = 10;
                 else
                  switch$1 = 9;
                else
                 switch$1 = 8;
               else
                switch$1 = 7;
              else
               switch$1 = 12;
             else
              switch$1 = 13;
            else
             switch$1 = 6;
           else
            if(caml_string_notequal(_ah3_,cst_aVPHYS_PAGES$0))
             if(caml_string_notequal(_ah3_,cst_cHILD_MAX$0))
              if(caml_string_notequal(_ah3_,cst_cLK_TCK$0))
               if(caml_string_notequal(_ah3_,cst_hOST_NAME_MAX$0))
                if(caml_string_notequal(_ah3_,cst_iOV_MAX$0))
                 if(caml_string_notequal(_ah3_,cst_lOGIN_NAME_MAX$0))
                  {if(! caml_string_notequal(_ah3_,cst_oPEN_MAX$0))
                    switch$1 = 5}
                 else
                  switch$1 = 4;
                else
                 switch$1 = 15;
               else
                switch$1 = 3;
              else
               switch$1 = 16;
             else
              switch$1 = 2;
            else
             switch$1 = 14}
         else
          switch$1 = 1;
        else
         {var _ah6_=caml_string_compare(_ah3_,cst_PAGESIZE$0);
          if(0 <= _ah6_)
           if(0 < _ah6_)
            if(caml_string_notequal(_ah3_,cst_PHYS_PAGES$0))
             if(caml_string_notequal(_ah3_,cst_POSIX_VERSION$0))
              if(caml_string_notequal(_ah3_,cst_RE_DUP_MAX$0))
               if(caml_string_notequal(_ah3_,cst_STREAM_MAX$0))
                if(caml_string_notequal(_ah3_,cst_SYMLOOP_MAX$0))
                 if(caml_string_notequal(_ah3_,cst_TTY_NAME_MAX$0))
                  {if(! caml_string_notequal(_ah3_,cst_TZNAME_MAX$0))
                    switch$1 = 11}
                 else
                  switch$1 = 10;
                else
                 switch$1 = 9;
               else
                switch$1 = 8;
              else
               switch$1 = 7;
             else
              switch$1 = 12;
            else
             switch$1 = 13;
           else
            switch$1 = 6;
          else
           if(caml_string_notequal(_ah3_,cst_ARG_MAX$0))
            if(caml_string_notequal(_ah3_,cst_AVPHYS_PAGES$0))
             if(caml_string_notequal(_ah3_,cst_CHILD_MAX$0))
              if(caml_string_notequal(_ah3_,cst_CLK_TCK$0))
               if(caml_string_notequal(_ah3_,cst_HOST_NAME_MAX$0))
                if(caml_string_notequal(_ah3_,cst_IOV_MAX$0))
                 if(caml_string_notequal(_ah3_,cst_LOGIN_NAME_MAX$0))
                  {if(! caml_string_notequal(_ah3_,cst_OPEN_MAX$0))
                    switch$1 = 5}
                 else
                  switch$1 = 4;
                else
                 switch$1 = 15;
               else
                switch$1 = 3;
              else
               switch$1 = 16;
             else
              switch$1 = 2;
            else
             switch$1 = 14;
           else
            switch$1 = 1}
        switch(switch$1)
         {case 1:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$7,sexp);
          case 2:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$7,sexp);
          case 3:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$7,sexp);
          case 4:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$7,sexp);
          case 5:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$7,sexp);
          case 6:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$7,sexp);
          case 7:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$7,sexp);
          case 8:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$7,sexp);
          case 9:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$7,sexp);
          case 10:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$7,sexp);
          case 11:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$7,sexp);
          case 12:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$7,sexp);
          case 13:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$7,sexp);
          case 14:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$7,sexp);
          case 15:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$7,sexp);
          case 16:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$7,sexp)
          }}
      return caml_call2(Sexplib0_Sexp_conv_error[8],tp_loc$7,sexp)}
    function sexp_of_sysconf(param)
     {switch(param)
       {case 0:return _mq_;
        case 1:return _mr_;
        case 2:return _ms_;
        case 3:return _mt_;
        case 4:return _mu_;
        case 5:return _mv_;
        case 6:return _mw_;
        case 7:return _mx_;
        case 8:return _my_;
        case 9:return _mz_;
        case 10:return _mA_;
        case 11:return _mB_;
        case 12:return _mC_;
        case 13:return _mD_;
        case 14:return _mE_;
        default:return _mF_}}
    function sysconf_exn(conf)
     {var match=runtime.core_unix_sysconf(conf);
      if(match){var x=match[1];return x}
      var _ahW_=[0,[1,[0,_mG_,[0,sexp_of_sysconf(conf),0]]],0];
      return caml_call1
              (_cS_,
               [1,
                [0,
                 caml_call1
                  (Sexplib0_Sexp_conv[7],cst_sysconf_exn_value_not_avai),
                 _ahW_]])}
    function t_of_sexp$3(of_buf,sexp)
     {if(0 === sexp[0])
       return caml_call2(Sexplib0_Sexp_conv_error[16],tp_loc$8,sexp);
      var
       field_sexps=sexp[1],
       buf_field=[0,0],
       pos_field=[0,0],
       len_field=[0,0],
       duplicates=[0,0],
       extra=[0,0],
       param=field_sexps;
      for(;;)
       {if(param)
         {var _ahN_=param[1];
          if(1 === _ahN_[0])
           {var _ahO_=_ahN_[1];
            if(_ahO_)
             {var _ahP_=_ahO_[1];
              if(0 === _ahP_[0])
               {var _ahQ_=_ahO_[2],_ahR_=_ahP_[1],switch$0=0;
                if(! _ahQ_ || ! _ahQ_[2])switch$0 = 1;
                if(switch$0)
                 {var
                   tail=param[2],
                   field_sexp$3=
                    function(_ahV_)
                     {function field_sexp(param)
                       {if(_ahV_)
                         {if(_ahV_[2])throw [0,Assert_failure,_mH_];
                          var x=_ahV_[1];
                          return x}
                        return caml_call2
                                (Sexplib0_Sexp_conv_error[10],tp_loc$8,sexp)}
                      return field_sexp},
                   field_sexp=field_sexp$3(_ahQ_);
                  if(caml_string_notequal(_ahR_,cst_buf))
                   if(caml_string_notequal(_ahR_,cst_len))
                    if(caml_string_notequal(_ahR_,cst_pos))
                     {if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_ahR_,extra[1]]}
                    else
                     if(pos_field[1])
                      duplicates[1] = [0,_ahR_,duplicates[1]];
                     else
                      {var
                        field_sexp$0=field_sexp(0),
                        fvalue=caml_call1(file_perm_of_sexp,field_sexp$0);
                       pos_field[1] = [0,fvalue]}
                   else
                    if(len_field[1])
                     duplicates[1] = [0,_ahR_,duplicates[1]];
                    else
                     {var
                       field_sexp$1=field_sexp(0),
                       fvalue$0=caml_call1(file_perm_of_sexp,field_sexp$1);
                      len_field[1] = [0,fvalue$0]}
                  else
                   if(buf_field[1])
                    duplicates[1] = [0,_ahR_,duplicates[1]];
                   else
                    {var
                      field_sexp$2=field_sexp(0),
                      fvalue$1=caml_call1(of_buf,field_sexp$2);
                     buf_field[1] = [0,fvalue$1]}
                  var param=tail;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[10],tp_loc$8,_ahN_)}
        if(duplicates[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],tp_loc$8,duplicates[1],sexp);
        if(extra[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[13],tp_loc$8,extra[1],sexp);
        var _ahS_=buf_field[1],_ahT_=pos_field[1],_ahU_=len_field[1];
        if(_ahS_ && _ahT_ && _ahU_)
         {var len_value=_ahU_[1],pos_value=_ahT_[1],buf_value=_ahS_[1];
          return [0,buf_value,pos_value,len_value]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[15],
                 tp_loc$8,
                 sexp,
                 [0,
                  [0,0 === buf_field[1]?1:0,cst_buf$0],
                  [0,
                   [0,0 === pos_field[1]?1:0,cst_pos$0],
                   [0,[0,0 === len_field[1]?1:0,cst_len$0],0]]])}}
    function sexp_of_t$7(of_buf,param)
     {var
       v_len=param[3],
       v_pos=param[2],
       v_buf=param[1],
       arg=caml_call1(_es_,v_len),
       bnds=[0,[1,[0,_mI_,[0,arg,0]]],0],
       arg$0=caml_call1(_es_,v_pos),
       bnds$0=[0,[1,[0,_mJ_,[0,arg$0,0]]],bnds],
       arg$1=caml_call1(of_buf,v_buf),
       bnds$1=[0,[1,[0,_mK_,[0,arg$1,0]]],bnds$0];
      return [1,bnds$1]}
    var
     bigstring_kind=
      caml_call3
       (Stdlib_bigarray[19][1],Stdlib_bigarray[13],Stdlib_bigarray[15],0);
    function empty(kind){return [0,kind,0,0]}
    function get_iovec(loc,pos,len,true_len,buf)
     {if(pos)
       {var pos$0=pos[1];
        if(pos$0 < 0)caml_call1(_a_,caml_call2(_n_,loc,cst_pos_0$0));
        if(true_len < pos$0)
         caml_call1(_a_,caml_call2(_n_,loc,cst_pos_length_buf));
        var pos$1=pos$0}
      else
       var pos$1=0;
      if(len)
       {var len$0=len[1];
        if(len$0 < 0)caml_call1(_a_,caml_call2(_n_,loc,cst_len_0$0));
        var len$1=len$0}
      else
       var len$1=true_len - pos$1 | 0;
      if(true_len < (pos$1 + len$1 | 0))
       caml_call1(_a_,caml_call2(_n_,loc,cst_pos_len_length_buf));
      return [0,buf,pos$1,len$1]}
    function of_string$1(pos,len,str)
     {var str_len=caml_ml_string_length(str);
      return get_iovec(cst_IOVec_of_string,pos,len,str_len,str)}
    function of_bigstring(pos,len,bstr)
     {var bstr_len=runtime.caml_ba_dim_1(bstr);
      return get_iovec(cst_IOVec_of_bigstring,pos,len,bstr_len,bstr)}
    function drop(iovec,n)
     {return iovec[3] < n
              ?caml_call1(_b_,cst_IOVec_drop_n_length_iovec)
              :[0,iovec[1],iovec[2] + n | 0,iovec[3] - n | 0]}
    var
     default_max_iovecs=1024,
     max_iovecs=
      [246,
       function(_ahL_)
        {var match=runtime.core_unix_sysconf(14);
         if(match)
          {var
            n64=match[1],
            _ahM_=caml_call1(Core_kernel_Int64[74],Core_kernel_Array[35]);
           return caml_call2(Core_kernel_Int64[109],n64,_ahM_)
                   ?Core_kernel_Array[35]
                   :caml_call1(Core_kernel_Int64[5],n64)}
         return default_max_iovecs}];
    function get_iovec_count(loc,iovecs,param)
     {if(param)
       {var count=param[1];
        if(count < 0)caml_call1(_a_,caml_call2(_n_,loc,cst_count_0));
        var n_iovecs=caml_call1(Core_kernel_Array[18],iovecs);
        if(n_iovecs < count)
         caml_call1(_a_,caml_call2(_n_,loc,cst_count_n_iovecs));
        return count}
      return caml_call1(Core_kernel_Array[18],iovecs)}
    function writev_assume_fd_is_nonblockin(fd,count,iovecs)
     {var
       count$0=
        get_iovec_count(cst_writev_assume_fd_is_nonblo,iovecs,count);
      return runtime.core_unix_writev_assume_fd_is_nonblocking_stub
              (fd,iovecs,count$0)}
    function writev(fd,count,iovecs)
     {var count$0=get_iovec_count(cst_writev,iovecs,count);
      return runtime.core_unix_writev_stub(fd,iovecs,count$0)}
    function flag_to_internal(param)
     {return -75290636 <= param
              ?538529489 <= param
                ?762792592 <= param?1:5
                :215850510 <= param?3:4
              :-273689311 <= param?2:0}
    function fnmatch(flags,pat,fname)
     {var switch$0=0;
      if(flags)
       {var _ahI_=flags[1];
        if(_ahI_)
         {var
           _ahJ_=caml_call1(Core_kernel_Array[48],_ahI_),
           _ahK_=
            runtime.core_unix_fnmatch_make_flags
             (caml_call2(Core_kernel_Array[49],_ahJ_,flag_to_internal));
          switch$0 = 1}}
      if(! switch$0)var _ahK_=Core_kernel_Int32[17];
      return runtime.core_unix_fnmatch(_ahK_,pat,fname)}
    function flag_to_internal$0(param)
     {return 360161283 === param?1:974192876 <= param?2:0}
    var
     wordexp=
      [0,
       function(flags,str)
        {var switch$0=0;
         if(flags)
          {var _ahF_=flags[1];
           if(_ahF_)
            {var
              _ahG_=caml_call1(Core_kernel_Array[48],_ahF_),
              _ahH_=
               runtime.core_unix_wordexp_make_flags
                (caml_call2(Core_kernel_Array[49],_ahG_,flag_to_internal$0));
             switch$0 = 1}}
         if(! switch$0)var _ahH_=Core_kernel_Int32[17];
         return runtime.core_unix_wordexp(_ahH_,str)}];
    function machine(r){return r[5]}
    function version(r){return r[4]}
    function release(r){return r[3]}
    function nodename(r){return r[2]}
    function sysname(r){return r[1]}
    function t_of_sexp$4(sexp)
     {if(0 === sexp[0])
       return caml_call2(Sexplib0_Sexp_conv_error[16],tp_loc$9,sexp);
      var
       field_sexps=sexp[1],
       sysname_field=[0,0],
       nodename_field=[0,0],
       release_field=[0,0],
       version_field=[0,0],
       machine_field=[0,0],
       duplicates=[0,0],
       extra=[0,0],
       param=field_sexps;
      for(;;)
       {if(param)
         {var _ahu_=param[1];
          if(1 === _ahu_[0])
           {var _ahv_=_ahu_[1];
            if(_ahv_)
             {var _ahw_=_ahv_[1];
              if(0 === _ahw_[0])
               {var _ahx_=_ahv_[2],_ahy_=_ahw_[1],switch$0=0;
                if(! _ahx_ || ! _ahx_[2])switch$0 = 1;
                if(switch$0)
                 {var
                   tail=param[2],
                   field_sexp$5=
                    function(_ahE_)
                     {function field_sexp(param)
                       {if(_ahE_)
                         {if(_ahE_[2])throw [0,Assert_failure,_mL_];
                          var x=_ahE_[1];
                          return x}
                        return caml_call2
                                (Sexplib0_Sexp_conv_error[10],tp_loc$9,sexp)}
                      return field_sexp},
                   field_sexp=field_sexp$5(_ahx_);
                  if(caml_string_notequal(_ahy_,cst_machine))
                   if(caml_string_notequal(_ahy_,cst_nodename))
                    if(caml_string_notequal(_ahy_,cst_release))
                     if(caml_string_notequal(_ahy_,cst_sysname))
                      if(caml_string_notequal(_ahy_,cst_version))
                       {if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_ahy_,extra[1]]}
                      else
                       if(version_field[1])
                        duplicates[1] = [0,_ahy_,duplicates[1]];
                       else
                        {var
                          field_sexp$0=field_sexp(0),
                          fvalue=caml_call1(_gf_,field_sexp$0);
                         version_field[1] = [0,fvalue]}
                     else
                      if(sysname_field[1])
                       duplicates[1] = [0,_ahy_,duplicates[1]];
                      else
                       {var
                         field_sexp$1=field_sexp(0),
                         fvalue$0=caml_call1(_gf_,field_sexp$1);
                        sysname_field[1] = [0,fvalue$0]}
                    else
                     if(release_field[1])
                      duplicates[1] = [0,_ahy_,duplicates[1]];
                     else
                      {var
                        field_sexp$2=field_sexp(0),
                        fvalue$1=caml_call1(_gf_,field_sexp$2);
                       release_field[1] = [0,fvalue$1]}
                   else
                    if(nodename_field[1])
                     duplicates[1] = [0,_ahy_,duplicates[1]];
                    else
                     {var
                       field_sexp$3=field_sexp(0),
                       fvalue$2=caml_call1(_gf_,field_sexp$3);
                      nodename_field[1] = [0,fvalue$2]}
                  else
                   if(machine_field[1])
                    duplicates[1] = [0,_ahy_,duplicates[1]];
                   else
                    {var
                      field_sexp$4=field_sexp(0),
                      fvalue$3=caml_call1(_gf_,field_sexp$4);
                     machine_field[1] = [0,fvalue$3]}
                  var param=tail;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[10],tp_loc$9,_ahu_)}
        if(duplicates[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],tp_loc$9,duplicates[1],sexp);
        if(extra[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[13],tp_loc$9,extra[1],sexp);
        var
         _ahz_=sysname_field[1],
         _ahA_=nodename_field[1],
         _ahB_=release_field[1],
         _ahC_=version_field[1],
         _ahD_=machine_field[1];
        if(_ahz_ && _ahA_ && _ahB_ && _ahC_ && _ahD_)
         {var
           machine_value=_ahD_[1],
           version_value=_ahC_[1],
           release_value=_ahB_[1],
           nodename_value=_ahA_[1],
           sysname_value=_ahz_[1];
          return [0,
                  sysname_value,
                  nodename_value,
                  release_value,
                  version_value,
                  machine_value]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[15],
                 tp_loc$9,
                 sexp,
                 [0,
                  [0,0 === sysname_field[1]?1:0,cst_sysname$0],
                  [0,
                   [0,0 === nodename_field[1]?1:0,cst_nodename$0],
                   [0,
                    [0,0 === release_field[1]?1:0,cst_release$0],
                    [0,
                     [0,0 === version_field[1]?1:0,cst_version$0],
                     [0,[0,0 === machine_field[1]?1:0,cst_machine$0],0]]]]])}}
    function sexp_of_t$8(param)
     {var
       v_machine=param[5],
       v_version=param[4],
       v_release=param[3],
       v_nodename=param[2],
       v_sysname=param[1],
       arg=caml_call1(_ge_,v_machine),
       bnds=[0,[1,[0,_mM_,[0,arg,0]]],0],
       arg$0=caml_call1(_ge_,v_version),
       bnds$0=[0,[1,[0,_mN_,[0,arg$0,0]]],bnds],
       arg$1=caml_call1(_ge_,v_release),
       bnds$1=[0,[1,[0,_mO_,[0,arg$1,0]]],bnds$0],
       arg$2=caml_call1(_ge_,v_nodename),
       bnds$2=[0,[1,[0,_mP_,[0,arg$2,0]]],bnds$1],
       arg$3=caml_call1(_ge_,v_sysname),
       bnds$3=[0,[1,[0,_mQ_,[0,arg$3,0]]],bnds$2];
      return [1,bnds$3]}
    function compare$4(a_001,b_002)
     {if(caml_call2(Ppx_compare_lib[1],a_001,b_002))return 0;
      var n=caml_call2(_ga_,a_001[1],b_002[1]);
      if(0 === n)
       {var n$0=caml_call2(_ga_,a_001[2],b_002[2]);
        if(0 === n$0)
         {var n$1=caml_call2(_ga_,a_001[3],b_002[3]);
          if(0 === n$1)
           {var n$2=caml_call2(_ga_,a_001[4],b_002[4]);
            return 0 === n$2?caml_call2(_ga_,a_001[5],b_002[5]):n$2}
          return n$1}
        return n$0}
      return n}
    function t_of_sexp$5(sexp)
     {if(0 === sexp[0])
       {var atom=sexp[1];
        return caml_string_notequal(atom,cst_Fifo)
                ?caml_string_notequal(atom,cst_Other)
                  ?caml_string_notequal(atom,cst_Round_robin)
                    ?caml_call1(Sexplib0_Sexp_conv_error[19],0)
                    :-886337767
                  :-912009552
                :781514092}
      var _ahs_=sexp[1];
      if(_ahs_)
       {var _aht_=_ahs_[1];
        if(0 === _aht_[0])
         {var atom$0=_aht_[1];
          return caml_string_notequal(atom$0,cst_Fifo$0)
                  ?caml_string_notequal(atom$0,cst_Other$0)
                    ?caml_string_notequal(atom$0,cst_Round_robin$0)
                      ?caml_call1(Sexplib0_Sexp_conv_error[19],0)
                      :caml_call2(Sexplib0_Sexp_conv_error[21],tp_loc$10,sexp)
                    :caml_call2(Sexplib0_Sexp_conv_error[21],tp_loc$10,sexp)
                  :caml_call2(Sexplib0_Sexp_conv_error[21],tp_loc$10,sexp)}
        return caml_call2(Sexplib0_Sexp_conv_error[24],tp_loc$10,sexp)}
      return caml_call2(Sexplib0_Sexp_conv_error[25],tp_loc$10,sexp)}
    function t_of_sexp$6(sexp)
     {try
       {var _ahq_=t_of_sexp$5(sexp);return _ahq_}
      catch(_ahr_)
       {_ahr_ = caml_wrap_exception(_ahr_);
        if(_ahr_ === Sexplib0_Sexp_conv_error[18])
         return caml_call2(Sexplib0_Sexp_conv_error[20],tp_loc$11,sexp);
        throw _ahr_}}
    function sexp_of_t$9(param)
     {return -886337767 === param?_mR_:781514092 <= param?_mS_:_mT_}
    function set$1(pid,policy,priority)
     {if(pid)
       var pid$0=pid[1],pid$1=caml_call1(Core_kernel_Pid[43],pid$0);
      else
       var pid$1=0;
      var _ahp_=-886337767 === policy?1:781514092 <= policy?0:2;
      return runtime.core_unix_sched_setscheduler(pid$1,_ahp_,priority)}
    function t_of_sexp$7(sexp)
     {if(0 === sexp[0])
       {var _ahl_=sexp[1],switch$0=0;
        if(caml_string_notequal(_ahl_,cst_Current))
         {var switch$1=0;
          if(caml_string_notequal(_ahl_,cst_Future))
           if(caml_string_notequal(_ahl_,cst_current))
            {if(caml_string_notequal(_ahl_,cst_future))
              {switch$0 = 1;switch$1 = 1}}
           else
            switch$1 = 1;
          if(! switch$1)return 1}
        if(! switch$0)return 0}
      else
       {var _ahm_=sexp[1];
        if(! _ahm_)
         return caml_call2(Sexplib0_Sexp_conv_error[7],tp_loc$12,sexp);
        var _ahn_=_ahm_[1];
        if(0 !== _ahn_[0])
         return caml_call2(Sexplib0_Sexp_conv_error[6],tp_loc$12,sexp);
        var _aho_=_ahn_[1],switch$2=0;
        if(caml_string_notequal(_aho_,cst_Current$0))
         {var switch$3=0;
          if(caml_string_notequal(_aho_,cst_Future$0))
           if(caml_string_notequal(_aho_,cst_current$0))
            {if(caml_string_notequal(_aho_,cst_future$0))
              {switch$2 = 1;switch$3 = 1}}
           else
            switch$3 = 1;
          if(! switch$3)
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$12,sexp)}
        if(! switch$2)
         return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$12,sexp)}
      return caml_call2(Sexplib0_Sexp_conv_error[8],tp_loc$12,sexp)}
    function sexp_of_t$10(param){return param?_mU_:_mV_}
    var Mcl_flags=[0,t_of_sexp$7,sexp_of_t$10];
    function mlockall(flags)
     {return runtime.core_unix_mlockall
              (caml_call1(Core_kernel_List[19],flags))}
    function munlockall(_ahk_){return runtime.core_unix_munlockall(_ahk_)}
    var Mman=[0,Mcl_flags,mlockall,munlockall];
    function dirname_r(filename){return [0,cst_dirname,[0,filename]]}
    function filename_r(filename){return [0,cst_filename,[0,filename]]}
    function file_perm_r(perm)
     {return [0,cst_perm,[0,caml_call2(Core_kernel_Printf[2],_mW_,perm)]]}
    function len_r(len)
     {return [0,cst_len$1,caml_call1(Core_kernel_Int[101],len)]}
    function uid_r(uid)
     {return [0,cst_uid,caml_call1(Core_kernel_Int[101],uid)]}
    function gid_r(gid)
     {return [0,cst_gid,caml_call1(Core_kernel_Int[101],gid)]}
    function fd_r(fd){return [0,cst_fd,sexp_of_t$3(fd)]}
    function close_on_exec_r(boolopt)
     {return [0,cst_close_on_exec,caml_call2(_fZ_,_dF_,boolopt)]}
    function dir_handle_r(handle)
     {try
       {var _ahi_=sexp_of_t$3(runtime.core_unix_dirfd(handle)),fd=_ahi_}
      catch(_ahj_){var fd=caml_call1(Core_kernel_Int[101],-1)}
      return [0,cst_dir_handle,fd]}
    function unary(restart,make_r,f)
     {return function(x)
       {function _ahh_(param){return [0,caml_call1(make_r,x),0]}
        return improve(restart,function(param){return caml_call1(f,x)},_ahh_)}}
    function unary_fd(restart,f){return unary(restart,fd_r,f)}
    function unary_filename(restart,f){return unary(restart,filename_r,f)}
    function unary_dirname(restart,f){return unary(restart,dirname_r,f)}
    function unary_dir_handle(restart,f){return unary(restart,dir_handle_r,f)}
    var Unix_error=UnixLabels[1],error_message=UnixLabels[2];
    function handle_unix_error(f){return caml_call2(UnixLabels[3],f,0)}
    var environment=UnixLabels[4];
    function compare$5(a_003,match)
     {if(caml_call2(Ppx_compare_lib[1],a_003,match))return 0;
      if(typeof a_003 === "number")
       {var _ahg_=a_003;
        if(34 <= _ahg_)
         switch(_ahg_)
          {case 34:
            if(typeof match === "number" && 34 === match)return 0;break;
           case 35:
            if(typeof match === "number" && 35 === match)return 0;break;
           case 36:
            if(typeof match === "number" && 36 === match)return 0;break;
           case 37:
            if(typeof match === "number" && 37 === match)return 0;break;
           case 38:
            if(typeof match === "number" && 38 === match)return 0;break;
           case 39:
            if(typeof match === "number" && 39 === match)return 0;break;
           case 40:
            if(typeof match === "number" && 40 === match)return 0;break;
           case 41:
            if(typeof match === "number" && 41 === match)return 0;break;
           case 42:
            if(typeof match === "number" && 42 === match)return 0;break;
           case 43:
            if(typeof match === "number" && 43 === match)return 0;break;
           case 44:
            if(typeof match === "number" && 44 === match)return 0;break;
           case 45:
            if(typeof match === "number" && 45 === match)return 0;break;
           case 46:
            if(typeof match === "number" && 46 === match)return 0;break;
           case 47:
            if(typeof match === "number" && 47 === match)return 0;break;
           case 48:
            if(typeof match === "number" && 48 === match)return 0;break;
           case 49:
            if(typeof match === "number" && 49 === match)return 0;break;
           case 50:
            if(typeof match === "number" && 50 === match)return 0;break;
           case 51:
            if(typeof match === "number" && 51 === match)return 0;break;
           case 52:
            if(typeof match === "number" && 52 === match)return 0;break;
           case 53:
            if(typeof match === "number" && 53 === match)return 0;break;
           case 54:
            if(typeof match === "number" && 54 === match)return 0;break;
           case 55:
            if(typeof match === "number" && 55 === match)return 0;break;
           case 56:
            if(typeof match === "number" && 56 === match)return 0;break;
           case 57:
            if(typeof match === "number" && 57 === match)return 0;break;
           case 58:
            if(typeof match === "number" && 58 === match)return 0;break;
           case 59:
            if(typeof match === "number" && 59 === match)return 0;break;
           case 60:
            if(typeof match === "number" && 60 === match)return 0;break;
           case 61:
            if(typeof match === "number" && 61 === match)return 0;break;
           case 62:
            if(typeof match === "number" && 62 === match)return 0;break;
           case 63:
            if(typeof match === "number" && 63 === match)return 0;break;
           case 64:
            if(typeof match === "number" && 64 === match)return 0;break;
           case 65:
            if(typeof match === "number" && 65 === match)return 0;break;
           case 66:
            if(typeof match === "number" && 66 === match)return 0;break;
           default:if(typeof match === "number" && 67 <= match)return 0}
        else
         switch(_ahg_)
          {case 0:if(typeof match === "number" && ! match)return 0;return -1;
           case 1:if(typeof match === "number" && 1 === match)return 0;break;
           case 2:if(typeof match === "number" && 2 === match)return 0;break;
           case 3:if(typeof match === "number" && 3 === match)return 0;break;
           case 4:if(typeof match === "number" && 4 === match)return 0;break;
           case 5:if(typeof match === "number" && 5 === match)return 0;break;
           case 6:if(typeof match === "number" && 6 === match)return 0;break;
           case 7:if(typeof match === "number" && 7 === match)return 0;break;
           case 8:if(typeof match === "number" && 8 === match)return 0;break;
           case 9:if(typeof match === "number" && 9 === match)return 0;break;
           case 10:
            if(typeof match === "number" && 10 === match)return 0;break;
           case 11:
            if(typeof match === "number" && 11 === match)return 0;break;
           case 12:
            if(typeof match === "number" && 12 === match)return 0;break;
           case 13:
            if(typeof match === "number" && 13 === match)return 0;break;
           case 14:
            if(typeof match === "number" && 14 === match)return 0;break;
           case 15:
            if(typeof match === "number" && 15 === match)return 0;break;
           case 16:
            if(typeof match === "number" && 16 === match)return 0;break;
           case 17:
            if(typeof match === "number" && 17 === match)return 0;break;
           case 18:
            if(typeof match === "number" && 18 === match)return 0;break;
           case 19:
            if(typeof match === "number" && 19 === match)return 0;break;
           case 20:
            if(typeof match === "number" && 20 === match)return 0;break;
           case 21:
            if(typeof match === "number" && 21 === match)return 0;break;
           case 22:
            if(typeof match === "number" && 22 === match)return 0;break;
           case 23:
            if(typeof match === "number" && 23 === match)return 0;break;
           case 24:
            if(typeof match === "number" && 24 === match)return 0;break;
           case 25:
            if(typeof match === "number" && 25 === match)return 0;break;
           case 26:
            if(typeof match === "number" && 26 === match)return 0;break;
           case 27:
            if(typeof match === "number" && 27 === match)return 0;break;
           case 28:
            if(typeof match === "number" && 28 === match)return 0;break;
           case 29:
            if(typeof match === "number" && 29 === match)return 0;break;
           case 30:
            if(typeof match === "number" && 30 === match)return 0;break;
           case 31:
            if(typeof match === "number" && 31 === match)return 0;break;
           case 32:
            if(typeof match === "number" && 32 === match)return 0;break;
           default:if(typeof match === "number" && 33 === match)return 0}}
      else
       if(typeof match !== "number")
        {var b_006=match[1],a_005=a_003[1];
         return caml_call2(_eo_,a_005,b_006)}
      if(typeof match === "number" && ! match)return 1;
      if(typeof a_003 === "number" && 1 === a_003)return -1;
      if(typeof match === "number" && 1 === match)return 1;
      if(typeof a_003 === "number" && 2 === a_003)return -1;
      if(typeof match === "number" && 2 === match)return 1;
      if(typeof a_003 === "number" && 3 === a_003)return -1;
      if(typeof match === "number" && 3 === match)return 1;
      if(typeof a_003 === "number" && 4 === a_003)return -1;
      if(typeof match === "number" && 4 === match)return 1;
      if(typeof a_003 === "number" && 5 === a_003)return -1;
      if(typeof match === "number" && 5 === match)return 1;
      if(typeof a_003 === "number" && 6 === a_003)return -1;
      if(typeof match === "number" && 6 === match)return 1;
      if(typeof a_003 === "number" && 7 === a_003)return -1;
      if(typeof match === "number" && 7 === match)return 1;
      if(typeof a_003 === "number" && 8 === a_003)return -1;
      if(typeof match === "number" && 8 === match)return 1;
      if(typeof a_003 === "number" && 9 === a_003)return -1;
      if(typeof match === "number" && 9 === match)return 1;
      if(typeof a_003 === "number" && 10 === a_003)return -1;
      if(typeof match === "number" && 10 === match)return 1;
      if(typeof a_003 === "number" && 11 === a_003)return -1;
      if(typeof match === "number" && 11 === match)return 1;
      if(typeof a_003 === "number" && 12 === a_003)return -1;
      if(typeof match === "number" && 12 === match)return 1;
      if(typeof a_003 === "number" && 13 === a_003)return -1;
      if(typeof match === "number" && 13 === match)return 1;
      if(typeof a_003 === "number" && 14 === a_003)return -1;
      if(typeof match === "number" && 14 === match)return 1;
      if(typeof a_003 === "number" && 15 === a_003)return -1;
      if(typeof match === "number" && 15 === match)return 1;
      if(typeof a_003 === "number" && 16 === a_003)return -1;
      if(typeof match === "number" && 16 === match)return 1;
      if(typeof a_003 === "number" && 17 === a_003)return -1;
      if(typeof match === "number" && 17 === match)return 1;
      if(typeof a_003 === "number" && 18 === a_003)return -1;
      if(typeof match === "number" && 18 === match)return 1;
      if(typeof a_003 === "number" && 19 === a_003)return -1;
      if(typeof match === "number" && 19 === match)return 1;
      if(typeof a_003 === "number" && 20 === a_003)return -1;
      if(typeof match === "number" && 20 === match)return 1;
      if(typeof a_003 === "number" && 21 === a_003)return -1;
      if(typeof match === "number" && 21 === match)return 1;
      if(typeof a_003 === "number" && 22 === a_003)return -1;
      if(typeof match === "number" && 22 === match)return 1;
      if(typeof a_003 === "number" && 23 === a_003)return -1;
      if(typeof match === "number" && 23 === match)return 1;
      if(typeof a_003 === "number" && 24 === a_003)return -1;
      if(typeof match === "number" && 24 === match)return 1;
      if(typeof a_003 === "number" && 25 === a_003)return -1;
      if(typeof match === "number" && 25 === match)return 1;
      if(typeof a_003 === "number" && 26 === a_003)return -1;
      if(typeof match === "number" && 26 === match)return 1;
      if(typeof a_003 === "number" && 27 === a_003)return -1;
      if(typeof match === "number" && 27 === match)return 1;
      if(typeof a_003 === "number" && 28 === a_003)return -1;
      if(typeof match === "number" && 28 === match)return 1;
      if(typeof a_003 === "number" && 29 === a_003)return -1;
      if(typeof match === "number" && 29 === match)return 1;
      if(typeof a_003 === "number" && 30 === a_003)return -1;
      if(typeof match === "number" && 30 === match)return 1;
      if(typeof a_003 === "number" && 31 === a_003)return -1;
      if(typeof match === "number" && 31 === match)return 1;
      if(typeof a_003 === "number" && 32 === a_003)return -1;
      if(typeof match === "number" && 32 === match)return 1;
      if(typeof a_003 === "number" && 33 === a_003)return -1;
      if(typeof match === "number" && 33 === match)return 1;
      if(typeof a_003 === "number" && 34 === a_003)return -1;
      if(typeof match === "number" && 34 === match)return 1;
      if(typeof a_003 === "number" && 35 === a_003)return -1;
      if(typeof match === "number" && 35 === match)return 1;
      if(typeof a_003 === "number" && 36 === a_003)return -1;
      if(typeof match === "number" && 36 === match)return 1;
      if(typeof a_003 === "number" && 37 === a_003)return -1;
      if(typeof match === "number" && 37 === match)return 1;
      if(typeof a_003 === "number" && 38 === a_003)return -1;
      if(typeof match === "number" && 38 === match)return 1;
      if(typeof a_003 === "number" && 39 === a_003)return -1;
      if(typeof match === "number" && 39 === match)return 1;
      if(typeof a_003 === "number" && 40 === a_003)return -1;
      if(typeof match === "number" && 40 === match)return 1;
      if(typeof a_003 === "number" && 41 === a_003)return -1;
      if(typeof match === "number" && 41 === match)return 1;
      if(typeof a_003 === "number" && 42 === a_003)return -1;
      if(typeof match === "number" && 42 === match)return 1;
      if(typeof a_003 === "number" && 43 === a_003)return -1;
      if(typeof match === "number" && 43 === match)return 1;
      if(typeof a_003 === "number" && 44 === a_003)return -1;
      if(typeof match === "number" && 44 === match)return 1;
      if(typeof a_003 === "number" && 45 === a_003)return -1;
      if(typeof match === "number" && 45 === match)return 1;
      if(typeof a_003 === "number" && 46 === a_003)return -1;
      if(typeof match === "number" && 46 === match)return 1;
      if(typeof a_003 === "number" && 47 === a_003)return -1;
      if(typeof match === "number" && 47 === match)return 1;
      if(typeof a_003 === "number" && 48 === a_003)return -1;
      if(typeof match === "number" && 48 === match)return 1;
      if(typeof a_003 === "number" && 49 === a_003)return -1;
      if(typeof match === "number" && 49 === match)return 1;
      if(typeof a_003 === "number" && 50 === a_003)return -1;
      if(typeof match === "number" && 50 === match)return 1;
      if(typeof a_003 === "number" && 51 === a_003)return -1;
      if(typeof match === "number" && 51 === match)return 1;
      if(typeof a_003 === "number" && 52 === a_003)return -1;
      if(typeof match === "number" && 52 === match)return 1;
      if(typeof a_003 === "number" && 53 === a_003)return -1;
      if(typeof match === "number" && 53 === match)return 1;
      if(typeof a_003 === "number" && 54 === a_003)return -1;
      if(typeof match === "number" && 54 === match)return 1;
      if(typeof a_003 === "number" && 55 === a_003)return -1;
      if(typeof match === "number" && 55 === match)return 1;
      if(typeof a_003 === "number" && 56 === a_003)return -1;
      if(typeof match === "number" && 56 === match)return 1;
      if(typeof a_003 === "number" && 57 === a_003)return -1;
      if(typeof match === "number" && 57 === match)return 1;
      if(typeof a_003 === "number" && 58 === a_003)return -1;
      if(typeof match === "number" && 58 === match)return 1;
      if(typeof a_003 === "number" && 59 === a_003)return -1;
      if(typeof match === "number" && 59 === match)return 1;
      if(typeof a_003 === "number" && 60 === a_003)return -1;
      if(typeof match === "number" && 60 === match)return 1;
      if(typeof a_003 === "number" && 61 === a_003)return -1;
      if(typeof match === "number" && 61 === match)return 1;
      if(typeof a_003 === "number" && 62 === a_003)return -1;
      if(typeof match === "number" && 62 === match)return 1;
      if(typeof a_003 === "number" && 63 === a_003)return -1;
      if(typeof match === "number" && 63 === match)return 1;
      if(typeof a_003 === "number" && 64 === a_003)return -1;
      if(typeof match === "number" && 64 === match)return 1;
      if(typeof a_003 === "number" && 65 === a_003)return -1;
      if(typeof match === "number" && 65 === match)return 1;
      if(typeof a_003 === "number" && 66 === a_003)return -1;
      if(typeof match === "number" && 66 === match)return 1;
      if(typeof a_003 === "number" && 67 <= a_003)return -1;
      return 1}
    function t_of_sexp$8(sexp)
     {if(0 === sexp[0])
       {var
         _agI_=sexp[1],
         _agJ_=caml_string_compare(_agI_,cst_e2BIG$1),
         switch$0=0;
        if(0 <= _agJ_)
         if(0 < _agJ_)
          {var _agK_=caml_string_compare(_agI_,cst_eNFILE$1);
           if(0 <= _agK_)
            if(0 < _agK_)
             {var _agL_=caml_string_compare(_agI_,cst_eOVERFLOW$1);
              if(0 <= _agL_)
               if(0 < _agL_)
                {var _agM_=caml_string_compare(_agI_,cst_eSOCKTNOSUPPORT$1);
                 if(0 <= _agM_)
                  if(0 < _agM_)
                   if(caml_string_notequal(_agI_,cst_eSPIPE$1))
                    if(caml_string_notequal(_agI_,cst_eSRCH$1))
                     if(caml_string_notequal(_agI_,cst_eTIMEDOUT$1))
                      if(caml_string_notequal(_agI_,cst_eTOOMANYREFS$1))
                       if(caml_string_notequal(_agI_,cst_eUNKNOWNERR$1))
                        if(caml_string_notequal(_agI_,cst_eWOULDBLOCK$1))
                         {if(! caml_string_notequal(_agI_,cst_eXDEV$1))switch$0 = 37}
                        else
                         switch$0 = 38;
                       else
                        switch$0 = 69;
                      else
                       switch$0 = 62;
                     else
                      switch$0 = 63;
                    else
                     switch$0 = 36;
                   else
                    switch$0 = 35;
                  else
                   switch$0 = 47;
                 else
                  if(caml_string_notequal(_agI_,cst_ePERM$1))
                   if(caml_string_notequal(_agI_,cst_ePFNOSUPPORT$1))
                    if(caml_string_notequal(_agI_,cst_ePIPE$1))
                     if(caml_string_notequal(_agI_,cst_ePROTONOSUPPORT$1))
                      if(caml_string_notequal(_agI_,cst_ePROTOTYPE$1))
                       if(caml_string_notequal(_agI_,cst_eRANGE$1))
                        if(caml_string_notequal(_agI_,cst_eROFS$1))
                         {if(! caml_string_notequal(_agI_,cst_eSHUTDOWN$1))
                           switch$0 = 61}
                        else
                         switch$0 = 34;
                       else
                        switch$0 = 33;
                      else
                       switch$0 = 44;
                     else
                      switch$0 = 46;
                    else
                     switch$0 = 32;
                   else
                    switch$0 = 49;
                  else
                   switch$0 = 31}
               else
                switch$0 = 68;
              else
               {var _agN_=caml_string_compare(_agI_,cst_eNOSYS$1);
                if(0 <= _agN_)
                 if(0 < _agN_)
                  if(caml_string_notequal(_agI_,cst_eNOTCONN$1))
                   if(caml_string_notequal(_agI_,cst_eNOTDIR$1))
                    if(caml_string_notequal(_agI_,cst_eNOTEMPTY$1))
                     if(caml_string_notequal(_agI_,cst_eNOTSOCK$1))
                      if(caml_string_notequal(_agI_,cst_eNOTTY$1))
                       if(caml_string_notequal(_agI_,cst_eNXIO$1))
                        {if(! caml_string_notequal(_agI_,cst_eOPNOTSUPP$1))
                          switch$0 = 48}
                       else
                        switch$0 = 30;
                      else
                       switch$0 = 29;
                     else
                      switch$0 = 41;
                    else
                     switch$0 = 28;
                   else
                    switch$0 = 27;
                  else
                   switch$0 = 60;
                 else
                  switch$0 = 26;
                else
                 if(caml_string_notequal(_agI_,cst_eNOBUFS$1))
                  if(caml_string_notequal(_agI_,cst_eNODEV$1))
                   if(caml_string_notequal(_agI_,cst_eNOENT$1))
                    if(caml_string_notequal(_agI_,cst_eNOEXEC$1))
                     if(caml_string_notequal(_agI_,cst_eNOLCK$1))
                      if(caml_string_notequal(_agI_,cst_eNOMEM$1))
                       if(caml_string_notequal(_agI_,cst_eNOPROTOOPT$1))
                        {if(! caml_string_notequal(_agI_,cst_eNOSPC$1))switch$0 = 25}
                       else
                        switch$0 = 45;
                      else
                       switch$0 = 24;
                     else
                      switch$0 = 23;
                    else
                     switch$0 = 22;
                   else
                    switch$0 = 21;
                  else
                   switch$0 = 20;
                 else
                  switch$0 = 58}}
            else
             switch$0 = 19;
           else
            {var _agO_=caml_string_compare(_agI_,cst_eFBIG$1);
             if(0 <= _agO_)
              if(0 < _agO_)
               {var _agP_=caml_string_compare(_agI_,cst_eLOOP$1);
                if(0 <= _agP_)
                 if(0 < _agP_)
                  if(caml_string_notequal(_agI_,cst_eMFILE$1))
                   if(caml_string_notequal(_agI_,cst_eMLINK$1))
                    if(caml_string_notequal(_agI_,cst_eMSGSIZE$1))
                     if(caml_string_notequal(_agI_,cst_eNAMETOOLONG$1))
                      if(caml_string_notequal(_agI_,cst_eNETDOWN$1))
                       if(caml_string_notequal(_agI_,cst_eNETRESET$1))
                        {if(! caml_string_notequal(_agI_,cst_eNETUNREACH$1))
                          switch$0 = 54}
                       else
                        switch$0 = 55;
                      else
                       switch$0 = 53;
                     else
                      switch$0 = 18;
                    else
                     switch$0 = 43;
                   else
                    switch$0 = 17;
                  else
                   switch$0 = 16;
                 else
                  switch$0 = 67;
                else
                 if(caml_string_notequal(_agI_,cst_eHOSTDOWN$1))
                  if(caml_string_notequal(_agI_,cst_eHOSTUNREACH$1))
                   if(caml_string_notequal(_agI_,cst_eINPROGRESS$1))
                    if(caml_string_notequal(_agI_,cst_eINTR$1))
                     if(caml_string_notequal(_agI_,cst_eINVAL$1))
                      if(caml_string_notequal(_agI_,cst_eIO$1))
                       if(caml_string_notequal(_agI_,cst_eISCONN$1))
                        {if(! caml_string_notequal(_agI_,cst_eISDIR$1))switch$0 = 15}
                       else
                        switch$0 = 59;
                      else
                       switch$0 = 14;
                     else
                      switch$0 = 13;
                    else
                     switch$0 = 12;
                   else
                    switch$0 = 39;
                  else
                   switch$0 = 66;
                 else
                  switch$0 = 65}
              else
               switch$0 = 11;
             else
              {var _agQ_=caml_string_compare(_agI_,cst_eCHILD$1);
               if(0 <= _agQ_)
                if(0 < _agQ_)
                 if(caml_string_notequal(_agI_,cst_eCONNABORTED$1))
                  if(caml_string_notequal(_agI_,cst_eCONNREFUSED$1))
                   if(caml_string_notequal(_agI_,cst_eCONNRESET$1))
                    if(caml_string_notequal(_agI_,cst_eDEADLK$1))
                     if(caml_string_notequal(_agI_,cst_eDESTADDRREQ$1))
                      if(caml_string_notequal(_agI_,cst_eDOM$1))
                       if(caml_string_notequal(_agI_,cst_eEXIST$1))
                        {if(! caml_string_notequal(_agI_,cst_eFAULT$1))switch$0 = 10}
                       else
                        switch$0 = 9;
                      else
                       switch$0 = 8;
                     else
                      switch$0 = 42;
                    else
                     switch$0 = 7;
                   else
                    switch$0 = 57;
                  else
                   switch$0 = 64;
                 else
                  switch$0 = 56;
                else
                 switch$0 = 6;
               else
                if(caml_string_notequal(_agI_,cst_eACCES$1))
                 if(caml_string_notequal(_agI_,cst_eADDRINUSE$1))
                  if(caml_string_notequal(_agI_,cst_eADDRNOTAVAIL$1))
                   if(caml_string_notequal(_agI_,cst_eAFNOSUPPORT$1))
                    if(caml_string_notequal(_agI_,cst_eAGAIN$1))
                     if(caml_string_notequal(_agI_,cst_eALREADY$1))
                      if(caml_string_notequal(_agI_,cst_eBADF$1))
                       {if(! caml_string_notequal(_agI_,cst_eBUSY$1))switch$0 = 5}
                      else
                       switch$0 = 4;
                     else
                      switch$0 = 40;
                    else
                     switch$0 = 3;
                   else
                    switch$0 = 50;
                  else
                   switch$0 = 52;
                 else
                  switch$0 = 51;
                else
                 switch$0 = 2}}}
         else
          switch$0 = 1;
        else
         {var _agR_=caml_string_compare(_agI_,cst_ENETUNREACH$1);
          if(0 <= _agR_)
           if(0 < _agR_)
            {var _agS_=caml_string_compare(_agI_,cst_EOVERFLOW$1);
             if(0 <= _agS_)
              if(0 < _agS_)
               {var _agT_=caml_string_compare(_agI_,cst_ESOCKTNOSUPPORT$1);
                if(0 <= _agT_)
                 if(0 < _agT_)
                  if(caml_string_notequal(_agI_,cst_ESPIPE$1))
                   if(caml_string_notequal(_agI_,cst_ESRCH$1))
                    if(caml_string_notequal(_agI_,cst_ETIMEDOUT$1))
                     if(caml_string_notequal(_agI_,cst_ETOOMANYREFS$1))
                      if(caml_string_notequal(_agI_,cst_EUNKNOWNERR$1))
                       if(caml_string_notequal(_agI_,cst_EWOULDBLOCK$1))
                        {if(! caml_string_notequal(_agI_,cst_EXDEV$1))switch$0 = 37}
                       else
                        switch$0 = 38;
                      else
                       switch$0 = 69;
                     else
                      switch$0 = 62;
                    else
                     switch$0 = 63;
                   else
                    switch$0 = 36;
                  else
                   switch$0 = 35;
                 else
                  switch$0 = 47;
                else
                 if(caml_string_notequal(_agI_,cst_EPERM$1))
                  if(caml_string_notequal(_agI_,cst_EPFNOSUPPORT$1))
                   if(caml_string_notequal(_agI_,cst_EPIPE$1))
                    if(caml_string_notequal(_agI_,cst_EPROTONOSUPPORT$1))
                     if(caml_string_notequal(_agI_,cst_EPROTOTYPE$1))
                      if(caml_string_notequal(_agI_,cst_ERANGE$1))
                       if(caml_string_notequal(_agI_,cst_EROFS$1))
                        {if(! caml_string_notequal(_agI_,cst_ESHUTDOWN$1))
                          switch$0 = 61}
                       else
                        switch$0 = 34;
                      else
                       switch$0 = 33;
                     else
                      switch$0 = 44;
                    else
                     switch$0 = 46;
                   else
                    switch$0 = 32;
                  else
                   switch$0 = 49;
                 else
                  switch$0 = 31}
              else
               switch$0 = 68;
             else
              {var _agU_=caml_string_compare(_agI_,cst_ENOSPC$1);
               if(0 <= _agU_)
                if(0 < _agU_)
                 if(caml_string_notequal(_agI_,cst_ENOSYS$1))
                  if(caml_string_notequal(_agI_,cst_ENOTCONN$1))
                   if(caml_string_notequal(_agI_,cst_ENOTDIR$1))
                    if(caml_string_notequal(_agI_,cst_ENOTEMPTY$1))
                     if(caml_string_notequal(_agI_,cst_ENOTSOCK$1))
                      if(caml_string_notequal(_agI_,cst_ENOTTY$1))
                       if(caml_string_notequal(_agI_,cst_ENXIO$1))
                        {if(! caml_string_notequal(_agI_,cst_EOPNOTSUPP$1))
                          switch$0 = 48}
                       else
                        switch$0 = 30;
                      else
                       switch$0 = 29;
                     else
                      switch$0 = 41;
                    else
                     switch$0 = 28;
                   else
                    switch$0 = 27;
                  else
                   switch$0 = 60;
                 else
                  switch$0 = 26;
                else
                 switch$0 = 25;
               else
                if(caml_string_notequal(_agI_,cst_ENFILE$1))
                 if(caml_string_notequal(_agI_,cst_ENOBUFS$1))
                  if(caml_string_notequal(_agI_,cst_ENODEV$1))
                   if(caml_string_notequal(_agI_,cst_ENOENT$1))
                    if(caml_string_notequal(_agI_,cst_ENOEXEC$1))
                     if(caml_string_notequal(_agI_,cst_ENOLCK$1))
                      if(caml_string_notequal(_agI_,cst_ENOMEM$1))
                       {if(! caml_string_notequal(_agI_,cst_ENOPROTOOPT$1))
                         switch$0 = 45}
                      else
                       switch$0 = 24;
                     else
                      switch$0 = 23;
                    else
                     switch$0 = 22;
                   else
                    switch$0 = 21;
                  else
                   switch$0 = 20;
                 else
                  switch$0 = 58;
                else
                 switch$0 = 19}}
           else
            switch$0 = 54;
          else
           {var _agV_=caml_string_compare(_agI_,cst_EFAULT$1);
            if(0 <= _agV_)
             if(0 < _agV_)
              {var _agW_=caml_string_compare(_agI_,cst_EISDIR$1);
               if(0 <= _agW_)
                if(0 < _agW_)
                 if(caml_string_notequal(_agI_,cst_ELOOP$1))
                  if(caml_string_notequal(_agI_,cst_EMFILE$1))
                   if(caml_string_notequal(_agI_,cst_EMLINK$1))
                    if(caml_string_notequal(_agI_,cst_EMSGSIZE$1))
                     if(caml_string_notequal(_agI_,cst_ENAMETOOLONG$1))
                      if(caml_string_notequal(_agI_,cst_ENETDOWN$1))
                       {if(! caml_string_notequal(_agI_,cst_ENETRESET$1))
                         switch$0 = 55}
                      else
                       switch$0 = 53;
                     else
                      switch$0 = 18;
                    else
                     switch$0 = 43;
                   else
                    switch$0 = 17;
                  else
                   switch$0 = 16;
                 else
                  switch$0 = 67;
                else
                 switch$0 = 15;
               else
                if(caml_string_notequal(_agI_,cst_EFBIG$1))
                 if(caml_string_notequal(_agI_,cst_EHOSTDOWN$1))
                  if(caml_string_notequal(_agI_,cst_EHOSTUNREACH$1))
                   if(caml_string_notequal(_agI_,cst_EINPROGRESS$1))
                    if(caml_string_notequal(_agI_,cst_EINTR$1))
                     if(caml_string_notequal(_agI_,cst_EINVAL$1))
                      if(caml_string_notequal(_agI_,cst_EIO$1))
                       {if(! caml_string_notequal(_agI_,cst_EISCONN$1))
                         switch$0 = 59}
                      else
                       switch$0 = 14;
                     else
                      switch$0 = 13;
                    else
                     switch$0 = 12;
                   else
                    switch$0 = 39;
                  else
                   switch$0 = 66;
                 else
                  switch$0 = 65;
                else
                 switch$0 = 11}
             else
              switch$0 = 10;
            else
             {var _agX_=caml_string_compare(_agI_,cst_EBUSY$1);
              if(0 <= _agX_)
               if(0 < _agX_)
                if(caml_string_notequal(_agI_,cst_ECHILD$1))
                 if(caml_string_notequal(_agI_,cst_ECONNABORTED$1))
                  if(caml_string_notequal(_agI_,cst_ECONNREFUSED$1))
                   if(caml_string_notequal(_agI_,cst_ECONNRESET$1))
                    if(caml_string_notequal(_agI_,cst_EDEADLK$1))
                     if(caml_string_notequal(_agI_,cst_EDESTADDRREQ$1))
                      if(caml_string_notequal(_agI_,cst_EDOM$1))
                       {if(! caml_string_notequal(_agI_,cst_EEXIST$1))switch$0 = 9}
                      else
                       switch$0 = 8;
                     else
                      switch$0 = 42;
                    else
                     switch$0 = 7;
                   else
                    switch$0 = 57;
                  else
                   switch$0 = 64;
                 else
                  switch$0 = 56;
                else
                 switch$0 = 6;
               else
                switch$0 = 5;
              else
               if(caml_string_notequal(_agI_,cst_E2BIG$1))
                if(caml_string_notequal(_agI_,cst_EACCES$1))
                 if(caml_string_notequal(_agI_,cst_EADDRINUSE$1))
                  if(caml_string_notequal(_agI_,cst_EADDRNOTAVAIL$1))
                   if(caml_string_notequal(_agI_,cst_EAFNOSUPPORT$1))
                    if(caml_string_notequal(_agI_,cst_EAGAIN$1))
                     if(caml_string_notequal(_agI_,cst_EALREADY$1))
                      {if(! caml_string_notequal(_agI_,cst_EBADF$1))switch$0 = 4}
                     else
                      switch$0 = 40;
                    else
                     switch$0 = 3;
                   else
                    switch$0 = 50;
                  else
                   switch$0 = 52;
                 else
                  switch$0 = 51;
                else
                 switch$0 = 2;
               else
                switch$0 = 1}}}
        var _ahe_=switch$0;
        if(35 <= _ahe_)
         switch(_ahe_)
          {case 35:return 34;
           case 36:return 35;
           case 37:return 36;
           case 38:return 37;
           case 39:return 38;
           case 40:return 39;
           case 41:return 40;
           case 42:return 41;
           case 43:return 42;
           case 44:return 43;
           case 45:return 44;
           case 46:return 45;
           case 47:return 46;
           case 48:return 47;
           case 49:return 48;
           case 50:return 49;
           case 51:return 50;
           case 52:return 51;
           case 53:return 52;
           case 54:return 53;
           case 55:return 54;
           case 56:return 55;
           case 57:return 56;
           case 58:return 57;
           case 59:return 58;
           case 60:return 59;
           case 61:return 60;
           case 62:return 61;
           case 63:return 62;
           case 64:return 63;
           case 65:return 64;
           case 66:return 65;
           case 67:return 66;
           case 68:return 67;
           default:
            return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$13,sexp)}
        switch(_ahe_)
         {case 1:return 0;
          case 2:return 1;
          case 3:return 2;
          case 4:return 3;
          case 5:return 4;
          case 6:return 5;
          case 7:return 6;
          case 8:return 7;
          case 9:return 8;
          case 10:return 9;
          case 11:return 10;
          case 12:return 11;
          case 13:return 12;
          case 14:return 13;
          case 15:return 14;
          case 16:return 15;
          case 17:return 16;
          case 18:return 17;
          case 19:return 18;
          case 20:return 19;
          case 21:return 20;
          case 22:return 21;
          case 23:return 22;
          case 24:return 23;
          case 25:return 24;
          case 26:return 25;
          case 27:return 26;
          case 28:return 27;
          case 29:return 28;
          case 30:return 29;
          case 31:return 30;
          case 32:return 31;
          case 33:return 32;
          case 34:return 33
          }}
      else
       {var _agY_=sexp[1];
        if(! _agY_)
         return caml_call2(Sexplib0_Sexp_conv_error[7],tp_loc$13,sexp);
        var _agZ_=_agY_[1];
        if(0 !== _agZ_[0])
         return caml_call2(Sexplib0_Sexp_conv_error[6],tp_loc$13,sexp);
        var
         _ag0_=_agZ_[1],
         _ag1_=caml_string_compare(_ag0_,cst_e2BIG$2),
         switch$1=0;
        if(0 <= _ag1_)
         if(0 < _ag1_)
          {var _ag2_=caml_string_compare(_ag0_,cst_eNFILE$2);
           if(0 <= _ag2_)
            if(0 < _ag2_)
             {var _ag3_=caml_string_compare(_ag0_,cst_eOVERFLOW$2);
              if(0 <= _ag3_)
               if(0 < _ag3_)
                {var _ag4_=caml_string_compare(_ag0_,cst_eSOCKTNOSUPPORT$2);
                 if(0 <= _ag4_)
                  if(0 < _ag4_)
                   if(caml_string_notequal(_ag0_,cst_eSPIPE$2))
                    if(caml_string_notequal(_ag0_,cst_eSRCH$2))
                     if(caml_string_notequal(_ag0_,cst_eTIMEDOUT$2))
                      if(caml_string_notequal(_ag0_,cst_eTOOMANYREFS$2))
                       if(caml_string_notequal(_ag0_,cst_eUNKNOWNERR$2))
                        if(caml_string_notequal(_ag0_,cst_eWOULDBLOCK$2))
                         {if(! caml_string_notequal(_ag0_,cst_eXDEV$2))switch$1 = 38}
                        else
                         switch$1 = 39;
                       else
                        switch$1 = 1;
                      else
                       switch$1 = 63;
                     else
                      switch$1 = 64;
                    else
                     switch$1 = 37;
                   else
                    switch$1 = 36;
                  else
                   switch$1 = 48;
                 else
                  if(caml_string_notequal(_ag0_,cst_ePERM$2))
                   if(caml_string_notequal(_ag0_,cst_ePFNOSUPPORT$2))
                    if(caml_string_notequal(_ag0_,cst_ePIPE$2))
                     if(caml_string_notequal(_ag0_,cst_ePROTONOSUPPORT$2))
                      if(caml_string_notequal(_ag0_,cst_ePROTOTYPE$2))
                       if(caml_string_notequal(_ag0_,cst_eRANGE$2))
                        if(caml_string_notequal(_ag0_,cst_eROFS$2))
                         {if(! caml_string_notequal(_ag0_,cst_eSHUTDOWN$2))
                           switch$1 = 62}
                        else
                         switch$1 = 35;
                       else
                        switch$1 = 34;
                      else
                       switch$1 = 45;
                     else
                      switch$1 = 47;
                    else
                     switch$1 = 33;
                   else
                    switch$1 = 50;
                  else
                   switch$1 = 32}
               else
                switch$1 = 69;
              else
               {var _ag5_=caml_string_compare(_ag0_,cst_eNOSYS$2);
                if(0 <= _ag5_)
                 if(0 < _ag5_)
                  if(caml_string_notequal(_ag0_,cst_eNOTCONN$2))
                   if(caml_string_notequal(_ag0_,cst_eNOTDIR$2))
                    if(caml_string_notequal(_ag0_,cst_eNOTEMPTY$2))
                     if(caml_string_notequal(_ag0_,cst_eNOTSOCK$2))
                      if(caml_string_notequal(_ag0_,cst_eNOTTY$2))
                       if(caml_string_notequal(_ag0_,cst_eNXIO$2))
                        {if(! caml_string_notequal(_ag0_,cst_eOPNOTSUPP$2))
                          switch$1 = 49}
                       else
                        switch$1 = 31;
                      else
                       switch$1 = 30;
                     else
                      switch$1 = 42;
                    else
                     switch$1 = 29;
                   else
                    switch$1 = 28;
                  else
                   switch$1 = 61;
                 else
                  switch$1 = 27;
                else
                 if(caml_string_notequal(_ag0_,cst_eNOBUFS$2))
                  if(caml_string_notequal(_ag0_,cst_eNODEV$2))
                   if(caml_string_notequal(_ag0_,cst_eNOENT$2))
                    if(caml_string_notequal(_ag0_,cst_eNOEXEC$2))
                     if(caml_string_notequal(_ag0_,cst_eNOLCK$2))
                      if(caml_string_notequal(_ag0_,cst_eNOMEM$2))
                       if(caml_string_notequal(_ag0_,cst_eNOPROTOOPT$2))
                        {if(! caml_string_notequal(_ag0_,cst_eNOSPC$2))switch$1 = 26}
                       else
                        switch$1 = 46;
                      else
                       switch$1 = 25;
                     else
                      switch$1 = 24;
                    else
                     switch$1 = 23;
                   else
                    switch$1 = 22;
                  else
                   switch$1 = 21;
                 else
                  switch$1 = 59}}
            else
             switch$1 = 20;
           else
            {var _ag6_=caml_string_compare(_ag0_,cst_eFBIG$2);
             if(0 <= _ag6_)
              if(0 < _ag6_)
               {var _ag7_=caml_string_compare(_ag0_,cst_eLOOP$2);
                if(0 <= _ag7_)
                 if(0 < _ag7_)
                  if(caml_string_notequal(_ag0_,cst_eMFILE$2))
                   if(caml_string_notequal(_ag0_,cst_eMLINK$2))
                    if(caml_string_notequal(_ag0_,cst_eMSGSIZE$2))
                     if(caml_string_notequal(_ag0_,cst_eNAMETOOLONG$2))
                      if(caml_string_notequal(_ag0_,cst_eNETDOWN$2))
                       if(caml_string_notequal(_ag0_,cst_eNETRESET$2))
                        {if(! caml_string_notequal(_ag0_,cst_eNETUNREACH$2))
                          switch$1 = 55}
                       else
                        switch$1 = 56;
                      else
                       switch$1 = 54;
                     else
                      switch$1 = 19;
                    else
                     switch$1 = 44;
                   else
                    switch$1 = 18;
                  else
                   switch$1 = 17;
                 else
                  switch$1 = 68;
                else
                 if(caml_string_notequal(_ag0_,cst_eHOSTDOWN$2))
                  if(caml_string_notequal(_ag0_,cst_eHOSTUNREACH$2))
                   if(caml_string_notequal(_ag0_,cst_eINPROGRESS$2))
                    if(caml_string_notequal(_ag0_,cst_eINTR$2))
                     if(caml_string_notequal(_ag0_,cst_eINVAL$2))
                      if(caml_string_notequal(_ag0_,cst_eIO$2))
                       if(caml_string_notequal(_ag0_,cst_eISCONN$2))
                        {if(! caml_string_notequal(_ag0_,cst_eISDIR$2))switch$1 = 16}
                       else
                        switch$1 = 60;
                      else
                       switch$1 = 15;
                     else
                      switch$1 = 14;
                    else
                     switch$1 = 13;
                   else
                    switch$1 = 40;
                  else
                   switch$1 = 67;
                 else
                  switch$1 = 66}
              else
               switch$1 = 12;
             else
              {var _ag8_=caml_string_compare(_ag0_,cst_eCHILD$2);
               if(0 <= _ag8_)
                if(0 < _ag8_)
                 if(caml_string_notequal(_ag0_,cst_eCONNABORTED$2))
                  if(caml_string_notequal(_ag0_,cst_eCONNREFUSED$2))
                   if(caml_string_notequal(_ag0_,cst_eCONNRESET$2))
                    if(caml_string_notequal(_ag0_,cst_eDEADLK$2))
                     if(caml_string_notequal(_ag0_,cst_eDESTADDRREQ$2))
                      if(caml_string_notequal(_ag0_,cst_eDOM$2))
                       if(caml_string_notequal(_ag0_,cst_eEXIST$2))
                        {if(! caml_string_notequal(_ag0_,cst_eFAULT$2))switch$1 = 11}
                       else
                        switch$1 = 10;
                      else
                       switch$1 = 9;
                     else
                      switch$1 = 43;
                    else
                     switch$1 = 8;
                   else
                    switch$1 = 58;
                  else
                   switch$1 = 65;
                 else
                  switch$1 = 57;
                else
                 switch$1 = 7;
               else
                if(caml_string_notequal(_ag0_,cst_eACCES$2))
                 if(caml_string_notequal(_ag0_,cst_eADDRINUSE$2))
                  if(caml_string_notequal(_ag0_,cst_eADDRNOTAVAIL$2))
                   if(caml_string_notequal(_ag0_,cst_eAFNOSUPPORT$2))
                    if(caml_string_notequal(_ag0_,cst_eAGAIN$2))
                     if(caml_string_notequal(_ag0_,cst_eALREADY$2))
                      if(caml_string_notequal(_ag0_,cst_eBADF$2))
                       {if(! caml_string_notequal(_ag0_,cst_eBUSY$2))switch$1 = 6}
                      else
                       switch$1 = 5;
                     else
                      switch$1 = 41;
                    else
                     switch$1 = 4;
                   else
                    switch$1 = 51;
                  else
                   switch$1 = 53;
                 else
                  switch$1 = 52;
                else
                 switch$1 = 3}}}
         else
          switch$1 = 2;
        else
         {var _ag9_=caml_string_compare(_ag0_,cst_ENETUNREACH$2);
          if(0 <= _ag9_)
           if(0 < _ag9_)
            {var _ag__=caml_string_compare(_ag0_,cst_EOVERFLOW$2);
             if(0 <= _ag__)
              if(0 < _ag__)
               {var _ag$_=caml_string_compare(_ag0_,cst_ESOCKTNOSUPPORT$2);
                if(0 <= _ag$_)
                 if(0 < _ag$_)
                  if(caml_string_notequal(_ag0_,cst_ESPIPE$2))
                   if(caml_string_notequal(_ag0_,cst_ESRCH$2))
                    if(caml_string_notequal(_ag0_,cst_ETIMEDOUT$2))
                     if(caml_string_notequal(_ag0_,cst_ETOOMANYREFS$2))
                      if(caml_string_notequal(_ag0_,cst_EUNKNOWNERR$2))
                       if(caml_string_notequal(_ag0_,cst_EWOULDBLOCK$2))
                        {if(! caml_string_notequal(_ag0_,cst_EXDEV$2))switch$1 = 38}
                       else
                        switch$1 = 39;
                      else
                       switch$1 = 1;
                     else
                      switch$1 = 63;
                    else
                     switch$1 = 64;
                   else
                    switch$1 = 37;
                  else
                   switch$1 = 36;
                 else
                  switch$1 = 48;
                else
                 if(caml_string_notequal(_ag0_,cst_EPERM$2))
                  if(caml_string_notequal(_ag0_,cst_EPFNOSUPPORT$2))
                   if(caml_string_notequal(_ag0_,cst_EPIPE$2))
                    if(caml_string_notequal(_ag0_,cst_EPROTONOSUPPORT$2))
                     if(caml_string_notequal(_ag0_,cst_EPROTOTYPE$2))
                      if(caml_string_notequal(_ag0_,cst_ERANGE$2))
                       if(caml_string_notequal(_ag0_,cst_EROFS$2))
                        {if(! caml_string_notequal(_ag0_,cst_ESHUTDOWN$2))
                          switch$1 = 62}
                       else
                        switch$1 = 35;
                      else
                       switch$1 = 34;
                     else
                      switch$1 = 45;
                    else
                     switch$1 = 47;
                   else
                    switch$1 = 33;
                  else
                   switch$1 = 50;
                 else
                  switch$1 = 32}
              else
               switch$1 = 69;
             else
              {var _aha_=caml_string_compare(_ag0_,cst_ENOSPC$2);
               if(0 <= _aha_)
                if(0 < _aha_)
                 if(caml_string_notequal(_ag0_,cst_ENOSYS$2))
                  if(caml_string_notequal(_ag0_,cst_ENOTCONN$2))
                   if(caml_string_notequal(_ag0_,cst_ENOTDIR$2))
                    if(caml_string_notequal(_ag0_,cst_ENOTEMPTY$2))
                     if(caml_string_notequal(_ag0_,cst_ENOTSOCK$2))
                      if(caml_string_notequal(_ag0_,cst_ENOTTY$2))
                       if(caml_string_notequal(_ag0_,cst_ENXIO$2))
                        {if(! caml_string_notequal(_ag0_,cst_EOPNOTSUPP$2))
                          switch$1 = 49}
                       else
                        switch$1 = 31;
                      else
                       switch$1 = 30;
                     else
                      switch$1 = 42;
                    else
                     switch$1 = 29;
                   else
                    switch$1 = 28;
                  else
                   switch$1 = 61;
                 else
                  switch$1 = 27;
                else
                 switch$1 = 26;
               else
                if(caml_string_notequal(_ag0_,cst_ENFILE$2))
                 if(caml_string_notequal(_ag0_,cst_ENOBUFS$2))
                  if(caml_string_notequal(_ag0_,cst_ENODEV$2))
                   if(caml_string_notequal(_ag0_,cst_ENOENT$2))
                    if(caml_string_notequal(_ag0_,cst_ENOEXEC$2))
                     if(caml_string_notequal(_ag0_,cst_ENOLCK$2))
                      if(caml_string_notequal(_ag0_,cst_ENOMEM$2))
                       {if(! caml_string_notequal(_ag0_,cst_ENOPROTOOPT$2))
                         switch$1 = 46}
                      else
                       switch$1 = 25;
                     else
                      switch$1 = 24;
                    else
                     switch$1 = 23;
                   else
                    switch$1 = 22;
                  else
                   switch$1 = 21;
                 else
                  switch$1 = 59;
                else
                 switch$1 = 20}}
           else
            switch$1 = 55;
          else
           {var _ahb_=caml_string_compare(_ag0_,cst_EFAULT$2);
            if(0 <= _ahb_)
             if(0 < _ahb_)
              {var _ahc_=caml_string_compare(_ag0_,cst_EISDIR$2);
               if(0 <= _ahc_)
                if(0 < _ahc_)
                 if(caml_string_notequal(_ag0_,cst_ELOOP$2))
                  if(caml_string_notequal(_ag0_,cst_EMFILE$2))
                   if(caml_string_notequal(_ag0_,cst_EMLINK$2))
                    if(caml_string_notequal(_ag0_,cst_EMSGSIZE$2))
                     if(caml_string_notequal(_ag0_,cst_ENAMETOOLONG$2))
                      if(caml_string_notequal(_ag0_,cst_ENETDOWN$2))
                       {if(! caml_string_notequal(_ag0_,cst_ENETRESET$2))
                         switch$1 = 56}
                      else
                       switch$1 = 54;
                     else
                      switch$1 = 19;
                    else
                     switch$1 = 44;
                   else
                    switch$1 = 18;
                  else
                   switch$1 = 17;
                 else
                  switch$1 = 68;
                else
                 switch$1 = 16;
               else
                if(caml_string_notequal(_ag0_,cst_EFBIG$2))
                 if(caml_string_notequal(_ag0_,cst_EHOSTDOWN$2))
                  if(caml_string_notequal(_ag0_,cst_EHOSTUNREACH$2))
                   if(caml_string_notequal(_ag0_,cst_EINPROGRESS$2))
                    if(caml_string_notequal(_ag0_,cst_EINTR$2))
                     if(caml_string_notequal(_ag0_,cst_EINVAL$2))
                      if(caml_string_notequal(_ag0_,cst_EIO$2))
                       {if(! caml_string_notequal(_ag0_,cst_EISCONN$2))
                         switch$1 = 60}
                      else
                       switch$1 = 15;
                     else
                      switch$1 = 14;
                    else
                     switch$1 = 13;
                   else
                    switch$1 = 40;
                  else
                   switch$1 = 67;
                 else
                  switch$1 = 66;
                else
                 switch$1 = 12}
             else
              switch$1 = 11;
            else
             {var _ahd_=caml_string_compare(_ag0_,cst_EBUSY$2);
              if(0 <= _ahd_)
               if(0 < _ahd_)
                if(caml_string_notequal(_ag0_,cst_ECHILD$2))
                 if(caml_string_notequal(_ag0_,cst_ECONNABORTED$2))
                  if(caml_string_notequal(_ag0_,cst_ECONNREFUSED$2))
                   if(caml_string_notequal(_ag0_,cst_ECONNRESET$2))
                    if(caml_string_notequal(_ag0_,cst_EDEADLK$2))
                     if(caml_string_notequal(_ag0_,cst_EDESTADDRREQ$2))
                      if(caml_string_notequal(_ag0_,cst_EDOM$2))
                       {if(! caml_string_notequal(_ag0_,cst_EEXIST$2))switch$1 = 10}
                      else
                       switch$1 = 9;
                     else
                      switch$1 = 43;
                    else
                     switch$1 = 8;
                   else
                    switch$1 = 58;
                  else
                   switch$1 = 65;
                 else
                  switch$1 = 57;
                else
                 switch$1 = 7;
               else
                switch$1 = 6;
              else
               if(caml_string_notequal(_ag0_,cst_E2BIG$2))
                if(caml_string_notequal(_ag0_,cst_EACCES$2))
                 if(caml_string_notequal(_ag0_,cst_EADDRINUSE$2))
                  if(caml_string_notequal(_ag0_,cst_EADDRNOTAVAIL$2))
                   if(caml_string_notequal(_ag0_,cst_EAFNOSUPPORT$2))
                    if(caml_string_notequal(_ag0_,cst_EAGAIN$2))
                     if(caml_string_notequal(_ag0_,cst_EALREADY$2))
                      {if(! caml_string_notequal(_ag0_,cst_EBADF$2))switch$1 = 5}
                     else
                      switch$1 = 41;
                    else
                     switch$1 = 4;
                   else
                    switch$1 = 51;
                  else
                   switch$1 = 53;
                 else
                  switch$1 = 52;
                else
                 switch$1 = 3;
               else
                switch$1 = 2}}}
        var _ahf_=switch$1;
        if(35 <= _ahf_)
         switch(_ahf_)
          {case 35:
            return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$13,sexp);
           case 36:
            return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$13,sexp);
           case 37:
            return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$13,sexp);
           case 38:
            return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$13,sexp);
           case 39:
            return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$13,sexp);
           case 40:
            return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$13,sexp);
           case 41:
            return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$13,sexp);
           case 42:
            return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$13,sexp);
           case 43:
            return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$13,sexp);
           case 44:
            return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$13,sexp);
           case 45:
            return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$13,sexp);
           case 46:
            return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$13,sexp);
           case 47:
            return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$13,sexp);
           case 48:
            return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$13,sexp);
           case 49:
            return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$13,sexp);
           case 50:
            return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$13,sexp);
           case 51:
            return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$13,sexp);
           case 52:
            return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$13,sexp);
           case 53:
            return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$13,sexp);
           case 54:
            return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$13,sexp);
           case 55:
            return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$13,sexp);
           case 56:
            return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$13,sexp);
           case 57:
            return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$13,sexp);
           case 58:
            return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$13,sexp);
           case 59:
            return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$13,sexp);
           case 60:
            return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$13,sexp);
           case 61:
            return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$13,sexp);
           case 62:
            return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$13,sexp);
           case 63:
            return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$13,sexp);
           case 64:
            return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$13,sexp);
           case 65:
            return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$13,sexp);
           case 66:
            return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$13,sexp);
           case 67:
            return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$13,sexp);
           case 68:
            return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$13,sexp);
           default:
            return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$13,sexp)}
        switch(_ahf_)
         {case 1:
           var sexp_args=_agY_[2];
           if(sexp_args && ! sexp_args[2])
            {var v0=sexp_args[1],v0$0=caml_call1(file_perm_of_sexp,v0);
             return [0,v0$0]}
           return caml_call3(Sexplib0_Sexp_conv_error[4],tp_loc$13,_ag0_,sexp);
          case 2:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$13,sexp);
          case 3:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$13,sexp);
          case 4:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$13,sexp);
          case 5:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$13,sexp);
          case 6:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$13,sexp);
          case 7:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$13,sexp);
          case 8:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$13,sexp);
          case 9:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$13,sexp);
          case 10:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$13,sexp);
          case 11:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$13,sexp);
          case 12:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$13,sexp);
          case 13:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$13,sexp);
          case 14:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$13,sexp);
          case 15:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$13,sexp);
          case 16:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$13,sexp);
          case 17:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$13,sexp);
          case 18:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$13,sexp);
          case 19:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$13,sexp);
          case 20:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$13,sexp);
          case 21:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$13,sexp);
          case 22:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$13,sexp);
          case 23:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$13,sexp);
          case 24:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$13,sexp);
          case 25:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$13,sexp);
          case 26:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$13,sexp);
          case 27:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$13,sexp);
          case 28:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$13,sexp);
          case 29:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$13,sexp);
          case 30:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$13,sexp);
          case 31:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$13,sexp);
          case 32:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$13,sexp);
          case 33:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$13,sexp);
          case 34:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$13,sexp)
          }}
      return caml_call2(Sexplib0_Sexp_conv_error[8],tp_loc$13,sexp)}
    function sexp_of_t$11(param)
     {if(typeof param === "number")
       {var _agH_=param;
        if(34 <= _agH_)
         switch(_agH_)
          {case 34:return _nt_;
           case 35:return _nu_;
           case 36:return _nv_;
           case 37:return _nw_;
           case 38:return _nx_;
           case 39:return _ny_;
           case 40:return _nz_;
           case 41:return _nA_;
           case 42:return _nB_;
           case 43:return _nC_;
           case 44:return _nD_;
           case 45:return _nE_;
           case 46:return _nF_;
           case 47:return _nG_;
           case 48:return _nH_;
           case 49:return _nI_;
           case 50:return _nJ_;
           case 51:return _nK_;
           case 52:return _nL_;
           case 53:return _nM_;
           case 54:return _nN_;
           case 55:return _nO_;
           case 56:return _nP_;
           case 57:return _nQ_;
           case 58:return _nR_;
           case 59:return _nS_;
           case 60:return _nT_;
           case 61:return _nU_;
           case 62:return _nV_;
           case 63:return _nW_;
           case 64:return _nX_;
           case 65:return _nY_;
           case 66:return _nZ_;
           default:return _n0_}
        switch(_agH_)
         {case 0:return _mX_;
          case 1:return _mY_;
          case 2:return _mZ_;
          case 3:return _m0_;
          case 4:return _m1_;
          case 5:return _m2_;
          case 6:return _m3_;
          case 7:return _m4_;
          case 8:return _m5_;
          case 9:return _m6_;
          case 10:return _m7_;
          case 11:return _m8_;
          case 12:return _m9_;
          case 13:return _m__;
          case 14:return _m$_;
          case 15:return _na_;
          case 16:return _nb_;
          case 17:return _nc_;
          case 18:return _nd_;
          case 19:return _ne_;
          case 20:return _nf_;
          case 21:return _ng_;
          case 22:return _nh_;
          case 23:return _ni_;
          case 24:return _nj_;
          case 25:return _nk_;
          case 26:return _nl_;
          case 27:return _nm_;
          case 28:return _nn_;
          case 29:return _no_;
          case 30:return _np_;
          case 31:return _nq_;
          case 32:return _nr_;
          default:return _ns_}}
      var v0=param[1],v0$0=caml_call1(_es_,v0);
      return [1,[0,_n1_,[0,v0$0,0]]]}
    function of_system_int$0(errno)
     {return runtime.core_unix_error_of_code(errno)}
    var message=UnixLabels[2];
    function to_errno(_agG_){return runtime.core_code_of_unix_error(_agG_)}
    var
     Private$0=[0,to_errno],
     Error=
      [0,compare$5,t_of_sexp$8,sexp_of_t$11,of_system_int$0,message,Private$0];
    function putenv(key,data)
     {function _agF_(param)
       {return [0,[0,cst_key,[0,key]],[0,[0,cst_data,[0,data]],0]]}
      return improve
              (0,
               function(param){return caml_call2(UnixLabels[7],key,data)},
               _agF_)}
    function unsetenv(name)
     {if(caml_call4(Core_kernel_String[28],0,0,name,0))
       throw [0,Unix_error,12,cst_unsetenv,name];
      return runtime.core_unix_unsetenv(name)}
    function compare_error(a_007,b_008)
     {if(caml_call2(Ppx_compare_lib[1],a_007,b_008))return 0;
      var right_010=b_008[2],left_009=a_007[2];
      return caml_call2(_eo_,left_009,right_010)}
    function error_of_sexp$0(sexp)
     {if(0 === sexp[0])
       {var atom=sexp[1];
        return caml_string_notequal(atom,cst_Exit_non_zero)
                ?caml_call1(Sexplib0_Sexp_conv_error[19],0)
                :caml_call2(Sexplib0_Sexp_conv_error[23],tp_loc$14,sexp)}
      var _agD_=sexp[1];
      if(_agD_)
       {var _agE_=_agD_[1];
        if(0 === _agE_[0])
         {var sexp_args=_agD_[2],atom$0=_agE_[1];
          if(caml_string_notequal(atom$0,cst_Exit_non_zero$0))
           return caml_call1(Sexplib0_Sexp_conv_error[19],0);
          if(sexp_args && ! sexp_args[2])
           {var v0=sexp_args[1],v0$0=caml_call1(file_perm_of_sexp,v0);
            return [0,-34939077,v0$0]}
          return caml_call3
                  (Sexplib0_Sexp_conv_error[22],tp_loc$14,atom$0,sexp)}
        return caml_call2(Sexplib0_Sexp_conv_error[24],tp_loc$14,sexp)}
      return caml_call2(Sexplib0_Sexp_conv_error[25],tp_loc$14,sexp)}
    function error_of_sexp$1(sexp)
     {try
       {var _agB_=error_of_sexp$0(sexp);return _agB_}
      catch(_agC_)
       {_agC_ = caml_wrap_exception(_agC_);
        if(_agC_ === Sexplib0_Sexp_conv_error[18])
         return caml_call2(Sexplib0_Sexp_conv_error[20],tp_loc$15,sexp);
        throw _agC_}}
    function sexp_of_error$0(param)
     {var v0=param[2];return [1,[0,_n5_,[0,caml_call1(_es_,v0),0]]]}
    function compare$6(a_011,b_012)
     {function _agz_(a_015,b_016){return compare_error(a_015,b_016)}
      function _agA_(a_013,b_014){return caml_call2(compare,a_013,b_014)}
      return caml_call4(Core_kernel_Result[11],_agA_,_agz_,a_011,b_012)}
    function t_of_sexp$9(t)
     {return caml_call3(Core_kernel_Result[9],_gY_,error_of_sexp$1,t)}
    function sexp_of_t$12(v)
     {return caml_call3(Core_kernel_Result[10],sexp_of_t,sexp_of_error$0,v)}
    function to_string_hum(param)
     {if(0 === param[0])return cst_exited_normally;
      var match=param[1],i=match[2];
      return caml_call2(sprintf,_n6_,i)}
    function code(param)
     {if(0 === param[0])return 0;var match=param[1],i=match[2];return i}
    var
     Exit_code_must_be_nonnegative=
      [248,cst_Core_Core_unix_Exit_Exit_c,caml_fresh_oo_id(0)];
    function _n7_(param)
     {if(param[1] === Exit_code_must_be_nonnegative)
       {var v0=param[2],v0$0=caml_call1(_es_,v0);
        return [1,[0,_n8_,[0,v0$0,0]]]}
      throw [0,Assert_failure,_n9_]}
    caml_call3(Sexplib0_Sexp_conv[51][2],0,Exit_code_must_be_nonnegative,_n7_);
    function of_code(code)
     {if(0 <= code)return 0 === code?_n__:[1,[0,-34939077,code]];
      throw [0,Exit_code_must_be_nonnegative,code]}
    function or_error(ok)
     {if(0 === ok[0])return ok;
      var error=ok[1];
      return caml_call4
              (Core_kernel_Or_error[38],0,cst_Unix_Exit,error,sexp_of_error$0)}
    function compare_error$0(a_017,b_018)
     {if(caml_call2(Ppx_compare_lib[1],a_017,b_018))return 0;
      if(-34939077 <= a_017[1])
       {if(typeof b_018 !== "number" && -34939077 === b_018[1])
         return compare_error(a_017,b_018)}
      else
       if(typeof b_018 !== "number" && -384130424 === b_018[1])
        {var right_022=b_018[2],left_021=a_017[2];
         return caml_call2(compare$1,left_021,right_022)}
      return caml_compare(a_017,b_018)}
    function error_of_sexp$2(sexp)
     {try
       {var _agx_=error_of_sexp$0(sexp);return _agx_}
      catch(_agy_)
       {_agy_ = caml_wrap_exception(_agy_);
        if(_agy_ === Sexplib0_Sexp_conv_error[18])
         {if(0 === sexp[0])
           {var atom=sexp[1];
            return caml_string_notequal(atom,cst_Signal)
                    ?caml_call1(Sexplib0_Sexp_conv_error[19],0)
                    :caml_call2(Sexplib0_Sexp_conv_error[23],tp_loc$16,sexp)}
          var _agv_=sexp[1];
          if(_agv_)
           {var _agw_=_agv_[1];
            if(0 === _agw_[0])
             {var sexp_args=_agv_[2],atom$0=_agw_[1];
              if(caml_string_notequal(atom$0,cst_Signal$0))
               return caml_call1(Sexplib0_Sexp_conv_error[19],0);
              if(sexp_args && ! sexp_args[2])
               {var v0=sexp_args[1],v0$0=t_of_sexp(v0);
                return [0,-384130424,v0$0]}
              return caml_call3
                      (Sexplib0_Sexp_conv_error[22],tp_loc$16,atom$0,sexp)}
            return caml_call2(Sexplib0_Sexp_conv_error[24],tp_loc$16,sexp)}
          return caml_call2(Sexplib0_Sexp_conv_error[25],tp_loc$16,sexp)}
        throw _agy_}}
    function error_of_sexp$3(sexp)
     {try
       {var _agt_=error_of_sexp$2(sexp);return _agt_}
      catch(_agu_)
       {_agu_ = caml_wrap_exception(_agu_);
        if(_agu_ === Sexplib0_Sexp_conv_error[18])
         return caml_call2(Sexplib0_Sexp_conv_error[20],tp_loc$17,sexp);
        throw _agu_}}
    function sexp_of_error$1(v)
     {if(-34939077 <= v[1])return sexp_of_error$0(v);
      var v0=v[2];
      return [1,[0,_n$_,[0,sexp_of_t$0(v0),0]]]}
    function compare$7(a_023,b_024)
     {function _agr_(a_027,b_028){return compare_error$0(a_027,b_028)}
      function _ags_(a_025,b_026){return caml_call2(compare,a_025,b_026)}
      return caml_call4(Core_kernel_Result[11],_ags_,_agr_,a_023,b_024)}
    function t_of_sexp$10(t)
     {return caml_call3(Core_kernel_Result[9],_gY_,error_of_sexp$3,t)}
    function sexp_of_t$13(v)
     {return caml_call3(Core_kernel_Result[10],sexp_of_t,sexp_of_error$1,v)}
    function to_string_hum$0(e)
     {if(1 === e[0])
       {var _agp_=e[1];
        if(! (-34939077 <= _agp_[1]))
         {var
           s=_agp_[2],
           _agq_=runtime.ml_caml_to_nonportable_signal_number(s);
          return caml_call3(sprintf,_oa_,to_string(s),_agq_)}}
      return to_string_hum(e)}
    var
     Of_unix_got_invalid_status=
      [248,cst_Core_Core_unix_Exit_or_sig,caml_fresh_oo_id(0)];
    function _ob_(param)
     {if(param[1] === Of_unix_got_invalid_status)
       {var v0$5=param[2];
        switch(v0$5[0])
         {case 0:
           var
            v0=v0$5[1],
            v0$0=caml_call1(_es_,v0),
            v0$6=[1,[0,_n2_,[0,v0$0,0]]];
           break;
          case 1:
           var
            v0$1=v0$5[1],
            v0$2=caml_call1(_es_,v0$1),
            v0$6=[1,[0,_n3_,[0,v0$2,0]]];
           break;
          default:
           var
            v0$3=v0$5[1],
            v0$4=caml_call1(_es_,v0$3),
            v0$6=[1,[0,_n4_,[0,v0$4,0]]]}
        return [1,[0,_oc_,[0,v0$6,0]]]}
      throw [0,Assert_failure,_od_]}
    caml_call3(Sexplib0_Sexp_conv[51][2],0,Of_unix_got_invalid_status,_ob_);
    function of_unix(status)
     {switch(status[0])
       {case 0:var i=status[1];return 0 === i?_oe_:[1,[0,-34939077,i]];
        case 1:var i$0=status[1];return [1,[0,-384130424,i$0]];
        default:throw [0,Of_unix_got_invalid_status,status]}}
    function or_error$0(ok)
     {if(0 === ok[0])return ok;
      var error=ok[1];
      return caml_call4
              (Core_kernel_Or_error[38],
               0,
               cst_Unix_Exit_or_signal,
               error,
               sexp_of_error$1)}
    function error_of_sexp$4(sexp)
     {try
       {var _agn_=error_of_sexp$2(sexp);return _agn_}
      catch(_ago_)
       {_ago_ = caml_wrap_exception(_ago_);
        if(_ago_ === Sexplib0_Sexp_conv_error[18])
         {if(0 === sexp[0])
           {var atom=sexp[1];
            return caml_string_notequal(atom,cst_Stop$1)
                    ?caml_call1(Sexplib0_Sexp_conv_error[19],0)
                    :caml_call2(Sexplib0_Sexp_conv_error[23],tp_loc$18,sexp)}
          var _agl_=sexp[1];
          if(_agl_)
           {var _agm_=_agl_[1];
            if(0 === _agm_[0])
             {var sexp_args=_agl_[2],atom$0=_agm_[1];
              if(caml_string_notequal(atom$0,cst_Stop$2))
               return caml_call1(Sexplib0_Sexp_conv_error[19],0);
              if(sexp_args && ! sexp_args[2])
               {var v0=sexp_args[1],v0$0=t_of_sexp(v0);
                return [0,926227490,v0$0]}
              return caml_call3
                      (Sexplib0_Sexp_conv_error[22],tp_loc$18,atom$0,sexp)}
            return caml_call2(Sexplib0_Sexp_conv_error[24],tp_loc$18,sexp)}
          return caml_call2(Sexplib0_Sexp_conv_error[25],tp_loc$18,sexp)}
        throw _ago_}}
    function error_of_sexp$5(sexp)
     {try
       {var _agj_=error_of_sexp$4(sexp);return _agj_}
      catch(_agk_)
       {_agk_ = caml_wrap_exception(_agk_);
        if(_agk_ === Sexplib0_Sexp_conv_error[18])
         return caml_call2(Sexplib0_Sexp_conv_error[20],tp_loc$19,sexp);
        throw _agk_}}
    function sexp_of_error$2(v)
     {if(926227490 <= v[1])
       {var v0=v[2];return [1,[0,_of_,[0,sexp_of_t$0(v0),0]]]}
      return sexp_of_error$1(v)}
    function t_of_sexp$11(t)
     {return caml_call3(Core_kernel_Result[9],_gY_,error_of_sexp$5,t)}
    function sexp_of_t$14(v)
     {return caml_call3(Core_kernel_Result[10],sexp_of_t,sexp_of_error$2,v)}
    function to_string_hum$1(e)
     {if(1 === e[0])
       {var _agh_=e[1];
        if(926227490 <= _agh_[1])
         {var
           s=_agh_[2],
           _agi_=runtime.ml_caml_to_nonportable_signal_number(s);
          return caml_call3(sprintf,_og_,to_string(s),_agi_)}}
      return to_string_hum$0(e)}
    function of_unix$0(param)
     {switch(param[0])
       {case 0:var i=param[1];return 0 === i?_oh_:[1,[0,-34939077,i]];
        case 1:var i$0=param[1];return [1,[0,-384130424,i$0]];
        default:var i$1=param[1];return [1,[0,926227490,i$1]]}}
    function or_error$1(ok)
     {if(0 === ok[0])return ok;
      var error=ok[1];
      return caml_call4
              (Core_kernel_Or_error[38],
               0,
               cst_Unix_Exit_or_signal_or_sto,
               error,
               sexp_of_error$2)}
    function prog_r(prog){return [0,cst_prog,[0,prog]]}
    function args_r(argv){return [0,cst_argv,caml_call2(_do_,atom,argv)]}
    function env_r(env){return [0,cst_env,caml_call2(_do_,atom,env)]}
    function t_of_sexp$12(sexp)
     {if(0 === sexp[0])
       {var atom=sexp[1];
        return caml_string_notequal(atom,cst_Extend)
                ?caml_string_notequal(atom,cst_Override)
                  ?caml_string_notequal(atom,cst_Replace)
                    ?caml_string_notequal(atom,cst_Replace_raw)
                      ?caml_call1(Sexplib0_Sexp_conv_error[19],0)
                      :caml_call2(Sexplib0_Sexp_conv_error[23],tp_loc$20,sexp)
                    :caml_call2(Sexplib0_Sexp_conv_error[23],tp_loc$20,sexp)
                  :caml_call2(Sexplib0_Sexp_conv_error[23],tp_loc$20,sexp)
                :caml_call2(Sexplib0_Sexp_conv_error[23],tp_loc$20,sexp)}
      var _af$_=sexp[1];
      if(_af$_)
       {var _aga_=_af$_[1];
        if(0 === _aga_[0])
         {var sexp_args=_af$_[2],atom$0=_aga_[1];
          if(caml_string_notequal(atom$0,cst_Extend$0))
           {if(caml_string_notequal(atom$0,cst_Override$0))
             {if(caml_string_notequal(atom$0,cst_Replace$0))
               {if(caml_string_notequal(atom$0,cst_Replace_raw$0))
                 return caml_call1(Sexplib0_Sexp_conv_error[19],0);
                if(sexp_args && ! sexp_args[2])
                 {var v0=sexp_args[1],v0$0=caml_call2(_ft_,_gf_,v0);
                  return [0,-854121219,v0$0]}
                return caml_call3
                        (Sexplib0_Sexp_conv_error[22],tp_loc$20,atom$0,sexp)}
              if(sexp_args && ! sexp_args[2])
               {var
                 v0$1=sexp_args[1],
                 v0$2=
                  caml_call2
                   (_ft_,
                    function(sexp)
                     {if(1 === sexp[0])
                       {var _agf_=sexp[1];
                        if(_agf_)
                         {var _agg_=_agf_[2];
                          if(_agg_ && ! _agg_[2])
                           {var
                             v1=_agg_[1],
                             v0=_agf_[1],
                             v0$0=caml_call1(_gf_,v0),
                             v1$0=caml_call1(_gf_,v1);
                            return [0,v0$0,v1$0]}}}
                      return caml_call3
                              (Sexplib0_Sexp_conv_error[2],tp_loc$20,2,sexp)},
                    v0$1);
                return [0,-126259180,v0$2]}
              return caml_call3
                      (Sexplib0_Sexp_conv_error[22],tp_loc$20,atom$0,sexp)}
            if(sexp_args && ! sexp_args[2])
             {var
               v0$3=sexp_args[1],
               v0$4=
                caml_call2
                 (_ft_,
                  function(sexp)
                   {if(1 === sexp[0])
                     {var _agd_=sexp[1];
                      if(_agd_)
                       {var _age_=_agd_[2];
                        if(_age_ && ! _age_[2])
                         {var
                           v1=_age_[1],
                           v0=_agd_[1],
                           v0$0=caml_call1(_gf_,v0),
                           v1$0=caml_call2(_f0_,_gf_,v1);
                          return [0,v0$0,v1$0]}}}
                    return caml_call3
                            (Sexplib0_Sexp_conv_error[2],tp_loc$20,2,sexp)},
                  v0$3);
              return [0,584703596,v0$4]}
            return caml_call3
                    (Sexplib0_Sexp_conv_error[22],tp_loc$20,atom$0,sexp)}
          if(sexp_args && ! sexp_args[2])
           {var
             v0$5=sexp_args[1],
             v0$6=
              caml_call2
               (_ft_,
                function(sexp)
                 {if(1 === sexp[0])
                   {var _agb_=sexp[1];
                    if(_agb_)
                     {var _agc_=_agb_[2];
                      if(_agc_ && ! _agc_[2])
                       {var
                         v1=_agc_[1],
                         v0=_agb_[1],
                         v0$0=caml_call1(_gf_,v0),
                         v1$0=caml_call1(_gf_,v1);
                        return [0,v0$0,v1$0]}}}
                  return caml_call3
                          (Sexplib0_Sexp_conv_error[2],tp_loc$20,2,sexp)},
                v0$5);
            return [0,-72399366,v0$6]}
          return caml_call3
                  (Sexplib0_Sexp_conv_error[22],tp_loc$20,atom$0,sexp)}
        return caml_call2(Sexplib0_Sexp_conv_error[24],tp_loc$20,sexp)}
      return caml_call2(Sexplib0_Sexp_conv_error[25],tp_loc$20,sexp)}
    function env_of_sexp(sexp)
     {try
       {var _af9_=t_of_sexp$12(sexp);return _af9_}
      catch(_af__)
       {_af__ = caml_wrap_exception(_af__);
        if(_af__ === Sexplib0_Sexp_conv_error[18])
         return caml_call2(Sexplib0_Sexp_conv_error[20],tp_loc$21,sexp);
        throw _af__}}
    function sexp_of_env(param)
     {var _af5_=param[1];
      if(-72399366 <= _af5_)
       {if(584703596 <= _af5_)
         {var v0=param[2],_af6_=0;
          return [1,
                  [0,
                   _oi_,
                   [0,
                    caml_call2
                     (_fs_,
                      function(param)
                       {var
                         v1=param[2],
                         v0=param[1],
                         v0$0=caml_call1(_ge_,v0),
                         v1$0=caml_call2(_fZ_,_ge_,v1);
                        return [1,[0,v0$0,[0,v1$0,0]]]},
                      v0),
                    _af6_]]]}
        var v0$0=param[2],_af7_=0;
        return [1,
                [0,
                 _oj_,
                 [0,
                  caml_call2
                   (_fs_,
                    function(param)
                     {var
                       v1=param[2],
                       v0=param[1],
                       v0$0=caml_call1(_ge_,v0),
                       v1$0=caml_call1(_ge_,v1);
                      return [1,[0,v0$0,[0,v1$0,0]]]},
                    v0$0),
                  _af7_]]]}
      if(-126259180 <= _af5_)
       {var v0$1=param[2],_af8_=0;
        return [1,
                [0,
                 _ok_,
                 [0,
                  caml_call2
                   (_fs_,
                    function(param)
                     {var
                       v1=param[2],
                       v0=param[1],
                       v0$0=caml_call1(_ge_,v0),
                       v1$0=caml_call1(_ge_,v1);
                      return [1,[0,v0$0,[0,v1$0,0]]]},
                    v0$1),
                  _af8_]]]}
      var v0$2=param[2];
      return [1,[0,_ol_,[0,caml_call2(_fs_,_ge_,v0$2),0]]]}
    function current(base,param)
     {if(base)
       var v=base[1],base$0=caml_call1(_cC_,v);
      else
       var
        _af4_=caml_call1(UnixLabels[4],0),
        base$0=caml_call1(Core_kernel_Array[30],_af4_);
      function _af3_(s){return caml_call2(Core_kernel_String[52],s,61)}
      return caml_call2(Core_kernel_List[71],base$0,_af3_)}
    function expand(base,env$0)
     {if(-126259180 <= env$0[1])
       {var
         _afZ_=
          function(key,data,acc)
           {return [0,caml_call2(_n_,key,caml_call2(_n_,cst$12,data)),acc]},
         _af0_=0,
         map_of_list=
          function(list)
           {function _af2_(param,x){return x}
            return caml_call2(Core_kernel_String[125][11],list,_af2_)},
         _afW_=env$0[1];
        if(-72399366 === _afW_)
         var
          extend=env$0[2],
          _af1_=map_of_list(caml_call2(_bm_,current(base,0),extend));
        else
         if(584703596 <= _afW_)
          var
           overrides=env$0[2],
           _afX_=
            function(acc,param)
             {var v=param[2],key=param[1];
              if(v)
               {var data=v[1];
                return caml_call3(Core_kernel_Map[31],acc,key,data)}
              return caml_call2(Core_kernel_Map[40],acc,key)},
           _afY_=map_of_list(current(base,0)),
           _af1_=caml_call3(Core_kernel_List[86],overrides,_afY_,_afX_);
         else
          var env=env$0[2],_af1_=map_of_list(env);
        return caml_call3(Core_kernel_Map[51],_af1_,_af0_,_afZ_)}
      var env$1=env$0[2];
      return env$1}
    function arg(base,env)
     {var _afV_=expand(base,env);
      return caml_call1(Core_kernel_Array[48],_afV_)}
    function exec(prog,argv,opt,env,param)
     {if(opt)var sth=opt[1],use_path=sth;else var use_path=1;
      var argv$0=caml_call1(Core_kernel_Array[48],argv);
      function _afO_(eta){return arg(0,eta)}
      var env$0=caml_call2(Core_kernel_Option[39],env,_afO_);
      if(use_path)
       {if(env$0)
         {var
           env$1=env$0[1],
           _afN_=
            function(param)
             {var _afT_=[0,env_r(env$1),0],_afU_=[0,args_r(argv$0),_afT_];
              return [0,prog_r(prog),_afU_]};
          return improve
                  (0,
                   function(param)
                    {return caml_call3(UnixLabels[11],prog,argv$0,env$1)},
                   _afN_)}
        var
         _afM_=
          function(param)
           {var _afS_=[0,args_r(argv$0),0];return [0,prog_r(prog),_afS_]};
        return improve
                (0,
                 function(param)
                  {return caml_call2(UnixLabels[10],prog,argv$0)},
                 _afM_)}
      if(env$0)
       {var
         env$2=env$0[1],
         _afL_=
          function(param)
           {var _afQ_=[0,env_r(env$2),0],_afR_=[0,args_r(argv$0),_afQ_];
            return [0,prog_r(prog),_afR_]};
        return improve
                (0,
                 function(param)
                  {return caml_call3(UnixLabels[9],prog,argv$0,env$2)},
                 _afL_)}
      function _afK_(param)
       {var _afP_=[0,args_r(argv$0),0];return [0,prog_r(prog),_afP_]}
      return improve
              (0,
               function(param){return caml_call2(UnixLabels[8],prog,argv$0)},
               _afK_)}
    var
     Fork_returned_negative_result=
      [248,cst_Core_Core_unix_Fork_return,caml_fresh_oo_id(0)];
    function _om_(param)
     {if(param[1] === Fork_returned_negative_result)
       {var v0=param[2],v0$0=caml_call1(_es_,v0);
        return [1,[0,_on_,[0,v0$0,0]]]}
      throw [0,Assert_failure,_oo_]}
    caml_call3(Sexplib0_Sexp_conv[51][2],0,Fork_returned_negative_result,_om_);
    function fork(param)
     {var pid=caml_call1(UnixLabels[12],0);
      if(0 <= pid)
       return 0 === pid
               ?-163213292
               :[0,928761778,caml_call1(Core_kernel_Pid[42],pid)];
      throw [0,Fork_returned_negative_result,pid]}
    function fork_exec(prog,argv,use_path,env,param)
     {var match=fork(0);
      if(typeof match === "number")
       {try
         {var _afI_=exec(prog,argv,use_path,env,0),_afH_=_afI_}
        catch(_afJ_){var _afH_=caml_sys_exit(127)}
        return caml_call1(_bo_,_afH_)}
      var pid=match[2];
      return pid}
    function sexp_of_wait_flag(param){return param?_op_:_oq_}
    function wait_on_of_sexp(sexp)
     {if(0 === sexp[0])
       {var atom=sexp[1];
        return caml_string_notequal(atom,cst_Any)
                ?caml_string_notequal(atom,cst_Group)
                  ?caml_string_notequal(atom,cst_My_group)
                    ?caml_string_notequal(atom,cst_Pid)
                      ?caml_call1(Sexplib0_Sexp_conv_error[19],0)
                      :caml_call2(Sexplib0_Sexp_conv_error[23],tp_loc$22,sexp)
                    :-240292084
                  :caml_call2(Sexplib0_Sexp_conv_error[23],tp_loc$22,sexp)
                :3257036}
      var _afF_=sexp[1];
      if(_afF_)
       {var _afG_=_afF_[1];
        if(0 === _afG_[0])
         {var sexp_args=_afF_[2],atom$0=_afG_[1];
          if(caml_string_notequal(atom$0,cst_Any$0))
           {if(caml_string_notequal(atom$0,cst_Group$0))
             {if(caml_string_notequal(atom$0,cst_My_group$0))
               {if(caml_string_notequal(atom$0,cst_Pid$0))
                 return caml_call1(Sexplib0_Sexp_conv_error[19],0);
                if(sexp_args && ! sexp_args[2])
                 {var v0=sexp_args[1],v0$0=caml_call1(Core_kernel_Pid[9],v0);
                  return [0,4001835,v0$0]}
                return caml_call3
                        (Sexplib0_Sexp_conv_error[22],tp_loc$22,atom$0,sexp)}
              return caml_call2(Sexplib0_Sexp_conv_error[21],tp_loc$22,sexp)}
            if(sexp_args && ! sexp_args[2])
             {var v0$1=sexp_args[1],v0$2=caml_call1(Core_kernel_Pid[9],v0$1);
              return [0,757211935,v0$2]}
            return caml_call3
                    (Sexplib0_Sexp_conv_error[22],tp_loc$22,atom$0,sexp)}
          return caml_call2(Sexplib0_Sexp_conv_error[21],tp_loc$22,sexp)}
        return caml_call2(Sexplib0_Sexp_conv_error[24],tp_loc$22,sexp)}
      return caml_call2(Sexplib0_Sexp_conv_error[25],tp_loc$22,sexp)}
    function wait_on_of_sexp$0(sexp)
     {try
       {var _afD_=wait_on_of_sexp(sexp);return _afD_}
      catch(_afE_)
       {_afE_ = caml_wrap_exception(_afE_);
        if(_afE_ === Sexplib0_Sexp_conv_error[18])
         return caml_call2(Sexplib0_Sexp_conv_error[20],tp_loc$23,sexp);
        throw _afE_}}
    function sexp_of_wait_on(param)
     {if(typeof param === "number")return 3257036 <= param?_or_:_os_;
      if(757211935 <= param[1])
       {var v0=param[2];
        return [1,[0,_ot_,[0,caml_call1(Core_kernel_Pid[10],v0),0]]]}
      var v0$0=param[2];
      return [1,[0,_ou_,[0,caml_call1(Core_kernel_Pid[10],v0$0),0]]]}
    function wait_gen(mode,f,restart,wait_on)
     {if(typeof wait_on === "number")
       var pid=3257036 <= wait_on?-1:0;
      else
       {if(757211935 <= wait_on[1])
         var
          pid$2=wait_on[2],
          _afB_=- caml_call1(Core_kernel_Pid[43],pid$2) | 0;
        else
         var pid$3=wait_on[2],_afB_=caml_call1(Core_kernel_Pid[43],pid$3);
        var pid=_afB_}
      function _afA_(param)
       {var _afC_=[0,[0,cst_pid,caml_call1(Core_kernel_Int[101],pid)],0];
        return [0,[0,cst_mode,caml_call2(_fs_,sexp_of_wait_flag,mode)],_afC_]}
      var
       match=
        improve
         ([0,restart],
          function(param)
           {var
             match=caml_call2(UnixLabels[14],mode,pid),
             ps=match[2],
             x=match[1];
            return [0,x,of_unix$0(ps)]},
          _afA_),
       status=match[2],
       pid$0=match[1];
      if(0 === pid$0)
       var waitpid_result=0;
      else
       var
        pid$1=caml_call1(Core_kernel_Pid[42],pid$0),
        waitpid_result=[0,[0,pid$1,status]];
      var match$0=caml_call1(f,waitpid_result);
      if(match$0){var a=match$0[1];return a}
      return caml_call5
              (_cB_,
               0,
               _ov_,
               cst_waitpid_syscall_returned_i,
               [0,pid$0,mode,waitpid_result],
               function(param)
                {var
                  v2$0=param[3],
                  v1$0=param[2],
                  v0=param[1],
                  v0$0=caml_call1(_es_,v0),
                  v1=caml_call2(_fs_,sexp_of_wait_flag,v1$0),
                  v2=
                   caml_call2
                    (_fZ_,
                     function(param)
                      {var
                        v1=param[2],
                        v0=param[1],
                        v0$0=caml_call1(Core_kernel_Pid[10],v0),
                        v1$0=sexp_of_t$14(v1);
                       return [1,[0,v0$0,[0,v1$0,0]]]},
                     v2$0);
                 return [1,[0,v0$0,[0,v1,[0,v2,0]]]]})}
    function wait(opt,pid)
     {if(opt)var sth=opt[1],restart=sth;else var restart=1;
      function f(param)
       {if(param)
         {var _afw_=param[1],_afx_=_afw_[2],switch$0=0;
          if(1 === _afx_[0])
           {var _afy_=_afx_[1];
            if(typeof _afy_ === "number")
             switch$0 = 1;
            else
             {var _afz_=_afy_[1];
              if(-384130424 !== _afz_ && -34939077 !== _afz_)switch$0 = 1}}
          if(! switch$0)return [0,_afw_]}
        return 0}
      return wait_gen(0,f,restart,pid)}
    function wait_nohang(pid)
     {function f(x)
       {if(x)
         {var _aft_=x[1][2];
          if(0 !== _aft_[0])
           {var _afu_=_aft_[1],switch$0=0;
            if(typeof _afu_ === "number")
             switch$0 = 1;
            else
             {var _afv_=_afu_[1];
              if(-384130424 !== _afv_ && -34939077 !== _afv_)switch$0 = 1}
            if(switch$0)return 0}}
        return [0,x]}
      return wait_gen(_ow_,f,1,pid)}
    function wait_untraced(opt,pid)
     {if(opt)var sth=opt[1],restart=sth;else var restart=1;
      return wait_gen(_ox_,function(_afs_){return _afs_},restart,pid)}
    function wait_nohang_untraced(pid)
     {return wait_gen(_oy_,Core_kernel_Option[51],1,pid)}
    function waitpid(pid)
     {var
       match=wait(0,[0,4001835,pid]),
       exit_or_signal=match[2],
       pid$0=match[1];
      if(caml_equal(pid,pid$0))return exit_or_signal;
      throw [0,Assert_failure,_oz_]}
    function waitpid_exn(pid)
     {var
       exit_or_signal=waitpid(pid),
       _afr_=caml_call1(Core_kernel_Result[28],exit_or_signal);
      return _afr_
              ?caml_call5
                (_cB_,
                 0,
                 _oB_,
                 cst_child_process_didn_t_exit_,
                 [0,[0,28845256,pid],exit_or_signal],
                 function(param)
                  {var
                    v1=param[2],
                    v0=param[1],
                    v0$0=v0[2],
                    v0$1=[1,[0,_oA_,[0,caml_call1(Core_kernel_Pid[10],v0$0),0]]],
                    v1$0=sexp_of_t$13(v1);
                   return [1,[0,v0$1,[0,v1$0,0]]]})
              :_afr_}
    function system(s)
     {function _afq_(param){return [0,[0,cst_command,[0,s]],0]}
      return improve
              (0,
               function(param){return of_unix(caml_call1(UnixLabels[15],s))},
               _afq_)}
    function getpid(param)
     {var _afp_=caml_call1(UnixLabels[16],0);
      return caml_call1(Core_kernel_Pid[42],_afp_)}
    function getppid(param)
     {var x=caml_call1(UnixLabels[17],0);
      return 1 <= x?[0,caml_call1(Core_kernel_Pid[42],x)]:0}
    function getppid_exn(param)
     {var _afo_=getppid(0);
      return caml_call4(Core_kernel_Option[50],0,0,_oC_,_afo_)}
    var gettid=[0,function(_afn_){return runtime.core_unix_gettid(_afn_)}];
    function nice$0(i)
     {function _afm_(param)
       {return [0,[0,cst_priority,caml_call1(Core_kernel_Int[101],i)],0]}
      return improve
              (0,function(param){return caml_call1(UnixLabels[18],i)},_afm_)}
    var stdin=UnixLabels[19],stdout=UnixLabels[20],stderr=UnixLabels[21];
    function open_flag_of_sexp(sexp)
     {if(0 === sexp[0])
       {var
         _afc_=sexp[1],
         _afd_=caml_string_compare(_afc_,cst_o_APPEND),
         switch$0=0;
        if(0 <= _afd_)
         if(0 < _afd_)
          {var _afe_=caml_string_compare(_afc_,cst_o_RDONLY);
           if(0 <= _afe_)
            if(0 < _afe_)
             if(caml_string_notequal(_afc_,cst_o_RDWR))
              if(caml_string_notequal(_afc_,cst_o_RSYNC))
               if(caml_string_notequal(_afc_,cst_o_SHARE_DELETE))
                if(caml_string_notequal(_afc_,cst_o_SYNC))
                 if(caml_string_notequal(_afc_,cst_o_TRUNC))
                  {if(! caml_string_notequal(_afc_,cst_o_WRONLY))switch$0 = 2}
                 else
                  switch$0 = 7;
                else
                 switch$0 = 11;
               else
                switch$0 = 13;
              else
               switch$0 = 12;
             else
              switch$0 = 3;
            else
             switch$0 = 1;
           else
            if(caml_string_notequal(_afc_,cst_o_CLOEXEC))
             if(caml_string_notequal(_afc_,cst_o_CREAT))
              if(caml_string_notequal(_afc_,cst_o_DSYNC))
               if(caml_string_notequal(_afc_,cst_o_EXCL))
                if(caml_string_notequal(_afc_,cst_o_KEEPEXEC))
                 if(caml_string_notequal(_afc_,cst_o_NOCTTY))
                  {if(! caml_string_notequal(_afc_,cst_o_NONBLOCK))
                    switch$0 = 4}
                 else
                  switch$0 = 9;
                else
                 switch$0 = 15;
               else
                switch$0 = 8;
              else
               switch$0 = 10;
             else
              switch$0 = 6;
            else
             switch$0 = 14}
         else
          switch$0 = 5;
        else
         {var _aff_=caml_string_compare(_afc_,cst_O_NONBLOCK);
          if(0 <= _aff_)
           if(0 < _aff_)
            if(caml_string_notequal(_afc_,cst_O_RDONLY))
             if(caml_string_notequal(_afc_,cst_O_RDWR))
              if(caml_string_notequal(_afc_,cst_O_RSYNC))
               if(caml_string_notequal(_afc_,cst_O_SHARE_DELETE))
                if(caml_string_notequal(_afc_,cst_O_SYNC))
                 if(caml_string_notequal(_afc_,cst_O_TRUNC))
                  {if(! caml_string_notequal(_afc_,cst_O_WRONLY))switch$0 = 2}
                 else
                  switch$0 = 7;
                else
                 switch$0 = 11;
               else
                switch$0 = 13;
              else
               switch$0 = 12;
             else
              switch$0 = 3;
            else
             switch$0 = 1;
           else
            switch$0 = 4;
          else
           if(caml_string_notequal(_afc_,cst_O_APPEND))
            if(caml_string_notequal(_afc_,cst_O_CLOEXEC))
             if(caml_string_notequal(_afc_,cst_O_CREAT))
              if(caml_string_notequal(_afc_,cst_O_DSYNC))
               if(caml_string_notequal(_afc_,cst_O_EXCL))
                if(caml_string_notequal(_afc_,cst_O_KEEPEXEC))
                 {if(! caml_string_notequal(_afc_,cst_O_NOCTTY))switch$0 = 9}
                else
                 switch$0 = 15;
               else
                switch$0 = 8;
              else
               switch$0 = 10;
             else
              switch$0 = 6;
            else
             switch$0 = 14;
           else
            switch$0 = 5}
        switch(switch$0)
         {case 1:return 0;
          case 2:return 1;
          case 3:return 2;
          case 4:return 3;
          case 5:return 4;
          case 6:return 5;
          case 7:return 6;
          case 8:return 7;
          case 9:return 8;
          case 10:return 9;
          case 11:return 10;
          case 12:return 11;
          case 13:return 12;
          case 14:return 13;
          case 15:return 14
          }}
      else
       {var _afg_=sexp[1];
        if(! _afg_)
         return caml_call2(Sexplib0_Sexp_conv_error[7],tp_loc$24,sexp);
        var _afh_=_afg_[1];
        if(0 !== _afh_[0])
         return caml_call2(Sexplib0_Sexp_conv_error[6],tp_loc$24,sexp);
        var
         _afi_=_afh_[1],
         _afj_=caml_string_compare(_afi_,cst_o_APPEND$0),
         switch$1=0;
        if(0 <= _afj_)
         if(0 < _afj_)
          {var _afk_=caml_string_compare(_afi_,cst_o_RDONLY$0);
           if(0 <= _afk_)
            if(0 < _afk_)
             if(caml_string_notequal(_afi_,cst_o_RDWR$0))
              if(caml_string_notequal(_afi_,cst_o_RSYNC$0))
               if(caml_string_notequal(_afi_,cst_o_SHARE_DELETE$0))
                if(caml_string_notequal(_afi_,cst_o_SYNC$0))
                 if(caml_string_notequal(_afi_,cst_o_TRUNC$0))
                  {if(! caml_string_notequal(_afi_,cst_o_WRONLY$0))
                    switch$1 = 2}
                 else
                  switch$1 = 7;
                else
                 switch$1 = 11;
               else
                switch$1 = 13;
              else
               switch$1 = 12;
             else
              switch$1 = 3;
            else
             switch$1 = 1;
           else
            if(caml_string_notequal(_afi_,cst_o_CLOEXEC$0))
             if(caml_string_notequal(_afi_,cst_o_CREAT$0))
              if(caml_string_notequal(_afi_,cst_o_DSYNC$0))
               if(caml_string_notequal(_afi_,cst_o_EXCL$0))
                if(caml_string_notequal(_afi_,cst_o_KEEPEXEC$0))
                 if(caml_string_notequal(_afi_,cst_o_NOCTTY$0))
                  {if(! caml_string_notequal(_afi_,cst_o_NONBLOCK$0))
                    switch$1 = 4}
                 else
                  switch$1 = 9;
                else
                 switch$1 = 15;
               else
                switch$1 = 8;
              else
               switch$1 = 10;
             else
              switch$1 = 6;
            else
             switch$1 = 14}
         else
          switch$1 = 5;
        else
         {var _afl_=caml_string_compare(_afi_,cst_O_NONBLOCK$0);
          if(0 <= _afl_)
           if(0 < _afl_)
            if(caml_string_notequal(_afi_,cst_O_RDONLY$0))
             if(caml_string_notequal(_afi_,cst_O_RDWR$0))
              if(caml_string_notequal(_afi_,cst_O_RSYNC$0))
               if(caml_string_notequal(_afi_,cst_O_SHARE_DELETE$0))
                if(caml_string_notequal(_afi_,cst_O_SYNC$0))
                 if(caml_string_notequal(_afi_,cst_O_TRUNC$0))
                  {if(! caml_string_notequal(_afi_,cst_O_WRONLY$0))
                    switch$1 = 2}
                 else
                  switch$1 = 7;
                else
                 switch$1 = 11;
               else
                switch$1 = 13;
              else
               switch$1 = 12;
             else
              switch$1 = 3;
            else
             switch$1 = 1;
           else
            switch$1 = 4;
          else
           if(caml_string_notequal(_afi_,cst_O_APPEND$0))
            if(caml_string_notequal(_afi_,cst_O_CLOEXEC$0))
             if(caml_string_notequal(_afi_,cst_O_CREAT$0))
              if(caml_string_notequal(_afi_,cst_O_DSYNC$0))
               if(caml_string_notequal(_afi_,cst_O_EXCL$0))
                if(caml_string_notequal(_afi_,cst_O_KEEPEXEC$0))
                 {if(! caml_string_notequal(_afi_,cst_O_NOCTTY$0))switch$1 = 9}
                else
                 switch$1 = 15;
               else
                switch$1 = 8;
              else
               switch$1 = 10;
             else
              switch$1 = 6;
            else
             switch$1 = 14;
           else
            switch$1 = 5}
        switch(switch$1)
         {case 1:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$24,sexp);
          case 2:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$24,sexp);
          case 3:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$24,sexp);
          case 4:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$24,sexp);
          case 5:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$24,sexp);
          case 6:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$24,sexp);
          case 7:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$24,sexp);
          case 8:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$24,sexp);
          case 9:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$24,sexp);
          case 10:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$24,sexp);
          case 11:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$24,sexp);
          case 12:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$24,sexp);
          case 13:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$24,sexp);
          case 14:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$24,sexp);
          case 15:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$24,sexp)
          }}
      return caml_call2(Sexplib0_Sexp_conv_error[8],tp_loc$24,sexp)}
    function sexp_of_open_flag(param)
     {switch(param)
       {case 0:return _oD_;
        case 1:return _oE_;
        case 2:return _oF_;
        case 3:return _oG_;
        case 4:return _oH_;
        case 5:return _oI_;
        case 6:return _oJ_;
        case 7:return _oK_;
        case 8:return _oL_;
        case 9:return _oM_;
        case 10:return _oN_;
        case 11:return _oO_;
        case 12:return _oP_;
        case 13:return _oQ_;
        default:return _oR_}}
    function sexp_of_file_perm(fp)
     {return [0,caml_call2(Core_kernel_Printf[2],_oS_,fp)]}
    function is_rw_open_flag(param){return 3 <= param?0:1}
    function openfile(opt,mode,filename)
     {if(opt)var sth=opt[1],perm=sth;else var perm=420;
      function mode_sexp(param)
       {return caml_call2(_fs_,sexp_of_open_flag,mode)}
      if(caml_call2(Core_kernel_List[13],mode,is_rw_open_flag))
       {var
         _ae__=
          function(param)
           {var
             _afa_=[0,file_perm_r(perm),0],
             _afb_=[0,[0,cst_mode$0,mode_sexp(0)],_afa_];
            return [0,filename_r(filename),_afb_]};
        return improve
                (0,
                 function(param)
                  {return caml_call3(UnixLabels[22],filename,mode,perm)},
                 _ae__)}
      var _ae$_=mode_sexp(0);
      return caml_call3(_cz_,_oT_,caml_call1(Core_kernel_Sexp[81],_ae$_),0)}
    function close(restart){return unary_fd(restart,UnixLabels[23])}
    function with_file(perm,file,mode,f)
     {var fd=openfile(perm,mode,file);
      function _ae9_(param){return caml_call1(close(0),fd)}
      return caml_call2(_cQ_,function(param){return caml_call1(f,fd)},_ae9_)}
    function read_write(f,restart,pos,len,fd,buf)
     {var
       _ae5_=caml_call1(Core_kernel_Bytes[49],buf),
       match=caml_call4(Core_kernel_Ordered_collection[2],pos,len,0,_ae5_),
       len$0=match[2],
       pos$0=match[1];
      function _ae6_(param)
       {var
         _ae7_=[0,len_r(len$0),0],
         _ae8_=[0,[0,cst_pos$1,caml_call1(Core_kernel_Int[101],pos$0)],_ae7_];
        return [0,fd_r(fd),_ae8_]}
      return improve
              (restart,
               function(param){return caml_call4(f,fd,buf,pos$0,len$0)},
               _ae6_)}
    function read_write_string(f,restart,pos,len,fd,buf)
     {var
       match=
        caml_call4
         (Core_kernel_Ordered_collection[2],
          pos,
          len,
          0,
          caml_ml_string_length(buf)),
       len$0=match[2],
       pos$0=match[1];
      function _ae2_(param)
       {var
         _ae3_=[0,len_r(len$0),0],
         _ae4_=[0,[0,cst_pos$2,caml_call1(Core_kernel_Int[101],pos$0)],_ae3_];
        return [0,fd_r(fd),_ae4_]}
      return improve
              (restart,
               function(param){return caml_call4(f,fd,buf,pos$0,len$0)},
               _ae2_)}
    var _oU_=UnixLabels[24];
    function read(_aeX_,_aeY_,_aeZ_,_ae0_,_ae1_)
     {return read_write(_oU_,_aeX_,_aeY_,_aeZ_,_ae0_,_ae1_)}
    var _oV_=0,_oW_=UnixLabels[25];
    function write(_aeT_,_aeU_,_aeV_,_aeW_)
     {return read_write(_oW_,_oV_,_aeT_,_aeU_,_aeV_,_aeW_)}
    var _oX_=0,_oY_=UnixLabels[27];
    function write_substring(_aeP_,_aeQ_,_aeR_,_aeS_)
     {return read_write_string(_oY_,_oX_,_aeP_,_aeQ_,_aeR_,_aeS_)}
    var _oZ_=UnixLabels[26];
    function single_write(_aeK_,_aeL_,_aeM_,_aeN_,_aeO_)
     {return read_write(_oZ_,_aeK_,_aeL_,_aeM_,_aeN_,_aeO_)}
    var _o0_=UnixLabels[28];
    function single_write_substring(_aeF_,_aeG_,_aeH_,_aeI_,_aeJ_)
     {return read_write_string(_o0_,_aeF_,_aeG_,_aeH_,_aeI_,_aeJ_)}
    var
     in_channel_of_descr=UnixLabels[29],
     out_channel_of_descr=UnixLabels[30],
     descr_of_in_channel=UnixLabels[31],
     descr_of_out_channel=UnixLabels[32];
    function seek_command_of_sexp(sexp)
     {if(0 === sexp[0])
       {var _aeB_=sexp[1],switch$0=0;
        if(caml_string_notequal(_aeB_,cst_SEEK_CUR))
         {var switch$1=0;
          if(caml_string_notequal(_aeB_,cst_SEEK_END))
           {var switch$2=0;
            if(caml_string_notequal(_aeB_,cst_SEEK_SET))
             if(caml_string_notequal(_aeB_,cst_sEEK_CUR))
              if(caml_string_notequal(_aeB_,cst_sEEK_END))
               {if(caml_string_notequal(_aeB_,cst_sEEK_SET))
                 {switch$0 = 1;switch$1 = 1;switch$2 = 1}}
              else
               switch$2 = 1;
             else
              {switch$1 = 1;switch$2 = 1}
            if(! switch$2)return 0}
          if(! switch$1)return 2}
        if(! switch$0)return 1}
      else
       {var _aeC_=sexp[1];
        if(! _aeC_)
         return caml_call2(Sexplib0_Sexp_conv_error[7],tp_loc$25,sexp);
        var _aeD_=_aeC_[1];
        if(0 !== _aeD_[0])
         return caml_call2(Sexplib0_Sexp_conv_error[6],tp_loc$25,sexp);
        var _aeE_=_aeD_[1],switch$3=0;
        if(caml_string_notequal(_aeE_,cst_SEEK_CUR$0))
         {var switch$4=0;
          if(caml_string_notequal(_aeE_,cst_SEEK_END$0))
           {var switch$5=0;
            if(caml_string_notequal(_aeE_,cst_SEEK_SET$0))
             if(caml_string_notequal(_aeE_,cst_sEEK_CUR$0))
              if(caml_string_notequal(_aeE_,cst_sEEK_END$0))
               {if(caml_string_notequal(_aeE_,cst_sEEK_SET$0))
                 {switch$3 = 1;switch$4 = 1;switch$5 = 1}}
              else
               switch$5 = 1;
             else
              {switch$4 = 1;switch$5 = 1}
            if(! switch$5)
             return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$25,sexp)}
          if(! switch$4)
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$25,sexp)}
        if(! switch$3)
         return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$25,sexp)}
      return caml_call2(Sexplib0_Sexp_conv_error[8],tp_loc$25,sexp)}
    function sexp_of_seek_command(param)
     {switch(param){case 0:return _o1_;case 1:return _o2_;default:return _o3_}}
    function file_kind_of_sexp(sexp)
     {if(0 === sexp[0])
       {var
         _aev_=sexp[1],
         _aew_=caml_string_compare(_aev_,cst_s_BLK),
         switch$0=0;
        if(0 <= _aew_)
         if(0 < _aew_)
          if(caml_string_notequal(_aev_,cst_s_CHR))
           if(caml_string_notequal(_aev_,cst_s_DIR))
            if(caml_string_notequal(_aev_,cst_s_FIFO))
             if(caml_string_notequal(_aev_,cst_s_LNK))
              if(caml_string_notequal(_aev_,cst_s_REG))
               {if(! caml_string_notequal(_aev_,cst_s_SOCK))switch$0 = 7}
              else
               switch$0 = 1;
             else
              switch$0 = 5;
            else
             switch$0 = 6;
           else
            switch$0 = 2;
          else
           switch$0 = 3;
         else
          switch$0 = 4;
        else
         if(caml_string_notequal(_aev_,cst_S_BLK))
          if(caml_string_notequal(_aev_,cst_S_CHR))
           if(caml_string_notequal(_aev_,cst_S_DIR))
            if(caml_string_notequal(_aev_,cst_S_FIFO))
             if(caml_string_notequal(_aev_,cst_S_LNK))
              if(caml_string_notequal(_aev_,cst_S_REG))
               {if(! caml_string_notequal(_aev_,cst_S_SOCK))switch$0 = 7}
              else
               switch$0 = 1;
             else
              switch$0 = 5;
            else
             switch$0 = 6;
           else
            switch$0 = 2;
          else
           switch$0 = 3;
         else
          switch$0 = 4;
        switch(switch$0)
         {case 1:return 0;
          case 2:return 1;
          case 3:return 2;
          case 4:return 3;
          case 5:return 4;
          case 6:return 5;
          case 7:return 6
          }}
      else
       {var _aex_=sexp[1];
        if(! _aex_)
         return caml_call2(Sexplib0_Sexp_conv_error[7],tp_loc$26,sexp);
        var _aey_=_aex_[1];
        if(0 !== _aey_[0])
         return caml_call2(Sexplib0_Sexp_conv_error[6],tp_loc$26,sexp);
        var
         _aez_=_aey_[1],
         _aeA_=caml_string_compare(_aez_,cst_s_BLK$0),
         switch$1=0;
        if(0 <= _aeA_)
         if(0 < _aeA_)
          if(caml_string_notequal(_aez_,cst_s_CHR$0))
           if(caml_string_notequal(_aez_,cst_s_DIR$0))
            if(caml_string_notequal(_aez_,cst_s_FIFO$0))
             if(caml_string_notequal(_aez_,cst_s_LNK$0))
              if(caml_string_notequal(_aez_,cst_s_REG$0))
               {if(! caml_string_notequal(_aez_,cst_s_SOCK$0))switch$1 = 7}
              else
               switch$1 = 1;
             else
              switch$1 = 5;
            else
             switch$1 = 6;
           else
            switch$1 = 2;
          else
           switch$1 = 3;
         else
          switch$1 = 4;
        else
         if(caml_string_notequal(_aez_,cst_S_BLK$0))
          if(caml_string_notequal(_aez_,cst_S_CHR$0))
           if(caml_string_notequal(_aez_,cst_S_DIR$0))
            if(caml_string_notequal(_aez_,cst_S_FIFO$0))
             if(caml_string_notequal(_aez_,cst_S_LNK$0))
              if(caml_string_notequal(_aez_,cst_S_REG$0))
               {if(! caml_string_notequal(_aez_,cst_S_SOCK$0))switch$1 = 7}
              else
               switch$1 = 1;
             else
              switch$1 = 5;
            else
             switch$1 = 6;
           else
            switch$1 = 2;
          else
           switch$1 = 3;
         else
          switch$1 = 4;
        switch(switch$1)
         {case 1:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$26,sexp);
          case 2:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$26,sexp);
          case 3:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$26,sexp);
          case 4:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$26,sexp);
          case 5:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$26,sexp);
          case 6:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$26,sexp);
          case 7:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$26,sexp)
          }}
      return caml_call2(Sexplib0_Sexp_conv_error[8],tp_loc$26,sexp)}
    function sexp_of_file_kind(param)
     {switch(param)
       {case 0:return _o4_;
        case 1:return _o5_;
        case 2:return _o6_;
        case 3:return _o7_;
        case 4:return _o8_;
        case 5:return _o9_;
        default:return _o__}}
    var isatty=unary_fd(0,UnixLabels[39]);
    function stats_of_sexp(sexp)
     {if(0 === sexp[0])
       return caml_call2(Sexplib0_Sexp_conv_error[16],tp_loc$27,sexp);
      var
       field_sexps=sexp[1],
       st_dev_field=[0,0],
       st_ino_field=[0,0],
       st_kind_field=[0,0],
       st_perm_field=[0,0],
       st_nlink_field=[0,0],
       st_uid_field=[0,0],
       st_gid_field=[0,0],
       st_rdev_field=[0,0],
       st_size_field=[0,0],
       st_atime_field=[0,0],
       st_mtime_field=[0,0],
       st_ctime_field=[0,0],
       duplicates=[0,0],
       extra=[0,0],
       param=field_sexps;
      for(;;)
       {if(param)
         {var _aed_=param[1];
          if(1 === _aed_[0])
           {var _aee_=_aed_[1];
            if(_aee_)
             {var _aef_=_aee_[1];
              if(0 === _aef_[0])
               {var _aeg_=_aee_[2],_aeh_=_aef_[1],switch$1=0;
                if(! _aeg_ || ! _aeg_[2])switch$1 = 1;
                if(switch$1)
                 {var
                   tail=param[2],
                   field_sexp$12=
                    function(_aeu_)
                     {function field_sexp(param)
                       {if(_aeu_)
                         {if(_aeu_[2])throw [0,Assert_failure,_o$_];
                          var x=_aeu_[1];
                          return x}
                        return caml_call2
                                (Sexplib0_Sexp_conv_error[10],tp_loc$27,sexp)}
                      return field_sexp},
                   field_sexp=field_sexp$12(_aeg_),
                   switch$0=caml_string_compare(_aeh_,cst_st_mtime),
                   switch$2=0;
                  if(0 <= switch$0)
                   if(0 < switch$0)
                    if(caml_string_notequal(_aeh_,cst_st_nlink))
                     if(caml_string_notequal(_aeh_,cst_st_perm))
                      if(caml_string_notequal(_aeh_,cst_st_rdev))
                       if(caml_string_notequal(_aeh_,cst_st_size))
                        if(caml_string_notequal(_aeh_,cst_st_uid))
                         switch$2 = 1;
                        else
                         if(st_uid_field[1])
                          duplicates[1] = [0,_aeh_,duplicates[1]];
                         else
                          {var
                            field_sexp$0=field_sexp(0),
                            fvalue=caml_call1(file_perm_of_sexp,field_sexp$0);
                           st_uid_field[1] = [0,fvalue]}
                       else
                        if(st_size_field[1])
                         duplicates[1] = [0,_aeh_,duplicates[1]];
                        else
                         {var
                           field_sexp$1=field_sexp(0),
                           fvalue$0=caml_call1(file_perm_of_sexp,field_sexp$1);
                          st_size_field[1] = [0,fvalue$0]}
                      else
                       if(st_rdev_field[1])
                        duplicates[1] = [0,_aeh_,duplicates[1]];
                       else
                        {var
                          field_sexp$2=field_sexp(0),
                          fvalue$1=caml_call1(file_perm_of_sexp,field_sexp$2);
                         st_rdev_field[1] = [0,fvalue$1]}
                     else
                      if(st_perm_field[1])
                       duplicates[1] = [0,_aeh_,duplicates[1]];
                      else
                       {var
                         field_sexp$3=field_sexp(0),
                         fvalue$2=caml_call1(file_perm_of_sexp,field_sexp$3);
                        st_perm_field[1] = [0,fvalue$2]}
                    else
                     if(st_nlink_field[1])
                      duplicates[1] = [0,_aeh_,duplicates[1]];
                     else
                      {var
                        field_sexp$4=field_sexp(0),
                        fvalue$3=caml_call1(file_perm_of_sexp,field_sexp$4);
                       st_nlink_field[1] = [0,fvalue$3]}
                   else
                    if(st_mtime_field[1])
                     duplicates[1] = [0,_aeh_,duplicates[1]];
                    else
                     {var
                       field_sexp$5=field_sexp(0),
                       fvalue$4=caml_call1(_ec_,field_sexp$5);
                      st_mtime_field[1] = [0,fvalue$4]}
                  else
                   if(caml_string_notequal(_aeh_,cst_st_atime))
                    if(caml_string_notequal(_aeh_,cst_st_ctime))
                     if(caml_string_notequal(_aeh_,cst_st_dev))
                      if(caml_string_notequal(_aeh_,cst_st_gid))
                       if(caml_string_notequal(_aeh_,cst_st_ino))
                        if(caml_string_notequal(_aeh_,cst_st_kind))
                         switch$2 = 1;
                        else
                         if(st_kind_field[1])
                          duplicates[1] = [0,_aeh_,duplicates[1]];
                         else
                          {var
                            field_sexp$6=field_sexp(0),
                            fvalue$5=file_kind_of_sexp(field_sexp$6);
                           st_kind_field[1] = [0,fvalue$5]}
                       else
                        if(st_ino_field[1])
                         duplicates[1] = [0,_aeh_,duplicates[1]];
                        else
                         {var
                           field_sexp$7=field_sexp(0),
                           fvalue$6=caml_call1(file_perm_of_sexp,field_sexp$7);
                          st_ino_field[1] = [0,fvalue$6]}
                      else
                       if(st_gid_field[1])
                        duplicates[1] = [0,_aeh_,duplicates[1]];
                       else
                        {var
                          field_sexp$8=field_sexp(0),
                          fvalue$7=caml_call1(file_perm_of_sexp,field_sexp$8);
                         st_gid_field[1] = [0,fvalue$7]}
                     else
                      if(st_dev_field[1])
                       duplicates[1] = [0,_aeh_,duplicates[1]];
                      else
                       {var
                         field_sexp$9=field_sexp(0),
                         fvalue$8=caml_call1(file_perm_of_sexp,field_sexp$9);
                        st_dev_field[1] = [0,fvalue$8]}
                    else
                     if(st_ctime_field[1])
                      duplicates[1] = [0,_aeh_,duplicates[1]];
                     else
                      {var
                        field_sexp$10=field_sexp(0),
                        fvalue$9=caml_call1(_ec_,field_sexp$10);
                       st_ctime_field[1] = [0,fvalue$9]}
                   else
                    if(st_atime_field[1])
                     duplicates[1] = [0,_aeh_,duplicates[1]];
                    else
                     {var
                       field_sexp$11=field_sexp(0),
                       fvalue$10=caml_call1(_ec_,field_sexp$11);
                      st_atime_field[1] = [0,fvalue$10]}
                  if(switch$2 && Sexplib0_Sexp_conv[26][1])
                   extra[1] = [0,_aeh_,extra[1]];
                  var param=tail;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[10],tp_loc$27,_aed_)}
        if(duplicates[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],tp_loc$27,duplicates[1],sexp);
        if(extra[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[13],tp_loc$27,extra[1],sexp);
        var
         _aei_=st_dev_field[1],
         _aej_=st_ino_field[1],
         _aek_=st_kind_field[1],
         _ael_=st_perm_field[1],
         _aem_=st_nlink_field[1],
         _aen_=st_uid_field[1],
         _aeo_=st_gid_field[1],
         _aep_=st_rdev_field[1],
         _aeq_=st_size_field[1],
         _aer_=st_atime_field[1],
         _aes_=st_mtime_field[1],
         _aet_=st_ctime_field[1];
        if
         (_aei_
          &&
          _aej_
          &&
          _aek_
          &&
          _ael_
          &&
          _aem_
          &&
          _aen_
          &&
          _aeo_
          &&
          _aep_
          &&
          _aeq_
          &&
          _aer_
          &&
          _aes_
          &&
          _aet_)
         {var
           st_ctime_value=_aet_[1],
           st_mtime_value=_aes_[1],
           st_atime_value=_aer_[1],
           st_size_value=_aeq_[1],
           st_rdev_value=_aep_[1],
           st_gid_value=_aeo_[1],
           st_uid_value=_aen_[1],
           st_nlink_value=_aem_[1],
           st_perm_value=_ael_[1],
           st_kind_value=_aek_[1],
           st_ino_value=_aej_[1],
           st_dev_value=_aei_[1];
          return [0,
                  st_dev_value,
                  st_ino_value,
                  st_kind_value,
                  st_perm_value,
                  st_nlink_value,
                  st_uid_value,
                  st_gid_value,
                  st_rdev_value,
                  st_size_value,
                  st_atime_value,
                  st_mtime_value,
                  st_ctime_value]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[15],
                 tp_loc$27,
                 sexp,
                 [0,
                  [0,0 === st_dev_field[1]?1:0,cst_st_dev$0],
                  [0,
                   [0,0 === st_ino_field[1]?1:0,cst_st_ino$0],
                   [0,
                    [0,0 === st_kind_field[1]?1:0,cst_st_kind$0],
                    [0,
                     [0,0 === st_perm_field[1]?1:0,cst_st_perm$0],
                     [0,
                      [0,0 === st_nlink_field[1]?1:0,cst_st_nlink$0],
                      [0,
                       [0,0 === st_uid_field[1]?1:0,cst_st_uid$0],
                       [0,
                        [0,0 === st_gid_field[1]?1:0,cst_st_gid$0],
                        [0,
                         [0,0 === st_rdev_field[1]?1:0,cst_st_rdev$0],
                         [0,
                          [0,0 === st_size_field[1]?1:0,cst_st_size$0],
                          [0,
                           [0,0 === st_atime_field[1]?1:0,cst_st_atime$0],
                           [0,
                            [0,0 === st_mtime_field[1]?1:0,cst_st_mtime$0],
                            [0,[0,0 === st_ctime_field[1]?1:0,cst_st_ctime$0],0]]]]]]]]]]]])}}
    function sexp_of_stats(param)
     {var
       v_st_ctime=param[12],
       v_st_mtime=param[11],
       v_st_atime=param[10],
       v_st_size=param[9],
       v_st_rdev=param[8],
       v_st_gid=param[7],
       v_st_uid=param[6],
       v_st_nlink=param[5],
       v_st_perm=param[4],
       v_st_kind=param[3],
       v_st_ino=param[2],
       v_st_dev=param[1],
       arg=caml_call1(_eb_,v_st_ctime),
       bnds=[0,[1,[0,_pa_,[0,arg,0]]],0],
       arg$0=caml_call1(_eb_,v_st_mtime),
       bnds$0=[0,[1,[0,_pb_,[0,arg$0,0]]],bnds],
       arg$1=caml_call1(_eb_,v_st_atime),
       bnds$1=[0,[1,[0,_pc_,[0,arg$1,0]]],bnds$0],
       arg$2=caml_call1(_es_,v_st_size),
       bnds$2=[0,[1,[0,_pd_,[0,arg$2,0]]],bnds$1],
       arg$3=caml_call1(_es_,v_st_rdev),
       bnds$3=[0,[1,[0,_pe_,[0,arg$3,0]]],bnds$2],
       arg$4=caml_call1(_es_,v_st_gid),
       bnds$4=[0,[1,[0,_pf_,[0,arg$4,0]]],bnds$3],
       arg$5=caml_call1(_es_,v_st_uid),
       bnds$5=[0,[1,[0,_pg_,[0,arg$5,0]]],bnds$4],
       arg$6=caml_call1(_es_,v_st_nlink),
       bnds$6=[0,[1,[0,_ph_,[0,arg$6,0]]],bnds$5],
       arg$7=sexp_of_file_perm(v_st_perm),
       bnds$7=[0,[1,[0,_pi_,[0,arg$7,0]]],bnds$6],
       arg$8=sexp_of_file_kind(v_st_kind),
       bnds$8=[0,[1,[0,_pj_,[0,arg$8,0]]],bnds$7],
       arg$9=caml_call1(_es_,v_st_ino),
       bnds$9=[0,[1,[0,_pk_,[0,arg$9,0]]],bnds$8],
       arg$10=caml_call1(_es_,v_st_dev),
       bnds$10=[0,[1,[0,_pl_,[0,arg$10,0]]],bnds$9];
      return [1,bnds$10]}
    var
     stat=unary_filename(0,UnixLabels[36]),
     lstat=unary_filename(0,UnixLabels[37]),
     fstat=unary_fd(0,UnixLabels[38]);
    function lseek(fd,pos,mode)
     {function _aea_(param)
       {var
         _aeb_=[0,[0,cst_mode$1,sexp_of_seek_command(mode)],0],
         _aec_=[0,[0,cst_pos$3,caml_call1(Core_kernel_Int[101],pos)],_aeb_];
        return [0,fd_r(fd),_aec_]}
      return improve
              (0,
               function(param){return caml_call3(UnixLabels[33],fd,pos,mode)},
               _aea_)}
    function truncate(filename,len)
     {function _ad__(param)
       {var _ad$_=[0,len_r(len),0];return [0,filename_r(filename),_ad$_]}
      return improve
              (0,
               function(param){return caml_call2(UnixLabels[34],filename,len)},
               _ad__)}
    function ftruncate(fd,len)
     {function _ad8_(param)
       {var _ad9_=[0,len_r(len),0];return [0,fd_r(fd),_ad9_]}
      return improve
              (0,
               function(param){return caml_call2(UnixLabels[35],fd,len)},
               _ad8_)}
    function lock_command_of_sexp(sexp)
     {if(0 === sexp[0])
       {var
         _ad2_=sexp[1],
         _ad3_=caml_string_compare(_ad2_,cst_f_LOCK),
         switch$0=0;
        if(0 <= _ad3_)
         if(0 < _ad3_)
          if(caml_string_notequal(_ad2_,cst_f_RLOCK))
           if(caml_string_notequal(_ad2_,cst_f_TEST))
            if(caml_string_notequal(_ad2_,cst_f_TLOCK))
             if(caml_string_notequal(_ad2_,cst_f_TRLOCK))
              {if(! caml_string_notequal(_ad2_,cst_f_ULOCK))switch$0 = 1}
             else
              switch$0 = 6;
            else
             switch$0 = 3;
           else
            switch$0 = 4;
          else
           switch$0 = 5;
         else
          switch$0 = 2;
        else
         if(caml_string_notequal(_ad2_,cst_F_LOCK))
          if(caml_string_notequal(_ad2_,cst_F_RLOCK))
           if(caml_string_notequal(_ad2_,cst_F_TEST))
            if(caml_string_notequal(_ad2_,cst_F_TLOCK))
             if(caml_string_notequal(_ad2_,cst_F_TRLOCK))
              {if(! caml_string_notequal(_ad2_,cst_F_ULOCK))switch$0 = 1}
             else
              switch$0 = 6;
            else
             switch$0 = 3;
           else
            switch$0 = 4;
          else
           switch$0 = 5;
         else
          switch$0 = 2;
        switch(switch$0)
         {case 1:return 0;
          case 2:return 1;
          case 3:return 2;
          case 4:return 3;
          case 5:return 4;
          case 6:return 5
          }}
      else
       {var _ad4_=sexp[1];
        if(! _ad4_)
         return caml_call2(Sexplib0_Sexp_conv_error[7],tp_loc$28,sexp);
        var _ad5_=_ad4_[1];
        if(0 !== _ad5_[0])
         return caml_call2(Sexplib0_Sexp_conv_error[6],tp_loc$28,sexp);
        var
         _ad6_=_ad5_[1],
         _ad7_=caml_string_compare(_ad6_,cst_f_LOCK$0),
         switch$1=0;
        if(0 <= _ad7_)
         if(0 < _ad7_)
          if(caml_string_notequal(_ad6_,cst_f_RLOCK$0))
           if(caml_string_notequal(_ad6_,cst_f_TEST$0))
            if(caml_string_notequal(_ad6_,cst_f_TLOCK$0))
             if(caml_string_notequal(_ad6_,cst_f_TRLOCK$0))
              {if(! caml_string_notequal(_ad6_,cst_f_ULOCK$0))switch$1 = 1}
             else
              switch$1 = 6;
            else
             switch$1 = 3;
           else
            switch$1 = 4;
          else
           switch$1 = 5;
         else
          switch$1 = 2;
        else
         if(caml_string_notequal(_ad6_,cst_F_LOCK$0))
          if(caml_string_notequal(_ad6_,cst_F_RLOCK$0))
           if(caml_string_notequal(_ad6_,cst_F_TEST$0))
            if(caml_string_notequal(_ad6_,cst_F_TLOCK$0))
             if(caml_string_notequal(_ad6_,cst_F_TRLOCK$0))
              {if(! caml_string_notequal(_ad6_,cst_F_ULOCK$0))switch$1 = 1}
             else
              switch$1 = 6;
            else
             switch$1 = 3;
           else
            switch$1 = 4;
          else
           switch$1 = 5;
         else
          switch$1 = 2;
        switch(switch$1)
         {case 1:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$28,sexp);
          case 2:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$28,sexp);
          case 3:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$28,sexp);
          case 4:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$28,sexp);
          case 5:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$28,sexp);
          case 6:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$28,sexp)
          }}
      return caml_call2(Sexplib0_Sexp_conv_error[8],tp_loc$28,sexp)}
    function sexp_of_lock_command(param)
     {switch(param)
       {case 0:return _pm_;
        case 1:return _pn_;
        case 2:return _po_;
        case 3:return _pp_;
        case 4:return _pq_;
        default:return _pr_}}
    function lockf(fd,mode,len)
     {try
       {var _adY_=caml_call1(Core_kernel_Int64[5],len),len$0=_adY_}
      catch(_ad1_){var len$0=caml_call1(_b_,cst_len_passed_to_Unix_lockf_t)}
      function _adX_(param)
       {var
         _adZ_=[0,len_r(len$0),0],
         _ad0_=[0,[0,cst_mode$2,sexp_of_lock_command(mode)],_adZ_];
        return [0,fd_r(fd),_ad0_]}
      return improve
              (0,
               function(param)
                {return caml_call3(UnixLabels[86],fd,mode,len$0)},
               _adX_)}
    var Flock_command=[0,0,1,2];
    function flock(_adV_,_adW_){return runtime.core_unix_flock(0,_adV_,_adW_)}
    function flock_blocking(fd,command)
     {if(runtime.core_unix_flock(1,fd,command))return 0;
      throw [0,Assert_failure,_ps_]}
    function lseek$0(fd,pos,mode)
     {function _adS_(param)
       {var
         _adT_=[0,[0,cst_mode$3,sexp_of_seek_command(mode)],0],
         _adU_=[0,[0,cst_pos$4,caml_call1(Core_kernel_Int64[102],pos)],_adT_];
        return [0,fd_r(fd),_adU_]}
      return improve
              (0,
               function(param)
                {return caml_call3(UnixLabels[40][1],fd,pos,mode)},
               _adS_)}
    function len64_r(len)
     {return [0,cst_len$2,caml_call1(Core_kernel_Int64[102],len)]}
    function truncate$0(filename,len)
     {function _adQ_(param)
       {var _adR_=[0,len64_r(len),0];return [0,filename_r(filename),_adR_]}
      return improve
              (0,
               function(param)
                {return caml_call2(UnixLabels[40][2],filename,len)},
               _adQ_)}
    function ftruncate$0(fd,len)
     {function _adO_(param)
       {var _adP_=[0,len64_r(len),0];return [0,fd_r(fd),_adP_]}
      return improve
              (0,
               function(param){return caml_call2(UnixLabels[40][3],fd,len)},
               _adO_)}
    function stats_of_sexp$0(sexp)
     {if(0 === sexp[0])
       return caml_call2(Sexplib0_Sexp_conv_error[16],tp_loc$29,sexp);
      var
       field_sexps=sexp[1],
       st_dev_field=[0,0],
       st_ino_field=[0,0],
       st_kind_field=[0,0],
       st_perm_field=[0,0],
       st_nlink_field=[0,0],
       st_uid_field=[0,0],
       st_gid_field=[0,0],
       st_rdev_field=[0,0],
       st_size_field=[0,0],
       st_atime_field=[0,0],
       st_mtime_field=[0,0],
       st_ctime_field=[0,0],
       duplicates=[0,0],
       extra=[0,0],
       param=field_sexps;
      for(;;)
       {if(param)
         {var _adw_=param[1];
          if(1 === _adw_[0])
           {var _adx_=_adw_[1];
            if(_adx_)
             {var _ady_=_adx_[1];
              if(0 === _ady_[0])
               {var _adz_=_adx_[2],_adA_=_ady_[1],switch$1=0;
                if(! _adz_ || ! _adz_[2])switch$1 = 1;
                if(switch$1)
                 {var
                   tail=param[2],
                   field_sexp$12=
                    function(_adN_)
                     {function field_sexp(param)
                       {if(_adN_)
                         {if(_adN_[2])throw [0,Assert_failure,_pt_];
                          var x=_adN_[1];
                          return x}
                        return caml_call2
                                (Sexplib0_Sexp_conv_error[10],tp_loc$29,sexp)}
                      return field_sexp},
                   field_sexp=field_sexp$12(_adz_),
                   switch$0=caml_string_compare(_adA_,cst_st_mtime$1),
                   switch$2=0;
                  if(0 <= switch$0)
                   if(0 < switch$0)
                    if(caml_string_notequal(_adA_,cst_st_nlink$1))
                     if(caml_string_notequal(_adA_,cst_st_perm$1))
                      if(caml_string_notequal(_adA_,cst_st_rdev$1))
                       if(caml_string_notequal(_adA_,cst_st_size$1))
                        if(caml_string_notequal(_adA_,cst_st_uid$1))
                         switch$2 = 1;
                        else
                         if(st_uid_field[1])
                          duplicates[1] = [0,_adA_,duplicates[1]];
                         else
                          {var
                            field_sexp$0=field_sexp(0),
                            fvalue=caml_call1(file_perm_of_sexp,field_sexp$0);
                           st_uid_field[1] = [0,fvalue]}
                       else
                        if(st_size_field[1])
                         duplicates[1] = [0,_adA_,duplicates[1]];
                        else
                         {var
                           field_sexp$1=field_sexp(0),
                           fvalue$0=caml_call1(_e0_,field_sexp$1);
                          st_size_field[1] = [0,fvalue$0]}
                      else
                       if(st_rdev_field[1])
                        duplicates[1] = [0,_adA_,duplicates[1]];
                       else
                        {var
                          field_sexp$2=field_sexp(0),
                          fvalue$1=caml_call1(file_perm_of_sexp,field_sexp$2);
                         st_rdev_field[1] = [0,fvalue$1]}
                     else
                      if(st_perm_field[1])
                       duplicates[1] = [0,_adA_,duplicates[1]];
                      else
                       {var
                         field_sexp$3=field_sexp(0),
                         fvalue$2=caml_call1(file_perm_of_sexp,field_sexp$3);
                        st_perm_field[1] = [0,fvalue$2]}
                    else
                     if(st_nlink_field[1])
                      duplicates[1] = [0,_adA_,duplicates[1]];
                     else
                      {var
                        field_sexp$4=field_sexp(0),
                        fvalue$3=caml_call1(file_perm_of_sexp,field_sexp$4);
                       st_nlink_field[1] = [0,fvalue$3]}
                   else
                    if(st_mtime_field[1])
                     duplicates[1] = [0,_adA_,duplicates[1]];
                    else
                     {var
                       field_sexp$5=field_sexp(0),
                       fvalue$4=caml_call1(_ec_,field_sexp$5);
                      st_mtime_field[1] = [0,fvalue$4]}
                  else
                   if(caml_string_notequal(_adA_,cst_st_atime$1))
                    if(caml_string_notequal(_adA_,cst_st_ctime$1))
                     if(caml_string_notequal(_adA_,cst_st_dev$1))
                      if(caml_string_notequal(_adA_,cst_st_gid$1))
                       if(caml_string_notequal(_adA_,cst_st_ino$1))
                        if(caml_string_notequal(_adA_,cst_st_kind$1))
                         switch$2 = 1;
                        else
                         if(st_kind_field[1])
                          duplicates[1] = [0,_adA_,duplicates[1]];
                         else
                          {var
                            field_sexp$6=field_sexp(0),
                            fvalue$5=file_kind_of_sexp(field_sexp$6);
                           st_kind_field[1] = [0,fvalue$5]}
                       else
                        if(st_ino_field[1])
                         duplicates[1] = [0,_adA_,duplicates[1]];
                        else
                         {var
                           field_sexp$7=field_sexp(0),
                           fvalue$6=caml_call1(file_perm_of_sexp,field_sexp$7);
                          st_ino_field[1] = [0,fvalue$6]}
                      else
                       if(st_gid_field[1])
                        duplicates[1] = [0,_adA_,duplicates[1]];
                       else
                        {var
                          field_sexp$8=field_sexp(0),
                          fvalue$7=caml_call1(file_perm_of_sexp,field_sexp$8);
                         st_gid_field[1] = [0,fvalue$7]}
                     else
                      if(st_dev_field[1])
                       duplicates[1] = [0,_adA_,duplicates[1]];
                      else
                       {var
                         field_sexp$9=field_sexp(0),
                         fvalue$8=caml_call1(file_perm_of_sexp,field_sexp$9);
                        st_dev_field[1] = [0,fvalue$8]}
                    else
                     if(st_ctime_field[1])
                      duplicates[1] = [0,_adA_,duplicates[1]];
                     else
                      {var
                        field_sexp$10=field_sexp(0),
                        fvalue$9=caml_call1(_ec_,field_sexp$10);
                       st_ctime_field[1] = [0,fvalue$9]}
                   else
                    if(st_atime_field[1])
                     duplicates[1] = [0,_adA_,duplicates[1]];
                    else
                     {var
                       field_sexp$11=field_sexp(0),
                       fvalue$10=caml_call1(_ec_,field_sexp$11);
                      st_atime_field[1] = [0,fvalue$10]}
                  if(switch$2 && Sexplib0_Sexp_conv[26][1])
                   extra[1] = [0,_adA_,extra[1]];
                  var param=tail;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[10],tp_loc$29,_adw_)}
        if(duplicates[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],tp_loc$29,duplicates[1],sexp);
        if(extra[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[13],tp_loc$29,extra[1],sexp);
        var
         _adB_=st_dev_field[1],
         _adC_=st_ino_field[1],
         _adD_=st_kind_field[1],
         _adE_=st_perm_field[1],
         _adF_=st_nlink_field[1],
         _adG_=st_uid_field[1],
         _adH_=st_gid_field[1],
         _adI_=st_rdev_field[1],
         _adJ_=st_size_field[1],
         _adK_=st_atime_field[1],
         _adL_=st_mtime_field[1],
         _adM_=st_ctime_field[1];
        if
         (_adB_
          &&
          _adC_
          &&
          _adD_
          &&
          _adE_
          &&
          _adF_
          &&
          _adG_
          &&
          _adH_
          &&
          _adI_
          &&
          _adJ_
          &&
          _adK_
          &&
          _adL_
          &&
          _adM_)
         {var
           st_ctime_value=_adM_[1],
           st_mtime_value=_adL_[1],
           st_atime_value=_adK_[1],
           st_size_value=_adJ_[1],
           st_rdev_value=_adI_[1],
           st_gid_value=_adH_[1],
           st_uid_value=_adG_[1],
           st_nlink_value=_adF_[1],
           st_perm_value=_adE_[1],
           st_kind_value=_adD_[1],
           st_ino_value=_adC_[1],
           st_dev_value=_adB_[1];
          return [0,
                  st_dev_value,
                  st_ino_value,
                  st_kind_value,
                  st_perm_value,
                  st_nlink_value,
                  st_uid_value,
                  st_gid_value,
                  st_rdev_value,
                  st_size_value,
                  st_atime_value,
                  st_mtime_value,
                  st_ctime_value]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[15],
                 tp_loc$29,
                 sexp,
                 [0,
                  [0,0 === st_dev_field[1]?1:0,cst_st_dev$2],
                  [0,
                   [0,0 === st_ino_field[1]?1:0,cst_st_ino$2],
                   [0,
                    [0,0 === st_kind_field[1]?1:0,cst_st_kind$2],
                    [0,
                     [0,0 === st_perm_field[1]?1:0,cst_st_perm$2],
                     [0,
                      [0,0 === st_nlink_field[1]?1:0,cst_st_nlink$2],
                      [0,
                       [0,0 === st_uid_field[1]?1:0,cst_st_uid$2],
                       [0,
                        [0,0 === st_gid_field[1]?1:0,cst_st_gid$2],
                        [0,
                         [0,0 === st_rdev_field[1]?1:0,cst_st_rdev$2],
                         [0,
                          [0,0 === st_size_field[1]?1:0,cst_st_size$2],
                          [0,
                           [0,0 === st_atime_field[1]?1:0,cst_st_atime$2],
                           [0,
                            [0,0 === st_mtime_field[1]?1:0,cst_st_mtime$2],
                            [0,[0,0 === st_ctime_field[1]?1:0,cst_st_ctime$2],0]]]]]]]]]]]])}}
    function sexp_of_stats$0(param)
     {var
       v_st_ctime=param[12],
       v_st_mtime=param[11],
       v_st_atime=param[10],
       v_st_size=param[9],
       v_st_rdev=param[8],
       v_st_gid=param[7],
       v_st_uid=param[6],
       v_st_nlink=param[5],
       v_st_perm=param[4],
       v_st_kind=param[3],
       v_st_ino=param[2],
       v_st_dev=param[1],
       arg=caml_call1(_eb_,v_st_ctime),
       bnds=[0,[1,[0,_pu_,[0,arg,0]]],0],
       arg$0=caml_call1(_eb_,v_st_mtime),
       bnds$0=[0,[1,[0,_pv_,[0,arg$0,0]]],bnds],
       arg$1=caml_call1(_eb_,v_st_atime),
       bnds$1=[0,[1,[0,_pw_,[0,arg$1,0]]],bnds$0],
       arg$2=caml_call1(_eZ_,v_st_size),
       bnds$2=[0,[1,[0,_px_,[0,arg$2,0]]],bnds$1],
       arg$3=caml_call1(_es_,v_st_rdev),
       bnds$3=[0,[1,[0,_py_,[0,arg$3,0]]],bnds$2],
       arg$4=caml_call1(_es_,v_st_gid),
       bnds$4=[0,[1,[0,_pz_,[0,arg$4,0]]],bnds$3],
       arg$5=caml_call1(_es_,v_st_uid),
       bnds$5=[0,[1,[0,_pA_,[0,arg$5,0]]],bnds$4],
       arg$6=caml_call1(_es_,v_st_nlink),
       bnds$6=[0,[1,[0,_pB_,[0,arg$6,0]]],bnds$5],
       arg$7=sexp_of_file_perm(v_st_perm),
       bnds$7=[0,[1,[0,_pC_,[0,arg$7,0]]],bnds$6],
       arg$8=sexp_of_file_kind(v_st_kind),
       bnds$8=[0,[1,[0,_pD_,[0,arg$8,0]]],bnds$7],
       arg$9=caml_call1(_es_,v_st_ino),
       bnds$9=[0,[1,[0,_pE_,[0,arg$9,0]]],bnds$8],
       arg$10=caml_call1(_es_,v_st_dev),
       bnds$10=[0,[1,[0,_pF_,[0,arg$10,0]]],bnds$9];
      return [1,bnds$10]}
    var
     stat$0=unary_filename(0,UnixLabels[40][4]),
     lstat$0=unary_filename(0,UnixLabels[40][5]),
     fstat$0=unary_fd(0,UnixLabels[40][6]),
     unlink=unary_filename(0,UnixLabels[42]),
     _pG_=UnixLabels[43];
    function rename$0(src,dst)
     {function _adv_(param)
       {return [0,[0,cst_src,[0,src]],[0,[0,cst_dst,[0,dst]],0]]}
      return improve(0,function(param){return caml_call2(_pG_,src,dst)},_adv_)}
    function unix_link(src,dst){return caml_call3(UnixLabels[44],0,src,dst)}
    function link(opt,target,link_name,param)
     {if(opt)var sth=opt[1],force=sth;else var force=0;
      function _ads_(param)
       {return [0,
                [0,cst_target,[0,target]],
                [0,[0,cst_link_name,[0,link_name]],0]]}
      return improve
              (0,
               function(param)
                {if(force)
                  try
                   {caml_call1(UnixLabels[42],link_name)}
                  catch(_adu_)
                   {_adu_ = caml_wrap_exception(_adu_);
                    var switch$0=0;
                    if(_adu_[1] === Unix_error)
                     {var _adt_=_adu_[2];
                      if(typeof _adt_ !== "number" || 20 !== _adt_)switch$0 = 1}
                    else
                     switch$0 = 1;
                    if(switch$0)throw _adu_}
                 return unix_link(target,link_name)},
               _ads_)}
    function map_file(fd,pos,kind,layout,shared,dims)
     {return caml_call6(UnixLabels[41],fd,pos,kind,layout,shared,dims)}
    function sexp_of_access_permission(param)
     {switch(param)
       {case 0:return _pH_;
        case 1:return _pI_;
        case 2:return _pJ_;
        default:return _pK_}}
    function chmod(filename,perm)
     {function _adq_(param)
       {var _adr_=[0,file_perm_r(perm),0];
        return [0,filename_r(filename),_adr_]}
      return improve
              (0,
               function(param)
                {return caml_call2(UnixLabels[45],filename,perm)},
               _adq_)}
    function fchmod(fd,perm)
     {function _ado_(param)
       {var _adp_=[0,file_perm_r(perm),0];return [0,fd_r(fd),_adp_]}
      return improve
              (0,
               function(param){return caml_call2(UnixLabels[46],fd,perm)},
               _ado_)}
    function chown(filename,uid,gid)
     {function _adl_(param)
       {var _adm_=[0,gid_r(gid),0],_adn_=[0,uid_r(uid),_adm_];
        return [0,filename_r(filename),_adn_]}
      return improve
              (0,
               function(param)
                {return caml_call3(UnixLabels[47],filename,uid,gid)},
               _adl_)}
    function fchown(fd,uid,gid)
     {function _adi_(param)
       {var _adj_=[0,gid_r(gid),0],_adk_=[0,uid_r(uid),_adj_];
        return [0,fd_r(fd),_adk_]}
      return improve
              (0,
               function(param){return caml_call3(UnixLabels[48],fd,uid,gid)},
               _adi_)}
    function umask(mode)
     {function _adh_(param)
       {return [0,
                [0,cst_mode$4,[0,caml_call2(Core_kernel_Printf[2],_pL_,mode)]],
                0]}
      return improve
              (0,
               function(param){return caml_call1(UnixLabels[49],mode)},
               _adh_)}
    function access(filename,perm)
     {function _add_(param)
       {function _adf_(param)
         {return 771170225 <= param
                  ?914388854 <= param?0:2
                  :-193687044 <= param?3:1}
        var perm$0=caml_call2(Core_kernel_List[71],perm,_adf_);
        function _ade_(param)
         {var
           _adg_=
            [0,
             [0,cst_perm$0,caml_call2(_fs_,sexp_of_access_permission,perm$0)],
             0];
          return [0,filename_r(filename),_adg_]}
        return improve
                (0,
                 function(param)
                  {return caml_call2(UnixLabels[50],filename,perm$0)},
                 _ade_)}
      return caml_call1(Core_kernel_Result[45],_add_)}
    function access_exn(filename,perm)
     {var _adc_=access(filename,perm);
      return caml_call1(Core_kernel_Result[30],_adc_)}
    var
     remove$0=
      unary_filename
       (0,function(_adb_){return runtime.core_unix_remove(_adb_)});
    function dup(close_on_exec,fd)
     {function _ac$_(param)
       {var _ada_=[0,close_on_exec_r(close_on_exec),0];
        return [0,fd_r(fd),_ada_]}
      return improve
              (0,
               function(param)
                {return caml_call2(UnixLabels[51],close_on_exec,fd)},
               _ac$_)}
    function dup2(close_on_exec,src,dst,param)
     {function _ac8_(param)
       {var
         _ac9_=[0,close_on_exec_r(close_on_exec),0],
         _ac__=[0,[0,cst_dst$0,sexp_of_t$3(dst)],_ac9_];
        return [0,[0,cst_src$0,sexp_of_t$3(src)],_ac__]}
      return improve
              (0,
               function(param)
                {return caml_call3(UnixLabels[52],close_on_exec,src,dst)},
               _ac8_)}
    var
     set_nonblock=unary_fd(0,UnixLabels[53]),
     clear_nonblock=unary_fd(0,UnixLabels[54]),
     set_close_on_exec=unary_fd(0,UnixLabels[55]),
     clear_close_on_exec=unary_fd(0,UnixLabels[56]),
     append=runtime.unix_O_APPEND(0),
     async=runtime.unix_O_ASYNC(0),
     cloexec=runtime.unix_O_CLOEXEC(0),
     creat=runtime.unix_O_CREAT(0),
     direct=runtime.unix_O_DIRECT(0),
     directory=runtime.unix_O_DIRECTORY(0),
     dsync=runtime.unix_O_DSYNC(0),
     excl=runtime.unix_O_EXCL(0),
     noatime=runtime.unix_O_NOATIME(0),
     noctty=runtime.unix_O_NOCTTY(0),
     nofollow=runtime.unix_O_NOFOLLOW(0),
     nonblock=runtime.unix_O_NONBLOCK(0),
     rdonly=runtime.unix_O_RDONLY(0),
     rdwr=runtime.unix_O_RDWR(0),
     rsync=runtime.unix_O_RSYNC(0),
     sync=runtime.unix_O_SYNC(0),
     trunc=runtime.unix_O_TRUNC(0),
     wronly=runtime.unix_O_WRONLY(0),
     known$0=
      [0,
       [0,append,cst_append],
       [0,
        [0,async,cst_async],
        [0,
         [0,cloexec,cst_cloexec],
         [0,
          [0,creat,cst_creat],
          [0,
           [0,direct,cst_direct],
           [0,
            [0,directory,cst_directory],
            [0,
             [0,dsync,cst_dsync],
             [0,
              [0,excl,cst_excl],
              [0,
               [0,noatime,cst_noatime],
               [0,
                [0,noctty,cst_noctty],
                [0,
                 [0,nofollow,cst_nofollow],
                 [0,
                  [0,nonblock,cst_nonblock],
                  [0,
                   [0,rsync,cst_rsync],
                   [0,[0,sync,cst_sync],[0,[0,trunc,cst_trunc],0]]]]]]]]]]]]]]],
     access_modes=
      [0,
       [0,rdonly,cst_rdonly],
       [0,[0,rdwr,cst_rdwr],[0,[0,wronly,cst_wronly],0]]],
     include$5=caml_call1(Flags[2],[0,known$0,1,1,1]),
     t_of_sexp$13=include$5[1],
     typerep_of_t=include$5[3],
     typename_of_t=include$5[4],
     symbol$5=include$5[5],
     symbol$6=include$5[6],
     symbol$7=include$5[7],
     symbol$8=include$5[8],
     symbol$9=include$5[9],
     symbol$10=include$5[10],
     equal$1=include$5[11],
     compare$8=include$5[12],
     min$1=include$5[13],
     max$1=include$5[14],
     ascending$0=include$5[15],
     descending$0=include$5[16],
     between$0=include$5[17],
     clamp_exn$0=include$5[18],
     clamp$0=include$5[19],
     comparator$0=include$5[20],
     validate_lbound$0=include$5[21],
     validate_ubound$0=include$5[22],
     validate_bound$0=include$5[23],
     Replace_polymorphic_compare$0=include$5[24],
     Map$0=include$5[25],
     Set$0=include$5[26],
     of_int=include$5[27],
     to_int_exn=include$5[28],
     empty$0=include$5[29],
     symbol$11=include$5[30],
     symbol$12=include$5[31],
     intersect=include$5[32],
     complement=include$5[33],
     is_empty=include$5[34],
     do_intersect=include$5[35],
     are_disjoint=include$5[36],
     is_subset=include$5[37],
     Unstable=include$5[38],
     _pM_=include$5[2];
    function access_mode(t)
     {var _ac7_=caml_call1(Core_kernel_Int63[73],3);
      return caml_call2(Core_kernel_Int63[46],t,_ac7_)}
    function can_read(t)
     {var _ac6_=caml_call2(symbol$7,access_mode(t),rdonly);
      return _ac6_?_ac6_:caml_call2(symbol$7,access_mode(t),rdwr)}
    function can_write(t)
     {var _ac5_=caml_call2(symbol$7,access_mode(t),wronly);
      return _ac5_?_ac5_:caml_call2(symbol$7,access_mode(t),rdwr)}
    function sexp_of_t$15(t)
     {var a=access_mode(t);
      function _ac4_(param)
       {var a$0=param[1];return caml_call2(symbol$7,a,a$0)}
      var match=caml_call2(Core_kernel_List[16],access_modes,_ac4_);
      if(match)
       var
        match$0=match[1],
        name=match$0[2],
        prefix=[0,[0,name],0],
        prefix$0=prefix,
        t$0=caml_call2(symbol$12,t,a);
      else
       var prefix$0=0,t$0=t;
      var s=caml_call1(_pM_,t$0);
      if(0 === s[0])var rest=[0,s,0];else var l=s[1],rest=l;
      return [1,caml_call2(_bm_,prefix$0,rest)]}
    var getfl=runtime.unix_F_GETFL(0),setfl=runtime.unix_F_SETFL(0);
    function fcntl_getfl(fd)
     {return runtime.core_unix_fcntl(fd,getfl,Core_kernel_Int63[17])}
    function fcntl_setfl(fd,flags)
     {var result=runtime.core_unix_fcntl(fd,setfl,flags);
      if(caml_equal(result,Core_kernel_Int63[17]))return 0;
      throw [0,Assert_failure,_pN_]}
    function mkdir(opt,dirname)
     {if(opt)var sth=opt[1],perm=sth;else var perm=511;
      function _ac2_(param)
       {var _ac3_=[0,file_perm_r(perm),0];return [0,dirname_r(dirname),_ac3_]}
      return improve
              (0,
               function(param){return caml_call2(UnixLabels[57],dirname,perm)},
               _ac2_)}
    function mkdir_p(perm,dir)
     {function mkdir_idempotent(perm,dir)
       {try
         {mkdir(perm,dir)}
        catch(_ac1_)
         {_ac1_ = caml_wrap_exception(_ac1_);
          if(_ac1_[1] === Unix_error)
           {var _ac0_=_ac1_[2];
            if(typeof _ac0_ === "number")
             {var switch$0=0;
              if(8 === _ac0_ || 14 === _ac0_)switch$0 = 1;
              if(switch$0)return 0}}
          throw _ac1_}
        return 0}
      try
       {mkdir_idempotent(perm,dir)}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] === Unix_error)
         {var _acZ_=exn[2];
          if(typeof _acZ_ === "number" && 20 === _acZ_)
           {var parent=caml_call1(include$3[54],dir);
            if(caml_call2(include$3[13],parent,dir))throw exn;
            mkdir_p(perm,parent);
            return mkdir_idempotent(perm,dir)}}
        throw exn}
      return 0}
    var
     rmdir=unary_dirname(0,UnixLabels[58]),
     chdir$0=unary_dirname(0,UnixLabels[59]),
     _pO_=UnixLabels[60],
     chroot=unary_dirname(0,UnixLabels[61]);
    function opendir(restart){return unary_dirname(restart,UnixLabels[62])}
    var readdir$0=unary_dir_handle(0,UnixLabels[63]);
    function readdir_opt(dh)
     {try
       {var entry=caml_call1(readdir$0,dh)}
      catch(_acY_)
       {_acY_ = caml_wrap_exception(_acY_);
        if(_acY_ === Stdlib[12])return 0;
        throw _acY_}
      return [0,entry]}
    var
     rewinddir=unary_dir_handle(0,UnixLabels[64]),
     closedir=
      unary_dir_handle
       (0,
        function(dh)
         {try
           {var _acW_=caml_call1(UnixLabels[65],dh);return _acW_}
          catch(_acX_)
           {_acX_ = caml_wrap_exception(_acX_);
            if(_acX_[1] === Stdlib[6])return 0;
            throw _acX_}});
    function pipe$0(close_on_exec,param)
     {return caml_call2(UnixLabels[66],close_on_exec,0)}
    function mkfifo(name,perm)
     {function _acV_(param)
       {return [0,[0,cst_name,[0,name]],[0,file_perm_r(perm),0]]}
      return improve
              (0,
               function(param){return caml_call2(UnixLabels[67],name,perm)},
               _acV_)}
    function sexp_of_t$16(param)
     {var
       v_stderr=param[4],
       v_stdout=param[3],
       v_stdin=param[2],
       v_pid=param[1],
       arg=sexp_of_t$3(v_stderr),
       bnds=[0,[1,[0,_pP_,[0,arg,0]]],0],
       arg$0=sexp_of_t$3(v_stdout),
       bnds$0=[0,[1,[0,_pQ_,[0,arg$0,0]]],bnds],
       arg$1=sexp_of_t$3(v_stdin),
       bnds$1=[0,[1,[0,_pR_,[0,arg$1,0]]],bnds$0],
       arg$2=caml_call1(Core_kernel_Pid[10],v_pid),
       bnds$2=[0,[1,[0,_pS_,[0,arg$2,0]]],bnds$1];
      return [1,bnds$2]}
    var Process_info=[0,sexp_of_t$16];
    function create_process_internal(working_dir,prog,argv,env)
     {var close_on_err=[0,0];
      function safe_pipe(param)
       {var
         result=caml_call1(Spawn[5],0),
         fd_write=result[2],
         fd_read=result[1];
        close_on_err[1] = [0,fd_read,[0,fd_write,close_on_err[1]]];
        return result}
      try
       {var
         match=safe_pipe(0),
         in_write=match[2],
         in_read=match[1],
         match$0=safe_pipe(0),
         out_write=match$0[2],
         out_read=match$0[1],
         match$1=safe_pipe(0),
         err_write=match$1[2],
         err_read=match$1[1],
         _acJ_=0,
         _acK_=0,
         _acL_=[0,err_write],
         _acM_=[0,out_write],
         _acN_=[0,in_read],
         _acO_=function(x){return [0,x]},
         _acP_=caml_call2(Core_kernel_Option[39],working_dir,_acO_),
         _acQ_=[0,caml_call1(Spawn[3][1],env)],
         _acR_=
          caml_call9
           (Spawn[4],_acQ_,_acP_,prog,argv,_acN_,_acM_,_acL_,_acK_,_acJ_),
         pid=caml_call1(Core_kernel_Pid[42],_acR_);
        caml_call1(close(0),in_read);
        caml_call1(close(0),out_write);
        caml_call1(close(0),err_write);
        var _acS_=[0,pid,in_write,out_read,err_read];
        return _acS_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        var
         _acI_=
          function(x)
           {try
             {var _acT_=caml_call1(close(0),x);return _acT_}
            catch(_acU_){return 0}};
        caml_call2(Core_kernel_List[9],close_on_err[1],_acI_);
        throw exn}}
    function create_process_env
     (working_dir,prog_search_path,argv0,prog,args,env,param)
     {function _acp_(param)
       {var
         _acF_=[0,[0,cst_env$0,sexp_of_env(env)],0],
         _acG_=
          [0,
           [0,cst_prog$0,[0,prog]],
           [0,[0,cst_args,caml_call2(_fs_,atom,args)],_acF_]];
        if(working_dir)
         var
          working_dir$0=working_dir[1],
          _acH_=[0,[0,cst_working_dir,[0,working_dir$0]],0];
        else
         var _acH_=0;
        return caml_call2(_bm_,_acH_,_acG_)}
      return improve
              (0,
               function(param$0)
                {var env_assignments=expand(0,env);
                 function spawn(prog,argv)
                  {return create_process_internal
                           (working_dir,prog,argv,env_assignments)}
                 var
                  argv=
                   [0,caml_call2(Core_kernel_Option[49],argv0,prog),args];
                 function spawn1(candidate)
                  {try
                    {try
                      {if(caml_call1(include$3[46],candidate) && working_dir)
                        var
                         working_dir$0=working_dir[1],
                         _acE_=caml_call2(_ko_,working_dir$0,candidate);
                       else
                        var _acE_=candidate;
                       caml_call2(UnixLabels[50],_acE_,_pV_)}
                     catch(exn)
                      {exn = caml_wrap_exception(exn);
                       if(exn[1] === Unix_error)
                        {var args$0=exn[4],code=exn[2];
                         throw [0,
                                Unix_error,
                                code,
                                cst_Core_Unix_create_process,
                                args$0]}
                       throw exn}
                     var pid=spawn(candidate,argv)}
                   catch(exn)
                    {exn = caml_wrap_exception(exn);
                     if(exn[1] === Unix_error)
                      {var _acC_=exn[2];
                       if(typeof _acC_ === "number")
                        {var _acD_=_acC_ - 62 | 0,switch$0=0;
                         if(4 < _acD_ >>> 0)
                          {if(! (-35 <= _acD_))
                            {var switcher=_acD_ + 62 | 0;
                             switch(switcher)
                              {case 1:return [0,exn];
                               case 21:
                                return [2,
                                        spawn(cst_bin_sh$0,[0,cst_bin_sh,[0,candidate,args]])];
                               case 14:
                               case 17:
                               case 19:
                               case 20:
                               case 26:switch$0 = 1;break
                               }}}
                         else
                          if(2 < (_acD_ - 1 | 0) >>> 0)switch$0 = 1;
                         if(switch$0)return [1,exn]}}
                     throw exn}
                   return [2,pid]}
                 if(runtime.caml_string_equal(include$3[44],cst$15))
                  {if(caml_call4(Core_kernel_String[28],0,0,prog,47))
                    var _acA_=[0,prog,0];
                   else
                    {var _acw_=function(h){return caml_call2(_ko_,h,prog)};
                     if(prog_search_path)
                      var
                       _acq_=prog_search_path[1],
                       _acx_=
                        _acq_
                        ||
                        caml_call1(_a_,cst_Core_Unix_create_process_e);
                     else
                      var
                       _acr_=
                        function(x){return caml_string_notequal(x,cst$13)?x:cst$14},
                       _acs_=Core_kernel_String[56],
                       _act_=function(_acB_){return caml_call2(_acs_,_acB_,58)},
                       _acu_=getenv(cst_PATH),
                       _acv_=caml_call3(Core_kernel_Option[46],_acu_,_pT_,_act_),
                       _acx_=caml_call2(Core_kernel_List[71],_acv_,_acr_);
                     var _acA_=caml_call2(Core_kernel_List[71],_acx_,_acw_)}
                   var first_eaccess=0,param=_acA_;
                   for(;;)
                    {if(param)
                      {var _acy_=param[2],_acz_=param[1];
                       if(_acy_)
                        {var match=spawn1(_acz_);
                         switch(match[0])
                          {case 0:
                            var
                             exn=match[1],
                             first_eaccess$0=
                              [0,caml_call2(Core_kernel_Option[49],first_eaccess,exn)],
                             first_eaccess=first_eaccess$0,
                             param=_acy_;
                            continue;
                           case 1:var param=_acy_;continue;
                           default:var pid=match[1];return pid}}
                       var match$0=spawn1(_acz_);
                       if(2 === match$0[0]){var pid$0=match$0[1];return pid$0}
                       var exn$0=match$0[1];
                       throw caml_call2(Core_kernel_Option[49],first_eaccess,exn$0)}
                     throw [0,Assert_failure,_pW_]}}
                 throw [0,Assert_failure,_pU_]},
               _acp_)}
    function create_process(prog,args)
     {function _aco_(param)
       {return [0,
                [0,cst_prog$1,[0,prog]],
                [0,[0,cst_args$0,caml_call2(_fs_,atom,args)],0]]}
      return improve
              (0,
               function(param)
                {return create_process_env(0,0,0,prog,args,_pX_,0)},
               _aco_)}
    function make_open_process(f,command)
     {function _acn_(param){return [0,[0,cst_command$0,[0,command]],0]}
      return improve(0,function(param){return caml_call1(f,command)},_acn_)}
    var _pY_=UnixLabels[70];
    function open_process_in(_acm_){return make_open_process(_pY_,_acm_)}
    var _pZ_=UnixLabels[71];
    function open_process_out(_acl_){return make_open_process(_pZ_,_acl_)}
    var _p0_=UnixLabels[72];
    function open_process(_ack_){return make_open_process(_p0_,_ack_)}
    var Process_channels=[0];
    function open_process_full(command,env)
     {function _acj_(param)
       {return [0,
                [0,cst_command$1,[0,command]],
                [0,[0,cst_env$1,caml_call2(_do_,atom,env)],0]]}
      return improve
              (0,
               function(param)
                {var
                  match=caml_call2(UnixLabels[73],command,env),
                  stderr=match[3],
                  stdin=match[2],
                  stdout=match[1];
                 return [0,stdin,stdout,stderr]},
               _acj_)}
    function close_process_in(ic)
     {return of_unix(caml_call1(UnixLabels[78],ic))}
    function close_process_out(oc)
     {return of_unix(caml_call1(UnixLabels[79],oc))}
    function close_process(param)
     {var oc=param[2],ic=param[1];
      return of_unix(caml_call1(UnixLabels[80],[0,ic,oc]))}
    function close_process_full(c)
     {return of_unix(caml_call1(UnixLabels[81],[0,c[2],c[1],c[3]]))}
    function symlink(target,link_name)
     {function _aci_(param)
       {return [0,
                [0,cst_target$0,[0,target]],
                [0,[0,cst_link_name$0,[0,link_name]],0]]}
      return improve
              (0,
               function(param)
                {return caml_call3(UnixLabels[82],0,target,link_name)},
               _aci_)}
    var readlink=unary_filename(0,UnixLabels[84]);
    function sexp_of_t$17(param)
     {var
       v_except=param[3],
       v_write=param[2],
       v_read=param[1],
       arg=caml_call2(_fs_,sexp_of_t$3,v_except),
       bnds=[0,[1,[0,_p1_,[0,arg,0]]],0],
       arg$0=caml_call2(_fs_,sexp_of_t$3,v_write),
       bnds$0=[0,[1,[0,_p2_,[0,arg$0,0]]],bnds],
       arg$1=caml_call2(_fs_,sexp_of_t$3,v_read),
       bnds$1=[0,[1,[0,_p3_,[0,arg$1,0]]],bnds$0];
      return [1,bnds$1]}
    var Select_fds=[0,sexp_of_t$17,empty$1];
    function sexp_of_select_timeout(param)
     {if(typeof param === "number")return 744337004 <= param?_p4_:_p5_;
      var v0=param[2];
      return [1,
              [0,
               _p6_,
               [0,caml_call1(Core_kernel_Time_ns_alternate_[1][10],v0),0]]]}
    function select(restart,read,write,except,timeout,param)
     {function _acd_(param)
       {var
         _acf_=[0,[0,cst_timeout,sexp_of_select_timeout(timeout)],0],
         _acg_=[0,[0,cst_except,caml_call2(_fs_,sexp_of_t$3,except)],_acf_],
         _ach_=[0,[0,cst_write,caml_call2(_fs_,sexp_of_t$3,write)],_acg_];
        return [0,[0,cst_read,caml_call2(_fs_,sexp_of_t$3,read)],_ach_]}
      return improve
              (restart,
               function(param)
                {if(typeof timeout === "number")
                  var timeout$0=744337004 <= timeout?-1.:0.;
                 else
                  var
                   span=timeout[2],
                   _ace_=
                    caml_call2
                      (Core_kernel_Time_ns_alternate_[1][18],
                       span,
                       Core_kernel_Time_ns_alternate_[1][74])
                     ?0.
                     :caml_call1(Core_kernel_Time_ns_alternate_[1][90],span),
                   timeout$0=_ace_;
                 var
                  match=caml_call4(UnixLabels[85],read,write,except,timeout$0),
                  except$0=match[3],
                  write$0=match[2],
                  read$0=match[1];
                 return [0,read$0,write$0,except$0]},
               _acd_)}
    var pause=UnixLabels[91];
    function process_times_of_sexp(sexp)
     {if(0 === sexp[0])
       return caml_call2(Sexplib0_Sexp_conv_error[16],tp_loc$30,sexp);
      var
       field_sexps=sexp[1],
       tms_utime_field=[0,0],
       tms_stime_field=[0,0],
       tms_cutime_field=[0,0],
       tms_cstime_field=[0,0],
       duplicates=[0,0],
       extra=[0,0],
       param=field_sexps;
      for(;;)
       {if(param)
         {var _ab5_=param[1];
          if(1 === _ab5_[0])
           {var _ab6_=_ab5_[1];
            if(_ab6_)
             {var _ab7_=_ab6_[1];
              if(0 === _ab7_[0])
               {var _ab8_=_ab6_[2],_ab9_=_ab7_[1],switch$0=0;
                if(! _ab8_ || ! _ab8_[2])switch$0 = 1;
                if(switch$0)
                 {var
                   tail=param[2],
                   field_sexp$4=
                    function(_acc_)
                     {function field_sexp(param)
                       {if(_acc_)
                         {if(_acc_[2])throw [0,Assert_failure,_p7_];
                          var x=_acc_[1];
                          return x}
                        return caml_call2
                                (Sexplib0_Sexp_conv_error[10],tp_loc$30,sexp)}
                      return field_sexp},
                   field_sexp=field_sexp$4(_ab8_);
                  if(caml_string_notequal(_ab9_,cst_tms_cstime))
                   if(caml_string_notequal(_ab9_,cst_tms_cutime))
                    if(caml_string_notequal(_ab9_,cst_tms_stime))
                     if(caml_string_notequal(_ab9_,cst_tms_utime))
                      {if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_ab9_,extra[1]]}
                     else
                      if(tms_utime_field[1])
                       duplicates[1] = [0,_ab9_,duplicates[1]];
                      else
                       {var
                         field_sexp$0=field_sexp(0),
                         fvalue=caml_call1(_ec_,field_sexp$0);
                        tms_utime_field[1] = [0,fvalue]}
                    else
                     if(tms_stime_field[1])
                      duplicates[1] = [0,_ab9_,duplicates[1]];
                     else
                      {var
                        field_sexp$1=field_sexp(0),
                        fvalue$0=caml_call1(_ec_,field_sexp$1);
                       tms_stime_field[1] = [0,fvalue$0]}
                   else
                    if(tms_cutime_field[1])
                     duplicates[1] = [0,_ab9_,duplicates[1]];
                    else
                     {var
                       field_sexp$2=field_sexp(0),
                       fvalue$1=caml_call1(_ec_,field_sexp$2);
                      tms_cutime_field[1] = [0,fvalue$1]}
                  else
                   if(tms_cstime_field[1])
                    duplicates[1] = [0,_ab9_,duplicates[1]];
                   else
                    {var
                      field_sexp$3=field_sexp(0),
                      fvalue$2=caml_call1(_ec_,field_sexp$3);
                     tms_cstime_field[1] = [0,fvalue$2]}
                  var param=tail;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[10],tp_loc$30,_ab5_)}
        if(duplicates[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],tp_loc$30,duplicates[1],sexp);
        if(extra[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[13],tp_loc$30,extra[1],sexp);
        var
         _ab__=tms_utime_field[1],
         _ab$_=tms_stime_field[1],
         _aca_=tms_cutime_field[1],
         _acb_=tms_cstime_field[1];
        if(_ab__ && _ab$_ && _aca_ && _acb_)
         {var
           tms_cstime_value=_acb_[1],
           tms_cutime_value=_aca_[1],
           tms_stime_value=_ab$_[1],
           tms_utime_value=_ab__[1];
          return [254,
                  tms_utime_value,
                  tms_stime_value,
                  tms_cutime_value,
                  tms_cstime_value]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[15],
                 tp_loc$30,
                 sexp,
                 [0,
                  [0,0 === tms_utime_field[1]?1:0,cst_tms_utime$0],
                  [0,
                   [0,0 === tms_stime_field[1]?1:0,cst_tms_stime$0],
                   [0,
                    [0,0 === tms_cutime_field[1]?1:0,cst_tms_cutime$0],
                    [0,[0,0 === tms_cstime_field[1]?1:0,cst_tms_cstime$0],0]]]])}}
    function sexp_of_process_times(param)
     {var
       v_tms_cstime=param[4],
       v_tms_cutime=param[3],
       v_tms_stime=param[2],
       v_tms_utime=param[1],
       arg=caml_call1(_eb_,v_tms_cstime),
       bnds=[0,[1,[0,_p8_,[0,arg,0]]],0],
       arg$0=caml_call1(_eb_,v_tms_cutime),
       bnds$0=[0,[1,[0,_p9_,[0,arg$0,0]]],bnds],
       arg$1=caml_call1(_eb_,v_tms_stime),
       bnds$1=[0,[1,[0,_p__,[0,arg$1,0]]],bnds$0],
       arg$2=caml_call1(_eb_,v_tms_utime),
       bnds$2=[0,[1,[0,_p$_,[0,arg$2,0]]],bnds$1];
      return [1,bnds$2]}
    var
     getres=[0,function(_ab4_){return runtime.caml_clock_getres(_ab4_)}],
     gettime=[0,function(_ab3_){return runtime.caml_clock_gettime(_ab3_)}],
     Clock=[0,getres,gettime];
    function tm_of_sexp(sexp)
     {if(0 === sexp[0])
       return caml_call2(Sexplib0_Sexp_conv_error[16],tp_loc$31,sexp);
      var
       field_sexps=sexp[1],
       tm_sec_field=[0,0],
       tm_min_field=[0,0],
       tm_hour_field=[0,0],
       tm_mday_field=[0,0],
       tm_mon_field=[0,0],
       tm_year_field=[0,0],
       tm_wday_field=[0,0],
       tm_yday_field=[0,0],
       tm_isdst_field=[0,0],
       duplicates=[0,0],
       extra=[0,0],
       param=field_sexps;
      for(;;)
       {if(param)
         {var _abO_=param[1];
          if(1 === _abO_[0])
           {var _abP_=_abO_[1];
            if(_abP_)
             {var _abQ_=_abP_[1];
              if(0 === _abQ_[0])
               {var _abR_=_abP_[2],_abS_=_abQ_[1],switch$0=0;
                if(! _abR_ || ! _abR_[2])switch$0 = 1;
                if(switch$0)
                 {var
                   tail=param[2],
                   field_sexp$9=
                    function(_ab2_)
                     {function field_sexp(param)
                       {if(_ab2_)
                         {if(_ab2_[2])throw [0,Assert_failure,_qa_];
                          var x=_ab2_[1];
                          return x}
                        return caml_call2
                                (Sexplib0_Sexp_conv_error[10],tp_loc$31,sexp)}
                      return field_sexp},
                   field_sexp=field_sexp$9(_abR_);
                  if(caml_string_notequal(_abS_,cst_tm_hour))
                   if(caml_string_notequal(_abS_,cst_tm_isdst))
                    if(caml_string_notequal(_abS_,cst_tm_mday))
                     if(caml_string_notequal(_abS_,cst_tm_min))
                      if(caml_string_notequal(_abS_,cst_tm_mon))
                       if(caml_string_notequal(_abS_,cst_tm_sec))
                        if(caml_string_notequal(_abS_,cst_tm_wday))
                         if(caml_string_notequal(_abS_,cst_tm_yday))
                          if(caml_string_notequal(_abS_,cst_tm_year))
                           {if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_abS_,extra[1]]}
                          else
                           if(tm_year_field[1])
                            duplicates[1] = [0,_abS_,duplicates[1]];
                           else
                            {var
                              field_sexp$0=field_sexp(0),
                              fvalue=caml_call1(file_perm_of_sexp,field_sexp$0);
                             tm_year_field[1] = [0,fvalue]}
                         else
                          if(tm_yday_field[1])
                           duplicates[1] = [0,_abS_,duplicates[1]];
                          else
                           {var
                             field_sexp$1=field_sexp(0),
                             fvalue$0=caml_call1(file_perm_of_sexp,field_sexp$1);
                            tm_yday_field[1] = [0,fvalue$0]}
                        else
                         if(tm_wday_field[1])
                          duplicates[1] = [0,_abS_,duplicates[1]];
                         else
                          {var
                            field_sexp$2=field_sexp(0),
                            fvalue$1=caml_call1(file_perm_of_sexp,field_sexp$2);
                           tm_wday_field[1] = [0,fvalue$1]}
                       else
                        if(tm_sec_field[1])
                         duplicates[1] = [0,_abS_,duplicates[1]];
                        else
                         {var
                           field_sexp$3=field_sexp(0),
                           fvalue$2=caml_call1(file_perm_of_sexp,field_sexp$3);
                          tm_sec_field[1] = [0,fvalue$2]}
                      else
                       if(tm_mon_field[1])
                        duplicates[1] = [0,_abS_,duplicates[1]];
                       else
                        {var
                          field_sexp$4=field_sexp(0),
                          fvalue$3=caml_call1(file_perm_of_sexp,field_sexp$4);
                         tm_mon_field[1] = [0,fvalue$3]}
                     else
                      if(tm_min_field[1])
                       duplicates[1] = [0,_abS_,duplicates[1]];
                      else
                       {var
                         field_sexp$5=field_sexp(0),
                         fvalue$4=caml_call1(file_perm_of_sexp,field_sexp$5);
                        tm_min_field[1] = [0,fvalue$4]}
                    else
                     if(tm_mday_field[1])
                      duplicates[1] = [0,_abS_,duplicates[1]];
                     else
                      {var
                        field_sexp$6=field_sexp(0),
                        fvalue$5=caml_call1(file_perm_of_sexp,field_sexp$6);
                       tm_mday_field[1] = [0,fvalue$5]}
                   else
                    if(tm_isdst_field[1])
                     duplicates[1] = [0,_abS_,duplicates[1]];
                    else
                     {var
                       field_sexp$7=field_sexp(0),
                       fvalue$6=caml_call1(_dG_,field_sexp$7);
                      tm_isdst_field[1] = [0,fvalue$6]}
                  else
                   if(tm_hour_field[1])
                    duplicates[1] = [0,_abS_,duplicates[1]];
                   else
                    {var
                      field_sexp$8=field_sexp(0),
                      fvalue$7=caml_call1(file_perm_of_sexp,field_sexp$8);
                     tm_hour_field[1] = [0,fvalue$7]}
                  var param=tail;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[10],tp_loc$31,_abO_)}
        if(duplicates[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],tp_loc$31,duplicates[1],sexp);
        if(extra[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[13],tp_loc$31,extra[1],sexp);
        var
         _abT_=tm_sec_field[1],
         _abU_=tm_min_field[1],
         _abV_=tm_hour_field[1],
         _abW_=tm_mday_field[1],
         _abX_=tm_mon_field[1],
         _abY_=tm_year_field[1],
         _abZ_=tm_wday_field[1],
         _ab0_=tm_yday_field[1],
         _ab1_=tm_isdst_field[1];
        if
         (_abT_
          &&
          _abU_
          &&
          _abV_
          &&
          _abW_
          &&
          _abX_
          &&
          _abY_
          &&
          _abZ_
          &&
          _ab0_
          &&
          _ab1_)
         {var
           tm_isdst_value=_ab1_[1],
           tm_yday_value=_ab0_[1],
           tm_wday_value=_abZ_[1],
           tm_year_value=_abY_[1],
           tm_mon_value=_abX_[1],
           tm_mday_value=_abW_[1],
           tm_hour_value=_abV_[1],
           tm_min_value=_abU_[1],
           tm_sec_value=_abT_[1];
          return [0,
                  tm_sec_value,
                  tm_min_value,
                  tm_hour_value,
                  tm_mday_value,
                  tm_mon_value,
                  tm_year_value,
                  tm_wday_value,
                  tm_yday_value,
                  tm_isdst_value]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[15],
                 tp_loc$31,
                 sexp,
                 [0,
                  [0,0 === tm_sec_field[1]?1:0,cst_tm_sec$0],
                  [0,
                   [0,0 === tm_min_field[1]?1:0,cst_tm_min$0],
                   [0,
                    [0,0 === tm_hour_field[1]?1:0,cst_tm_hour$0],
                    [0,
                     [0,0 === tm_mday_field[1]?1:0,cst_tm_mday$0],
                     [0,
                      [0,0 === tm_mon_field[1]?1:0,cst_tm_mon$0],
                      [0,
                       [0,0 === tm_year_field[1]?1:0,cst_tm_year$0],
                       [0,
                        [0,0 === tm_wday_field[1]?1:0,cst_tm_wday$0],
                        [0,
                         [0,0 === tm_yday_field[1]?1:0,cst_tm_yday$0],
                         [0,[0,0 === tm_isdst_field[1]?1:0,cst_tm_isdst$0],0]]]]]]]]])}}
    function sexp_of_tm(param)
     {var
       v_tm_isdst=param[9],
       v_tm_yday=param[8],
       v_tm_wday=param[7],
       v_tm_year=param[6],
       v_tm_mon=param[5],
       v_tm_mday=param[4],
       v_tm_hour=param[3],
       v_tm_min=param[2],
       v_tm_sec=param[1],
       arg=caml_call1(_dF_,v_tm_isdst),
       bnds=[0,[1,[0,_qb_,[0,arg,0]]],0],
       arg$0=caml_call1(_es_,v_tm_yday),
       bnds$0=[0,[1,[0,_qc_,[0,arg$0,0]]],bnds],
       arg$1=caml_call1(_es_,v_tm_wday),
       bnds$1=[0,[1,[0,_qd_,[0,arg$1,0]]],bnds$0],
       arg$2=caml_call1(_es_,v_tm_year),
       bnds$2=[0,[1,[0,_qe_,[0,arg$2,0]]],bnds$1],
       arg$3=caml_call1(_es_,v_tm_mon),
       bnds$3=[0,[1,[0,_qf_,[0,arg$3,0]]],bnds$2],
       arg$4=caml_call1(_es_,v_tm_mday),
       bnds$4=[0,[1,[0,_qg_,[0,arg$4,0]]],bnds$3],
       arg$5=caml_call1(_es_,v_tm_hour),
       bnds$5=[0,[1,[0,_qh_,[0,arg$5,0]]],bnds$4],
       arg$6=caml_call1(_es_,v_tm_min),
       bnds$6=[0,[1,[0,_qi_,[0,arg$6,0]]],bnds$5],
       arg$7=caml_call1(_es_,v_tm_sec),
       bnds$7=[0,[1,[0,_qj_,[0,arg$7,0]]],bnds$6];
      return [1,bnds$7]}
    var
     time=UnixLabels[92],
     gettimeofday=UnixLabels[93],
     mktime=UnixLabels[96],
     alarm=UnixLabels[97],
     sleep=UnixLabels[98],
     times=UnixLabels[99],
     utimes=UnixLabels[100];
    function interval_timer_of_sexp(sexp)
     {if(0 === sexp[0])
       {var _abK_=sexp[1],switch$0=0;
        if(caml_string_notequal(_abK_,cst_ITIMER_PROF))
         {var switch$1=0;
          if(caml_string_notequal(_abK_,cst_ITIMER_REAL))
           {var switch$2=0;
            if(caml_string_notequal(_abK_,cst_ITIMER_VIRTUAL))
             if(caml_string_notequal(_abK_,cst_iTIMER_PROF))
              if(caml_string_notequal(_abK_,cst_iTIMER_REAL))
               {if(caml_string_notequal(_abK_,cst_iTIMER_VIRTUAL))
                 {switch$0 = 1;switch$1 = 1;switch$2 = 1}}
              else
               switch$2 = 1;
             else
              {switch$1 = 1;switch$2 = 1}
            if(! switch$2)return 1}
          if(! switch$1)return 0}
        if(! switch$0)return 2}
      else
       {var _abL_=sexp[1];
        if(! _abL_)
         return caml_call2(Sexplib0_Sexp_conv_error[7],tp_loc$32,sexp);
        var _abM_=_abL_[1];
        if(0 !== _abM_[0])
         return caml_call2(Sexplib0_Sexp_conv_error[6],tp_loc$32,sexp);
        var _abN_=_abM_[1],switch$3=0;
        if(caml_string_notequal(_abN_,cst_ITIMER_PROF$0))
         {var switch$4=0;
          if(caml_string_notequal(_abN_,cst_ITIMER_REAL$0))
           {var switch$5=0;
            if(caml_string_notequal(_abN_,cst_ITIMER_VIRTUAL$0))
             if(caml_string_notequal(_abN_,cst_iTIMER_PROF$0))
              if(caml_string_notequal(_abN_,cst_iTIMER_REAL$0))
               {if(caml_string_notequal(_abN_,cst_iTIMER_VIRTUAL$0))
                 {switch$3 = 1;switch$4 = 1;switch$5 = 1}}
              else
               switch$5 = 1;
             else
              {switch$4 = 1;switch$5 = 1}
            if(! switch$5)
             return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$32,sexp)}
          if(! switch$4)
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$32,sexp)}
        if(! switch$3)
         return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$32,sexp)}
      return caml_call2(Sexplib0_Sexp_conv_error[8],tp_loc$32,sexp)}
    function sexp_of_interval_timer(param)
     {switch(param){case 0:return _qk_;case 1:return _ql_;default:return _qm_}}
    function interval_timer_status_of_sexp(sexp)
     {if(0 === sexp[0])
       return caml_call2(Sexplib0_Sexp_conv_error[16],tp_loc$33,sexp);
      var
       field_sexps=sexp[1],
       it_interval_field=[0,0],
       it_value_field=[0,0],
       duplicates=[0,0],
       extra=[0,0],
       param=field_sexps;
      for(;;)
       {if(param)
         {var _abC_=param[1];
          if(1 === _abC_[0])
           {var _abD_=_abC_[1];
            if(_abD_)
             {var _abE_=_abD_[1];
              if(0 === _abE_[0])
               {var _abF_=_abD_[2],_abG_=_abE_[1],switch$0=0;
                if(! _abF_ || ! _abF_[2])switch$0 = 1;
                if(switch$0)
                 {var
                   tail=param[2],
                   field_sexp$2=
                    function(_abJ_)
                     {function field_sexp(param)
                       {if(_abJ_)
                         {if(_abJ_[2])throw [0,Assert_failure,_qn_];
                          var x=_abJ_[1];
                          return x}
                        return caml_call2
                                (Sexplib0_Sexp_conv_error[10],tp_loc$33,sexp)}
                      return field_sexp},
                   field_sexp=field_sexp$2(_abF_);
                  if(caml_string_notequal(_abG_,cst_it_interval))
                   if(caml_string_notequal(_abG_,cst_it_value))
                    {if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_abG_,extra[1]]}
                   else
                    if(it_value_field[1])
                     duplicates[1] = [0,_abG_,duplicates[1]];
                    else
                     {var
                       field_sexp$0=field_sexp(0),
                       fvalue=caml_call1(_ec_,field_sexp$0);
                      it_value_field[1] = [0,fvalue]}
                  else
                   if(it_interval_field[1])
                    duplicates[1] = [0,_abG_,duplicates[1]];
                   else
                    {var
                      field_sexp$1=field_sexp(0),
                      fvalue$0=caml_call1(_ec_,field_sexp$1);
                     it_interval_field[1] = [0,fvalue$0]}
                  var param=tail;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[10],tp_loc$33,_abC_)}
        if(duplicates[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],tp_loc$33,duplicates[1],sexp);
        if(extra[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[13],tp_loc$33,extra[1],sexp);
        var _abH_=it_interval_field[1],_abI_=it_value_field[1];
        if(_abH_ && _abI_)
         {var it_value_value=_abI_[1],it_interval_value=_abH_[1];
          return [254,it_interval_value,it_value_value]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[15],
                 tp_loc$33,
                 sexp,
                 [0,
                  [0,0 === it_interval_field[1]?1:0,cst_it_interval$0],
                  [0,[0,0 === it_value_field[1]?1:0,cst_it_value$0],0]])}}
    function sexp_of_interval_timer_status(param)
     {var
       v_it_value=param[2],
       v_it_interval=param[1],
       arg=caml_call1(_eb_,v_it_value),
       bnds=[0,[1,[0,_qo_,[0,arg,0]]],0],
       arg$0=caml_call1(_eb_,v_it_interval),
       bnds$0=[0,[1,[0,_qp_,[0,arg$0,0]]],bnds];
      return [1,bnds$0]}
    var
     getitimer=UnixLabels[101],
     setitimer=UnixLabels[102],
     getuid=UnixLabels[103],
     geteuid=UnixLabels[104];
    function setuid(uid)
     {function _abB_(param)
       {return [0,[0,cst_uid$0,caml_call1(Core_kernel_Int[101],uid)],0]}
      return improve
              (0,
               function(param){return caml_call1(UnixLabels[105],uid)},
               _abB_)}
    var getgid=UnixLabels[106],getegid=UnixLabels[107];
    function setgid(gid)
     {function _abA_(param)
       {return [0,[0,cst_gid$0,caml_call1(Core_kernel_Int[101],gid)],0]}
      return improve
              (0,
               function(param){return caml_call1(UnixLabels[108],gid)},
               _abA_)}
    var getgroups=UnixLabels[109];
    function make_by(f,make_exn)
     {function normal(arg)
       {try
         {var _aby_=[0,caml_call1(f,arg)];return _aby_}
        catch(_abz_)
         {_abz_ = caml_wrap_exception(_abz_);
          if(_abz_[1] !== _ih_ && _abz_ !== include$2[103])throw _abz_;
          return 0}}
      function exn(arg)
       {try
         {var _abw_=caml_call1(f,arg);return _abw_}
        catch(_abx_)
         {_abx_ = caml_wrap_exception(_abx_);
          if(_abx_[1] !== _ih_ && _abx_ !== include$2[103])throw _abx_;
          throw caml_call1(make_exn,arg)}}
      return [0,normal,exn]}
    function string_to_zero_terminated_bigs(s)
     {if(caml_call4(Core_kernel_String[28],0,0,s,0))
       caml_call3(Core_kernel_Printf[4],_a_,_qq_,s);
      var _abv_=caml_call2(_n_,s,cst$16);
      return caml_call3(Core_kernel_Bigstring[11],0,0,_abv_)}
    function make_by$0(f,make_exn)
     {return make_by
              (function(x)
                {function go(n)
                  {var n$0=n;
                   for(;;)
                    try
                     {var
                       x$0=
                        caml_call2(f,x,caml_call2(Core_kernel_Bigstring[110],0,n$0));
                      return x$0}
                    catch(_abu_)
                     {_abu_ = caml_wrap_exception(_abu_);
                      if(_abu_[1] === Unix_error)
                       {var _abt_=_abu_[2];
                        if(typeof _abt_ === "number" && 32 === _abt_)
                         {var n$1=4 * n$0 | 0,n$0=n$1;continue}}
                      throw _abu_}}
                 return go(10000)},
               make_exn)}
    function compare$9(a_029,b_030)
     {if(caml_call2(Ppx_compare_lib[1],a_029,b_030))return 0;
      var n=caml_call2(_ga_,a_029[1],b_030[1]);
      if(0 === n)
       {var n$0=caml_call2(_ga_,a_029[2],b_030[2]);
        if(0 === n$0)
         {var n$1=caml_call2(_eo_,a_029[3],b_030[3]);
          if(0 === n$1)
           {var n$2=caml_call2(_eo_,a_029[4],b_030[4]);
            if(0 === n$2)
             {var n$3=caml_call2(_ga_,a_029[5],b_030[5]);
              if(0 === n$3)
               {var n$4=caml_call2(_ga_,a_029[6],b_030[6]);
                return 0 === n$4?caml_call2(_ga_,a_029[7],b_030[7]):n$4}
              return n$3}
            return n$2}
          return n$1}
        return n$0}
      return n}
    function shell(r){return r[7]}
    function dir(r){return r[6]}
    function gecos(r){return r[5]}
    function gid(r){return r[4]}
    function uid(r){return r[3]}
    function passwd(r){return r[2]}
    function name(r){return r[1]}
    function _qr_(r,v){return [0,r[1],r[2],r[3],r[4],r[5],r[6],v]}
    var
     _qs_=0,
     shell$0=[0,function(param){return 0},cst_shell,_qs_,shell,_qr_];
    function _qt_(r,v){return [0,r[1],r[2],r[3],r[4],r[5],v,r[7]]}
    var _qu_=0,dir$0=[0,function(param){return 0},cst_dir,_qu_,dir,_qt_];
    function _qv_(r,v){return [0,r[1],r[2],r[3],r[4],v,r[6],r[7]]}
    var
     _qw_=0,
     gecos$0=[0,function(param){return 0},cst_gecos,_qw_,gecos,_qv_];
    function _qx_(r,v){return [0,r[1],r[2],r[3],v,r[5],r[6],r[7]]}
    var _qy_=0,gid$0=[0,function(param){return 0},cst_gid$1,_qy_,gid,_qx_];
    function _qz_(r,v){return [0,r[1],r[2],v,r[4],r[5],r[6],r[7]]}
    var _qA_=0,uid$0=[0,function(param){return 0},cst_uid$1,_qA_,uid,_qz_];
    function _qB_(r,v){return [0,r[1],v,r[3],r[4],r[5],r[6],r[7]]}
    var
     _qC_=0,
     passwd$0=[0,function(param){return 0},cst_passwd,_qC_,passwd,_qB_];
    function _qD_(r,v){return [0,v,r[2],r[3],r[4],r[5],r[6],r[7]]}
    var _qE_=0,name$0=[0,function(param){return 0},cst_name$0,_qE_,name,_qD_];
    function make_creator$0
     (name_fun,
      passwd_fun,
      uid_fun,
      gid_fun,
      gecos_fun,
      dir_fun,
      shell_fun,
      compile_acc)
     {var
       match=caml_call2(name_fun,name$0,compile_acc),
       compile_acc$0=match[2],
       name_gen=match[1],
       match$0=caml_call2(passwd_fun,passwd$0,compile_acc$0),
       compile_acc$1=match$0[2],
       passwd_gen=match$0[1],
       match$1=caml_call2(uid_fun,uid$0,compile_acc$1),
       compile_acc$2=match$1[2],
       uid_gen=match$1[1],
       match$2=caml_call2(gid_fun,gid$0,compile_acc$2),
       compile_acc$3=match$2[2],
       gid_gen=match$2[1],
       match$3=caml_call2(gecos_fun,gecos$0,compile_acc$3),
       compile_acc$4=match$3[2],
       gecos_gen=match$3[1],
       match$4=caml_call2(dir_fun,dir$0,compile_acc$4),
       compile_acc$5=match$4[2],
       dir_gen=match$4[1],
       match$5=caml_call2(shell_fun,shell$0,compile_acc$5),
       compile_acc$6=match$5[2],
       shell_gen=match$5[1];
      return [0,
              function(acc)
               {var
                 name=caml_call1(name_gen,acc),
                 passwd=caml_call1(passwd_gen,acc),
                 uid=caml_call1(uid_gen,acc),
                 gid=caml_call1(gid_gen,acc),
                 gecos=caml_call1(gecos_gen,acc),
                 dir=caml_call1(dir_gen,acc),
                 shell=caml_call1(shell_gen,acc);
                return [0,name,passwd,uid,gid,gecos,dir,shell]},
              compile_acc$6]}
    function create$0(name,passwd,uid,gid,gecos,dir,shell)
     {return [0,name,passwd,uid,gid,gecos,dir,shell]}
    function map$1
     (name_fun,passwd_fun,uid_fun,gid_fun,gecos_fun,dir_fun,shell_fun)
     {var
       _abn_=caml_call1(shell_fun,shell$0),
       _abo_=caml_call1(dir_fun,dir$0),
       _abp_=caml_call1(gecos_fun,gecos$0),
       _abq_=caml_call1(gid_fun,gid$0),
       _abr_=caml_call1(uid_fun,uid$0),
       _abs_=caml_call1(passwd_fun,passwd$0);
      return [0,
              caml_call1(name_fun,name$0),
              _abs_,
              _abr_,
              _abq_,
              _abp_,
              _abo_,
              _abn_]}
    function iter$1
     (name_fun,passwd_fun,uid_fun,gid_fun,gecos_fun,dir_fun,shell_fun)
     {caml_call1(name_fun,name$0);
      caml_call1(passwd_fun,passwd$0);
      caml_call1(uid_fun,uid$0);
      caml_call1(gid_fun,gid$0);
      caml_call1(gecos_fun,gecos$0);
      caml_call1(dir_fun,dir$0);
      return caml_call1(shell_fun,shell$0)}
    function fold$1
     (init,name_fun,passwd_fun,uid_fun,gid_fun,gecos_fun,dir_fun,shell_fun)
     {return caml_call2
              (shell_fun,
               caml_call2
                (dir_fun,
                 caml_call2
                  (gecos_fun,
                   caml_call2
                    (gid_fun,
                     caml_call2
                      (uid_fun,
                       caml_call2
                        (passwd_fun,caml_call2(name_fun,init,name$0),passwd$0),
                       uid$0),
                     gid$0),
                   gecos$0),
                 dir$0),
               shell$0)}
    function map_poly$0(record)
     {var
       _abh_=[0,caml_call1(record[1],shell$0),0],
       _abi_=[0,caml_call1(record[1],dir$0),_abh_],
       _abj_=[0,caml_call1(record[1],gecos$0),_abi_],
       _abk_=[0,caml_call1(record[1],gid$0),_abj_],
       _abl_=[0,caml_call1(record[1],uid$0),_abk_],
       _abm_=[0,caml_call1(record[1],passwd$0),_abl_];
      return [0,caml_call1(record[1],name$0),_abm_]}
    function for_all$1
     (name_fun,passwd_fun,uid_fun,gid_fun,gecos_fun,dir_fun,shell_fun)
     {var
       _abb_=caml_call1(name_fun,name$0),
       _abc_=_abb_?caml_call1(passwd_fun,passwd$0):_abb_,
       _abd_=_abc_?caml_call1(uid_fun,uid$0):_abc_,
       _abe_=_abd_?caml_call1(gid_fun,gid$0):_abd_,
       _abf_=_abe_?caml_call1(gecos_fun,gecos$0):_abe_,
       _abg_=_abf_?caml_call1(dir_fun,dir$0):_abf_;
      return _abg_?caml_call1(shell_fun,shell$0):_abg_}
    function exists$1
     (name_fun,passwd_fun,uid_fun,gid_fun,gecos_fun,dir_fun,shell_fun)
     {var
       _aba_=caml_call1(name_fun,name$0),
       _aa7_=_aba_ || caml_call1(passwd_fun,passwd$0),
       _aa8_=_aa7_ || caml_call1(uid_fun,uid$0),
       _aa9_=_aa8_ || caml_call1(gid_fun,gid$0),
       _aa__=_aa9_ || caml_call1(gecos_fun,gecos$0),
       _aa$_=_aa__ || caml_call1(dir_fun,dir$0);
      return _aa$_?_aa$_:caml_call1(shell_fun,shell$0)}
    function to_list$1
     (name_fun,passwd_fun,uid_fun,gid_fun,gecos_fun,dir_fun,shell_fun)
     {var
       _aa1_=[0,caml_call1(shell_fun,shell$0),0],
       _aa2_=[0,caml_call1(dir_fun,dir$0),_aa1_],
       _aa3_=[0,caml_call1(gecos_fun,gecos$0),_aa2_],
       _aa4_=[0,caml_call1(gid_fun,gid$0),_aa3_],
       _aa5_=[0,caml_call1(uid_fun,uid$0),_aa4_],
       _aa6_=[0,caml_call1(passwd_fun,passwd$0),_aa5_];
      return [0,caml_call1(name_fun,name$0),_aa6_]}
    function iter$2
     (record,name_fun,passwd_fun,uid_fun,gid_fun,gecos_fun,dir_fun,shell_fun)
     {caml_call3(name_fun,name$0,record,record[1]);
      caml_call3(passwd_fun,passwd$0,record,record[2]);
      caml_call3(uid_fun,uid$0,record,record[3]);
      caml_call3(gid_fun,gid$0,record,record[4]);
      caml_call3(gecos_fun,gecos$0,record,record[5]);
      caml_call3(dir_fun,dir$0,record,record[6]);
      return caml_call3(shell_fun,shell$0,record,record[7])}
    function fold$2
     (record,
      init,
      name_fun,
      passwd_fun,
      uid_fun,
      gid_fun,
      gecos_fun,
      dir_fun,
      shell_fun)
     {var
       _aaV_=record[7],
       _aaW_=record[6],
       _aaX_=record[5],
       _aaY_=record[4],
       _aaZ_=record[3],
       _aa0_=record[2];
      return caml_call4
              (shell_fun,
               caml_call4
                (dir_fun,
                 caml_call4
                  (gecos_fun,
                   caml_call4
                    (gid_fun,
                     caml_call4
                      (uid_fun,
                       caml_call4
                        (passwd_fun,
                         caml_call4(name_fun,init,name$0,record,record[1]),
                         passwd$0,
                         record,
                         _aa0_),
                       uid$0,
                       record,
                       _aaZ_),
                     gid$0,
                     record,
                     _aaY_),
                   gecos$0,
                   record,
                   _aaX_),
                 dir$0,
                 record,
                 _aaW_),
               shell$0,
               record,
               _aaV_)}
    function for_all$2
     (record,name_fun,passwd_fun,uid_fun,gid_fun,gecos_fun,dir_fun,shell_fun)
     {var
       _aaP_=caml_call3(name_fun,name$0,record,record[1]),
       _aaQ_=_aaP_?caml_call3(passwd_fun,passwd$0,record,record[2]):_aaP_,
       _aaR_=_aaQ_?caml_call3(uid_fun,uid$0,record,record[3]):_aaQ_,
       _aaS_=_aaR_?caml_call3(gid_fun,gid$0,record,record[4]):_aaR_,
       _aaT_=_aaS_?caml_call3(gecos_fun,gecos$0,record,record[5]):_aaS_,
       _aaU_=_aaT_?caml_call3(dir_fun,dir$0,record,record[6]):_aaT_;
      return _aaU_?caml_call3(shell_fun,shell$0,record,record[7]):_aaU_}
    function exists$2
     (record,name_fun,passwd_fun,uid_fun,gid_fun,gecos_fun,dir_fun,shell_fun)
     {var
       _aaO_=caml_call3(name_fun,name$0,record,record[1]),
       _aaJ_=_aaO_ || caml_call3(passwd_fun,passwd$0,record,record[2]),
       _aaK_=_aaJ_ || caml_call3(uid_fun,uid$0,record,record[3]),
       _aaL_=_aaK_ || caml_call3(gid_fun,gid$0,record,record[4]),
       _aaM_=_aaL_ || caml_call3(gecos_fun,gecos$0,record,record[5]),
       _aaN_=_aaM_ || caml_call3(dir_fun,dir$0,record,record[6]);
      return _aaN_?_aaN_:caml_call3(shell_fun,shell$0,record,record[7])}
    function to_list$2
     (record,name_fun,passwd_fun,uid_fun,gid_fun,gecos_fun,dir_fun,shell_fun)
     {var
       _aaD_=[0,caml_call3(shell_fun,shell$0,record,record[7]),0],
       _aaE_=[0,caml_call3(dir_fun,dir$0,record,record[6]),_aaD_],
       _aaF_=[0,caml_call3(gecos_fun,gecos$0,record,record[5]),_aaE_],
       _aaG_=[0,caml_call3(gid_fun,gid$0,record,record[4]),_aaF_],
       _aaH_=[0,caml_call3(uid_fun,uid$0,record,record[3]),_aaG_],
       _aaI_=[0,caml_call3(passwd_fun,passwd$0,record,record[2]),_aaH_];
      return [0,caml_call3(name_fun,name$0,record,record[1]),_aaI_]}
    function map$2
     (record,name_fun,passwd_fun,uid_fun,gid_fun,gecos_fun,dir_fun,shell_fun)
     {var
       _aax_=caml_call3(shell_fun,shell$0,record,record[7]),
       _aay_=caml_call3(dir_fun,dir$0,record,record[6]),
       _aaz_=caml_call3(gecos_fun,gecos$0,record,record[5]),
       _aaA_=caml_call3(gid_fun,gid$0,record,record[4]),
       _aaB_=caml_call3(uid_fun,uid$0,record,record[3]),
       _aaC_=caml_call3(passwd_fun,passwd$0,record,record[2]);
      return [0,
              caml_call3(name_fun,name$0,record,record[1]),
              _aaC_,
              _aaB_,
              _aaA_,
              _aaz_,
              _aay_,
              _aax_]}
    function set_all_mutable_fields$0(record)
     {caml_call1(Base_Field[1][1],record);return 0}
    var
     Direct$0=
      [0,
       iter$2,
       fold$2,
       for_all$2,
       exists$2,
       to_list$2,
       map$2,
       set_all_mutable_fields$0];
    function t_of_sexp$14(sexp)
     {if(0 === sexp[0])
       return caml_call2(Sexplib0_Sexp_conv_error[16],tp_loc$34,sexp);
      var
       field_sexps=sexp[1],
       name_field=[0,0],
       passwd_field=[0,0],
       uid_field=[0,0],
       gid_field=[0,0],
       gecos_field=[0,0],
       dir_field=[0,0],
       shell_field=[0,0],
       duplicates=[0,0],
       extra=[0,0],
       param=field_sexps;
      for(;;)
       {if(param)
         {var _aak_=param[1];
          if(1 === _aak_[0])
           {var _aal_=_aak_[1];
            if(_aal_)
             {var _aam_=_aal_[1];
              if(0 === _aam_[0])
               {var _aan_=_aal_[2],_aao_=_aam_[1],switch$0=0;
                if(! _aan_ || ! _aan_[2])switch$0 = 1;
                if(switch$0)
                 {var
                   tail=param[2],
                   field_sexp$7=
                    function(_aaw_)
                     {function field_sexp(param)
                       {if(_aaw_)
                         {if(_aaw_[2])throw [0,Assert_failure,_qF_];
                          var x=_aaw_[1];
                          return x}
                        return caml_call2
                                (Sexplib0_Sexp_conv_error[10],tp_loc$34,sexp)}
                      return field_sexp},
                   field_sexp=field_sexp$7(_aan_);
                  if(caml_string_notequal(_aao_,cst_dir$0))
                   if(caml_string_notequal(_aao_,cst_gecos$0))
                    if(caml_string_notequal(_aao_,cst_gid$2))
                     if(caml_string_notequal(_aao_,cst_name$1))
                      if(caml_string_notequal(_aao_,cst_passwd$0))
                       if(caml_string_notequal(_aao_,cst_shell$0))
                        if(caml_string_notequal(_aao_,cst_uid$2))
                         {if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_aao_,extra[1]]}
                        else
                         if(uid_field[1])
                          duplicates[1] = [0,_aao_,duplicates[1]];
                         else
                          {var
                            field_sexp$0=field_sexp(0),
                            fvalue=caml_call1(file_perm_of_sexp,field_sexp$0);
                           uid_field[1] = [0,fvalue]}
                       else
                        if(shell_field[1])
                         duplicates[1] = [0,_aao_,duplicates[1]];
                        else
                         {var
                           field_sexp$1=field_sexp(0),
                           fvalue$0=caml_call1(_gf_,field_sexp$1);
                          shell_field[1] = [0,fvalue$0]}
                      else
                       if(passwd_field[1])
                        duplicates[1] = [0,_aao_,duplicates[1]];
                       else
                        {var
                          field_sexp$2=field_sexp(0),
                          fvalue$1=caml_call1(_gf_,field_sexp$2);
                         passwd_field[1] = [0,fvalue$1]}
                     else
                      if(name_field[1])
                       duplicates[1] = [0,_aao_,duplicates[1]];
                      else
                       {var
                         field_sexp$3=field_sexp(0),
                         fvalue$2=caml_call1(_gf_,field_sexp$3);
                        name_field[1] = [0,fvalue$2]}
                    else
                     if(gid_field[1])
                      duplicates[1] = [0,_aao_,duplicates[1]];
                     else
                      {var
                        field_sexp$4=field_sexp(0),
                        fvalue$3=caml_call1(file_perm_of_sexp,field_sexp$4);
                       gid_field[1] = [0,fvalue$3]}
                   else
                    if(gecos_field[1])
                     duplicates[1] = [0,_aao_,duplicates[1]];
                    else
                     {var
                       field_sexp$5=field_sexp(0),
                       fvalue$4=caml_call1(_gf_,field_sexp$5);
                      gecos_field[1] = [0,fvalue$4]}
                  else
                   if(dir_field[1])
                    duplicates[1] = [0,_aao_,duplicates[1]];
                   else
                    {var
                      field_sexp$6=field_sexp(0),
                      fvalue$5=caml_call1(_gf_,field_sexp$6);
                     dir_field[1] = [0,fvalue$5]}
                  var param=tail;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[10],tp_loc$34,_aak_)}
        if(duplicates[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],tp_loc$34,duplicates[1],sexp);
        if(extra[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[13],tp_loc$34,extra[1],sexp);
        var
         _aap_=name_field[1],
         _aaq_=passwd_field[1],
         _aar_=uid_field[1],
         _aas_=gid_field[1],
         _aat_=gecos_field[1],
         _aau_=dir_field[1],
         _aav_=shell_field[1];
        if(_aap_ && _aaq_ && _aar_ && _aas_ && _aat_ && _aau_ && _aav_)
         {var
           shell_value=_aav_[1],
           dir_value=_aau_[1],
           gecos_value=_aat_[1],
           gid_value=_aas_[1],
           uid_value=_aar_[1],
           passwd_value=_aaq_[1],
           name_value=_aap_[1];
          return [0,
                  name_value,
                  passwd_value,
                  uid_value,
                  gid_value,
                  gecos_value,
                  dir_value,
                  shell_value]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[15],
                 tp_loc$34,
                 sexp,
                 [0,
                  [0,0 === name_field[1]?1:0,cst_name$2],
                  [0,
                   [0,0 === passwd_field[1]?1:0,cst_passwd$1],
                   [0,
                    [0,0 === uid_field[1]?1:0,cst_uid$3],
                    [0,
                     [0,0 === gid_field[1]?1:0,cst_gid$3],
                     [0,
                      [0,0 === gecos_field[1]?1:0,cst_gecos$1],
                      [0,
                       [0,0 === dir_field[1]?1:0,cst_dir$1],
                       [0,[0,0 === shell_field[1]?1:0,cst_shell$1],0]]]]]]])}}
    function sexp_of_t$18(param)
     {var
       v_shell=param[7],
       v_dir=param[6],
       v_gecos=param[5],
       v_gid=param[4],
       v_uid=param[3],
       v_passwd=param[2],
       v_name=param[1],
       arg=caml_call1(_ge_,v_shell),
       bnds=[0,[1,[0,_qG_,[0,arg,0]]],0],
       arg$0=caml_call1(_ge_,v_dir),
       bnds$0=[0,[1,[0,_qH_,[0,arg$0,0]]],bnds],
       arg$1=caml_call1(_ge_,v_gecos),
       bnds$1=[0,[1,[0,_qI_,[0,arg$1,0]]],bnds$0],
       arg$2=caml_call1(_es_,v_gid),
       bnds$2=[0,[1,[0,_qJ_,[0,arg$2,0]]],bnds$1],
       arg$3=caml_call1(_es_,v_uid),
       bnds$3=[0,[1,[0,_qK_,[0,arg$3,0]]],bnds$2],
       arg$4=caml_call1(_ge_,v_passwd),
       bnds$4=[0,[1,[0,_qL_,[0,arg$4,0]]],bnds$3],
       arg$5=caml_call1(_ge_,v_name),
       bnds$5=[0,[1,[0,_qM_,[0,arg$5,0]]],bnds$4];
      return [1,bnds$5]}
    function of_unix$1(u){return [0,u[1],u[2],u[3],u[4],u[5],u[6],u[7]]}
    function setpwent(_aaj_){return runtime.core_unix_setpwent(_aaj_)}
    function getpwent_exn(param)
     {return of_unix$1(runtime.core_unix_getpwent(0))}
    function getpwent(param)
     {function _aai_(param){return getpwent_exn(0)}
      return caml_call1(Core_kernel_Option[57],_aai_)}
    function endpwent(_aah_){return runtime.core_unix_endpwent(_aah_)}
    var Getbyname=[248,cst_Core_Core_unix_Passwd_Getb,caml_fresh_oo_id(0)];
    function _qN_(param)
     {if(param[1] === Getbyname)
       {var v0=param[2],v0$0=caml_call1(_ge_,v0);
        return [1,[0,_qO_,[0,v0$0,0]]]}
      throw [0,Assert_failure,_qP_]}
    caml_call3(Sexplib0_Sexp_conv[51][2],0,Getbyname,_qN_);
    function _qQ_(s){return [0,Getbyname,s]}
    var
     match=
      make_by$0
       (function(name,buf)
         {return of_unix$1
                  (runtime.core_unix_getpwnam_r
                    (string_to_zero_terminated_bigs(name),buf))},
        _qQ_),
     _qR_=match[2],
     _qS_=match[1],
     Getbyuid=[248,cst_Core_Core_unix_Passwd_Getb$0,caml_fresh_oo_id(0)];
    function _qT_(param)
     {if(param[1] === Getbyuid)
       {var v0=param[2],v0$0=caml_call1(_es_,v0);
        return [1,[0,_qU_,[0,v0$0,0]]]}
      throw [0,Assert_failure,_qV_]}
    caml_call3(Sexplib0_Sexp_conv[51][2],0,Getbyuid,_qT_);
    function _qW_(s){return [0,Getbyuid,s]}
    var
     match$0=
      make_by$0
       (function(uid,buf)
         {return of_unix$1(runtime.core_unix_getpwuid_r(uid,buf))},
        _qW_),
     _qX_=match$0[2],
     _qY_=match$0[1],
     pwdb_lock=caml_call1(Error_checking_mutex[1],0);
    function getpwents(param)
     {function _aac_(param)
       {runtime.core_unix_setpwent(0);
        function _aad_(param){return runtime.core_unix_endpwent(0)}
        function _aae_(param)
         {function loop(acc)
           {try
             {var ent=getpwent_exn(0),_aaf_=loop([0,ent,acc]);return _aaf_}
            catch(_aag_)
             {_aag_ = caml_wrap_exception(_aag_);
              if(_aag_ === Stdlib[12])
               return caml_call1(Core_kernel_List[34],acc);
              throw _aag_}}
          return loop(0)}
        return caml_call2(Base_Exn[12],_aae_,_aad_)}
      return caml_call2(Error_checking_mutex[6],pwdb_lock,_aac_)}
    function sexp_of_t$19(param)
     {var
       v_mem=param[4],
       v_gid=param[3],
       v_passwd=param[2],
       v_name=param[1],
       arg=caml_call2(_do_,_ge_,v_mem),
       bnds=[0,[1,[0,_qZ_,[0,arg,0]]],0],
       arg$0=caml_call1(_es_,v_gid),
       bnds$0=[0,[1,[0,_q0_,[0,arg$0,0]]],bnds],
       arg$1=caml_call1(_ge_,v_passwd),
       bnds$1=[0,[1,[0,_q1_,[0,arg$1,0]]],bnds$0],
       arg$2=caml_call1(_ge_,v_name),
       bnds$2=[0,[1,[0,_q2_,[0,arg$2,0]]],bnds$1];
      return [1,bnds$2]}
    function of_unix$2(u){return [0,u[1],u[2],u[3],u[4]]}
    var Getbyname$0=[248,cst_Core_Core_unix_Group_Getby,caml_fresh_oo_id(0)];
    function _q3_(param)
     {if(param[1] === Getbyname$0)
       {var v0=param[2],v0$0=caml_call1(_ge_,v0);
        return [1,[0,_q4_,[0,v0$0,0]]]}
      throw [0,Assert_failure,_q5_]}
    caml_call3(Sexplib0_Sexp_conv[51][2],0,Getbyname$0,_q3_);
    function _q6_(s){return [0,Getbyname$0,s]}
    var
     match$1=
      make_by$0
       (function(name,buf)
         {return of_unix$2
                  (runtime.core_unix_getgrnam_r
                    (string_to_zero_terminated_bigs(name),buf))},
        _q6_),
     _q7_=match$1[2],
     _q8_=match$1[1],
     Getbygid=[248,cst_Core_Core_unix_Group_Getby$0,caml_fresh_oo_id(0)];
    function _q9_(param)
     {if(param[1] === Getbygid)
       {var v0=param[2],v0$0=caml_call1(_es_,v0);
        return [1,[0,_q__,[0,v0$0,0]]]}
      throw [0,Assert_failure,_q$_]}
    caml_call3(Sexplib0_Sexp_conv[51][2],0,Getbygid,_q9_);
    function _ra_(s){return [0,Getbygid,s]}
    var
     match$2=
      make_by$0
       (function(gid,buf)
         {return of_unix$2(runtime.core_unix_getgrgid_r(gid,buf))},
        _ra_),
     getbygid_exn=match$2[2],
     getbygid=match$2[1];
    function getlogin(param){return caml_call1(_qX_,caml_call1(getuid,0))[1]}
    var
     _rb_=[0,caml_call2(Bin_prot_Shape[10],cst_Inet6,0),0],
     _rc_=[0,caml_call2(Bin_prot_Shape[10],cst_Inet,0),_rb_],
     _rd_=[0,caml_call2(Bin_prot_Shape[10],cst_Unix$0,0),_rc_],
     _re_=caml_call1(Bin_prot_Shape[4][1],cst_src_core_unix_ml_2060_11),
     _rf_=caml_call2(Bin_prot_Shape[12],_re_,_rd_),
     _rg_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$3),0,_rf_],0],
     _rh_=caml_call1(Bin_prot_Shape[4][1],cst_src_core_unix_ml_2060_2),
     group$1=caml_call2(Bin_prot_Shape[6],_rh_,_rg_),
     _ri_=caml_call1(Bin_prot_Shape[2][1],cst_t$4),
     bin_shape_t$2=caml_call1(caml_call2(Bin_prot_Shape[14],group$1,_ri_),0);
    function bin_size_t$0(param){return 4}
    function bin_write_t$0(buf,pos,param)
     {return 815031220 === param
              ?caml_call3(Bin_prot_Write[29],buf,pos,815031220)
              :948106920 <= param
                ?caml_call3(Bin_prot_Write[29],buf,pos,948106920)
                :caml_call3(Bin_prot_Write[29],buf,pos,-784147966)}
    var bin_writer_t$2=[0,bin_size_t$0,bin_write_t$0];
    function bin_read_t$1(buf,param,vint)
     {if(-784147966 === vint)return -784147966;
      if(815031220 === vint)return 815031220;
      if(948106920 === vint)return 948106920;
      throw Bin_prot_Common[13]}
    function bin_read_t$2(buf,pos_ref)
     {var vint=caml_call2(Bin_prot_Read[28],buf,pos_ref);
      try
       {var _aaa_=bin_read_t$1(buf,pos_ref,vint);return _aaa_}
      catch(_aab_)
       {_aab_ = caml_wrap_exception(_aab_);
        if(_aab_ === Bin_prot_Common[13])
         return caml_call2(Bin_prot_Common[18],err,pos_ref[1]);
        throw _aab_}}
    var
     bin_reader_t$2=[0,bin_read_t$2,bin_read_t$1],
     bin_t$2=[0,bin_shape_t$2,bin_writer_t$2,bin_reader_t$2];
    function t_of_sexp$15(sexp)
     {if(0 === sexp[0])
       {var atom=sexp[1];
        return caml_string_notequal(atom,cst_Inet$0)
                ?caml_string_notequal(atom,cst_Inet6$0)
                  ?caml_string_notequal(atom,cst_Unix$1)
                    ?caml_call1(Sexplib0_Sexp_conv_error[19],0)
                    :948106920
                  :-784147966
                :815031220}
      var _$__=sexp[1];
      if(_$__)
       {var _$$_=_$__[1];
        if(0 === _$$_[0])
         {var atom$0=_$$_[1];
          return caml_string_notequal(atom$0,cst_Inet$1)
                  ?caml_string_notequal(atom$0,cst_Inet6$1)
                    ?caml_string_notequal(atom$0,cst_Unix$2)
                      ?caml_call1(Sexplib0_Sexp_conv_error[19],0)
                      :caml_call2(Sexplib0_Sexp_conv_error[21],tp_loc$35,sexp)
                    :caml_call2(Sexplib0_Sexp_conv_error[21],tp_loc$35,sexp)
                  :caml_call2(Sexplib0_Sexp_conv_error[21],tp_loc$35,sexp)}
        return caml_call2(Sexplib0_Sexp_conv_error[24],tp_loc$35,sexp)}
      return caml_call2(Sexplib0_Sexp_conv_error[25],tp_loc$35,sexp)}
    function t_of_sexp$16(sexp)
     {try
       {var _$8_=t_of_sexp$15(sexp);return _$8_}
      catch(_$9_)
       {_$9_ = caml_wrap_exception(_$9_);
        if(_$9_ === Sexplib0_Sexp_conv_error[18])
         return caml_call2(Sexplib0_Sexp_conv_error[20],tp_loc$36,sexp);
        throw _$9_}}
    function sexp_of_t$20(param)
     {return 815031220 === param?_rj_:948106920 <= param?_rk_:_rl_}
    var
     of_string$2=UnixLabels[117],
     to_string$1=UnixLabels[118],
     compare$10=caml_compare,
     _rm_=UnixLabels[151];
    function hash_fold_t$1(hash,t)
     {return caml_call2(_eq_,hash,caml_call1(Core_kernel_Hashtbl[1],t))}
    var
     hash$2=caml_call1(Base_Hash[12],hash_fold_t$1),
     _rn_=caml_call1(Base_Sexpable[5],[0,of_string$2,to_string$1]),
     t_of_sexp$17=_rn_[1],
     sexp_of_t$21=_rn_[2],
     include$6=caml_call1(Core_kernel_Binable[13],[0,of_string$2,to_string$1]),
     bin_size_t$1=include$6[1],
     bin_write_t$1=include$6[2],
     bin_read_t$3=include$6[3],
     bin_read_t$4=include$6[4],
     bin_shape_t$3=include$6[5],
     bin_writer_t$3=include$6[6],
     bin_reader_t$3=include$6[7],
     bin_t$3=include$6[8],
     include$7=
      caml_call1
       (Core_kernel_Comparable[8],[0,compare$10,t_of_sexp$17,sexp_of_t$21]),
     symbol$13=include$7[1],
     symbol$14=include$7[2],
     symbol$15=include$7[3],
     symbol$16=include$7[4],
     symbol$17=include$7[5],
     symbol$18=include$7[6],
     equal$2=include$7[7],
     compare$11=include$7[8],
     min$2=include$7[9],
     max$2=include$7[10],
     ascending$1=include$7[11],
     descending$1=include$7[12],
     between$1=include$7[13],
     clamp_exn$1=include$7[14],
     clamp$1=include$7[15],
     comparator$1=include$7[16],
     validate_lbound$1=include$7[17],
     validate_ubound$1=include$7[18],
     validate_bound$1=include$7[19],
     Replace_polymorphic_compare$1=include$7[20],
     Map$1=include$7[21],
     Set$1=include$7[22],
     _ro_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$5),0,bin_shape_t$3],0],
     _rp_=caml_call1(Bin_prot_Shape[4][1],cst_src_core_unix_ml_2098_6),
     group$2=caml_call2(Bin_prot_Shape[6],_rp_,_ro_),
     _rq_=caml_call1(Bin_prot_Shape[2][1],cst_t$6),
     bin_shape_t$4=caml_call1(caml_call2(Bin_prot_Shape[14],group$2,_rq_),0),
     bin_writer_t$4=[0,bin_size_t$1,bin_write_t$1],
     bin_reader_t$4=[0,bin_read_t$3,bin_read_t$4],
     bin_t$4=[0,bin_shape_t$4,bin_writer_t$4,bin_reader_t$4],
     _rr_=
      [0,
       [0,
        caml_call1(of_string$2,cst_2001_db8_1$1),
        cst_2001_db8_1$0,
        cst_2001_db8_1],
       0],
     _rs_=
      [0,
       [0,
        caml_call1(of_string$2,cst_2001_DB8_1),
        cst_2001_db8_1$3,
        cst_2001_db8_1$2],
       _rr_],
     _rt_=
      [0,
       [0,
        caml_call1(of_string$2,cst_2001_db8_1_0_0_1$1),
        cst_2001_db8_1_0_0_1$0,
        cst_2001_db8_1_0_0_1],
       _rs_],
     _ru_=
      [0,
       [0,
        caml_call1(of_string$2,cst_2001_db8_0_0_1_1),
        cst_2001_db8_1_0_0_1$3,
        cst_2001_db8_1_0_0_1$2],
       _rt_],
     _rv_=
      [0,
       [0,
        caml_call1(of_string$2,cst_2001_db8_0_0_1_0_0_1),
        cst_2001_db8_1_0_0_1$5,
        cst_2001_db8_1_0_0_1$4],
       _ru_],
     _rw_=
      [0,
       [0,
        caml_call1(of_string$2,cst_2001_db8_0_1_1_1_1_1$1),
        cst_2001_db8_0_1_1_1_1_1$0,
        cst_2001_db8_0_1_1_1_1_1],
       _rv_],
     _rx_=
      [0,
       [0,
        caml_call1(of_string$2,cst_2001_db8_1_1_1_1_1),
        cst_2001_db8_0_1_1_1_1_1$3,
        cst_2001_db8_0_1_1_1_1_1$2],
       _rw_],
     _ry_=
      [0,
       [0,
        caml_call1(of_string$2,cst_2001_db8_0000_1_1_1_1_1),
        cst_2001_db8_0_1_1_1_1_1$5,
        cst_2001_db8_0_1_1_1_1_1$4],
       _rx_],
     _rz_=
      [0,
       [0,
        caml_call1(of_string$2,cst_2001_db8_2_1$1),
        cst_2001_db8_2_1$0,
        cst_2001_db8_2_1],
       _ry_],
     _rA_=
      [0,
       [0,
        caml_call1(of_string$2,cst_2001_db8_1$6),
        cst_2001_db8_1$5,
        cst_2001_db8_1$4],
       _rz_],
     _rB_=
      [0,
       [0,
        caml_call1(of_string$2,cst_2001_0db8_0001),
        cst_2001_db8_1$8,
        cst_2001_db8_1$7],
       _rA_],
     _rC_=
      [0,
       [0,
        caml_call1(of_string$2,cst_ffff_192_0_2_128$1),
        cst_ffff_192_0_2_128$0,
        cst_ffff_192_0_2_128],
       _rB_],
     _rD_=
      [0,
       [0,
        caml_call1(of_string$2,cst_ffff_c000_0280),
        cst_ffff_192_0_2_128$3,
        cst_ffff_192_0_2_128$2],
       _rC_],
     _rE_=[0,[0,caml_call1(of_string$2,cst$19),cst$18,cst$17],_rD_],
     _rF_=
      [0,[0,caml_call1(of_string$2,cst_0_0_0_0_0_0_0_0),cst$21,cst$20],_rE_],
     _rG_=[0,[0,caml_call1(of_string$2,cst_1$1),cst_1$0,cst_1],_rF_],
     _rH_=
      [0,[0,caml_call1(of_string$2,cst_0_0_0_0_0_0_0_1),cst_1$3,cst_1$2],_rG_],
     _rI_=
      [0,
       [0,
        caml_call1(of_string$2,cst_2001_db8_85a3_8a2e_370_733$1),
        cst_2001_db8_85a3_8a2e_370_733$0,
        cst_2001_db8_85a3_8a2e_370_733],
       _rH_],
     _rJ_=
      [0,
       [0,
        caml_call1(of_string$2,cst_2001_db8_85a3_0_0_8a2e_370),
        cst_2001_db8_85a3_8a2e_370_733$3,
        cst_2001_db8_85a3_8a2e_370_733$2],
       _rI_],
     _rK_=
      [0,
       [0,
        caml_call1(of_string$2,cst_2001_0db8_85a3_0000_0000_8),
        cst_2001_db8_85a3_8a2e_370_733$5,
        cst_2001_db8_85a3_8a2e_370_733$4],
       _rJ_],
     _rL_=
      [0,
       [0,
        caml_call1(of_string$2,cst_255_255_255_255$1),
        cst_255_255_255_255$0,
        cst_255_255_255_255],
       _rK_],
     _rM_=
      [0,
       [0,
        caml_call1(of_string$2,cst_192_168_1_101$1),
        cst_192_168_1_101$0,
        cst_192_168_1_101],
       _rL_],
     _rN_=
      [0,
       [0,
        caml_call1(of_string$2,cst_127_0_0_1$1),
        cst_127_0_0_1$0,
        cst_127_0_0_1],
       _rM_],
     _rO_=
      [0,
       [0,caml_call1(of_string$2,cst_10_0_0_0$1),cst_10_0_0_0$0,cst_10_0_0_0],
       _rN_],
     tests=
      [0,
       [0,caml_call1(of_string$2,cst_0_0_0_0$1),cst_0_0_0_0$0,cst_0_0_0_0],
       _rO_];
    caml_call1
     (Core_kernel_Stable_unit_test[4],
      [0,
       t_of_sexp$17,
       sexp_of_t$21,
       bin_size_t$1,
       bin_write_t$1,
       bin_read_t$3,
       bin_read_t$4,
       bin_shape_t$4,
       bin_writer_t$4,
       bin_reader_t$4,
       bin_t$4,
       equal$2,
       tests]);
    var arg_type$0=caml_call3(Core_kernel_Command[2][1],0,0,of_string$2);
    function sexp_of_t$22(param)
     {var
       v_addresses=param[4],
       v_family=param[3],
       v_aliases=param[2],
       v_name=param[1],
       arg=caml_call2(_do_,sexp_of_t$21,v_addresses),
       bnds=[0,[1,[0,_rP_,[0,arg,0]]],0],
       arg$0=sexp_of_t$20(v_family),
       bnds$0=[0,[1,[0,_rQ_,[0,arg$0,0]]],bnds],
       arg$1=caml_call2(_do_,_ge_,v_aliases),
       bnds$1=[0,[1,[0,_rR_,[0,arg$1,0]]],bnds$0],
       arg$2=caml_call1(_ge_,v_name),
       bnds$2=[0,[1,[0,_rS_,[0,arg$2,0]]],bnds$1];
      return [1,bnds$2]}
    function of_unix$3(u)
     {var _$6_=u[4];
      switch(u[3])
       {case 0:var _$7_=948106920;break;
        case 1:var _$7_=815031220;break;
        default:var _$7_=-784147966}
      return [0,u[1],u[2],_$7_,_$6_]}
    var Getbyname$1=[248,cst_Core_Core_unix_Host_Getbyn,caml_fresh_oo_id(0)];
    function _rT_(param)
     {if(param[1] === Getbyname$1)
       {var v0=param[2],v0$0=caml_call1(_ge_,v0);
        return [1,[0,_rU_,[0,v0$0,0]]]}
      throw [0,Assert_failure,_rV_]}
    caml_call3(Sexplib0_Sexp_conv[51][2],0,Getbyname$1,_rT_);
    function _rW_(s){return [0,Getbyname$1,s]}
    var
     match$3=
      make_by
       (function(name){return of_unix$3(caml_call1(UnixLabels[152],name))},
        _rW_),
     _rY_=match$3[1],
     _rX_=match$3[2],
     Getbyaddr=[248,cst_Core_Core_unix_Host_Getbya,caml_fresh_oo_id(0)];
    function _rZ_(param)
     {if(param[1] === Getbyaddr)
       {var v0=param[2],v0$0=caml_call1(sexp_of_t$21,v0);
        return [1,[0,_r0_,[0,v0$0,0]]]}
      throw [0,Assert_failure,_r1_]}
    caml_call3(Sexplib0_Sexp_conv[51][2],0,Getbyaddr,_rZ_);
    function _r2_(a){return [0,Getbyaddr,a]}
    var
     match$4=
      make_by
       (function(addr){return of_unix$3(caml_call1(UnixLabels[153],addr))},
        _r2_),
     getbyaddr_exn=match$4[2],
     getbyaddr=match$4[1];
    function have_address_in_common(h1,h2)
     {var
       addrs1=caml_call1(Set$1[59],h1[4]),
       addrs2=caml_call1(Set$1[59],h2[4]),
       _$5_=caml_call2(Set$1[22],addrs1,addrs2);
      return 1 - caml_call1(Set$1[5],_$5_)}
    var
     Get_inet_addr=
      [248,cst_Core_Core_unix_Inet_addr_G,caml_fresh_oo_id(0)];
    function _r3_(param)
     {if(param[1] === Get_inet_addr)
       {var
         v1=param[3],
         v0=param[2],
         v0$0=caml_call1(_ge_,v0),
         v1$0=caml_call1(_ge_,v1);
        return [1,[0,_r4_,[0,v0$0,[0,v1$0,0]]]]}
      throw [0,Assert_failure,_r5_]}
    caml_call3(Sexplib0_Sexp_conv[51][2],0,Get_inet_addr,_r3_);
    function of_string$3(name)
     {try
       {var _$3_=caml_call1(of_string$2,name);return _$3_}
      catch(_$4_)
       {_$4_ = caml_wrap_exception(_$4_);
        if(_$4_[1] === Stdlib[7])
         {var match=caml_call1(_rY_,name);
          if(match)
           {var host=match[1];
            if(948106920 <= host[3])throw [0,Assert_failure,_r6_];
            var addrs=host[4],_$2_=caml_call1(Core_kernel_Array[18],addrs);
            if(caml_call2(Core_kernel_Int[108],_$2_,0))
             return caml_check_bound(addrs,0)[1];
            throw [0,Get_inet_addr,name,cst_empty_addrs]}
          throw [0,Get_inet_addr,name,cst_host_not_found]}
        throw _$4_}}
    var
     include$8=caml_call1(Base_Sexpable[5],[0,of_string$3,to_string$1]),
     t_of_sexp$18=include$8[1],
     sexp_of_t$23=include$8[2],
     bind_any=UnixLabels[119],
     bind_any_inet6=UnixLabels[121],
     localhost=UnixLabels[120],
     localhost_inet6=UnixLabels[122];
    function bits(r){return r[2]}
    var
     _r7_=
      caml_call1
       (Bin_prot_Shape[8],[0,[0,cst_address,_ew_],[0,[0,cst_bits,_eg_],0]]),
     _r8_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$7),0,_r7_],0],
     _r9_=caml_call1(Bin_prot_Shape[4][1],cst_src_core_unix_ml_2243_8),
     group$3=caml_call2(Bin_prot_Shape[6],_r9_,_r8_),
     _r__=caml_call1(Bin_prot_Shape[2][1],cst_t$8),
     bin_shape_t$5=caml_call1(caml_call2(Bin_prot_Shape[14],group$3,_r__),0);
    function bin_size_t$2(param)
     {var
       v2=param[2],
       v1=param[1],
       _$0_=caml_call1(_ex_,v1),
       size=caml_call2(Bin_prot_Common[23],0,_$0_),
       _$1_=caml_call1(_eh_,v2);
      return caml_call2(Bin_prot_Common[23],size,_$1_)}
    function bin_write_t$2(buf,pos,param)
     {var v2=param[2],v1=param[1],pos$0=caml_call3(_ey_,buf,pos,v1);
      return caml_call3(_ei_,buf,pos$0,v2)}
    var bin_writer_t$5=[0,bin_size_t$2,bin_write_t$2];
    function bin_read_t$5(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_src_core_unix_ml_Cidr_Stab,pos_ref[1])}
    function bin_read_t$6(buf,pos_ref)
     {var
       v_address=caml_call2(_eA_,buf,pos_ref),
       v_bits=caml_call2(_ek_,buf,pos_ref);
      return [0,v_address,v_bits]}
    var
     bin_reader_t$5=[0,bin_read_t$6,bin_read_t$5],
     bin_t$5=[0,bin_shape_t$5,bin_writer_t$5,bin_reader_t$5];
    function compare$12(a_031,b_032)
     {if(caml_call2(Ppx_compare_lib[1],a_031,b_032))return 0;
      var n=caml_call2(_eE_,a_031[1],b_032[1]);
      return 0 === n?caml_call2(_eo_,a_031[2],b_032[2]):n}
    function hash_fold_t$2(hsv,arg)
     {var hsv$0=caml_call2(_eG_,hsv,arg[1]);
      return caml_call2(_eq_,hsv$0,arg[2])}
    function hash$3(x)
     {var hsv=caml_call2(Base_Hash[11],0,0),_$Z_=hash_fold_t$2(hsv,x);
      return caml_call1(Base_Hash[9],_$Z_)}
    function normalized_address(base,bits)
     {if(0 === bits)return 0;
      var
       shift=32 - bits | 0,
       _$Y_=caml_call2(Core_kernel_Int32[66],base,shift);
      return caml_call2(Core_kernel_Int32[51],_$Y_,shift)}
    function create$1(base_address,bits)
     {var _$W_=bits < 0?1:0,_$X_=_$W_ || (32 < bits?1:0);
      if(_$X_)caml_call3(_cz_,_r$_,bits,0);
      var
       base=runtime.core_unix_inet4_addr_to_int32_exn(base_address),
       address=normalized_address(base,bits);
      return [0,address,bits]}
    function of_string$4(s)
     {var match=caml_call2(Core_kernel_String[56],s,47);
      if(match)
       {var _$U_=match[2];
        if(_$U_ && ! _$U_[2])
         {var
           s_bits=_$U_[1],
           s_inet_address=match[1],
           _$V_=caml_call1(Core_kernel_Int[102],s_bits);
          return create$1(caml_call1(of_string$2,s_inet_address),_$V_)}}
      return caml_call3(_cz_,_sa_,s,0)}
    function to_string$2(t)
     {var addr=runtime.core_unix_inet4_addr_of_int32(t[1]),_$T_=t[2];
      return caml_call3(sprintf,_sb_,caml_call1(to_string$1,addr),_$T_)}
    var
     T1=caml_call1(Core_kernel_Sexpable[2][5][1],[0,of_string$4,to_string$2]),
     sexp_of_t$24=T1[2],
     include$9=
      caml_call1(Core_kernel_Comparator[9][1][2],[0,compare$12,sexp_of_t$24]),
     t_of_sexp$19=T1[1],
     sexp_of_t$25=T1[2],
     comparator$2=include$9[1],
     T3=
      caml_call1
       (Core_kernel_Comparable[21][1][1],
        [0,
         bin_size_t$2,
         bin_write_t$2,
         bin_read_t$6,
         bin_read_t$5,
         bin_shape_t$5,
         bin_writer_t$5,
         bin_reader_t$5,
         bin_t$5,
         compare$12,
         t_of_sexp$19,
         sexp_of_t$25,
         comparator$2]),
     t_of_sexp$20=T1[1],
     sexp_of_t$26=T1[2],
     comparator$3=include$9[1],
     Map$2=T3[1],
     Set$2=T3[2];
    function invariant(t)
     {if(0 <= t[2] && ! (32 < t[2]))
       {var _$S_=normalized_address(t[1],t[2]);
        if(caml_call2(Core_kernel_Int32[111],t[1],_$S_))return 0;
        throw [0,Assert_failure,_sd_]}
      throw [0,Assert_failure,_sc_]}
    function base_address(t)
     {return runtime.core_unix_inet4_addr_of_int32(t[1])}
    function broadcast_address(t)
     {var
       _$R_=caml_call2(Core_kernel_Int32[51],-1,32 - t[2] | 0),
       inverted_netmask=caml_call1(Core_kernel_Int32[49],_$R_);
      return runtime.core_unix_inet4_addr_of_int32
              (caml_call2(Core_kernel_Int32[47],t[1],inverted_netmask))}
    function netmask_of_bits(t)
     {return runtime.core_unix_inet4_addr_of_int32
              (caml_call2(Core_kernel_Int32[51],-1,32 - t[2] | 0))}
    function does_match_int32(t,address)
     {var _$Q_=normalized_address(address,t[2]);
      return caml_call2(Core_kernel_Int32[111],t[1],_$Q_)}
    function does_match(t,inet_addr)
     {try
       {var address=runtime.core_unix_inet4_addr_to_int32_exn(inet_addr)}
      catch(_$P_){return 0}
      return does_match_int32(t,address)}
    var multicast=of_string$4(cst_224_0_0_0_4);
    function is_subset$0(t,of)
     {var _$O_=of[2] <= t[2]?1:0;return _$O_?does_match_int32(of,t[1]):_$O_}
    function all_matching_addresses(t)
     {function _$M_(address)
       {if(does_match_int32(t,address))
         {var _$N_=caml_call1(Core_kernel_Int32[43],address);
          return [0,[0,runtime.core_unix_inet4_addr_of_int32(address),_$N_]]}
        return 0}
      return caml_call2(Core_kernel_Sequence[49],t[1],_$M_)}
    var
     t_of_sexp$21=T1[1],
     sexp_of_t$27=T1[2],
     comparator$4=include$9[1],
     include$10=
      caml_call1
       (Core_kernel_Identifiable[4],
        [0,
         bin_size_t$2,
         bin_write_t$2,
         bin_read_t$6,
         bin_read_t$5,
         bin_shape_t$5,
         bin_writer_t$5,
         bin_reader_t$5,
         bin_t$5,
         compare$12,
         hash_fold_t$2,
         hash$3,
         t_of_sexp$21,
         sexp_of_t$27,
         comparator$4,
         of_string$4,
         to_string$2,
         module_name]),
     _so_=include$10[11],
     _se_=include$10[1],
     _sf_=include$10[2],
     _sg_=include$10[3],
     _sh_=include$10[4],
     _si_=include$10[5],
     _sj_=include$10[6],
     _sk_=include$10[7],
     _sl_=include$10[8],
     _sm_=include$10[9],
     _sn_=include$10[10],
     _sp_=include$10[12],
     _sq_=include$10[13],
     _sr_=include$10[14],
     _ss_=include$10[15],
     _st_=include$10[16],
     _su_=include$10[17],
     _sv_=include$10[18],
     _sw_=include$10[19],
     _sx_=include$10[20],
     _sy_=include$10[21],
     _sz_=include$10[22],
     _sA_=include$10[23],
     _sB_=include$10[24],
     _sC_=include$10[25],
     _sD_=include$10[26],
     _sE_=include$10[27],
     _sF_=include$10[28],
     _sG_=include$10[29],
     _sH_=include$10[30],
     _sI_=include$10[31],
     _sJ_=include$10[32],
     _sK_=include$10[33],
     _sL_=include$10[34],
     _sM_=include$10[35],
     _sN_=include$10[36],
     _sO_=include$10[37],
     _sP_=include$10[38],
     _sQ_=include$10[39],
     _sR_=include$10[40],
     _sS_=include$10[41],
     arg_type$1=caml_call3(Core_kernel_Command[2][1],0,0,_so_);
    function t_of_sexp$22(sexp)
     {if(0 === sexp[0])
       return caml_call2(Sexplib0_Sexp_conv_error[16],tp_loc$37,sexp);
      var
       field_sexps=sexp[1],
       name_field=[0,0],
       aliases_field=[0,0],
       proto_field=[0,0],
       duplicates=[0,0],
       extra=[0,0],
       param=field_sexps;
      for(;;)
       {if(param)
         {var _$D_=param[1];
          if(1 === _$D_[0])
           {var _$E_=_$D_[1];
            if(_$E_)
             {var _$F_=_$E_[1];
              if(0 === _$F_[0])
               {var _$G_=_$E_[2],_$H_=_$F_[1],switch$0=0;
                if(! _$G_ || ! _$G_[2])switch$0 = 1;
                if(switch$0)
                 {var
                   tail=param[2],
                   field_sexp$3=
                    function(_$L_)
                     {function field_sexp(param)
                       {if(_$L_)
                         {if(_$L_[2])throw [0,Assert_failure,_sT_];
                          var x=_$L_[1];
                          return x}
                        return caml_call2
                                (Sexplib0_Sexp_conv_error[10],tp_loc$37,sexp)}
                      return field_sexp},
                   field_sexp=field_sexp$3(_$G_);
                  if(caml_string_notequal(_$H_,cst_aliases))
                   if(caml_string_notequal(_$H_,cst_name$3))
                    if(caml_string_notequal(_$H_,cst_proto))
                     {if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_$H_,extra[1]]}
                    else
                     if(proto_field[1])
                      duplicates[1] = [0,_$H_,duplicates[1]];
                     else
                      {var
                        field_sexp$0=field_sexp(0),
                        fvalue=caml_call1(file_perm_of_sexp,field_sexp$0);
                       proto_field[1] = [0,fvalue]}
                   else
                    if(name_field[1])
                     duplicates[1] = [0,_$H_,duplicates[1]];
                    else
                     {var
                       field_sexp$1=field_sexp(0),
                       fvalue$0=caml_call1(_gf_,field_sexp$1);
                      name_field[1] = [0,fvalue$0]}
                  else
                   if(aliases_field[1])
                    duplicates[1] = [0,_$H_,duplicates[1]];
                   else
                    {var
                      field_sexp$2=field_sexp(0),
                      fvalue$1=caml_call2(_dp_,_gf_,field_sexp$2);
                     aliases_field[1] = [0,fvalue$1]}
                  var param=tail;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[10],tp_loc$37,_$D_)}
        if(duplicates[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],tp_loc$37,duplicates[1],sexp);
        if(extra[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[13],tp_loc$37,extra[1],sexp);
        var _$I_=name_field[1],_$J_=aliases_field[1],_$K_=proto_field[1];
        if(_$I_ && _$J_ && _$K_)
         {var proto_value=_$K_[1],aliases_value=_$J_[1],name_value=_$I_[1];
          return [0,name_value,aliases_value,proto_value]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[15],
                 tp_loc$37,
                 sexp,
                 [0,
                  [0,0 === name_field[1]?1:0,cst_name$4],
                  [0,
                   [0,0 === aliases_field[1]?1:0,cst_aliases$0],
                   [0,[0,0 === proto_field[1]?1:0,cst_proto$0],0]]])}}
    function sexp_of_t$28(param)
     {var
       v_proto=param[3],
       v_aliases=param[2],
       v_name=param[1],
       arg=caml_call1(_es_,v_proto),
       bnds=[0,[1,[0,_sU_,[0,arg,0]]],0],
       arg$0=caml_call2(_do_,_ge_,v_aliases),
       bnds$0=[0,[1,[0,_sV_,[0,arg$0,0]]],bnds],
       arg$1=caml_call1(_ge_,v_name),
       bnds$1=[0,[1,[0,_sW_,[0,arg$1,0]]],bnds$0];
      return [1,bnds$1]}
    function of_unix$4(u){return [0,u[1],u[2],u[3]]}
    var Getbyname$2=[248,cst_Core_Core_unix_Protocol_Ge,caml_fresh_oo_id(0)];
    function _sX_(param)
     {if(param[1] === Getbyname$2)
       {var v0=param[2],v0$0=caml_call1(_ge_,v0);
        return [1,[0,_sY_,[0,v0$0,0]]]}
      throw [0,Assert_failure,_sZ_]}
    caml_call3(Sexplib0_Sexp_conv[51][2],0,Getbyname$2,_sX_);
    function _s0_(s){return [0,Getbyname$2,s]}
    var
     match$5=
      make_by
       (function(name){return of_unix$4(caml_call1(UnixLabels[154],name))},
        _s0_),
     _s1_=match$5[2],
     _s2_=match$5[1],
     Getbynumber=[248,cst_Core_Core_unix_Protocol_Ge$0,caml_fresh_oo_id(0)];
    function _s3_(param)
     {if(param[1] === Getbynumber)
       {var v0=param[2],v0$0=caml_call1(_es_,v0);
        return [1,[0,_s4_,[0,v0$0,0]]]}
      throw [0,Assert_failure,_s5_]}
    caml_call3(Sexplib0_Sexp_conv[51][2],0,Getbynumber,_s3_);
    function _s6_(i){return [0,Getbynumber,i]}
    var
     match$6=
      make_by
       (function(i){return of_unix$4(caml_call1(UnixLabels[155],i))},_s6_),
     getbynumber_exn=match$6[2],
     getbynumber=match$6[1];
    function t_of_sexp$23(sexp)
     {if(0 === sexp[0])
       return caml_call2(Sexplib0_Sexp_conv_error[16],tp_loc$38,sexp);
      var
       field_sexps=sexp[1],
       name_field=[0,0],
       aliases_field=[0,0],
       port_field=[0,0],
       proto_field=[0,0],
       duplicates=[0,0],
       extra=[0,0],
       param=field_sexps;
      for(;;)
       {if(param)
         {var _$t_=param[1];
          if(1 === _$t_[0])
           {var _$u_=_$t_[1];
            if(_$u_)
             {var _$v_=_$u_[1];
              if(0 === _$v_[0])
               {var _$w_=_$u_[2],_$x_=_$v_[1],switch$0=0;
                if(! _$w_ || ! _$w_[2])switch$0 = 1;
                if(switch$0)
                 {var
                   tail=param[2],
                   field_sexp$4=
                    function(_$C_)
                     {function field_sexp(param)
                       {if(_$C_)
                         {if(_$C_[2])throw [0,Assert_failure,_s7_];
                          var x=_$C_[1];
                          return x}
                        return caml_call2
                                (Sexplib0_Sexp_conv_error[10],tp_loc$38,sexp)}
                      return field_sexp},
                   field_sexp=field_sexp$4(_$w_);
                  if(caml_string_notequal(_$x_,cst_aliases$1))
                   if(caml_string_notequal(_$x_,cst_name$5))
                    if(caml_string_notequal(_$x_,cst_port))
                     if(caml_string_notequal(_$x_,cst_proto$1))
                      {if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_$x_,extra[1]]}
                     else
                      if(proto_field[1])
                       duplicates[1] = [0,_$x_,duplicates[1]];
                      else
                       {var
                         field_sexp$0=field_sexp(0),
                         fvalue=caml_call1(_gf_,field_sexp$0);
                        proto_field[1] = [0,fvalue]}
                    else
                     if(port_field[1])
                      duplicates[1] = [0,_$x_,duplicates[1]];
                     else
                      {var
                        field_sexp$1=field_sexp(0),
                        fvalue$0=caml_call1(file_perm_of_sexp,field_sexp$1);
                       port_field[1] = [0,fvalue$0]}
                   else
                    if(name_field[1])
                     duplicates[1] = [0,_$x_,duplicates[1]];
                    else
                     {var
                       field_sexp$2=field_sexp(0),
                       fvalue$1=caml_call1(_gf_,field_sexp$2);
                      name_field[1] = [0,fvalue$1]}
                  else
                   if(aliases_field[1])
                    duplicates[1] = [0,_$x_,duplicates[1]];
                   else
                    {var
                      field_sexp$3=field_sexp(0),
                      fvalue$2=caml_call2(_dp_,_gf_,field_sexp$3);
                     aliases_field[1] = [0,fvalue$2]}
                  var param=tail;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[10],tp_loc$38,_$t_)}
        if(duplicates[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],tp_loc$38,duplicates[1],sexp);
        if(extra[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[13],tp_loc$38,extra[1],sexp);
        var
         _$y_=name_field[1],
         _$z_=aliases_field[1],
         _$A_=port_field[1],
         _$B_=proto_field[1];
        if(_$y_ && _$z_ && _$A_ && _$B_)
         {var
           proto_value=_$B_[1],
           port_value=_$A_[1],
           aliases_value=_$z_[1],
           name_value=_$y_[1];
          return [0,name_value,aliases_value,port_value,proto_value]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[15],
                 tp_loc$38,
                 sexp,
                 [0,
                  [0,0 === name_field[1]?1:0,cst_name$6],
                  [0,
                   [0,0 === aliases_field[1]?1:0,cst_aliases$2],
                   [0,
                    [0,0 === port_field[1]?1:0,cst_port$0],
                    [0,[0,0 === proto_field[1]?1:0,cst_proto$2],0]]]])}}
    function sexp_of_t$29(param)
     {var
       v_proto=param[4],
       v_port=param[3],
       v_aliases=param[2],
       v_name=param[1],
       arg=caml_call1(_ge_,v_proto),
       bnds=[0,[1,[0,_s8_,[0,arg,0]]],0],
       arg$0=caml_call1(_es_,v_port),
       bnds$0=[0,[1,[0,_s9_,[0,arg$0,0]]],bnds],
       arg$1=caml_call2(_do_,_ge_,v_aliases),
       bnds$1=[0,[1,[0,_s__,[0,arg$1,0]]],bnds$0],
       arg$2=caml_call1(_ge_,v_name),
       bnds$2=[0,[1,[0,_s$_,[0,arg$2,0]]],bnds$1];
      return [1,bnds$2]}
    function of_unix$5(u){return [0,u[1],u[2],u[3],u[4]]}
    var Getbyname$3=[248,cst_Core_Core_unix_Service_Get,caml_fresh_oo_id(0)];
    function _ta_(param)
     {if(param[1] === Getbyname$3)
       {var
         v1=param[3],
         v0=param[2],
         v0$0=caml_call1(_ge_,v0),
         v1$0=caml_call1(_ge_,v1);
        return [1,[0,_tb_,[0,v0$0,[0,v1$0,0]]]]}
      throw [0,Assert_failure,_tc_]}
    caml_call3(Sexplib0_Sexp_conv[51][2],0,Getbyname$3,_ta_);
    function getbyname_exn(name,protocol)
     {try
       {var _$r_=of_unix$5(caml_call2(UnixLabels[156],name,protocol));
        return _$r_}
      catch(_$s_)
       {_$s_ = caml_wrap_exception(_$s_);
        if(_$s_[1] !== _ih_ && _$s_ !== include$2[103])throw _$s_;
        throw [0,Getbyname$3,name,protocol]}}
    function getbyname(name,protocol)
     {try
       {var _$p_=[0,of_unix$5(caml_call2(UnixLabels[156],name,protocol))];
        return _$p_}
      catch(_$q_){return 0}}
    var Getbyport=[248,cst_Core_Core_unix_Service_Get$0,caml_fresh_oo_id(0)];
    function _td_(param)
     {if(param[1] === Getbyport)
       {var
         v1=param[3],
         v0=param[2],
         v0$0=caml_call1(_es_,v0),
         v1$0=caml_call1(_ge_,v1);
        return [1,[0,_te_,[0,v0$0,[0,v1$0,0]]]]}
      throw [0,Assert_failure,_tf_]}
    caml_call3(Sexplib0_Sexp_conv[51][2],0,Getbyport,_td_);
    function getbyport_exn(num,protocol)
     {try
       {var _$n_=of_unix$5(caml_call2(UnixLabels[157],num,protocol));
        return _$n_}
      catch(_$o_)
       {_$o_ = caml_wrap_exception(_$o_);
        if(_$o_[1] !== _ih_ && _$o_ !== include$2[103])throw _$o_;
        throw [0,Getbyport,num,protocol]}}
    function getbyport(num,protocol)
     {try
       {var _$l_=[0,of_unix$5(caml_call2(UnixLabels[157],num,protocol))];
        return _$l_}
      catch(_$m_)
       {_$m_ = caml_wrap_exception(_$m_);
        if(_$m_[1] !== _ih_ && _$m_ !== include$2[103])throw _$m_;
        return 0}}
    function socket_domain_of_sexp(sexp)
     {if(0 === sexp[0])
       {var _$h_=sexp[1],switch$0=0;
        if(caml_string_notequal(_$h_,cst_PF_INET))
         {var switch$1=0;
          if(caml_string_notequal(_$h_,cst_PF_INET6))
           {var switch$2=0;
            if(caml_string_notequal(_$h_,cst_PF_UNIX))
             if(caml_string_notequal(_$h_,cst_pF_INET))
              if(caml_string_notequal(_$h_,cst_pF_INET6))
               {if(caml_string_notequal(_$h_,cst_pF_UNIX))
                 {switch$0 = 1;switch$1 = 1;switch$2 = 1}}
              else
               switch$2 = 1;
             else
              {switch$1 = 1;switch$2 = 1}
            if(! switch$2)return 0}
          if(! switch$1)return 2}
        if(! switch$0)return 1}
      else
       {var _$i_=sexp[1];
        if(! _$i_)
         return caml_call2(Sexplib0_Sexp_conv_error[7],tp_loc$39,sexp);
        var _$j_=_$i_[1];
        if(0 !== _$j_[0])
         return caml_call2(Sexplib0_Sexp_conv_error[6],tp_loc$39,sexp);
        var _$k_=_$j_[1],switch$3=0;
        if(caml_string_notequal(_$k_,cst_PF_INET$0))
         {var switch$4=0;
          if(caml_string_notequal(_$k_,cst_PF_INET6$0))
           {var switch$5=0;
            if(caml_string_notequal(_$k_,cst_PF_UNIX$0))
             if(caml_string_notequal(_$k_,cst_pF_INET$0))
              if(caml_string_notequal(_$k_,cst_pF_INET6$0))
               {if(caml_string_notequal(_$k_,cst_pF_UNIX$0))
                 {switch$3 = 1;switch$4 = 1;switch$5 = 1}}
              else
               switch$5 = 1;
             else
              {switch$4 = 1;switch$5 = 1}
            if(! switch$5)
             return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$39,sexp)}
          if(! switch$4)
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$39,sexp)}
        if(! switch$3)
         return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$39,sexp)}
      return caml_call2(Sexplib0_Sexp_conv_error[8],tp_loc$39,sexp)}
    function sexp_of_socket_domain(param)
     {switch(param){case 0:return _tg_;case 1:return _th_;default:return _ti_}}
    var
     _tk_=caml_call1(Bin_prot_Shape[9],_tj_),
     _tl_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_socket_domain),0,_tk_],0],
     _tm_=caml_call1(Bin_prot_Shape[4][1],cst_src_core_unix_ml_2403_0),
     group$4=caml_call2(Bin_prot_Shape[6],_tm_,_tl_),
     _tn_=caml_call1(Bin_prot_Shape[2][1],cst_socket_domain$0),
     bin_shape_socket_domain=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$4,_tn_),0);
    function bin_size_socket_domain(param){return 1}
    function bin_write_socket_domain(buf,pos,param)
     {switch(param)
       {case 0:return caml_call3(Bin_prot_Write[30],buf,pos,0);
        case 1:return caml_call3(Bin_prot_Write[30],buf,pos,1);
        default:return caml_call3(Bin_prot_Write[30],buf,pos,2)}}
    var
     bin_writer_socket_domain=
      [0,bin_size_socket_domain,bin_write_socket_domain];
    function bin_read_socket_domain(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_src_core_unix_ml_socket_do,pos_ref[1])}
    function bin_read_socket_domain$0(buf,pos_ref)
     {var match=caml_call2(Bin_prot_Read[29],buf,pos_ref);
      if(2 < match >>> 0)
       return caml_call2(Bin_prot_Common[18],_to_,pos_ref[1]);
      switch(match){case 0:return 0;case 1:return 1;default:return 2}}
    var
     bin_reader_socket_domain=
      [0,bin_read_socket_domain$0,bin_read_socket_domain],
     bin_socket_domain=
      [0,
       bin_shape_socket_domain,
       bin_writer_socket_domain,
       bin_reader_socket_domain];
    function socket_type_of_sexp(sexp)
     {if(0 === sexp[0])
       {var _$d_=sexp[1],switch$0=0;
        if(caml_string_notequal(_$d_,cst_SOCK_DGRAM))
         {var switch$1=0;
          if(caml_string_notequal(_$d_,cst_SOCK_RAW))
           {var switch$2=0;
            if(caml_string_notequal(_$d_,cst_SOCK_SEQPACKET))
             {var switch$3=0;
              if(caml_string_notequal(_$d_,cst_SOCK_STREAM))
               if(caml_string_notequal(_$d_,cst_sOCK_DGRAM))
                if(caml_string_notequal(_$d_,cst_sOCK_RAW))
                 if(caml_string_notequal(_$d_,cst_sOCK_SEQPACKET))
                  {if(caml_string_notequal(_$d_,cst_sOCK_STREAM))
                    {switch$0 = 1;switch$1 = 1;switch$2 = 1;switch$3 = 1}}
                 else
                  switch$3 = 1;
                else
                 {switch$2 = 1;switch$3 = 1}
               else
                {switch$1 = 1;switch$2 = 1;switch$3 = 1}
              if(! switch$3)return 0}
            if(! switch$2)return 3}
          if(! switch$1)return 2}
        if(! switch$0)return 1}
      else
       {var _$e_=sexp[1];
        if(! _$e_)
         return caml_call2(Sexplib0_Sexp_conv_error[7],tp_loc$40,sexp);
        var _$f_=_$e_[1];
        if(0 !== _$f_[0])
         return caml_call2(Sexplib0_Sexp_conv_error[6],tp_loc$40,sexp);
        var _$g_=_$f_[1],switch$4=0;
        if(caml_string_notequal(_$g_,cst_SOCK_DGRAM$0))
         {var switch$5=0;
          if(caml_string_notequal(_$g_,cst_SOCK_RAW$0))
           {var switch$6=0;
            if(caml_string_notequal(_$g_,cst_SOCK_SEQPACKET$0))
             {var switch$7=0;
              if(caml_string_notequal(_$g_,cst_SOCK_STREAM$0))
               if(caml_string_notequal(_$g_,cst_sOCK_DGRAM$0))
                if(caml_string_notequal(_$g_,cst_sOCK_RAW$0))
                 if(caml_string_notequal(_$g_,cst_sOCK_SEQPACKET$0))
                  {if(caml_string_notequal(_$g_,cst_sOCK_STREAM$0))
                    {switch$4 = 1;switch$5 = 1;switch$6 = 1;switch$7 = 1}}
                 else
                  switch$7 = 1;
                else
                 {switch$6 = 1;switch$7 = 1}
               else
                {switch$5 = 1;switch$6 = 1;switch$7 = 1}
              if(! switch$7)
               return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$40,sexp)}
            if(! switch$6)
             return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$40,sexp)}
          if(! switch$5)
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$40,sexp)}
        if(! switch$4)
         return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$40,sexp)}
      return caml_call2(Sexplib0_Sexp_conv_error[8],tp_loc$40,sexp)}
    function sexp_of_socket_type(param)
     {switch(param)
       {case 0:return _tp_;
        case 1:return _tq_;
        case 2:return _tr_;
        default:return _ts_}}
    var
     _tu_=caml_call1(Bin_prot_Shape[9],_tt_),
     _tv_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_socket_type),0,_tu_],0],
     _tw_=caml_call1(Bin_prot_Shape[4][1],cst_src_core_unix_ml_2409_0),
     group$5=caml_call2(Bin_prot_Shape[6],_tw_,_tv_),
     _tx_=caml_call1(Bin_prot_Shape[2][1],cst_socket_type$0),
     bin_shape_socket_type=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$5,_tx_),0);
    function bin_size_socket_type(param){return 1}
    function bin_write_socket_type(buf,pos,param)
     {switch(param)
       {case 0:return caml_call3(Bin_prot_Write[30],buf,pos,0);
        case 1:return caml_call3(Bin_prot_Write[30],buf,pos,1);
        case 2:return caml_call3(Bin_prot_Write[30],buf,pos,2);
        default:return caml_call3(Bin_prot_Write[30],buf,pos,3)}}
    var bin_writer_socket_type=[0,bin_size_socket_type,bin_write_socket_type];
    function bin_read_socket_type(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_src_core_unix_ml_socket_ty,pos_ref[1])}
    function bin_read_socket_type$0(buf,pos_ref)
     {var match=caml_call2(Bin_prot_Read[29],buf,pos_ref);
      if(3 < match >>> 0)
       return caml_call2(Bin_prot_Common[18],_ty_,pos_ref[1]);
      switch(match)
       {case 0:return 0;case 1:return 1;case 2:return 2;default:return 3}}
    var
     bin_reader_socket_type=[0,bin_read_socket_type$0,bin_read_socket_type],
     bin_socket_type=
      [0,bin_shape_socket_type,bin_writer_socket_type,bin_reader_socket_type];
    function compare_sockaddr(a_033,match)
     {if(caml_call2(Ppx_compare_lib[1],a_033,match))return 0;
      if(0 === a_033[0])
       {var _$a_=a_033[1];
        if(0 === match[0])
         {var b_036=match[1];return caml_call2(_ga_,_$a_,b_036)}
        return -1}
      var _$b_=a_033[2],_$c_=a_033[1];
      if(0 === match[0])return 1;
      var b_040=match[2],b_038=match[1],n=caml_call2(compare$11,_$c_,b_038);
      return 0 === n?caml_call2(_eo_,_$b_,b_040):n}
    function sexp_of_sockaddr(param)
     {if(0 === param[0])
       {var v0=param[1],v0$0=caml_call1(_ge_,v0);
        return [1,[0,_tz_,[0,v0$0,0]]]}
      var
       v1=param[2],
       v0$1=param[1],
       v0$2=caml_call1(sexp_of_t$21,v0$1),
       v1$0=caml_call1(_es_,v1);
      return [1,[0,_tA_,[0,v0$2,[0,v1$0,0]]]]}
    var
     _tB_=
      caml_call1
       (Bin_prot_Shape[9],
        [0,
         [0,cst_ADDR_UNIX,[0,_f4_,0]],
         [0,[0,cst_ADDR_INET,[0,bin_shape_t$3,[0,_eg_,0]]],0]]),
     _tC_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_sockaddr),0,_tB_],0],
     _tD_=caml_call1(Bin_prot_Shape[4][1],cst_src_core_unix_ml_2416_0),
     group$6=caml_call2(Bin_prot_Shape[6],_tD_,_tC_),
     _tE_=caml_call1(Bin_prot_Shape[2][1],cst_sockaddr$0),
     bin_shape_sockaddr=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$6,_tE_),0);
    function bin_size_sockaddr(param)
     {if(0 === param[0])
       {var v1=param[1],__9_=caml_call1(_f5_,v1);
        return caml_call2(Bin_prot_Common[23],1,__9_)}
      var
       v2=param[2],
       v1$0=param[1],
       ____=caml_call1(bin_size_t$1,v1$0),
       size=caml_call2(Bin_prot_Common[23],1,____),
       __$_=caml_call1(_eh_,v2);
      return caml_call2(Bin_prot_Common[23],size,__$_)}
    function bin_write_sockaddr(buf,pos,param)
     {if(0 === param[0])
       {var v1=param[1],pos$0=caml_call3(Bin_prot_Write[30],buf,pos,0);
        return caml_call3(_f6_,buf,pos$0,v1)}
      var
       v2=param[2],
       v1$0=param[1],
       pos$1=caml_call3(Bin_prot_Write[30],buf,pos,1),
       pos$2=caml_call3(bin_write_t$1,buf,pos$1,v1$0);
      return caml_call3(_ei_,buf,pos$2,v2)}
    var bin_writer_sockaddr=[0,bin_size_sockaddr,bin_write_sockaddr];
    function bin_read_sockaddr(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_src_core_unix_ml_sockaddr,pos_ref[1])}
    function bin_read_sockaddr$0(buf,pos_ref)
     {var match=caml_call2(Bin_prot_Read[29],buf,pos_ref);
      if(0 === match){var arg_1=caml_call2(_f8_,buf,pos_ref);return [0,arg_1]}
      if(1 === match)
       {var
         arg_1$0=caml_call2(bin_read_t$3,buf,pos_ref),
         arg_2=caml_call2(_ek_,buf,pos_ref);
        return [1,arg_1$0,arg_2]}
      return caml_call2(Bin_prot_Common[18],_tF_,pos_ref[1])}
    var
     bin_reader_sockaddr=[0,bin_read_sockaddr$0,bin_read_sockaddr],
     bin_sockaddr=
      [0,bin_shape_sockaddr,bin_writer_sockaddr,bin_reader_sockaddr];
    function sockaddr_blocking_sexp_of_sexp(sexp)
     {if(0 === sexp[0])
       {var __4_=sexp[1],switch$0=0;
        if(caml_string_notequal(__4_,cst_ADDR_INET$0))
         {var switch$1=0;
          if(caml_string_notequal(__4_,cst_ADDR_UNIX$0))
           if(caml_string_notequal(__4_,cst_aDDR_INET))
            {if(caml_string_notequal(__4_,cst_aDDR_UNIX))
              {switch$0 = 1;switch$1 = 1}}
           else
            switch$1 = 1;
          if(! switch$1)
           return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$41,sexp)}
        if(! switch$0)
         return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$41,sexp)}
      else
       {var __5_=sexp[1];
        if(! __5_)
         return caml_call2(Sexplib0_Sexp_conv_error[7],tp_loc$41,sexp);
        var __6_=__5_[1];
        if(0 !== __6_[0])
         return caml_call2(Sexplib0_Sexp_conv_error[6],tp_loc$41,sexp);
        var __7_=__6_[1],switch$2=0;
        if(caml_string_notequal(__7_,cst_ADDR_INET$1))
         {var switch$3=0;
          if(caml_string_notequal(__7_,cst_ADDR_UNIX$1))
           if(caml_string_notequal(__7_,cst_aDDR_INET$0))
            {if(caml_string_notequal(__7_,cst_aDDR_UNIX$0))
              {switch$2 = 1;switch$3 = 1}}
           else
            switch$3 = 1;
          if(! switch$3)
           {var sexp_args=__5_[2];
            if(sexp_args && ! sexp_args[2])
             {var v0=sexp_args[1],v0$0=caml_call1(_gf_,v0);return [0,v0$0]}
            return caml_call3(Sexplib0_Sexp_conv_error[4],tp_loc$41,__7_,sexp)}}
        if(! switch$2)
         {var sexp_args$0=__5_[2];
          if(sexp_args$0)
           {var __8_=sexp_args$0[2];
            if(__8_ && ! __8_[2])
             {var
               v1=__8_[1],
               v0$1=sexp_args$0[1],
               v0$2=caml_call1(t_of_sexp$18,v0$1),
               v1$0=caml_call1(file_perm_of_sexp,v1);
              return [1,v0$2,v1$0]}}
          return caml_call3(Sexplib0_Sexp_conv_error[4],tp_loc$41,__7_,sexp)}}
      return caml_call2(Sexplib0_Sexp_conv_error[8],tp_loc$41,sexp)}
    function sexp_of_sockaddr_blocking_sexp(param)
     {if(0 === param[0])
       {var v0=param[1],v0$0=caml_call1(_ge_,v0);
        return [1,[0,_tG_,[0,v0$0,0]]]}
      var
       v1=param[2],
       v0$1=param[1],
       v0$2=caml_call1(sexp_of_t$23,v0$1),
       v1$0=caml_call1(_es_,v1);
      return [1,[0,_tH_,[0,v0$2,[0,v1$0,0]]]]}
    var
     _tI_=
      caml_call1
       (Bin_prot_Shape[9],
        [0,
         [0,cst_ADDR_UNIX$2,[0,_f4_,0]],
         [0,[0,cst_ADDR_INET$2,[0,bin_shape_t$3,[0,_eg_,0]]],0]]),
     _tJ_=
      [0,
       [0,caml_call1(Bin_prot_Shape[2][1],cst_sockaddr_blocking_sexp),0,_tI_],
       0],
     _tK_=caml_call1(Bin_prot_Shape[4][1],cst_src_core_unix_ml_2421_0),
     group$7=caml_call2(Bin_prot_Shape[6],_tK_,_tJ_),
     _tL_=caml_call1(Bin_prot_Shape[2][1],cst_sockaddr_blocking_sexp$0),
     bin_shape_sockaddr_blocking_se=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$7,_tL_),0);
    function bin_size_sockaddr_blocking_sex(param)
     {if(0 === param[0])
       {var v1=param[1],__1_=caml_call1(_f5_,v1);
        return caml_call2(Bin_prot_Common[23],1,__1_)}
      var
       v2=param[2],
       v1$0=param[1],
       __2_=caml_call1(bin_size_t$1,v1$0),
       size=caml_call2(Bin_prot_Common[23],1,__2_),
       __3_=caml_call1(_eh_,v2);
      return caml_call2(Bin_prot_Common[23],size,__3_)}
    function bin_write_sockaddr_blocking_se(buf,pos,param)
     {if(0 === param[0])
       {var v1=param[1],pos$0=caml_call3(Bin_prot_Write[30],buf,pos,0);
        return caml_call3(_f6_,buf,pos$0,v1)}
      var
       v2=param[2],
       v1$0=param[1],
       pos$1=caml_call3(Bin_prot_Write[30],buf,pos,1),
       pos$2=caml_call3(bin_write_t$1,buf,pos$1,v1$0);
      return caml_call3(_ei_,buf,pos$2,v2)}
    var
     bin_writer_sockaddr_blocking_s=
      [0,bin_size_sockaddr_blocking_sex,bin_write_sockaddr_blocking_se];
    function bin_read_sockaddr_blocking_sex(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_src_core_unix_ml_sockaddr_,pos_ref[1])}
    function bin_read_sockaddr_blocking_sex$0(buf,pos_ref)
     {var match=caml_call2(Bin_prot_Read[29],buf,pos_ref);
      if(0 === match){var arg_1=caml_call2(_f8_,buf,pos_ref);return [0,arg_1]}
      if(1 === match)
       {var
         arg_1$0=caml_call2(bin_read_t$3,buf,pos_ref),
         arg_2=caml_call2(_ek_,buf,pos_ref);
        return [1,arg_1$0,arg_2]}
      return caml_call2(Bin_prot_Common[18],_tM_,pos_ref[1])}
    var
     bin_reader_sockaddr_blocking_s=
      [0,bin_read_sockaddr_blocking_sex$0,bin_read_sockaddr_blocking_sex],
     bin_sockaddr_blocking_sexp=
      [0,
       bin_shape_sockaddr_blocking_se,
       bin_writer_sockaddr_blocking_s,
       bin_reader_sockaddr_blocking_s],
     _tN_=UnixLabels[124];
    function addr_r(addr){return [0,cst_addr,sexp_of_sockaddr(addr)]}
    function socket_or_pair(f,close_on_exec,domain,kind,protocol,param)
     {function __X_(param)
       {var
         __Y_=[0,close_on_exec_r(close_on_exec),0],
         __Z_=
          [0,[0,cst_protocol,caml_call1(Core_kernel_Int[101],protocol)],__Y_],
         __0_=[0,[0,cst_kind,sexp_of_socket_type(kind)],__Z_];
        return [0,[0,cst_domain,sexp_of_socket_domain(domain)],__0_]}
      return improve
              (0,
               function(param)
                {return caml_call4(f,close_on_exec,domain,kind,protocol)},
               __X_)}
    var _tO_=UnixLabels[123];
    function socket(__S_,__T_,__U_,__V_,__W_)
     {return socket_or_pair(_tO_,__S_,__T_,__U_,__V_,__W_)}
    var _tP_=UnixLabels[125];
    function socketpair(__N_,__O_,__P_,__Q_,__R_)
     {return socket_or_pair(_tP_,__N_,__O_,__P_,__Q_,__R_)}
    function accept(close_on_exec,fd)
     {function __L_(param)
       {var __M_=[0,close_on_exec_r(close_on_exec),0];
        return [0,fd_r(fd),__M_]}
      var
       match=
        improve
         (0,
          function(param){return caml_call2(UnixLabels[126],close_on_exec,fd)},
          __L_),
       addr=match[2],
       fd$0=match[1],
       addr$0=0 === addr[0]?_tQ_:addr;
      return [0,fd$0,addr$0]}
    function bind(fd,addr)
     {function __J_(param)
       {var __K_=[0,addr_r(addr),0];return [0,fd_r(fd),__K_]}
      return improve
              (0,
               function(param){return caml_call2(UnixLabels[127],fd,addr)},
               __J_)}
    function connect(fd,addr)
     {function __H_(param)
       {var __I_=[0,addr_r(addr),0];return [0,fd_r(fd),__I_]}
      return improve
              (0,
               function(param){return caml_call2(UnixLabels[128],fd,addr)},
               __H_)}
    function listen(fd,backlog)
     {function __F_(param)
       {var
         __G_=
          [0,[0,cst_backlog,caml_call1(Core_kernel_Int[101],backlog)],0];
        return [0,fd_r(fd),__G_]}
      return improve
              (0,
               function(param){return caml_call2(UnixLabels[129],fd,backlog)},
               __F_)}
    function shutdown_command_of_sexp(sexp)
     {if(0 === sexp[0])
       {var __B_=sexp[1],switch$0=0;
        if(caml_string_notequal(__B_,cst_SHUTDOWN_ALL))
         {var switch$1=0;
          if(caml_string_notequal(__B_,cst_SHUTDOWN_RECEIVE))
           {var switch$2=0;
            if(caml_string_notequal(__B_,cst_SHUTDOWN_SEND))
             if(caml_string_notequal(__B_,cst_sHUTDOWN_ALL))
              if(caml_string_notequal(__B_,cst_sHUTDOWN_RECEIVE))
               {if(caml_string_notequal(__B_,cst_sHUTDOWN_SEND))
                 {switch$0 = 1;switch$1 = 1;switch$2 = 1}}
              else
               switch$2 = 1;
             else
              {switch$1 = 1;switch$2 = 1}
            if(! switch$2)return 1}
          if(! switch$1)return 0}
        if(! switch$0)return 2}
      else
       {var __C_=sexp[1];
        if(! __C_)
         return caml_call2(Sexplib0_Sexp_conv_error[7],tp_loc$42,sexp);
        var __D_=__C_[1];
        if(0 !== __D_[0])
         return caml_call2(Sexplib0_Sexp_conv_error[6],tp_loc$42,sexp);
        var __E_=__D_[1],switch$3=0;
        if(caml_string_notequal(__E_,cst_SHUTDOWN_ALL$0))
         {var switch$4=0;
          if(caml_string_notequal(__E_,cst_SHUTDOWN_RECEIVE$0))
           {var switch$5=0;
            if(caml_string_notequal(__E_,cst_SHUTDOWN_SEND$0))
             if(caml_string_notequal(__E_,cst_sHUTDOWN_ALL$0))
              if(caml_string_notequal(__E_,cst_sHUTDOWN_RECEIVE$0))
               {if(caml_string_notequal(__E_,cst_sHUTDOWN_SEND$0))
                 {switch$3 = 1;switch$4 = 1;switch$5 = 1}}
              else
               switch$5 = 1;
             else
              {switch$4 = 1;switch$5 = 1}
            if(! switch$5)
             return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$42,sexp)}
          if(! switch$4)
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$42,sexp)}
        if(! switch$3)
         return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$42,sexp)}
      return caml_call2(Sexplib0_Sexp_conv_error[8],tp_loc$42,sexp)}
    function sexp_of_shutdown_command(param)
     {switch(param){case 0:return _tR_;case 1:return _tS_;default:return _tT_}}
    function shutdown(fd,mode)
     {function __w_(param)
       {var __A_=[0,[0,cst_mode$5,sexp_of_shutdown_command(mode)],0];
        return [0,fd_r(fd),__A_]}
      return improve
              (0,
               function(param)
                {try
                  {var __y_=caml_call2(UnixLabels[130],fd,mode);return __y_}
                 catch(__z_)
                  {__z_ = caml_wrap_exception(__z_);
                   if(__z_[1] === UnixLabels[1])
                    {var __x_=__z_[2];
                     if(typeof __x_ === "number" && 59 === __x_)return 0}
                   throw __z_}},
               __w_)}
    var
     getsockname=unary_fd(0,UnixLabels[131]),
     getpeername=unary_fd(0,UnixLabels[132]);
    function msg_flag_of_sexp(sexp)
     {if(0 === sexp[0])
       {var __s_=sexp[1],switch$0=0;
        if(caml_string_notequal(__s_,cst_MSG_DONTROUTE))
         {var switch$1=0;
          if(caml_string_notequal(__s_,cst_MSG_OOB))
           {var switch$2=0;
            if(caml_string_notequal(__s_,cst_MSG_PEEK))
             if(caml_string_notequal(__s_,cst_mSG_DONTROUTE))
              if(caml_string_notequal(__s_,cst_mSG_OOB))
               {if(caml_string_notequal(__s_,cst_mSG_PEEK))
                 {switch$0 = 1;switch$1 = 1;switch$2 = 1}}
              else
               switch$2 = 1;
             else
              {switch$1 = 1;switch$2 = 1}
            if(! switch$2)return 2}
          if(! switch$1)return 0}
        if(! switch$0)return 1}
      else
       {var __t_=sexp[1];
        if(! __t_)
         return caml_call2(Sexplib0_Sexp_conv_error[7],tp_loc$43,sexp);
        var __u_=__t_[1];
        if(0 !== __u_[0])
         return caml_call2(Sexplib0_Sexp_conv_error[6],tp_loc$43,sexp);
        var __v_=__u_[1],switch$3=0;
        if(caml_string_notequal(__v_,cst_MSG_DONTROUTE$0))
         {var switch$4=0;
          if(caml_string_notequal(__v_,cst_MSG_OOB$0))
           {var switch$5=0;
            if(caml_string_notequal(__v_,cst_MSG_PEEK$0))
             if(caml_string_notequal(__v_,cst_mSG_DONTROUTE$0))
              if(caml_string_notequal(__v_,cst_mSG_OOB$0))
               {if(caml_string_notequal(__v_,cst_mSG_PEEK$0))
                 {switch$3 = 1;switch$4 = 1;switch$5 = 1}}
              else
               switch$5 = 1;
             else
              {switch$4 = 1;switch$5 = 1}
            if(! switch$5)
             return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$43,sexp)}
          if(! switch$4)
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$43,sexp)}
        if(! switch$3)
         return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$43,sexp)}
      return caml_call2(Sexplib0_Sexp_conv_error[8],tp_loc$43,sexp)}
    function sexp_of_msg_flag(param)
     {switch(param){case 0:return _tU_;case 1:return _tV_;default:return _tW_}}
    function recv_send(f,fd,buf,pos,len,mode)
     {function __o_(param)
       {var
         __p_=[0,[0,cst_mode$6,caml_call2(_fs_,sexp_of_msg_flag,mode)],0],
         __q_=[0,len_r(len),__p_],
         __r_=[0,[0,cst_pos$5,caml_call1(Core_kernel_Int[101],pos)],__q_];
        return [0,fd_r(fd),__r_]}
      return improve
              (0,
               function(param){return caml_call5(f,fd,buf,pos,len,mode)},
               __o_)}
    var _tX_=UnixLabels[133];
    function recv(__j_,__k_,__l_,__m_,__n_)
     {return recv_send(_tX_,__j_,__k_,__l_,__m_,__n_)}
    var _tY_=UnixLabels[134];
    function recvfrom(__e_,__f_,__g_,__h_,__i_)
     {return recv_send(_tY_,__e_,__f_,__g_,__h_,__i_)}
    var _tZ_=UnixLabels[135];
    function send$0(_Z$_,__a_,__b_,__c_,__d_)
     {return recv_send(_tZ_,_Z$_,__a_,__b_,__c_,__d_)}
    var _t0_=UnixLabels[136];
    function send_substring(_Z6_,_Z7_,_Z8_,_Z9_,_Z__)
     {return recv_send(_t0_,_Z6_,_Z7_,_Z8_,_Z9_,_Z__)}
    function sendto(fd,buf,pos,len,mode,addr)
     {function _Z1_(param)
       {var
         _Z2_=[0,[0,cst_addr$0,sexp_of_sockaddr(addr)],0],
         _Z3_=[0,[0,cst_mode$7,caml_call2(_fs_,sexp_of_msg_flag,mode)],_Z2_],
         _Z4_=[0,len_r(len),_Z3_],
         _Z5_=[0,[0,cst_pos$6,caml_call1(Core_kernel_Int[101],pos)],_Z4_];
        return [0,fd_r(fd),_Z5_]}
      return improve
              (0,
               function(param)
                {return caml_call6(UnixLabels[137],fd,buf,pos,len,mode,addr)},
               _Z1_)}
    var unix_sendto_substring=UnixLabels[138];
    function sendto_substring(fd,buf,pos,len,mode,addr)
     {function _ZW_(param)
       {var
         _ZX_=[0,[0,cst_addr$1,sexp_of_sockaddr(addr)],0],
         _ZY_=[0,[0,cst_mode$8,caml_call2(_fs_,sexp_of_msg_flag,mode)],_ZX_],
         _ZZ_=[0,len_r(len),_ZY_],
         _Z0_=[0,[0,cst_pos$7,caml_call1(Core_kernel_Int[101],pos)],_ZZ_];
        return [0,fd_r(fd),_Z0_]}
      return improve
              (0,
               function(param)
                {return caml_call6
                         (unix_sendto_substring,fd,buf,pos,len,mode,addr)},
               _ZW_)}
    function socket_bool_option_of_sexp(sexp)
     {if(0 === sexp[0])
       {var
         _ZQ_=sexp[1],
         _ZR_=caml_string_compare(_ZQ_,cst_iPV6_ONLY),
         switch$0=0;
        if(0 <= _ZR_)
         if(0 < _ZR_)
          if(caml_string_notequal(_ZQ_,cst_sO_ACCEPTCONN))
           if(caml_string_notequal(_ZQ_,cst_sO_BROADCAST))
            if(caml_string_notequal(_ZQ_,cst_sO_DEBUG))
             if(caml_string_notequal(_ZQ_,cst_sO_DONTROUTE))
              if(caml_string_notequal(_ZQ_,cst_sO_KEEPALIVE))
               if(caml_string_notequal(_ZQ_,cst_sO_OOBINLINE))
                if(caml_string_notequal(_ZQ_,cst_sO_REUSEADDR))
                 {if(! caml_string_notequal(_ZQ_,cst_tCP_NODELAY))switch$0 = 8}
                else
                 switch$0 = 3;
               else
                switch$0 = 6;
              else
               switch$0 = 4;
             else
              switch$0 = 5;
            else
             switch$0 = 1;
           else
            switch$0 = 2;
          else
           switch$0 = 7;
         else
          switch$0 = 9;
        else
         if(caml_string_notequal(_ZQ_,cst_IPV6_ONLY))
          if(caml_string_notequal(_ZQ_,cst_SO_ACCEPTCONN))
           if(caml_string_notequal(_ZQ_,cst_SO_BROADCAST))
            if(caml_string_notequal(_ZQ_,cst_SO_DEBUG))
             if(caml_string_notequal(_ZQ_,cst_SO_DONTROUTE))
              if(caml_string_notequal(_ZQ_,cst_SO_KEEPALIVE))
               if(caml_string_notequal(_ZQ_,cst_SO_OOBINLINE))
                if(caml_string_notequal(_ZQ_,cst_SO_REUSEADDR))
                 {if(! caml_string_notequal(_ZQ_,cst_TCP_NODELAY))switch$0 = 8}
                else
                 switch$0 = 3;
               else
                switch$0 = 6;
              else
               switch$0 = 4;
             else
              switch$0 = 5;
            else
             switch$0 = 1;
           else
            switch$0 = 2;
          else
           switch$0 = 7;
         else
          switch$0 = 9;
        switch(switch$0)
         {case 1:return 0;
          case 2:return 1;
          case 3:return 2;
          case 4:return 3;
          case 5:return 4;
          case 6:return 5;
          case 7:return 6;
          case 8:return 7;
          case 9:return 8
          }}
      else
       {var _ZS_=sexp[1];
        if(! _ZS_)
         return caml_call2(Sexplib0_Sexp_conv_error[7],tp_loc$44,sexp);
        var _ZT_=_ZS_[1];
        if(0 !== _ZT_[0])
         return caml_call2(Sexplib0_Sexp_conv_error[6],tp_loc$44,sexp);
        var
         _ZU_=_ZT_[1],
         _ZV_=caml_string_compare(_ZU_,cst_iPV6_ONLY$0),
         switch$1=0;
        if(0 <= _ZV_)
         if(0 < _ZV_)
          if(caml_string_notequal(_ZU_,cst_sO_ACCEPTCONN$0))
           if(caml_string_notequal(_ZU_,cst_sO_BROADCAST$0))
            if(caml_string_notequal(_ZU_,cst_sO_DEBUG$0))
             if(caml_string_notequal(_ZU_,cst_sO_DONTROUTE$0))
              if(caml_string_notequal(_ZU_,cst_sO_KEEPALIVE$0))
               if(caml_string_notequal(_ZU_,cst_sO_OOBINLINE$0))
                if(caml_string_notequal(_ZU_,cst_sO_REUSEADDR$0))
                 {if(! caml_string_notequal(_ZU_,cst_tCP_NODELAY$0))
                   switch$1 = 8}
                else
                 switch$1 = 3;
               else
                switch$1 = 6;
              else
               switch$1 = 4;
             else
              switch$1 = 5;
            else
             switch$1 = 1;
           else
            switch$1 = 2;
          else
           switch$1 = 7;
         else
          switch$1 = 9;
        else
         if(caml_string_notequal(_ZU_,cst_IPV6_ONLY$0))
          if(caml_string_notequal(_ZU_,cst_SO_ACCEPTCONN$0))
           if(caml_string_notequal(_ZU_,cst_SO_BROADCAST$0))
            if(caml_string_notequal(_ZU_,cst_SO_DEBUG$0))
             if(caml_string_notequal(_ZU_,cst_SO_DONTROUTE$0))
              if(caml_string_notequal(_ZU_,cst_SO_KEEPALIVE$0))
               if(caml_string_notequal(_ZU_,cst_SO_OOBINLINE$0))
                if(caml_string_notequal(_ZU_,cst_SO_REUSEADDR$0))
                 {if(! caml_string_notequal(_ZU_,cst_TCP_NODELAY$0))
                   switch$1 = 8}
                else
                 switch$1 = 3;
               else
                switch$1 = 6;
              else
               switch$1 = 4;
             else
              switch$1 = 5;
            else
             switch$1 = 1;
           else
            switch$1 = 2;
          else
           switch$1 = 7;
         else
          switch$1 = 9;
        switch(switch$1)
         {case 1:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$44,sexp);
          case 2:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$44,sexp);
          case 3:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$44,sexp);
          case 4:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$44,sexp);
          case 5:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$44,sexp);
          case 6:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$44,sexp);
          case 7:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$44,sexp);
          case 8:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$44,sexp);
          case 9:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$44,sexp)
          }}
      return caml_call2(Sexplib0_Sexp_conv_error[8],tp_loc$44,sexp)}
    function sexp_of_socket_bool_option(param)
     {switch(param)
       {case 0:return _t1_;
        case 1:return _t2_;
        case 2:return _t3_;
        case 3:return _t4_;
        case 4:return _t5_;
        case 5:return _t6_;
        case 6:return _t7_;
        case 7:return _t8_;
        default:return _t9_}}
    function socket_int_option_of_sexp(sexp)
     {if(0 === sexp[0])
       {var
         _ZK_=sexp[1],
         _ZL_=caml_string_compare(_ZK_,cst_sO_ERROR),
         switch$0=0;
        if(0 <= _ZL_)
         if(0 < _ZL_)
          if(caml_string_notequal(_ZK_,cst_sO_RCVBUF))
           if(caml_string_notequal(_ZK_,cst_sO_RCVLOWAT))
            if(caml_string_notequal(_ZK_,cst_sO_SNDBUF))
             if(caml_string_notequal(_ZK_,cst_sO_SNDLOWAT))
              {if(! caml_string_notequal(_ZK_,cst_sO_TYPE))switch$0 = 4}
             else
              switch$0 = 6;
            else
             switch$0 = 1;
           else
            switch$0 = 5;
          else
           switch$0 = 2;
         else
          switch$0 = 3;
        else
         if(caml_string_notequal(_ZK_,cst_SO_ERROR))
          if(caml_string_notequal(_ZK_,cst_SO_RCVBUF))
           if(caml_string_notequal(_ZK_,cst_SO_RCVLOWAT))
            if(caml_string_notequal(_ZK_,cst_SO_SNDBUF))
             if(caml_string_notequal(_ZK_,cst_SO_SNDLOWAT))
              {if(! caml_string_notequal(_ZK_,cst_SO_TYPE))switch$0 = 4}
             else
              switch$0 = 6;
            else
             switch$0 = 1;
           else
            switch$0 = 5;
          else
           switch$0 = 2;
         else
          switch$0 = 3;
        switch(switch$0)
         {case 1:return 0;
          case 2:return 1;
          case 3:return 2;
          case 4:return 3;
          case 5:return 4;
          case 6:return 5
          }}
      else
       {var _ZM_=sexp[1];
        if(! _ZM_)
         return caml_call2(Sexplib0_Sexp_conv_error[7],tp_loc$45,sexp);
        var _ZN_=_ZM_[1];
        if(0 !== _ZN_[0])
         return caml_call2(Sexplib0_Sexp_conv_error[6],tp_loc$45,sexp);
        var
         _ZO_=_ZN_[1],
         _ZP_=caml_string_compare(_ZO_,cst_sO_ERROR$0),
         switch$1=0;
        if(0 <= _ZP_)
         if(0 < _ZP_)
          if(caml_string_notequal(_ZO_,cst_sO_RCVBUF$0))
           if(caml_string_notequal(_ZO_,cst_sO_RCVLOWAT$0))
            if(caml_string_notequal(_ZO_,cst_sO_SNDBUF$0))
             if(caml_string_notequal(_ZO_,cst_sO_SNDLOWAT$0))
              {if(! caml_string_notequal(_ZO_,cst_sO_TYPE$0))switch$1 = 4}
             else
              switch$1 = 6;
            else
             switch$1 = 1;
           else
            switch$1 = 5;
          else
           switch$1 = 2;
         else
          switch$1 = 3;
        else
         if(caml_string_notequal(_ZO_,cst_SO_ERROR$0))
          if(caml_string_notequal(_ZO_,cst_SO_RCVBUF$0))
           if(caml_string_notequal(_ZO_,cst_SO_RCVLOWAT$0))
            if(caml_string_notequal(_ZO_,cst_SO_SNDBUF$0))
             if(caml_string_notequal(_ZO_,cst_SO_SNDLOWAT$0))
              {if(! caml_string_notequal(_ZO_,cst_SO_TYPE$0))switch$1 = 4}
             else
              switch$1 = 6;
            else
             switch$1 = 1;
           else
            switch$1 = 5;
          else
           switch$1 = 2;
         else
          switch$1 = 3;
        switch(switch$1)
         {case 1:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$45,sexp);
          case 2:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$45,sexp);
          case 3:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$45,sexp);
          case 4:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$45,sexp);
          case 5:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$45,sexp);
          case 6:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$45,sexp)
          }}
      return caml_call2(Sexplib0_Sexp_conv_error[8],tp_loc$45,sexp)}
    function sexp_of_socket_int_option(param)
     {switch(param)
       {case 0:return _t__;
        case 1:return _t$_;
        case 2:return _ua_;
        case 3:return _ub_;
        case 4:return _uc_;
        default:return _ud_}}
    function sexp_of_socket_optint_option(param){return _ue_}
    function socket_float_option_of_sexp(sexp)
     {if(0 === sexp[0])
       {var _ZG_=sexp[1],switch$0=0;
        if(caml_string_notequal(_ZG_,cst_SO_RCVTIMEO))
         {var switch$1=0;
          if(caml_string_notequal(_ZG_,cst_SO_SNDTIMEO))
           if(caml_string_notequal(_ZG_,cst_sO_RCVTIMEO))
            {if(caml_string_notequal(_ZG_,cst_sO_SNDTIMEO))
              {switch$0 = 1;switch$1 = 1}}
           else
            switch$1 = 1;
          if(! switch$1)return 1}
        if(! switch$0)return 0}
      else
       {var _ZH_=sexp[1];
        if(! _ZH_)
         return caml_call2(Sexplib0_Sexp_conv_error[7],tp_loc$46,sexp);
        var _ZI_=_ZH_[1];
        if(0 !== _ZI_[0])
         return caml_call2(Sexplib0_Sexp_conv_error[6],tp_loc$46,sexp);
        var _ZJ_=_ZI_[1],switch$2=0;
        if(caml_string_notequal(_ZJ_,cst_SO_RCVTIMEO$0))
         {var switch$3=0;
          if(caml_string_notequal(_ZJ_,cst_SO_SNDTIMEO$0))
           if(caml_string_notequal(_ZJ_,cst_sO_RCVTIMEO$0))
            {if(caml_string_notequal(_ZJ_,cst_sO_SNDTIMEO$0))
              {switch$2 = 1;switch$3 = 1}}
           else
            switch$3 = 1;
          if(! switch$3)
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$46,sexp)}
        if(! switch$2)
         return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$46,sexp)}
      return caml_call2(Sexplib0_Sexp_conv_error[8],tp_loc$46,sexp)}
    function sexp_of_socket_float_option(param){return param?_uf_:_ug_}
    function make_sockopt(get,set,sexp_of_opt,sexp_of_val)
     {function getsockopt(fd,opt)
       {function _ZE_(param)
         {var _ZF_=[0,[0,cst_opt,caml_call1(sexp_of_opt,opt)],0];
          return [0,fd_r(fd),_ZF_]}
        return improve(0,function(param){return caml_call2(get,fd,opt)},_ZE_)}
      function setsockopt(fd,opt,value)
       {function _ZB_(param)
         {var
           _ZC_=[0,[0,cst_val,caml_call1(sexp_of_val,value)],0],
           _ZD_=[0,[0,cst_opt$0,caml_call1(sexp_of_opt,opt)],_ZC_];
          return [0,fd_r(fd),_ZD_]}
        return improve
                (0,function(param){return caml_call3(set,fd,opt,value)},_ZB_)}
      return [0,getsockopt,setsockopt]}
    var
     match$7=
      make_sockopt
       (UnixLabels[139],UnixLabels[140],sexp_of_socket_bool_option,_dF_),
     _uh_=match$7[2],
     _ui_=match$7[1],
     match$8=
      make_sockopt
       (UnixLabels[141],UnixLabels[142],sexp_of_socket_int_option,_es_),
     _uj_=match$8[2],
     _uk_=match$8[1],
     _ul_=caml_call1(_fZ_,_es_),
     match$9=
      make_sockopt
       (UnixLabels[143],UnixLabels[144],sexp_of_socket_optint_option,_ul_),
     _um_=match$9[2],
     _un_=match$9[1],
     match$10=
      make_sockopt
       (UnixLabels[145],UnixLabels[146],sexp_of_socket_float_option,_eb_),
     setsockopt_float=match$10[2],
     getsockopt_float=match$10[1];
    function mcast_join(ifname,source,fd,sockaddr)
     {return runtime.core_unix_mcast_modify(0,ifname,source,fd,sockaddr)}
    function mcast_leave(ifname,source,fd,sockaddr)
     {return runtime.core_unix_mcast_modify(1,ifname,source,fd,sockaddr)}
    function set_mcast_ifname(fd,ifname)
     {try
       {var _Zz_=runtime.core_unix_mcast_set_ifname(fd,ifname);return _Zz_}
      catch(_ZA_)
       {_ZA_ = caml_wrap_exception(_ZA_);
        if(_ZA_[1] === Unix_error)
         {var _Zx_=_ZA_[3],_Zy_=_ZA_[2];
          if(! caml_string_notequal(_ZA_[4],cst$22))
           throw [0,Unix_error,_Zy_,_Zx_,ifname]}
        throw _ZA_}}
    function open_connection(addr)
     {function _Zw_(param){return [0,addr_r(addr),0]}
      return improve
              (0,
               function(param){return caml_call1(UnixLabels[148],addr)},
               _Zw_)}
    var shutdown_connection=UnixLabels[149];
    function establish_server(handle_connection,addr)
     {function _Zv_(param){return [0,addr_r(addr),0]}
      return improve
              (0,
               function(param)
                {return caml_call2(UnixLabels[150],handle_connection,addr)},
               _Zv_)}
    function sexp_of_addr_info(param)
     {var
       v_ai_canonname=param[5],
       v_ai_addr=param[4],
       v_ai_protocol=param[3],
       v_ai_socktype=param[2],
       v_ai_family=param[1],
       arg=caml_call1(_ge_,v_ai_canonname),
       bnds=[0,[1,[0,_uo_,[0,arg,0]]],0],
       arg$0=sexp_of_sockaddr(v_ai_addr),
       bnds$0=[0,[1,[0,_up_,[0,arg$0,0]]],bnds],
       arg$1=caml_call1(_es_,v_ai_protocol),
       bnds$1=[0,[1,[0,_uq_,[0,arg$1,0]]],bnds$0],
       arg$2=sexp_of_socket_type(v_ai_socktype),
       bnds$2=[0,[1,[0,_ur_,[0,arg$2,0]]],bnds$1],
       arg$3=sexp_of_socket_domain(v_ai_family),
       bnds$3=[0,[1,[0,_us_,[0,arg$3,0]]],bnds$2];
      return [1,bnds$3]}
    function addr_info_blocking_sexp_of_sex(sexp)
     {if(0 === sexp[0])
       return caml_call2(Sexplib0_Sexp_conv_error[16],tp_loc$47,sexp);
      var
       field_sexps=sexp[1],
       ai_family_field=[0,0],
       ai_socktype_field=[0,0],
       ai_protocol_field=[0,0],
       ai_addr_field=[0,0],
       ai_canonname_field=[0,0],
       duplicates=[0,0],
       extra=[0,0],
       param=field_sexps;
      for(;;)
       {if(param)
         {var _Zk_=param[1];
          if(1 === _Zk_[0])
           {var _Zl_=_Zk_[1];
            if(_Zl_)
             {var _Zm_=_Zl_[1];
              if(0 === _Zm_[0])
               {var _Zn_=_Zl_[2],_Zo_=_Zm_[1],switch$0=0;
                if(! _Zn_ || ! _Zn_[2])switch$0 = 1;
                if(switch$0)
                 {var
                   tail=param[2],
                   field_sexp$5=
                    function(_Zu_)
                     {function field_sexp(param)
                       {if(_Zu_)
                         {if(_Zu_[2])throw [0,Assert_failure,_ut_];
                          var x=_Zu_[1];
                          return x}
                        return caml_call2
                                (Sexplib0_Sexp_conv_error[10],tp_loc$47,sexp)}
                      return field_sexp},
                   field_sexp=field_sexp$5(_Zn_);
                  if(caml_string_notequal(_Zo_,cst_ai_addr))
                   if(caml_string_notequal(_Zo_,cst_ai_canonname))
                    if(caml_string_notequal(_Zo_,cst_ai_family))
                     if(caml_string_notequal(_Zo_,cst_ai_protocol))
                      if(caml_string_notequal(_Zo_,cst_ai_socktype))
                       {if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_Zo_,extra[1]]}
                      else
                       if(ai_socktype_field[1])
                        duplicates[1] = [0,_Zo_,duplicates[1]];
                       else
                        {var
                          field_sexp$0=field_sexp(0),
                          fvalue=socket_type_of_sexp(field_sexp$0);
                         ai_socktype_field[1] = [0,fvalue]}
                     else
                      if(ai_protocol_field[1])
                       duplicates[1] = [0,_Zo_,duplicates[1]];
                      else
                       {var
                         field_sexp$1=field_sexp(0),
                         fvalue$0=caml_call1(file_perm_of_sexp,field_sexp$1);
                        ai_protocol_field[1] = [0,fvalue$0]}
                    else
                     if(ai_family_field[1])
                      duplicates[1] = [0,_Zo_,duplicates[1]];
                     else
                      {var
                        field_sexp$2=field_sexp(0),
                        fvalue$1=socket_domain_of_sexp(field_sexp$2);
                       ai_family_field[1] = [0,fvalue$1]}
                   else
                    if(ai_canonname_field[1])
                     duplicates[1] = [0,_Zo_,duplicates[1]];
                    else
                     {var
                       field_sexp$3=field_sexp(0),
                       fvalue$2=caml_call1(_gf_,field_sexp$3);
                      ai_canonname_field[1] = [0,fvalue$2]}
                  else
                   if(ai_addr_field[1])
                    duplicates[1] = [0,_Zo_,duplicates[1]];
                   else
                    {var
                      field_sexp$4=field_sexp(0),
                      fvalue$3=sockaddr_blocking_sexp_of_sexp(field_sexp$4);
                     ai_addr_field[1] = [0,fvalue$3]}
                  var param=tail;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[10],tp_loc$47,_Zk_)}
        if(duplicates[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],tp_loc$47,duplicates[1],sexp);
        if(extra[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[13],tp_loc$47,extra[1],sexp);
        var
         _Zp_=ai_family_field[1],
         _Zq_=ai_socktype_field[1],
         _Zr_=ai_protocol_field[1],
         _Zs_=ai_addr_field[1],
         _Zt_=ai_canonname_field[1];
        if(_Zp_ && _Zq_ && _Zr_ && _Zs_ && _Zt_)
         {var
           ai_canonname_value=_Zt_[1],
           ai_addr_value=_Zs_[1],
           ai_protocol_value=_Zr_[1],
           ai_socktype_value=_Zq_[1],
           ai_family_value=_Zp_[1];
          return [0,
                  ai_family_value,
                  ai_socktype_value,
                  ai_protocol_value,
                  ai_addr_value,
                  ai_canonname_value]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[15],
                 tp_loc$47,
                 sexp,
                 [0,
                  [0,0 === ai_family_field[1]?1:0,cst_ai_family$0],
                  [0,
                   [0,0 === ai_socktype_field[1]?1:0,cst_ai_socktype$0],
                   [0,
                    [0,0 === ai_protocol_field[1]?1:0,cst_ai_protocol$0],
                    [0,
                     [0,0 === ai_addr_field[1]?1:0,cst_ai_addr$0],
                     [0,[0,0 === ai_canonname_field[1]?1:0,cst_ai_canonname$0],0]]]]])}}
    function sexp_of_addr_info_blocking_sex(param)
     {var
       v_ai_canonname=param[5],
       v_ai_addr=param[4],
       v_ai_protocol=param[3],
       v_ai_socktype=param[2],
       v_ai_family=param[1],
       arg=caml_call1(_ge_,v_ai_canonname),
       bnds=[0,[1,[0,_uu_,[0,arg,0]]],0],
       arg$0=sexp_of_sockaddr_blocking_sexp(v_ai_addr),
       bnds$0=[0,[1,[0,_uv_,[0,arg$0,0]]],bnds],
       arg$1=caml_call1(_es_,v_ai_protocol),
       bnds$1=[0,[1,[0,_uw_,[0,arg$1,0]]],bnds$0],
       arg$2=sexp_of_socket_type(v_ai_socktype),
       bnds$2=[0,[1,[0,_ux_,[0,arg$2,0]]],bnds$1],
       arg$3=sexp_of_socket_domain(v_ai_family),
       bnds$3=[0,[1,[0,_uy_,[0,arg$3,0]]],bnds$2];
      return [1,bnds$3]}
    function getaddrinfo_option_of_sexp(sexp)
     {if(0 === sexp[0])
       {var
         _Ze_=sexp[1],
         _Zf_=caml_string_compare(_Ze_,cst_aI_CANONNAME),
         switch$0=0;
        if(0 <= _Zf_)
         if(0 < _Zf_)
          if(caml_string_notequal(_Ze_,cst_aI_FAMILY))
           if(caml_string_notequal(_Ze_,cst_aI_NUMERICHOST))
            if(caml_string_notequal(_Ze_,cst_aI_PASSIVE))
             if(caml_string_notequal(_Ze_,cst_aI_PROTOCOL))
              {if(! caml_string_notequal(_Ze_,cst_aI_SOCKTYPE))switch$0 = 5}
             else
              switch$0 = 6;
            else
             switch$0 = 3;
           else
            switch$0 = 1;
          else
           switch$0 = 4;
         else
          switch$0 = 2;
        else
         if(caml_string_notequal(_Ze_,cst_AI_CANONNAME))
          if(caml_string_notequal(_Ze_,cst_AI_FAMILY))
           if(caml_string_notequal(_Ze_,cst_AI_NUMERICHOST))
            if(caml_string_notequal(_Ze_,cst_AI_PASSIVE))
             if(caml_string_notequal(_Ze_,cst_AI_PROTOCOL))
              {if(! caml_string_notequal(_Ze_,cst_AI_SOCKTYPE))switch$0 = 5}
             else
              switch$0 = 6;
            else
             switch$0 = 3;
           else
            switch$0 = 1;
          else
           switch$0 = 4;
         else
          switch$0 = 2;
        switch(switch$0)
         {case 1:return 0;
          case 2:return 1;
          case 3:return 2;
          case 4:
           return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$48,sexp);
          case 5:
           return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$48,sexp);
          case 6:return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$48,sexp)
          }}
      else
       {var _Zg_=sexp[1];
        if(! _Zg_)
         return caml_call2(Sexplib0_Sexp_conv_error[7],tp_loc$48,sexp);
        var _Zh_=_Zg_[1];
        if(0 !== _Zh_[0])
         return caml_call2(Sexplib0_Sexp_conv_error[6],tp_loc$48,sexp);
        var
         _Zi_=_Zh_[1],
         _Zj_=caml_string_compare(_Zi_,cst_aI_CANONNAME$0),
         switch$1=0;
        if(0 <= _Zj_)
         if(0 < _Zj_)
          if(caml_string_notequal(_Zi_,cst_aI_FAMILY$0))
           if(caml_string_notequal(_Zi_,cst_aI_NUMERICHOST$0))
            if(caml_string_notequal(_Zi_,cst_aI_PASSIVE$0))
             if(caml_string_notequal(_Zi_,cst_aI_PROTOCOL$0))
              {if(! caml_string_notequal(_Zi_,cst_aI_SOCKTYPE$0))switch$1 = 2}
             else
              switch$1 = 3;
            else
             switch$1 = 6;
           else
            switch$1 = 4;
          else
           switch$1 = 1;
         else
          switch$1 = 5;
        else
         if(caml_string_notequal(_Zi_,cst_AI_CANONNAME$0))
          if(caml_string_notequal(_Zi_,cst_AI_FAMILY$0))
           if(caml_string_notequal(_Zi_,cst_AI_NUMERICHOST$0))
            if(caml_string_notequal(_Zi_,cst_AI_PASSIVE$0))
             if(caml_string_notequal(_Zi_,cst_AI_PROTOCOL$0))
              {if(! caml_string_notequal(_Zi_,cst_AI_SOCKTYPE$0))switch$1 = 2}
             else
              switch$1 = 3;
            else
             switch$1 = 6;
           else
            switch$1 = 4;
          else
           switch$1 = 1;
         else
          switch$1 = 5;
        switch(switch$1)
         {case 1:
           var sexp_args$1=_Zg_[2];
           if(sexp_args$1 && ! sexp_args$1[2])
            {var v0$3=sexp_args$1[1],v0$4=socket_domain_of_sexp(v0$3);
             return [0,v0$4]}
           return caml_call3(Sexplib0_Sexp_conv_error[4],tp_loc$48,_Zi_,sexp);
          case 2:
           var sexp_args=_Zg_[2];
           if(sexp_args && ! sexp_args[2])
            {var v0=sexp_args[1],v0$0=socket_type_of_sexp(v0);return [1,v0$0]}
           return caml_call3(Sexplib0_Sexp_conv_error[4],tp_loc$48,_Zi_,sexp);
          case 3:
           var sexp_args$0=_Zg_[2];
           if(sexp_args$0 && ! sexp_args$0[2])
            {var v0$1=sexp_args$0[1],v0$2=caml_call1(file_perm_of_sexp,v0$1);
             return [2,v0$2]}
           return caml_call3(Sexplib0_Sexp_conv_error[4],tp_loc$48,_Zi_,sexp);
          case 4:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$48,sexp);
          case 5:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$48,sexp);
          case 6:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$48,sexp)
          }}
      return caml_call2(Sexplib0_Sexp_conv_error[8],tp_loc$48,sexp)}
    function sexp_of_getaddrinfo_option(param)
     {if(typeof param === "number")
       switch(param)
        {case 0:return _uz_;case 1:return _uA_;default:return _uB_}
      else
       switch(param[0])
        {case 0:
          var v0=param[1],v0$0=sexp_of_socket_domain(v0);
          return [1,[0,_uC_,[0,v0$0,0]]];
         case 1:
          var v0$1=param[1],v0$2=sexp_of_socket_type(v0$1);
          return [1,[0,_uD_,[0,v0$2,0]]];
         default:
          var v0$3=param[1],v0$4=caml_call1(_es_,v0$3);
          return [1,[0,_uE_,[0,v0$4,0]]]}}
    function getaddrinfo(host,service,opts)
     {function _Zd_(param)
       {return [0,
                [0,cst_host,[0,host]],
                [0,
                 [0,cst_service,[0,service]],
                 [0,
                  [0,
                   cst_opts,
                   caml_call2(_fs_,sexp_of_getaddrinfo_option,opts)],
                  0]]]}
      return improve
              (0,
               function(param)
                {return caml_call3(UnixLabels[158],host,service,opts)},
               _Zd_)}
    function name_info_of_sexp(sexp)
     {if(0 === sexp[0])
       return caml_call2(Sexplib0_Sexp_conv_error[16],tp_loc$49,sexp);
      var
       field_sexps=sexp[1],
       ni_hostname_field=[0,0],
       ni_service_field=[0,0],
       duplicates=[0,0],
       extra=[0,0],
       param=field_sexps;
      for(;;)
       {if(param)
         {var _Y7_=param[1];
          if(1 === _Y7_[0])
           {var _Y8_=_Y7_[1];
            if(_Y8_)
             {var _Y9_=_Y8_[1];
              if(0 === _Y9_[0])
               {var _Y__=_Y8_[2],_Y$_=_Y9_[1],switch$0=0;
                if(! _Y__ || ! _Y__[2])switch$0 = 1;
                if(switch$0)
                 {var
                   tail=param[2],
                   field_sexp$2=
                    function(_Zc_)
                     {function field_sexp(param)
                       {if(_Zc_)
                         {if(_Zc_[2])throw [0,Assert_failure,_uF_];
                          var x=_Zc_[1];
                          return x}
                        return caml_call2
                                (Sexplib0_Sexp_conv_error[10],tp_loc$49,sexp)}
                      return field_sexp},
                   field_sexp=field_sexp$2(_Y__);
                  if(caml_string_notequal(_Y$_,cst_ni_hostname))
                   if(caml_string_notequal(_Y$_,cst_ni_service))
                    {if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_Y$_,extra[1]]}
                   else
                    if(ni_service_field[1])
                     duplicates[1] = [0,_Y$_,duplicates[1]];
                    else
                     {var
                       field_sexp$0=field_sexp(0),
                       fvalue=caml_call1(_gf_,field_sexp$0);
                      ni_service_field[1] = [0,fvalue]}
                  else
                   if(ni_hostname_field[1])
                    duplicates[1] = [0,_Y$_,duplicates[1]];
                   else
                    {var
                      field_sexp$1=field_sexp(0),
                      fvalue$0=caml_call1(_gf_,field_sexp$1);
                     ni_hostname_field[1] = [0,fvalue$0]}
                  var param=tail;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[10],tp_loc$49,_Y7_)}
        if(duplicates[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],tp_loc$49,duplicates[1],sexp);
        if(extra[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[13],tp_loc$49,extra[1],sexp);
        var _Za_=ni_hostname_field[1],_Zb_=ni_service_field[1];
        if(_Za_ && _Zb_)
         {var ni_service_value=_Zb_[1],ni_hostname_value=_Za_[1];
          return [0,ni_hostname_value,ni_service_value]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[15],
                 tp_loc$49,
                 sexp,
                 [0,
                  [0,0 === ni_hostname_field[1]?1:0,cst_ni_hostname$0],
                  [0,[0,0 === ni_service_field[1]?1:0,cst_ni_service$0],0]])}}
    function sexp_of_name_info(param)
     {var
       v_ni_service=param[2],
       v_ni_hostname=param[1],
       arg=caml_call1(_ge_,v_ni_service),
       bnds=[0,[1,[0,_uG_,[0,arg,0]]],0],
       arg$0=caml_call1(_ge_,v_ni_hostname),
       bnds$0=[0,[1,[0,_uH_,[0,arg$0,0]]],bnds];
      return [1,bnds$0]}
    function getnameinfo_option_of_sexp(sexp)
     {if(0 === sexp[0])
       {var
         _Y1_=sexp[1],
         _Y2_=caml_string_compare(_Y1_,cst_nI_DGRAM),
         switch$0=0;
        if(0 <= _Y2_)
         if(0 < _Y2_)
          if(caml_string_notequal(_Y1_,cst_nI_NAMEREQD))
           if(caml_string_notequal(_Y1_,cst_nI_NOFQDN))
            if(caml_string_notequal(_Y1_,cst_nI_NUMERICHOST))
             {if(! caml_string_notequal(_Y1_,cst_nI_NUMERICSERV))switch$0 = 4}
            else
             switch$0 = 2;
           else
            switch$0 = 1;
          else
           switch$0 = 3;
         else
          switch$0 = 5;
        else
         if(caml_string_notequal(_Y1_,cst_NI_DGRAM))
          if(caml_string_notequal(_Y1_,cst_NI_NAMEREQD))
           if(caml_string_notequal(_Y1_,cst_NI_NOFQDN))
            if(caml_string_notequal(_Y1_,cst_NI_NUMERICHOST))
             {if(! caml_string_notequal(_Y1_,cst_NI_NUMERICSERV))switch$0 = 4}
            else
             switch$0 = 2;
           else
            switch$0 = 1;
          else
           switch$0 = 3;
         else
          switch$0 = 5;
        switch(switch$0)
         {case 1:return 0;
          case 2:return 1;
          case 3:return 2;
          case 4:return 3;
          case 5:return 4
          }}
      else
       {var _Y3_=sexp[1];
        if(! _Y3_)
         return caml_call2(Sexplib0_Sexp_conv_error[7],tp_loc$50,sexp);
        var _Y4_=_Y3_[1];
        if(0 !== _Y4_[0])
         return caml_call2(Sexplib0_Sexp_conv_error[6],tp_loc$50,sexp);
        var
         _Y5_=_Y4_[1],
         _Y6_=caml_string_compare(_Y5_,cst_nI_DGRAM$0),
         switch$1=0;
        if(0 <= _Y6_)
         if(0 < _Y6_)
          if(caml_string_notequal(_Y5_,cst_nI_NAMEREQD$0))
           if(caml_string_notequal(_Y5_,cst_nI_NOFQDN$0))
            if(caml_string_notequal(_Y5_,cst_nI_NUMERICHOST$0))
             {if(! caml_string_notequal(_Y5_,cst_nI_NUMERICSERV$0))
               switch$1 = 4}
            else
             switch$1 = 2;
           else
            switch$1 = 1;
          else
           switch$1 = 3;
         else
          switch$1 = 5;
        else
         if(caml_string_notequal(_Y5_,cst_NI_DGRAM$0))
          if(caml_string_notequal(_Y5_,cst_NI_NAMEREQD$0))
           if(caml_string_notequal(_Y5_,cst_NI_NOFQDN$0))
            if(caml_string_notequal(_Y5_,cst_NI_NUMERICHOST$0))
             {if(! caml_string_notequal(_Y5_,cst_NI_NUMERICSERV$0))
               switch$1 = 4}
            else
             switch$1 = 2;
           else
            switch$1 = 1;
          else
           switch$1 = 3;
         else
          switch$1 = 5;
        switch(switch$1)
         {case 1:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$50,sexp);
          case 2:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$50,sexp);
          case 3:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$50,sexp);
          case 4:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$50,sexp);
          case 5:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$50,sexp)
          }}
      return caml_call2(Sexplib0_Sexp_conv_error[8],tp_loc$50,sexp)}
    function sexp_of_getnameinfo_option(param)
     {switch(param)
       {case 0:return _uI_;
        case 1:return _uJ_;
        case 2:return _uK_;
        case 3:return _uL_;
        default:return _uM_}}
    function getnameinfo(addr,opts)
     {function _YV_(param)
       {var
         _Y0_=
          [0,
           [0,cst_opts$0,caml_call2(_fs_,sexp_of_getnameinfo_option,opts)],
           0];
        return [0,[0,cst_addr$2,sexp_of_sockaddr(addr)],_Y0_]}
      return improve
              (0,
               function(param)
                {try
                  {var _YY_=caml_call2(UnixLabels[159],addr,opts);return _YY_}
                 catch(_YZ_)
                  {_YZ_ = caml_wrap_exception(_YZ_);
                   if(_YZ_ === include$2[103])
                    {var
                      _YW_=
                       [0,
                        [1,
                         [0,
                          _uN_,
                          [0,caml_call2(_fs_,sexp_of_getnameinfo_option,opts),0]]],
                        0],
                      _YX_=[0,[1,[0,_uO_,[0,sexp_of_sockaddr(addr),0]]],_YW_];
                     throw [0,
                            _ih_,
                            [1,
                             [0,
                              caml_call1
                               (Sexplib0_Sexp_conv[7],cst_Unix_getnameinfo_not_found),
                              _YX_]]]}
                   throw _YZ_}},
               _YV_)}
    function sexp_of_t$30(param)
     {var
       v_c_ignbrk=param[1],
       v_c_brkint=param[2],
       v_c_ignpar=param[3],
       v_c_parmrk=param[4],
       v_c_inpck=param[5],
       v_c_istrip=param[6],
       v_c_inlcr=param[7],
       v_c_igncr=param[8],
       v_c_icrnl=param[9],
       v_c_ixon=param[10],
       v_c_ixoff=param[11],
       v_c_opost=param[12],
       v_c_obaud=param[13],
       v_c_ibaud=param[14],
       v_c_csize=param[15],
       v_c_cstopb=param[16],
       v_c_cread=param[17],
       v_c_parenb=param[18],
       v_c_parodd=param[19],
       v_c_hupcl=param[20],
       v_c_clocal=param[21],
       v_c_isig=param[22],
       v_c_icanon=param[23],
       v_c_noflsh=param[24],
       v_c_echo=param[25],
       v_c_echoe=param[26],
       v_c_echok=param[27],
       v_c_echonl=param[28],
       v_c_vintr=param[29],
       v_c_vquit=param[30],
       v_c_verase=param[31],
       v_c_vkill=param[32],
       v_c_veof=param[33],
       v_c_veol=param[34],
       v_c_vmin=param[35],
       v_c_vtime=param[36],
       v_c_vstart=param[37],
       v_c_vstop=param[38],
       arg=caml_call1(_dW_,v_c_vstop),
       bnds=[0,[1,[0,_uP_,[0,arg,0]]],0],
       arg$0=caml_call1(_dW_,v_c_vstart),
       bnds$0=[0,[1,[0,_uQ_,[0,arg$0,0]]],bnds],
       arg$1=caml_call1(_es_,v_c_vtime),
       bnds$1=[0,[1,[0,_uR_,[0,arg$1,0]]],bnds$0],
       arg$2=caml_call1(_es_,v_c_vmin),
       bnds$2=[0,[1,[0,_uS_,[0,arg$2,0]]],bnds$1],
       arg$3=caml_call1(_dW_,v_c_veol),
       bnds$3=[0,[1,[0,_uT_,[0,arg$3,0]]],bnds$2],
       arg$4=caml_call1(_dW_,v_c_veof),
       bnds$4=[0,[1,[0,_uU_,[0,arg$4,0]]],bnds$3],
       arg$5=caml_call1(_dW_,v_c_vkill),
       bnds$5=[0,[1,[0,_uV_,[0,arg$5,0]]],bnds$4],
       arg$6=caml_call1(_dW_,v_c_verase),
       bnds$6=[0,[1,[0,_uW_,[0,arg$6,0]]],bnds$5],
       arg$7=caml_call1(_dW_,v_c_vquit),
       bnds$7=[0,[1,[0,_uX_,[0,arg$7,0]]],bnds$6],
       arg$8=caml_call1(_dW_,v_c_vintr),
       bnds$8=[0,[1,[0,_uY_,[0,arg$8,0]]],bnds$7],
       arg$9=caml_call1(_dF_,v_c_echonl),
       bnds$9=[0,[1,[0,_uZ_,[0,arg$9,0]]],bnds$8],
       arg$10=caml_call1(_dF_,v_c_echok),
       bnds$10=[0,[1,[0,_u0_,[0,arg$10,0]]],bnds$9],
       arg$11=caml_call1(_dF_,v_c_echoe),
       bnds$11=[0,[1,[0,_u1_,[0,arg$11,0]]],bnds$10],
       arg$12=caml_call1(_dF_,v_c_echo),
       bnds$12=[0,[1,[0,_u2_,[0,arg$12,0]]],bnds$11],
       arg$13=caml_call1(_dF_,v_c_noflsh),
       bnds$13=[0,[1,[0,_u3_,[0,arg$13,0]]],bnds$12],
       arg$14=caml_call1(_dF_,v_c_icanon),
       bnds$14=[0,[1,[0,_u4_,[0,arg$14,0]]],bnds$13],
       arg$15=caml_call1(_dF_,v_c_isig),
       bnds$15=[0,[1,[0,_u5_,[0,arg$15,0]]],bnds$14],
       arg$16=caml_call1(_dF_,v_c_clocal),
       bnds$16=[0,[1,[0,_u6_,[0,arg$16,0]]],bnds$15],
       arg$17=caml_call1(_dF_,v_c_hupcl),
       bnds$17=[0,[1,[0,_u7_,[0,arg$17,0]]],bnds$16],
       arg$18=caml_call1(_dF_,v_c_parodd),
       bnds$18=[0,[1,[0,_u8_,[0,arg$18,0]]],bnds$17],
       arg$19=caml_call1(_dF_,v_c_parenb),
       bnds$19=[0,[1,[0,_u9_,[0,arg$19,0]]],bnds$18],
       arg$20=caml_call1(_dF_,v_c_cread),
       bnds$20=[0,[1,[0,_u__,[0,arg$20,0]]],bnds$19],
       arg$21=caml_call1(_es_,v_c_cstopb),
       bnds$21=[0,[1,[0,_u$_,[0,arg$21,0]]],bnds$20],
       arg$22=caml_call1(_es_,v_c_csize),
       bnds$22=[0,[1,[0,_va_,[0,arg$22,0]]],bnds$21],
       arg$23=caml_call1(_es_,v_c_ibaud),
       bnds$23=[0,[1,[0,_vb_,[0,arg$23,0]]],bnds$22],
       arg$24=caml_call1(_es_,v_c_obaud),
       bnds$24=[0,[1,[0,_vc_,[0,arg$24,0]]],bnds$23],
       arg$25=caml_call1(_dF_,v_c_opost),
       bnds$25=[0,[1,[0,_vd_,[0,arg$25,0]]],bnds$24],
       arg$26=caml_call1(_dF_,v_c_ixoff),
       bnds$26=[0,[1,[0,_ve_,[0,arg$26,0]]],bnds$25],
       arg$27=caml_call1(_dF_,v_c_ixon),
       bnds$27=[0,[1,[0,_vf_,[0,arg$27,0]]],bnds$26],
       arg$28=caml_call1(_dF_,v_c_icrnl),
       bnds$28=[0,[1,[0,_vg_,[0,arg$28,0]]],bnds$27],
       arg$29=caml_call1(_dF_,v_c_igncr),
       bnds$29=[0,[1,[0,_vh_,[0,arg$29,0]]],bnds$28],
       arg$30=caml_call1(_dF_,v_c_inlcr),
       bnds$30=[0,[1,[0,_vi_,[0,arg$30,0]]],bnds$29],
       arg$31=caml_call1(_dF_,v_c_istrip),
       bnds$31=[0,[1,[0,_vj_,[0,arg$31,0]]],bnds$30],
       arg$32=caml_call1(_dF_,v_c_inpck),
       bnds$32=[0,[1,[0,_vk_,[0,arg$32,0]]],bnds$31],
       arg$33=caml_call1(_dF_,v_c_parmrk),
       bnds$33=[0,[1,[0,_vl_,[0,arg$33,0]]],bnds$32],
       arg$34=caml_call1(_dF_,v_c_ignpar),
       bnds$34=[0,[1,[0,_vm_,[0,arg$34,0]]],bnds$33],
       arg$35=caml_call1(_dF_,v_c_brkint),
       bnds$35=[0,[1,[0,_vn_,[0,arg$35,0]]],bnds$34],
       arg$36=caml_call1(_dF_,v_c_ignbrk),
       bnds$36=[0,[1,[0,_vo_,[0,arg$36,0]]],bnds$35];
      return [1,bnds$36]}
    var tcgetattr=unary_fd(0,UnixLabels[160]);
    function sexp_of_setattr_when(param)
     {switch(param){case 0:return _vp_;case 1:return _vq_;default:return _vr_}}
    function tcsetattr(t,fd,mode)
     {function _YS_(param)
       {var
         _YT_=[0,[0,cst_termios,sexp_of_t$30(t)],0],
         _YU_=[0,[0,cst_mode$9,sexp_of_setattr_when(mode)],_YT_];
        return [0,fd_r(fd),_YU_]}
      return improve
              (0,
               function(param){return caml_call3(UnixLabels[161],fd,mode,t)},
               _YS_)}
    function tcsendbreak(fd,duration)
     {function _YQ_(param)
       {var
         _YR_=
          [0,[0,cst_duration,caml_call1(Core_kernel_Int[101],duration)],0];
        return [0,fd_r(fd),_YR_]}
      return improve
              (0,
               function(param){return caml_call2(UnixLabels[162],fd,duration)},
               _YQ_)}
    var tcdrain=unary_fd(0,UnixLabels[163]);
    function flush_queue_of_sexp(sexp)
     {if(0 === sexp[0])
       {var _YM_=sexp[1],switch$0=0;
        if(caml_string_notequal(_YM_,cst_TCIFLUSH))
         {var switch$1=0;
          if(caml_string_notequal(_YM_,cst_TCIOFLUSH))
           {var switch$2=0;
            if(caml_string_notequal(_YM_,cst_TCOFLUSH))
             if(caml_string_notequal(_YM_,cst_tCIFLUSH))
              if(caml_string_notequal(_YM_,cst_tCIOFLUSH))
               {if(caml_string_notequal(_YM_,cst_tCOFLUSH))
                 {switch$0 = 1;switch$1 = 1;switch$2 = 1}}
              else
               switch$2 = 1;
             else
              {switch$1 = 1;switch$2 = 1}
            if(! switch$2)return 1}
          if(! switch$1)return 2}
        if(! switch$0)return 0}
      else
       {var _YN_=sexp[1];
        if(! _YN_)
         return caml_call2(Sexplib0_Sexp_conv_error[7],tp_loc$51,sexp);
        var _YO_=_YN_[1];
        if(0 !== _YO_[0])
         return caml_call2(Sexplib0_Sexp_conv_error[6],tp_loc$51,sexp);
        var _YP_=_YO_[1],switch$3=0;
        if(caml_string_notequal(_YP_,cst_TCIFLUSH$0))
         {var switch$4=0;
          if(caml_string_notequal(_YP_,cst_TCIOFLUSH$0))
           {var switch$5=0;
            if(caml_string_notequal(_YP_,cst_TCOFLUSH$0))
             if(caml_string_notequal(_YP_,cst_tCIFLUSH$0))
              if(caml_string_notequal(_YP_,cst_tCIOFLUSH$0))
               {if(caml_string_notequal(_YP_,cst_tCOFLUSH$0))
                 {switch$3 = 1;switch$4 = 1;switch$5 = 1}}
              else
               switch$5 = 1;
             else
              {switch$4 = 1;switch$5 = 1}
            if(! switch$5)
             return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$51,sexp)}
          if(! switch$4)
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$51,sexp)}
        if(! switch$3)
         return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$51,sexp)}
      return caml_call2(Sexplib0_Sexp_conv_error[8],tp_loc$51,sexp)}
    function sexp_of_flush_queue(param)
     {switch(param){case 0:return _vs_;case 1:return _vt_;default:return _vu_}}
    function tcflush(fd,mode)
     {function _YK_(param)
       {var _YL_=[0,[0,cst_mode$10,sexp_of_flush_queue(mode)],0];
        return [0,fd_r(fd),_YL_]}
      return improve
              (0,
               function(param){return caml_call2(UnixLabels[164],fd,mode)},
               _YK_)}
    function flow_action_of_sexp(sexp)
     {if(0 === sexp[0])
       {var _YG_=sexp[1],switch$0=0;
        if(caml_string_notequal(_YG_,cst_TCIOFF))
         {var switch$1=0;
          if(caml_string_notequal(_YG_,cst_TCION))
           {var switch$2=0;
            if(caml_string_notequal(_YG_,cst_TCOOFF))
             {var switch$3=0;
              if(caml_string_notequal(_YG_,cst_TCOON))
               if(caml_string_notequal(_YG_,cst_tCIOFF))
                if(caml_string_notequal(_YG_,cst_tCION))
                 if(caml_string_notequal(_YG_,cst_tCOOFF))
                  {if(caml_string_notequal(_YG_,cst_tCOON))
                    {switch$0 = 1;switch$1 = 1;switch$2 = 1;switch$3 = 1}}
                 else
                  switch$3 = 1;
                else
                 {switch$2 = 1;switch$3 = 1}
               else
                {switch$1 = 1;switch$2 = 1;switch$3 = 1}
              if(! switch$3)return 1}
            if(! switch$2)return 0}
          if(! switch$1)return 3}
        if(! switch$0)return 2}
      else
       {var _YH_=sexp[1];
        if(! _YH_)
         return caml_call2(Sexplib0_Sexp_conv_error[7],tp_loc$52,sexp);
        var _YI_=_YH_[1];
        if(0 !== _YI_[0])
         return caml_call2(Sexplib0_Sexp_conv_error[6],tp_loc$52,sexp);
        var _YJ_=_YI_[1],switch$4=0;
        if(caml_string_notequal(_YJ_,cst_TCIOFF$0))
         {var switch$5=0;
          if(caml_string_notequal(_YJ_,cst_TCION$0))
           {var switch$6=0;
            if(caml_string_notequal(_YJ_,cst_TCOOFF$0))
             {var switch$7=0;
              if(caml_string_notequal(_YJ_,cst_TCOON$0))
               if(caml_string_notequal(_YJ_,cst_tCIOFF$0))
                if(caml_string_notequal(_YJ_,cst_tCION$0))
                 if(caml_string_notequal(_YJ_,cst_tCOOFF$0))
                  {if(caml_string_notequal(_YJ_,cst_tCOON$0))
                    {switch$4 = 1;switch$5 = 1;switch$6 = 1;switch$7 = 1}}
                 else
                  switch$7 = 1;
                else
                 {switch$6 = 1;switch$7 = 1}
               else
                {switch$5 = 1;switch$6 = 1;switch$7 = 1}
              if(! switch$7)
               return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$52,sexp)}
            if(! switch$6)
             return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$52,sexp)}
          if(! switch$5)
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$52,sexp)}
        if(! switch$4)
         return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$52,sexp)}
      return caml_call2(Sexplib0_Sexp_conv_error[8],tp_loc$52,sexp)}
    function sexp_of_flow_action(param)
     {switch(param)
       {case 0:return _vv_;
        case 1:return _vw_;
        case 2:return _vx_;
        default:return _vy_}}
    function tcflow(fd,mode)
     {function _YE_(param)
       {var _YF_=[0,[0,cst_mode$11,sexp_of_flow_action(mode)],0];
        return [0,fd_r(fd),_YF_]}
      return improve
              (0,
               function(param){return caml_call2(UnixLabels[165],fd,mode)},
               _YE_)}
    var setsid=UnixLabels[166];
    function get_sockaddr(name,port){return [1,of_string$3(name),port]}
    function set_in_channel_timeout(ic,rcv_timeout)
     {var s=caml_call1(descr_of_in_channel,ic);
      return caml_call3(setsockopt_float,s,0,rcv_timeout)}
    function set_out_channel_timeout(oc,snd_timeout)
     {var s=caml_call1(descr_of_out_channel,oc);
      return caml_call3(setsockopt_float,s,1,snd_timeout)}
    function sexp_of_t$31(param)
     {if(0 === param[0])
       {var v0=param[1],v0$0=caml_call1(sexp_of_t$21,v0);
        return [1,[0,_vz_,[0,v0$0,0]]]}
      var v0$1=param[1],v0$2=caml_call1(sexp_of_t$21,v0$1);
      return [1,[0,_vA_,[0,v0$2,0]]]}
    var Broadcast_or_destination=[0,sexp_of_t$31];
    function sexp_of_t$32(param)
     {switch(param){case 0:return _vB_;case 1:return _vC_;default:return _vD_}}
    var
     _vF_=caml_call1(Bin_prot_Shape[9],_vE_),
     _vG_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$9),0,_vF_],0],
     _vH_=caml_call1(Bin_prot_Shape[4][1],cst_src_core_unix_ml_2840_4),
     group$8=caml_call2(Bin_prot_Shape[6],_vH_,_vG_),
     _vI_=caml_call1(Bin_prot_Shape[2][1],cst_t$10);
    caml_call1(caml_call2(Bin_prot_Shape[14],group$8,_vI_),0);
    function t_of_sexp$24(sexp)
     {if(0 === sexp[0])
       {var
         _Yu_=sexp[1],
         _Yv_=caml_string_compare(_Yu_,cst_allmulti),
         switch$0=0;
        if(0 <= _Yv_)
         if(0 < _Yv_)
          {var _Yw_=caml_string_compare(_Yu_,cst_noarp);
           if(0 <= _Yw_)
            if(0 < _Yw_)
             if(caml_string_notequal(_Yu_,cst_notrailers))
              if(caml_string_notequal(_Yu_,cst_pointopoint))
               if(caml_string_notequal(_Yu_,cst_portsel))
                if(caml_string_notequal(_Yu_,cst_promisc))
                 if(caml_string_notequal(_Yu_,cst_running))
                  if(caml_string_notequal(_Yu_,cst_slave))
                   {if(! caml_string_notequal(_Yu_,cst_up))switch$0 = 16}
                  else
                   switch$0 = 15;
                 else
                  switch$0 = 14;
                else
                 switch$0 = 13;
               else
                switch$0 = 12;
              else
               switch$0 = 11;
             else
              switch$0 = 10;
            else
             switch$0 = 9;
           else
            if(caml_string_notequal(_Yu_,cst_automedia))
             if(caml_string_notequal(_Yu_,cst_broadcast))
              if(caml_string_notequal(_Yu_,cst_debug))
               if(caml_string_notequal(_Yu_,cst_dynamic))
                if(caml_string_notequal(_Yu_,cst_loopback))
                 if(caml_string_notequal(_Yu_,cst_master))
                  {if(! caml_string_notequal(_Yu_,cst_multicast))switch$0 = 8}
                 else
                  switch$0 = 7;
                else
                 switch$0 = 6;
               else
                switch$0 = 5;
              else
               switch$0 = 4;
             else
              switch$0 = 3;
            else
             switch$0 = 2}
         else
          switch$0 = 1;
        else
         {var _Yx_=caml_string_compare(_Yu_,cst_Noarp);
          if(0 <= _Yx_)
           if(0 < _Yx_)
            if(caml_string_notequal(_Yu_,cst_Notrailers))
             if(caml_string_notequal(_Yu_,cst_Pointopoint))
              if(caml_string_notequal(_Yu_,cst_Portsel))
               if(caml_string_notequal(_Yu_,cst_Promisc))
                if(caml_string_notequal(_Yu_,cst_Running))
                 if(caml_string_notequal(_Yu_,cst_Slave))
                  {if(! caml_string_notequal(_Yu_,cst_Up))switch$0 = 16}
                 else
                  switch$0 = 15;
                else
                 switch$0 = 14;
               else
                switch$0 = 13;
              else
               switch$0 = 12;
             else
              switch$0 = 11;
            else
             switch$0 = 10;
           else
            switch$0 = 9;
          else
           if(caml_string_notequal(_Yu_,cst_Allmulti))
            if(caml_string_notequal(_Yu_,cst_Automedia))
             if(caml_string_notequal(_Yu_,cst_Broadcast))
              if(caml_string_notequal(_Yu_,cst_Debug))
               if(caml_string_notequal(_Yu_,cst_Dynamic))
                if(caml_string_notequal(_Yu_,cst_Loopback))
                 if(caml_string_notequal(_Yu_,cst_Master))
                  {if(! caml_string_notequal(_Yu_,cst_Multicast))switch$0 = 8}
                 else
                  switch$0 = 7;
                else
                 switch$0 = 6;
               else
                switch$0 = 5;
              else
               switch$0 = 4;
             else
              switch$0 = 3;
            else
             switch$0 = 2;
           else
            switch$0 = 1}
        switch(switch$0)
         {case 1:return 0;
          case 2:return 1;
          case 3:return 2;
          case 4:return 3;
          case 5:return 4;
          case 6:return 5;
          case 7:return 6;
          case 8:return 7;
          case 9:return 8;
          case 10:return 9;
          case 11:return 10;
          case 12:return 11;
          case 13:return 12;
          case 14:return 13;
          case 15:return 14;
          case 16:return 15
          }}
      else
       {var _Yy_=sexp[1];
        if(! _Yy_)
         return caml_call2(Sexplib0_Sexp_conv_error[7],tp_loc$53,sexp);
        var _Yz_=_Yy_[1];
        if(0 !== _Yz_[0])
         return caml_call2(Sexplib0_Sexp_conv_error[6],tp_loc$53,sexp);
        var
         _YA_=_Yz_[1],
         _YB_=caml_string_compare(_YA_,cst_allmulti$0),
         switch$1=0;
        if(0 <= _YB_)
         if(0 < _YB_)
          {var _YC_=caml_string_compare(_YA_,cst_noarp$0);
           if(0 <= _YC_)
            if(0 < _YC_)
             if(caml_string_notequal(_YA_,cst_notrailers$0))
              if(caml_string_notequal(_YA_,cst_pointopoint$0))
               if(caml_string_notequal(_YA_,cst_portsel$0))
                if(caml_string_notequal(_YA_,cst_promisc$0))
                 if(caml_string_notequal(_YA_,cst_running$0))
                  if(caml_string_notequal(_YA_,cst_slave$0))
                   {if(! caml_string_notequal(_YA_,cst_up$0))switch$1 = 16}
                  else
                   switch$1 = 15;
                 else
                  switch$1 = 14;
                else
                 switch$1 = 13;
               else
                switch$1 = 12;
              else
               switch$1 = 11;
             else
              switch$1 = 10;
            else
             switch$1 = 9;
           else
            if(caml_string_notequal(_YA_,cst_automedia$0))
             if(caml_string_notequal(_YA_,cst_broadcast$0))
              if(caml_string_notequal(_YA_,cst_debug$0))
               if(caml_string_notequal(_YA_,cst_dynamic$0))
                if(caml_string_notequal(_YA_,cst_loopback$0))
                 if(caml_string_notequal(_YA_,cst_master$0))
                  {if(! caml_string_notequal(_YA_,cst_multicast$0))
                    switch$1 = 8}
                 else
                  switch$1 = 7;
                else
                 switch$1 = 6;
               else
                switch$1 = 5;
              else
               switch$1 = 4;
             else
              switch$1 = 3;
            else
             switch$1 = 2}
         else
          switch$1 = 1;
        else
         {var _YD_=caml_string_compare(_YA_,cst_Noarp$0);
          if(0 <= _YD_)
           if(0 < _YD_)
            if(caml_string_notequal(_YA_,cst_Notrailers$0))
             if(caml_string_notequal(_YA_,cst_Pointopoint$0))
              if(caml_string_notequal(_YA_,cst_Portsel$0))
               if(caml_string_notequal(_YA_,cst_Promisc$0))
                if(caml_string_notequal(_YA_,cst_Running$0))
                 if(caml_string_notequal(_YA_,cst_Slave$0))
                  {if(! caml_string_notequal(_YA_,cst_Up$0))switch$1 = 16}
                 else
                  switch$1 = 15;
                else
                 switch$1 = 14;
               else
                switch$1 = 13;
              else
               switch$1 = 12;
             else
              switch$1 = 11;
            else
             switch$1 = 10;
           else
            switch$1 = 9;
          else
           if(caml_string_notequal(_YA_,cst_Allmulti$0))
            if(caml_string_notequal(_YA_,cst_Automedia$0))
             if(caml_string_notequal(_YA_,cst_Broadcast$0))
              if(caml_string_notequal(_YA_,cst_Debug$0))
               if(caml_string_notequal(_YA_,cst_Dynamic$0))
                if(caml_string_notequal(_YA_,cst_Loopback$0))
                 if(caml_string_notequal(_YA_,cst_Master$0))
                  {if(! caml_string_notequal(_YA_,cst_Multicast$0))
                    switch$1 = 8}
                 else
                  switch$1 = 7;
                else
                 switch$1 = 6;
               else
                switch$1 = 5;
              else
               switch$1 = 4;
             else
              switch$1 = 3;
            else
             switch$1 = 2;
           else
            switch$1 = 1}
        switch(switch$1)
         {case 1:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$53,sexp);
          case 2:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$53,sexp);
          case 3:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$53,sexp);
          case 4:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$53,sexp);
          case 5:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$53,sexp);
          case 6:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$53,sexp);
          case 7:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$53,sexp);
          case 8:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$53,sexp);
          case 9:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$53,sexp);
          case 10:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$53,sexp);
          case 11:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$53,sexp);
          case 12:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$53,sexp);
          case 13:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$53,sexp);
          case 14:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$53,sexp);
          case 15:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$53,sexp);
          case 16:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$53,sexp)
          }}
      return caml_call2(Sexplib0_Sexp_conv_error[8],tp_loc$53,sexp)}
    function sexp_of_t$33(param)
     {switch(param)
       {case 0:return _vJ_;
        case 1:return _vK_;
        case 2:return _vL_;
        case 3:return _vM_;
        case 4:return _vN_;
        case 5:return _vO_;
        case 6:return _vP_;
        case 7:return _vQ_;
        case 8:return _vR_;
        case 9:return _vS_;
        case 10:return _vT_;
        case 11:return _vU_;
        case 12:return _vV_;
        case 13:return _vW_;
        case 14:return _vX_;
        default:return _vY_}}
    var
     compare$13=runtime.caml_int_compare,
     include$11=
      caml_call1
       (Core_kernel_Comparable[8],[0,compare$13,t_of_sexp$24,sexp_of_t$33]),
     symbol$19=include$11[1],
     symbol$20=include$11[2],
     symbol$21=include$11[3],
     symbol$22=include$11[4],
     symbol$23=include$11[5],
     symbol$24=include$11[6],
     equal$3=include$11[7],
     compare$14=include$11[8],
     min$3=include$11[9],
     max$3=include$11[10],
     ascending$2=include$11[11],
     descending$2=include$11[12],
     between$2=include$11[13],
     clamp_exn$2=include$11[14],
     clamp$2=include$11[15],
     comparator$5=include$11[16],
     validate_lbound$2=include$11[17],
     validate_ubound$2=include$11[18],
     validate_bound$2=include$11[19],
     Replace_polymorphic_compare$2=include$11[20],
     Map$3=include$11[21],
     Set$3=include$11[22];
    function set_of_int(bitmask)
     {function _Yt_(flags,t)
       {var v=runtime.core_unix_iff_to_int(t),match=bitmask & v;
        return 0 === match?flags:caml_call2(Set$3[19],flags,t)}
      return caml_call3(Core_kernel_List[10],all,Set$3[55],_Yt_)}
    function core_unix_iff_to_int(_Ys_)
     {return runtime.core_unix_iff_to_int(_Ys_)}
    var Private$1=[0,core_unix_iff_to_int,set_of_int];
    function sexp_of_t$34(param)
     {var
       v_broadcast_or_destination=param[6],
       v_netmask=param[5],
       v_address=param[4],
       v_flags=param[3],
       v_family=param[2],
       v_name=param[1],
       bnds=0;
      if(v_broadcast_or_destination)
       var
        v=v_broadcast_or_destination[1],
        arg=caml_call1(Broadcast_or_destination[1],v),
        bnd=[1,[0,_vZ_,[0,arg,0]]],
        bnds$0=[0,bnd,bnds];
      else
       var bnds$0=bnds;
      if(v_netmask)
       var
        v$0=v_netmask[1],
        arg$0=caml_call1(sexp_of_t$21,v$0),
        bnd$0=[1,[0,_v0_,[0,arg$0,0]]],
        bnds$1=[0,bnd$0,bnds$0];
      else
       var bnds$1=bnds$0;
      if(v_address)
       var
        v$1=v_address[1],
        arg$1=caml_call1(sexp_of_t$21,v$1),
        bnd$1=[1,[0,_v1_,[0,arg$1,0]]],
        bnds$2=[0,bnd$1,bnds$1];
      else
       var bnds$2=bnds$1;
      var
       arg$2=caml_call1(Set$3[75],v_flags),
       bnds$3=[0,[1,[0,_v2_,[0,arg$2,0]]],bnds$2],
       arg$3=sexp_of_t$32(v_family),
       bnds$4=[0,[1,[0,_v3_,[0,arg$3,0]]],bnds$3],
       arg$4=caml_call1(_ge_,v_name),
       bnds$5=[0,[1,[0,_v4_,[0,arg$4,0]]],bnds$4];
      return [1,bnds$5]}
    function broadcast_or_destination(r){return r[6]}
    function netmask(r){return r[5]}
    function address(r){return r[4]}
    function flags(r){return r[3]}
    function family(r){return r[2]}
    function name$1(r){return r[1]}
    function _v5_(r,v){return [0,r[1],r[2],r[3],r[4],r[5],v]}
    var
     _v6_=0,
     broadcast_or_destination$0=
      [0,
       function(param){return 0},
       cst_broadcast_or_destination,
       _v6_,
       broadcast_or_destination,
       _v5_];
    function _v7_(r,v){return [0,r[1],r[2],r[3],r[4],v,r[6]]}
    var
     _v8_=0,
     netmask$0=[0,function(param){return 0},cst_netmask,_v8_,netmask,_v7_];
    function _v9_(r,v){return [0,r[1],r[2],r[3],v,r[5],r[6]]}
    var
     _v__=0,
     address$0=[0,function(param){return 0},cst_address$0,_v__,address,_v9_];
    function _v$_(r,v){return [0,r[1],r[2],v,r[4],r[5],r[6]]}
    var
     _wa_=0,
     flags$0=[0,function(param){return 0},cst_flags,_wa_,flags,_v$_];
    function _wb_(r,v){return [0,r[1],v,r[3],r[4],r[5],r[6]]}
    var
     _wc_=0,
     family$0=[0,function(param){return 0},cst_family,_wc_,family,_wb_];
    function _wd_(r,v){return [0,v,r[2],r[3],r[4],r[5],r[6]]}
    var
     _we_=0,
     name$2=[0,function(param){return 0},cst_name$7,_we_,name$1,_wd_];
    function make_creator$1
     (name_fun,
      family_fun,
      flags_fun,
      address_fun,
      netmask_fun,
      broadcast_or_destination_fun,
      compile_acc)
     {var
       match=caml_call2(name_fun,name$2,compile_acc),
       compile_acc$0=match[2],
       name_gen=match[1],
       match$0=caml_call2(family_fun,family$0,compile_acc$0),
       compile_acc$1=match$0[2],
       family_gen=match$0[1],
       match$1=caml_call2(flags_fun,flags$0,compile_acc$1),
       compile_acc$2=match$1[2],
       flags_gen=match$1[1],
       match$2=caml_call2(address_fun,address$0,compile_acc$2),
       compile_acc$3=match$2[2],
       address_gen=match$2[1],
       match$3=caml_call2(netmask_fun,netmask$0,compile_acc$3),
       compile_acc$4=match$3[2],
       netmask_gen=match$3[1],
       match$4=
        caml_call2
         (broadcast_or_destination_fun,
          broadcast_or_destination$0,
          compile_acc$4),
       compile_acc$5=match$4[2],
       broadcast_or_destination_gen=match$4[1];
      return [0,
              function(acc)
               {var
                 name=caml_call1(name_gen,acc),
                 family=caml_call1(family_gen,acc),
                 flags=caml_call1(flags_gen,acc),
                 address=caml_call1(address_gen,acc),
                 netmask=caml_call1(netmask_gen,acc),
                 broadcast_or_destination=
                  caml_call1(broadcast_or_destination_gen,acc);
                return [0,
                        name,
                        family,
                        flags,
                        address,
                        netmask,
                        broadcast_or_destination]},
              compile_acc$5]}
    function create$2
     (name,family,flags,address,netmask,broadcast_or_destination)
     {return [0,name,family,flags,address,netmask,broadcast_or_destination]}
    function map$3
     (name_fun,
      family_fun,
      flags_fun,
      address_fun,
      netmask_fun,
      broadcast_or_destination_fun)
     {var
       _Yn_=
        caml_call1(broadcast_or_destination_fun,broadcast_or_destination$0),
       _Yo_=caml_call1(netmask_fun,netmask$0),
       _Yp_=caml_call1(address_fun,address$0),
       _Yq_=caml_call1(flags_fun,flags$0),
       _Yr_=caml_call1(family_fun,family$0);
      return [0,caml_call1(name_fun,name$2),_Yr_,_Yq_,_Yp_,_Yo_,_Yn_]}
    function iter$3
     (name_fun,
      family_fun,
      flags_fun,
      address_fun,
      netmask_fun,
      broadcast_or_destination_fun)
     {caml_call1(name_fun,name$2);
      caml_call1(family_fun,family$0);
      caml_call1(flags_fun,flags$0);
      caml_call1(address_fun,address$0);
      caml_call1(netmask_fun,netmask$0);
      return caml_call1
              (broadcast_or_destination_fun,broadcast_or_destination$0)}
    function fold$3
     (init,
      name_fun,
      family_fun,
      flags_fun,
      address_fun,
      netmask_fun,
      broadcast_or_destination_fun)
     {return caml_call2
              (broadcast_or_destination_fun,
               caml_call2
                (netmask_fun,
                 caml_call2
                  (address_fun,
                   caml_call2
                    (flags_fun,
                     caml_call2
                      (family_fun,caml_call2(name_fun,init,name$2),family$0),
                     flags$0),
                   address$0),
                 netmask$0),
               broadcast_or_destination$0)}
    function map_poly$1(record)
     {var
       _Yi_=[0,caml_call1(record[1],broadcast_or_destination$0),0],
       _Yj_=[0,caml_call1(record[1],netmask$0),_Yi_],
       _Yk_=[0,caml_call1(record[1],address$0),_Yj_],
       _Yl_=[0,caml_call1(record[1],flags$0),_Yk_],
       _Ym_=[0,caml_call1(record[1],family$0),_Yl_];
      return [0,caml_call1(record[1],name$2),_Ym_]}
    function for_all$3
     (name_fun,
      family_fun,
      flags_fun,
      address_fun,
      netmask_fun,
      broadcast_or_destination_fun)
     {var
       _Yd_=caml_call1(name_fun,name$2),
       _Ye_=_Yd_?caml_call1(family_fun,family$0):_Yd_,
       _Yf_=_Ye_?caml_call1(flags_fun,flags$0):_Ye_,
       _Yg_=_Yf_?caml_call1(address_fun,address$0):_Yf_,
       _Yh_=_Yg_?caml_call1(netmask_fun,netmask$0):_Yg_;
      return _Yh_
              ?caml_call1
                (broadcast_or_destination_fun,broadcast_or_destination$0)
              :_Yh_}
    function exists$3
     (name_fun,
      family_fun,
      flags_fun,
      address_fun,
      netmask_fun,
      broadcast_or_destination_fun)
     {var
       _Yc_=caml_call1(name_fun,name$2),
       _X__=_Yc_ || caml_call1(family_fun,family$0),
       _X$_=_X__ || caml_call1(flags_fun,flags$0),
       _Ya_=_X$_ || caml_call1(address_fun,address$0),
       _Yb_=_Ya_ || caml_call1(netmask_fun,netmask$0);
      return _Yb_
              ?_Yb_
              :caml_call1
                (broadcast_or_destination_fun,broadcast_or_destination$0)}
    function to_list$3
     (name_fun,
      family_fun,
      flags_fun,
      address_fun,
      netmask_fun,
      broadcast_or_destination_fun)
     {var
       _X5_=
        [0,
         caml_call1(broadcast_or_destination_fun,broadcast_or_destination$0),
         0],
       _X6_=[0,caml_call1(netmask_fun,netmask$0),_X5_],
       _X7_=[0,caml_call1(address_fun,address$0),_X6_],
       _X8_=[0,caml_call1(flags_fun,flags$0),_X7_],
       _X9_=[0,caml_call1(family_fun,family$0),_X8_];
      return [0,caml_call1(name_fun,name$2),_X9_]}
    function iter$4
     (record,
      name_fun,
      family_fun,
      flags_fun,
      address_fun,
      netmask_fun,
      broadcast_or_destination_fun)
     {caml_call3(name_fun,name$2,record,record[1]);
      caml_call3(family_fun,family$0,record,record[2]);
      caml_call3(flags_fun,flags$0,record,record[3]);
      caml_call3(address_fun,address$0,record,record[4]);
      caml_call3(netmask_fun,netmask$0,record,record[5]);
      return caml_call3
              (broadcast_or_destination_fun,
               broadcast_or_destination$0,
               record,
               record[6])}
    function fold$4
     (record,
      init,
      name_fun,
      family_fun,
      flags_fun,
      address_fun,
      netmask_fun,
      broadcast_or_destination_fun)
     {var
       _X0_=record[6],
       _X1_=record[5],
       _X2_=record[4],
       _X3_=record[3],
       _X4_=record[2];
      return caml_call4
              (broadcast_or_destination_fun,
               caml_call4
                (netmask_fun,
                 caml_call4
                  (address_fun,
                   caml_call4
                    (flags_fun,
                     caml_call4
                      (family_fun,
                       caml_call4(name_fun,init,name$2,record,record[1]),
                       family$0,
                       record,
                       _X4_),
                     flags$0,
                     record,
                     _X3_),
                   address$0,
                   record,
                   _X2_),
                 netmask$0,
                 record,
                 _X1_),
               broadcast_or_destination$0,
               record,
               _X0_)}
    function for_all$4
     (record,
      name_fun,
      family_fun,
      flags_fun,
      address_fun,
      netmask_fun,
      broadcast_or_destination_fun)
     {var
       _XV_=caml_call3(name_fun,name$2,record,record[1]),
       _XW_=_XV_?caml_call3(family_fun,family$0,record,record[2]):_XV_,
       _XX_=_XW_?caml_call3(flags_fun,flags$0,record,record[3]):_XW_,
       _XY_=_XX_?caml_call3(address_fun,address$0,record,record[4]):_XX_,
       _XZ_=_XY_?caml_call3(netmask_fun,netmask$0,record,record[5]):_XY_;
      return _XZ_
              ?caml_call3
                (broadcast_or_destination_fun,
                 broadcast_or_destination$0,
                 record,
                 record[6])
              :_XZ_}
    function exists$4
     (record,
      name_fun,
      family_fun,
      flags_fun,
      address_fun,
      netmask_fun,
      broadcast_or_destination_fun)
     {var
       _XU_=caml_call3(name_fun,name$2,record,record[1]),
       _XQ_=_XU_ || caml_call3(family_fun,family$0,record,record[2]),
       _XR_=_XQ_ || caml_call3(flags_fun,flags$0,record,record[3]),
       _XS_=_XR_ || caml_call3(address_fun,address$0,record,record[4]),
       _XT_=_XS_ || caml_call3(netmask_fun,netmask$0,record,record[5]);
      return _XT_
              ?_XT_
              :caml_call3
                (broadcast_or_destination_fun,
                 broadcast_or_destination$0,
                 record,
                 record[6])}
    function to_list$4
     (record,
      name_fun,
      family_fun,
      flags_fun,
      address_fun,
      netmask_fun,
      broadcast_or_destination_fun)
     {var
       _XL_=
        [0,
         caml_call3
          (broadcast_or_destination_fun,
           broadcast_or_destination$0,
           record,
           record[6]),
         0],
       _XM_=[0,caml_call3(netmask_fun,netmask$0,record,record[5]),_XL_],
       _XN_=[0,caml_call3(address_fun,address$0,record,record[4]),_XM_],
       _XO_=[0,caml_call3(flags_fun,flags$0,record,record[3]),_XN_],
       _XP_=[0,caml_call3(family_fun,family$0,record,record[2]),_XO_];
      return [0,caml_call3(name_fun,name$2,record,record[1]),_XP_]}
    function map$4
     (record,
      name_fun,
      family_fun,
      flags_fun,
      address_fun,
      netmask_fun,
      broadcast_or_destination_fun)
     {var
       _XG_=
        caml_call3
         (broadcast_or_destination_fun,
          broadcast_or_destination$0,
          record,
          record[6]),
       _XH_=caml_call3(netmask_fun,netmask$0,record,record[5]),
       _XI_=caml_call3(address_fun,address$0,record,record[4]),
       _XJ_=caml_call3(flags_fun,flags$0,record,record[3]),
       _XK_=caml_call3(family_fun,family$0,record,record[2]);
      return [0,
              caml_call3(name_fun,name$2,record,record[1]),
              _XK_,
              _XJ_,
              _XI_,
              _XH_,
              _XG_]}
    function set_all_mutable_fields$1(record)
     {caml_call1(Base_Field[1][1],record);return 0}
    var
     Direct$1=
      [0,
       iter$4,
       fold$4,
       for_all$4,
       exists$4,
       to_list$4,
       map$4,
       set_all_mutable_fields$1];
    function addr_to_inet_addr(family,addr)
     {switch(family)
       {case 0:return 0;
        case 1:
         var addrlen=caml_ml_string_length(addr);
         if(0 === addrlen)return 0;
         if(4 === addrlen)
          {var
            _W4_=caml_string_get(addr,3),
            _W5_=caml_call1(Core_kernel_Char[6],_W4_),
            _W6_=caml_string_get(addr,2),
            _W7_=caml_call1(Core_kernel_Char[6],_W6_),
            _W8_=caml_string_get(addr,1),
            _W9_=caml_call1(Core_kernel_Char[6],_W8_),
            _W__=caml_string_get(addr,0),
            _W$_=
             caml_call1
              (of_string$2,
               caml_call5
                (sprintf,
                 _wf_,
                 caml_call1(Core_kernel_Char[6],_W__),
                 _W9_,
                 _W7_,
                 _W5_));
           return caml_call1(Core_kernel_Option[38],_W$_)}
         return caml_call3(_cz_,_wg_,addrlen,0);
        default:
         var addrlen$0=caml_ml_string_length(addr);
         if(0 === addrlen$0)return 0;
         if(16 === addrlen$0)
          {var
            _Xa_=caml_string_get(addr,15),
            _Xb_=caml_call1(Core_kernel_Char[6],_Xa_),
            _Xc_=caml_string_get(addr,14),
            _Xd_=caml_call1(Core_kernel_Char[6],_Xc_),
            _Xe_=caml_string_get(addr,13),
            _Xf_=caml_call1(Core_kernel_Char[6],_Xe_),
            _Xg_=caml_string_get(addr,12),
            _Xh_=caml_call1(Core_kernel_Char[6],_Xg_),
            _Xi_=caml_string_get(addr,11),
            _Xj_=caml_call1(Core_kernel_Char[6],_Xi_),
            _Xk_=caml_string_get(addr,10),
            _Xl_=caml_call1(Core_kernel_Char[6],_Xk_),
            _Xm_=caml_string_get(addr,9),
            _Xn_=caml_call1(Core_kernel_Char[6],_Xm_),
            _Xo_=caml_string_get(addr,8),
            _Xp_=caml_call1(Core_kernel_Char[6],_Xo_),
            _Xq_=caml_string_get(addr,7),
            _Xr_=caml_call1(Core_kernel_Char[6],_Xq_),
            _Xs_=caml_string_get(addr,6),
            _Xt_=caml_call1(Core_kernel_Char[6],_Xs_),
            _Xu_=caml_string_get(addr,5),
            _Xv_=caml_call1(Core_kernel_Char[6],_Xu_),
            _Xw_=caml_string_get(addr,4),
            _Xx_=caml_call1(Core_kernel_Char[6],_Xw_),
            _Xy_=caml_string_get(addr,3),
            _Xz_=caml_call1(Core_kernel_Char[6],_Xy_),
            _XA_=caml_string_get(addr,2),
            _XB_=caml_call1(Core_kernel_Char[6],_XA_),
            _XC_=caml_string_get(addr,1),
            _XD_=caml_call1(Core_kernel_Char[6],_XC_),
            _XE_=caml_string_get(addr,0),
            _XF_=
             caml_call1
              (of_string$2,
               caml_call17
                (sprintf,
                 _wh_,
                 caml_call1(Core_kernel_Char[6],_XE_),
                 _XD_,
                 _XB_,
                 _Xz_,
                 _Xx_,
                 _Xv_,
                 _Xt_,
                 _Xr_,
                 _Xp_,
                 _Xn_,
                 _Xl_,
                 _Xj_,
                 _Xh_,
                 _Xf_,
                 _Xd_,
                 _Xb_));
           return caml_call1(Core_kernel_Option[38],_XF_)}
         return caml_call3(_cz_,_wi_,addrlen$0,0)}}
    function test_and_convert(ifa)
     {var flags=set_of_int(ifa[3]);
      if(caml_call2(Core_kernel_Set[10],flags,2))
       var
        _WX_=function(x){return [0,x]},
        _WY_=addr_to_inet_addr(ifa[2],ifa[6]),
        _W1_=caml_call2(Core_kernel_Option[39],_WY_,_WX_);
      else
       if(caml_call2(Core_kernel_Set[10],flags,10))
        var
         _WZ_=function(x){return [1,x]},
         _W0_=addr_to_inet_addr(ifa[2],ifa[7]),
         _W1_=caml_call2(Core_kernel_Option[39],_W0_,_WZ_);
       else
        var _W1_=0;
      var
       _W2_=addr_to_inet_addr(ifa[2],ifa[5]),
       _W3_=addr_to_inet_addr(ifa[2],ifa[4]);
      return [0,ifa[1],ifa[2],flags,_W3_,_W2_,_W1_]}
    function getifaddrs(param)
     {var _WW_=runtime.core_unix_getifaddrs(0);
      return caml_call2(Core_kernel_List[71],_WW_,test_and_convert)}
    var Stable=[0];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$22);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Core_unix$0);
    var
     Ifaddr=
      [0,
       Broadcast_or_destination,
       [0,
        all,
        sexp_of_t$33,
        symbol$19,
        symbol$20,
        symbol$21,
        symbol$22,
        symbol$23,
        symbol$24,
        equal$3,
        compare$14,
        min$3,
        max$3,
        ascending$2,
        descending$2,
        between$2,
        clamp_exn$2,
        clamp$2,
        comparator$5,
        validate_lbound$2,
        validate_ubound$2,
        validate_bound$2,
        Replace_polymorphic_compare$2,
        Map$3,
        Set$3,
        Private$1],
       [0,sexp_of_t$32],
       broadcast_or_destination,
       netmask,
       address,
       flags,
       family,
       name$1,
       [0,
        names$1,
        broadcast_or_destination$0,
        netmask$0,
        address$0,
        flags$0,
        family$0,
        name$2,
        fold$3,
        make_creator$1,
        create$2,
        map$3,
        iter$3,
        for_all$3,
        exists$3,
        to_list$3,
        map_poly$1,
        Direct$1],
       sexp_of_t$34],
     Priority=[0,function(_WV_){return runtime.core_unix_nice(_WV_)}],
     Scheduler=[0,[0,sexp_of_t$9,t_of_sexp$6,t_of_sexp$5],set$1];
    function set_mcast_loop(_WU_,_WT_)
     {return runtime.core_unix_mcast_set_loop(_WU_,_WT_)}
    function get_mcast_loop(_WS_)
     {return runtime.core_unix_mcast_get_loop(_WS_)}
    function set_mcast_ttl(_WR_,_WQ_)
     {return runtime.core_unix_mcast_set_ttl(_WR_,_WQ_)}
    function get_mcast_ttl(_WP_){return runtime.core_unix_mcast_get_ttl(_WP_)}
    function if_indextoname(_WO_)
     {return runtime.core_unix_if_indextoname(_WO_)}
    function uname(_WN_){return runtime.core_unix_uname(_WN_)}
    var
     Utsname=
      [0,
       t_of_sexp$4,
       sexp_of_t$8,
       compare$4,
       sysname,
       nodename,
       release,
       version,
       machine];
    function getgrouplist(_WM_,_WL_)
     {return runtime.core_unix_getgrouplist(_WM_,_WL_)}
    function initgroups(_WK_,_WJ_)
     {return runtime.core_unix_initgroups(_WK_,_WJ_)}
    function abort(_WI_){return runtime.core_unix_abort(_WI_)}
    function mkdtemp(_WH_){return runtime.core_unix_mkdtemp(_WH_)}
    function mkstemp(_WG_){return runtime.core_unix_mkstemp(_WG_)}
    function sysconf(_WF_){return runtime.core_unix_sysconf(_WF_)}
    var
     Resource_usage=
      [0,
       t_of_sexp$2,
       sexp_of_t$6,
       nivcsw,
       nvcsw,
       nsignals,
       msgrcv,
       msgsnd,
       oublock,
       inblock,
       nswap,
       majflt,
       minflt,
       isrss,
       idrss,
       ixrss,
       maxrss,
       stime,
       utime,
       [0,
        names,
        nivcsw$0,
        nvcsw$0,
        nsignals$0,
        msgrcv$0,
        msgsnd$0,
        oublock$0,
        inblock$0,
        nswap$0,
        majflt$0,
        minflt$0,
        isrss$0,
        idrss$0,
        ixrss$0,
        maxrss$0,
        stime$0,
        utime$0,
        fold,
        make_creator,
        create,
        map,
        iter,
        for_all,
        exists,
        to_list,
        map_poly,
        Direct],
       get$0,
       add],
     RLimit=
      [0,
       [0,t_of_sexp$0,sexp_of_t$4,min$0,max$0],
       sexp_of_limit,
       limit_of_sexp,
       t_of_sexp$1,
       sexp_of_t$5,
       sexp_of_resource,
       resource_of_sexp,
       core_file_size,
       cpu_seconds,
       data_segment,
       file_size,
       num_file_descriptors,
       stack,
       virtual_memory,
       nice,
       get,
       set$0];
    function pselect(_WE_,_WD_,_WC_,_WB_,_WA_)
     {return runtime.core_unix_pselect_stub(_WE_,_WD_,_WC_,_WB_,_WA_)}
    function readdir_ino(_Wz_)
     {return runtime.core_unix_readdir_ino_stub(_Wz_)}
    function fdatasync(_Wy_){return runtime.core_unix_fdatasync(_Wy_)}
    function fsync(_Wx_){return runtime.core_unix_fsync(_Wx_)}
    function sync$0(_Ww_){return runtime.core_unix_sync(_Ww_)}
    function dirfd(_Wv_){return runtime.core_unix_dirfd(_Wv_)}
    var
     IOVec=
      [0,
       t_of_sexp$3,
       sexp_of_t$7,
       string_kind,
       bigstring_kind,
       empty,
       of_string$1,
       of_bigstring,
       drop,
       max_iovecs],
     exit_immediately=caml_sys_exit,
     Terminal_io=
      [0,
       sexp_of_t$30,
       sexp_of_setattr_when,
       tcgetattr,
       tcsetattr,
       tcsendbreak,
       tcdrain,
       sexp_of_flush_queue,
       flush_queue_of_sexp,
       tcflush,
       sexp_of_flow_action,
       flow_action_of_sexp,
       tcflow,
       setsid],
     Service=
      [0,
       t_of_sexp$23,
       sexp_of_t$29,
       getbyname,
       getbyname_exn,
       getbyport,
       getbyport_exn],
     Protocol=
      [0,t_of_sexp$22,sexp_of_t$28,_s2_,_s1_,getbynumber,getbynumber_exn],
     Host=
      [0,
       sexp_of_t$22,
       _rY_,
       _rX_,
       getbyaddr,
       getbyaddr_exn,
       have_address_in_common],
     Cidr=
      [0,
       arg_type$1,
       _se_,
       _sf_,
       _sg_,
       _sh_,
       _si_,
       _sj_,
       _sk_,
       _sl_,
       _sm_,
       _sn_,
       _so_,
       _sp_,
       _sq_,
       _sr_,
       _ss_,
       _st_,
       _su_,
       _sv_,
       _sw_,
       _sx_,
       _sy_,
       _sz_,
       _sA_,
       _sB_,
       _sC_,
       _sD_,
       _sE_,
       _sF_,
       _sG_,
       _sH_,
       _sI_,
       _sJ_,
       _sK_,
       _sL_,
       _sM_,
       _sN_,
       _sO_,
       _sP_,
       _sQ_,
       _sR_,
       _sS_,
       invariant,
       create$1,
       base_address,
       bits,
       all_matching_addresses,
       broadcast_address,
       multicast,
       does_match,
       netmask_of_bits,
       is_subset$0,
       [0,
        [0,
         bin_size_t$2,
         bin_write_t$2,
         bin_read_t$6,
         bin_read_t$5,
         bin_shape_t$5,
         bin_writer_t$5,
         bin_reader_t$5,
         bin_t$5,
         compare$12,
         t_of_sexp$20,
         sexp_of_t$26,
         comparator$3,
         Map$2,
         Set$2]]],
     _wj_=
      [0,
       [0,
        hash_fold_t$1,
        hash$2,
        bin_size_t$1,
        bin_write_t$1,
        bin_read_t$3,
        bin_read_t$4,
        bin_shape_t$3,
        bin_writer_t$3,
        bin_reader_t$3,
        bin_t$3,
        compare$11,
        t_of_sexp$17,
        sexp_of_t$21,
        comparator$1]];
    function _wk_(_Wu_)
     {return runtime.core_unix_inet4_addr_to_int63_exn(_Wu_)}
    function _wl_(_Wt_){return runtime.core_unix_inet4_addr_of_int63(_Wt_)}
    function _wm_(_Ws_)
     {return runtime.core_unix_inet4_addr_to_int32_exn(_Ws_)}
    var
     Inet_addr=
      [0,
       bin_size_t$1,
       bin_write_t$1,
       bin_read_t$3,
       bin_read_t$4,
       bin_shape_t$3,
       bin_writer_t$3,
       bin_reader_t$3,
       bin_t$3,
       hash_fold_t$1,
       hash$2,
       sexp_of_t$21,
       arg_type$0,
       t_of_sexp$18,
       [0,
        bin_size_t$1,
        bin_write_t$1,
        bin_read_t$3,
        bin_read_t$4,
        bin_shape_t$3,
        bin_writer_t$3,
        bin_reader_t$3,
        bin_t$3,
        compare$11,
        hash_fold_t$1,
        hash$2,
        t_of_sexp$18,
        sexp_of_t$23],
       symbol$13,
       symbol$14,
       symbol$15,
       symbol$16,
       symbol$17,
       symbol$18,
       equal$2,
       compare$11,
       min$2,
       max$2,
       ascending$1,
       descending$1,
       between$1,
       clamp_exn$1,
       clamp$1,
       comparator$1,
       validate_lbound$1,
       validate_ubound$1,
       validate_bound$1,
       Replace_polymorphic_compare$1,
       Map$1,
       Set$1,
       of_string$2,
       of_string$3,
       to_string$1,
       bind_any,
       bind_any_inet6,
       localhost,
       localhost_inet6,
       function(_Wr_){return runtime.core_unix_inet4_addr_of_int32(_Wr_)},
       _wm_,
       _wl_,
       _wk_,
       _wj_],
     Protocol_family=
      [0,
       bin_size_t$0,
       bin_write_t$0,
       bin_read_t$2,
       bin_read_t$1,
       bin_shape_t$2,
       bin_writer_t$2,
       bin_reader_t$2,
       bin_t$2,
       sexp_of_t$20,
       t_of_sexp$16,
       t_of_sexp$15],
     Group=[0,sexp_of_t$19,_q8_,_q7_,getbygid,getbygid_exn],
     Passwd=
      [0,
       compare$9,
       shell,
       dir,
       gecos,
       gid,
       uid,
       passwd,
       name,
       [0,
        names$0,
        shell$0,
        dir$0,
        gecos$0,
        gid$0,
        uid$0,
        passwd$0,
        name$0,
        fold$1,
        make_creator$0,
        create$0,
        map$1,
        iter$1,
        for_all$1,
        exists$1,
        to_list$1,
        map_poly$0,
        Direct$0],
       t_of_sexp$14,
       sexp_of_t$18,
       _qS_,
       _qR_,
       _qY_,
       _qX_,
       getpwents,
       [0,setpwent,getpwent,getpwent_exn,endpwent]];
    function nanosleep(_Wq_){return runtime.core_time_ns_nanosleep(_Wq_)}
    function strptime(_Wp_,_Wo_){return runtime.core_unix_strptime(_Wp_,_Wo_)}
    function strftime(_Wn_,_Wm_)
     {return runtime.core_time_ns_strftime(_Wn_,_Wm_)}
    function localtime(_Wl_){return runtime.core_localtime(_Wl_)}
    function timegm(_Wk_){return runtime.core_timegm(_Wk_)}
    function gmtime(_Wj_){return runtime.core_gmtime(_Wj_)}
    var
     Native_file=
      [0,
       sexp_of_stats,
       stats_of_sexp,
       stat,
       lstat,
       fstat,
       lseek,
       truncate,
       ftruncate],
     Open_flags=
      [0,
       t_of_sexp$13,
       sexp_of_t$15,
       typerep_of_t,
       typename_of_t,
       symbol$5,
       symbol$6,
       symbol$7,
       symbol$8,
       symbol$9,
       symbol$10,
       equal$1,
       compare$8,
       min$1,
       max$1,
       ascending$0,
       descending$0,
       between$0,
       clamp_exn$0,
       clamp$0,
       comparator$0,
       validate_lbound$0,
       validate_ubound$0,
       validate_bound$0,
       Replace_polymorphic_compare$0,
       Map$0,
       Set$0,
       of_int,
       to_int_exn,
       empty$0,
       symbol$11,
       symbol$12,
       intersect,
       complement,
       is_empty,
       do_intersect,
       are_disjoint,
       is_subset,
       Unstable,
       rdonly,
       wronly,
       rdwr,
       creat,
       excl,
       noctty,
       trunc,
       append,
       nonblock,
       dsync,
       sync,
       rsync,
       can_read,
       can_write],
     _wn_=Core_kernel_Int[126],
     _wo_=_wn_[1],
     _wp_=Core_kernel_Int[125],
     _wq_=_wp_[1],
     Thread_id=
      [0,
       Core_kernel_Int[101],
       Core_kernel_Int[92],
       Core_kernel_Int[93],
       Core_kernel_Int[94],
       Core_kernel_Int[95],
       Core_kernel_Int[96],
       Core_kernel_Int[97],
       Core_kernel_Int[98],
       Core_kernel_Int[99],
       Core_kernel_Int[105],
       Core_kernel_Int[106],
       Core_kernel_Int[107],
       Core_kernel_Int[108],
       Core_kernel_Int[109],
       Core_kernel_Int[110],
       Core_kernel_Int[111],
       Core_kernel_Int[112],
       Core_kernel_Int[113],
       Core_kernel_Int[114],
       Core_kernel_Int[115],
       Core_kernel_Int[116],
       Core_kernel_Int[117],
       Core_kernel_Int[118],
       Core_kernel_Int[119],
       Core_kernel_Int[124],
       Core_kernel_Int[120],
       Core_kernel_Int[121],
       Core_kernel_Int[122],
       Core_kernel_Int[123],
       [0,
        [0,_wq_[9],_wq_[10],_wq_[11]],
        _wp_[2],
        _wp_[3],
        _wp_[4],
        _wp_[5],
        _wp_[6],
        _wp_[7],
        _wp_[8],
        _wp_[9],
        _wp_[10],
        _wp_[11],
        _wp_[12],
        _wp_[13],
        _wp_[14],
        _wp_[15],
        _wp_[16],
        _wp_[17],
        _wp_[18],
        _wp_[19],
        _wp_[20],
        _wp_[21],
        _wp_[22],
        _wp_[23],
        _wp_[24],
        _wp_[25],
        _wp_[26],
        _wp_[27],
        _wp_[28],
        _wp_[29],
        _wp_[30],
        _wp_[31],
        _wp_[32],
        _wp_[33],
        _wp_[34],
        _wp_[35],
        _wp_[36],
        _wp_[37],
        _wp_[38],
        _wp_[39],
        _wp_[40],
        _wp_[41],
        _wp_[42],
        _wp_[43],
        _wp_[44],
        _wp_[45],
        _wp_[46],
        _wp_[47],
        _wp_[48],
        _wp_[49],
        _wp_[50],
        _wp_[51],
        _wp_[52],
        _wp_[53],
        _wp_[54],
        _wp_[55],
        _wp_[56],
        _wp_[57],
        _wp_[58],
        _wp_[59],
        _wp_[60],
        _wp_[61],
        _wp_[62],
        _wp_[63],
        _wp_[64],
        _wp_[65],
        _wp_[66],
        _wp_[67],
        _wp_[68],
        _wp_[69],
        _wp_[70],
        _wp_[71],
        _wp_[72],
        _wp_[73],
        _wp_[74],
        _wp_[75],
        _wp_[76],
        _wp_[77],
        _wp_[78],
        _wp_[79],
        _wp_[80],
        _wp_[81],
        _wp_[82],
        _wp_[83],
        _wp_[84],
        _wp_[85],
        _wp_[86],
        _wp_[87],
        _wp_[88],
        _wp_[89],
        _wp_[90],
        _wp_[91],
        _wp_[92],
        _wp_[93],
        _wp_[94],
        _wp_[95],
        _wp_[96],
        _wp_[97],
        _wp_[98],
        _wp_[99],
        _wp_[100],
        _wp_[101],
        _wp_[102]],
       [0,
        [0,_wo_[1],_wo_[2],_wo_[11]],
        _wn_[2],
        _wn_[3],
        _wn_[4],
        _wn_[5],
        _wn_[6],
        _wn_[7],
        _wn_[8],
        _wn_[9],
        _wn_[10],
        _wn_[11],
        _wn_[12],
        _wn_[13],
        _wn_[14],
        _wn_[15],
        _wn_[16],
        _wn_[17],
        _wn_[18],
        _wn_[19],
        _wn_[20],
        _wn_[21],
        _wn_[22],
        _wn_[23],
        _wn_[24],
        _wn_[25],
        _wn_[26],
        _wn_[27],
        _wn_[28],
        _wn_[29],
        _wn_[30],
        _wn_[31],
        _wn_[32],
        _wn_[33],
        _wn_[34],
        _wn_[35],
        _wn_[36],
        _wn_[37],
        _wn_[38],
        _wn_[39],
        _wn_[40],
        _wn_[41],
        _wn_[42],
        _wn_[43],
        _wn_[44],
        _wn_[45],
        _wn_[46],
        _wn_[47],
        _wn_[48],
        _wn_[49],
        _wn_[50],
        _wn_[51],
        _wn_[52],
        _wn_[53],
        _wn_[54],
        _wn_[55],
        _wn_[56],
        _wn_[57],
        _wn_[58],
        _wn_[59],
        _wn_[60],
        _wn_[61],
        _wn_[62],
        _wn_[63],
        _wn_[64],
        _wn_[65],
        _wn_[66],
        _wn_[67],
        _wn_[68],
        _wn_[69],
        _wn_[70],
        _wn_[71],
        _wn_[72],
        _wn_[73],
        _wn_[74],
        _wn_[75]],
       Core_kernel_Int[77]],
     Env=[0,sexp_of_env,env_of_sexp,t_of_sexp$12,expand,arg],
     Exit_or_signal_or_stop=
      [0,
       sexp_of_error$2,
       error_of_sexp$5,
       error_of_sexp$4,
       t_of_sexp$11,
       sexp_of_t$14,
       of_unix$0,
       to_string_hum$1,
       or_error$1],
     Exit_or_signal=
      [0,
       compare_error$0,
       sexp_of_error$1,
       error_of_sexp$3,
       error_of_sexp$2,
       compare$7,
       t_of_sexp$10,
       sexp_of_t$13,
       of_unix,
       to_string_hum$0,
       or_error$0],
     Exit=
      [0,
       compare_error,
       sexp_of_error$0,
       error_of_sexp$1,
       error_of_sexp$0,
       compare$6,
       t_of_sexp$9,
       sexp_of_t$12,
       to_string_hum,
       code,
       of_code,
       or_error];
    function unix_error(_Wi_,_Wh_,_Wg_)
     {return runtime.core_unix_error_stub(_Wi_,_Wh_,_Wg_)}
    function _wr_(_Wf_){return _Wf_}
    var
     File_descr=
      [0,
       sexp_of_t$3,
       equal$0,
       compare$3,
       hash_fold_t$0,
       hash$1,
       hashable$0,
       Table$0,
       Hash_set$0,
       Hash_queue$0,
       of_string$0,
       to_string$0,
       function(_We_){return _We_},
       _wr_],
     include$12=
      [0,
       File_descr,
       sexp_of_error,
       error_of_sexp,
       Error,
       Unix_error,
       Syscall_result,
       unix_error,
       error_message,
       handle_unix_error,
       retry_until_no_eintr,
       environment,
       putenv,
       unsetenv,
       Exit,
       Exit_or_signal,
       Exit_or_signal_or_stop,
       Env,
       sexp_of_env,
       env_of_sexp,
       exec,
       fork_exec,
       fork,
       sexp_of_wait_on,
       wait_on_of_sexp$0,
       wait_on_of_sexp,
       wait,
       wait_nohang,
       wait_untraced,
       wait_nohang_untraced,
       waitpid,
       waitpid_exn,
       system,
       getpid,
       getppid,
       getppid_exn,
       Thread_id,
       gettid,
       nice$0,
       stdin,
       stdout,
       stderr,
       open_flag_of_sexp,
       sexp_of_open_flag,
       sexp_of_file_perm,
       file_perm_of_sexp,
       openfile,
       Open_flags,
       fcntl_getfl,
       fcntl_setfl,
       close,
       with_file,
       read,
       write,
       write_substring,
       single_write,
       single_write_substring,
       in_channel_of_descr,
       out_channel_of_descr,
       descr_of_in_channel,
       descr_of_out_channel,
       sexp_of_seek_command,
       seek_command_of_sexp,
       lseek$0,
       truncate$0,
       ftruncate$0,
       sexp_of_file_kind,
       file_kind_of_sexp,
       sexp_of_stats$0,
       stats_of_sexp$0,
       stat$0,
       lstat$0,
       fstat$0,
       Native_file,
       sexp_of_lock_command,
       lock_command_of_sexp,
       lockf,
       Flock_command,
       flock,
       flock_blocking,
       isatty,
       map_file,
       unlink,
       remove$0,
       rename$0,
       link,
       chmod,
       fchmod,
       chown,
       fchown,
       umask,
       access,
       access_exn,
       dup,
       dup2,
       set_nonblock,
       clear_nonblock,
       set_close_on_exec,
       clear_close_on_exec,
       mkdir,
       mkdir_p,
       rmdir,
       chdir$0,
       _pO_,
       chroot,
       opendir,
       readdir_opt,
       readdir$0,
       rewinddir,
       closedir,
       pipe$0,
       mkfifo,
       Process_info,
       create_process,
       create_process_env,
       open_process_in,
       open_process_out,
       open_process,
       Process_channels,
       open_process_full,
       close_process_in,
       close_process_out,
       close_process,
       close_process_full,
       symlink,
       readlink,
       Select_fds,
       sexp_of_select_timeout,
       select,
       pause,
       sexp_of_process_times,
       process_times_of_sexp,
       Clock,
       sexp_of_tm,
       tm_of_sexp,
       time,
       gettimeofday,
       gmtime,
       timegm,
       localtime,
       mktime,
       strftime,
       strptime,
       alarm,
       sleep,
       nanosleep,
       times,
       utimes,
       sexp_of_interval_timer,
       interval_timer_of_sexp,
       sexp_of_interval_timer_status,
       interval_timer_status_of_sexp,
       getitimer,
       setitimer,
       getuid,
       geteuid,
       setuid,
       getgid,
       getegid,
       setgid,
       Passwd,
       Group,
       getlogin,
       Protocol_family,
       Inet_addr,
       Cidr,
       sexp_of_socket_domain,
       socket_domain_of_sexp,
       bin_shape_socket_domain,
       bin_size_socket_domain,
       bin_write_socket_domain,
       bin_writer_socket_domain,
       bin_read_socket_domain$0,
       bin_read_socket_domain,
       bin_reader_socket_domain,
       bin_socket_domain,
       sexp_of_socket_type,
       socket_type_of_sexp,
       bin_shape_socket_type,
       bin_size_socket_type,
       bin_write_socket_type,
       bin_writer_socket_type,
       bin_read_socket_type$0,
       bin_read_socket_type,
       bin_reader_socket_type,
       bin_socket_type,
       bin_shape_sockaddr,
       bin_size_sockaddr,
       bin_write_sockaddr,
       bin_writer_sockaddr,
       bin_read_sockaddr$0,
       bin_read_sockaddr,
       bin_reader_sockaddr,
       bin_sockaddr,
       compare_sockaddr,
       sexp_of_sockaddr,
       sockaddr_blocking_sexp_of_sexp,
       bin_shape_sockaddr_blocking_se,
       bin_size_sockaddr_blocking_sex,
       bin_write_sockaddr_blocking_se,
       bin_writer_sockaddr_blocking_s,
       bin_read_sockaddr_blocking_sex$0,
       bin_read_sockaddr_blocking_sex,
       bin_reader_sockaddr_blocking_s,
       bin_sockaddr_blocking_sexp,
       sexp_of_sockaddr_blocking_sexp,
       sockaddr_blocking_sexp_of_sexp,
       _tN_,
       socket,
       socketpair,
       accept,
       bind,
       connect,
       listen,
       sexp_of_shutdown_command,
       shutdown_command_of_sexp,
       shutdown,
       getsockname,
       getpeername,
       sexp_of_msg_flag,
       msg_flag_of_sexp,
       recv,
       recvfrom,
       send$0,
       send_substring,
       sendto,
       sendto_substring,
       sexp_of_socket_bool_option,
       socket_bool_option_of_sexp,
       sexp_of_socket_int_option,
       socket_int_option_of_sexp,
       sexp_of_socket_float_option,
       socket_float_option_of_sexp,
       _ui_,
       _uh_,
       _uk_,
       _uj_,
       _un_,
       _um_,
       getsockopt_float,
       setsockopt_float,
       open_connection,
       shutdown_connection,
       establish_server,
       _rm_,
       Host,
       Protocol,
       Service,
       sexp_of_addr_info,
       sexp_of_addr_info_blocking_sex,
       addr_info_blocking_sexp_of_sex,
       sexp_of_getaddrinfo_option,
       getaddrinfo_option_of_sexp,
       getaddrinfo,
       sexp_of_name_info,
       name_info_of_sexp,
       sexp_of_getnameinfo_option,
       getnameinfo_option_of_sexp,
       getnameinfo,
       Terminal_io,
       get_sockaddr,
       set_in_channel_timeout,
       set_out_channel_timeout,
       exit_immediately,
       mknod,
       IOVec,
       dirfd,
       sync$0,
       fsync,
       fdatasync,
       readdir_ino_opt,
       readdir_ino,
       read_assume_fd_is_nonblocking,
       write_assume_fd_is_nonblocking,
       writev_assume_fd_is_nonblockin,
       writev,
       pselect,
       RLimit,
       Resource_usage,
       sexp_of_sysconf,
       sysconf_of_sexp,
       sysconf,
       sysconf_exn,
       mkstemp,
       mkdtemp,
       abort,
       initgroups,
       getgrouplist,
       getgroups,
       fnmatch,
       wordexp,
       Utsname,
       uname,
       if_indextoname,
       mcast_join,
       mcast_leave,
       get_mcast_ttl,
       set_mcast_ttl,
       get_mcast_loop,
       set_mcast_loop,
       set_mcast_ifname,
       Scheduler,
       Priority,
       Mman,
       Ifaddr,
       getifaddrs,
       Stable];
    caml_register_global(3010,include$12,"Core__Core_unix");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Core_time_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$23);
    caml_call1(Expect_test_collector[4][1],cst_src_core_time_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$24,cst$23);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$25);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Core_time_intf$0);
    var Core_Core_time_intf=[0];
    caml_register_global(3011,Core_Core_time_intf,"Core__Core_time_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Core_time);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$26);
    caml_call1(Expect_test_collector[4][1],cst_src_core_time_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$27,cst$24);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$28);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Core_time$0);
    function _wA_(_Vb_,Time)
     {var
       _PK_=Time[13],
       _QL_=_PK_[65],
       _PL_=_PK_[1],
       _PM_=_PK_[2],
       _PN_=_PK_[3],
       _PO_=_PK_[4],
       _PP_=_PK_[5],
       _PQ_=_PK_[6],
       _PR_=_PK_[7],
       _PS_=_PK_[8],
       _PT_=_PK_[9],
       _PU_=_PK_[10],
       _PV_=_PK_[11],
       _PW_=_PK_[12],
       _PX_=_PK_[13],
       _PY_=_PK_[14],
       _PZ_=_PK_[15],
       _P0_=_PK_[16],
       _P1_=_PK_[17],
       _P2_=_PK_[18],
       _P3_=_PK_[19],
       _P4_=_PK_[20],
       _P5_=_PK_[21],
       _P6_=_PK_[22],
       _P7_=_PK_[23],
       _P8_=_PK_[24],
       _P9_=_PK_[25],
       _P__=_PK_[26],
       _P$_=_PK_[27],
       _Qa_=_PK_[28],
       _Qb_=_PK_[29],
       _Qc_=_PK_[30],
       _Qd_=_PK_[31],
       _Qe_=_PK_[32],
       _Qf_=_PK_[33],
       _Qg_=_PK_[34],
       _Qh_=_PK_[35],
       _Qi_=_PK_[36],
       _Qj_=_PK_[37],
       _Qk_=_PK_[38],
       _Ql_=_PK_[39],
       _Qm_=_PK_[40],
       _Qn_=_PK_[41],
       _Qo_=_PK_[42],
       _Qp_=_PK_[43],
       _Qq_=_PK_[44],
       _Qr_=_PK_[45],
       _Qs_=_PK_[46],
       _Qt_=_PK_[47],
       _Qu_=_PK_[48],
       _Qv_=_PK_[49],
       _Qw_=_PK_[50],
       _Qx_=_PK_[51],
       _Qy_=_PK_[52],
       _Qz_=_PK_[53],
       _QA_=_PK_[54],
       _QB_=_PK_[55],
       _QC_=_PK_[56],
       _QD_=_PK_[57],
       _QE_=_PK_[58],
       _QF_=_PK_[59],
       _QG_=_PK_[60],
       _QH_=_PK_[61],
       _QI_=_PK_[62],
       _QJ_=_PK_[63],
       _QK_=_PK_[64],
       _QM_=_PK_[66],
       _QN_=_PK_[67],
       _QO_=_PK_[68],
       _QP_=_PK_[69],
       _QQ_=_PK_[70],
       _QR_=_PK_[71],
       _QS_=_PK_[72],
       _QT_=_PK_[73],
       _QU_=_PK_[74],
       _QV_=_PK_[75],
       _QW_=_PK_[76],
       _QX_=_PK_[77],
       _QY_=_PK_[78],
       _QZ_=_PK_[79],
       _Q0_=_PK_[80],
       _Q1_=_PK_[81],
       _Q2_=_PK_[82],
       _Q3_=_PK_[83],
       _Q4_=_PK_[84],
       _Q5_=_PK_[85],
       _Q6_=_PK_[86],
       _Q7_=_PK_[87],
       _Q8_=_PK_[88],
       _Q9_=_PK_[89],
       _Q__=_PK_[90],
       _Q$_=_PK_[91],
       _Ra_=_PK_[92],
       _Rb_=_PK_[93],
       _Rc_=_PK_[94],
       _Rd_=_PK_[95],
       _Re_=_PK_[96],
       _Rf_=_PK_[97],
       _Rg_=_PK_[98],
       _Rh_=_PK_[99],
       _Ri_=_PK_[100],
       _Rj_=_PK_[101],
       _Rk_=_PK_[102],
       _Rl_=_PK_[103],
       _Rm_=_PK_[104],
       _Rn_=_PK_[105],
       _Ro_=_PK_[106],
       _Rp_=_PK_[107],
       _Rq_=_PK_[108],
       _Rr_=_PK_[109],
       arg_type=caml_call3(Core_kernel_Command[2][1],0,0,_QL_),
       Span=
        [0,
         _PL_,
         _PM_,
         _PN_,
         _PO_,
         _PP_,
         _PQ_,
         _PR_,
         _PS_,
         _PT_,
         _PU_,
         _PV_,
         _PW_,
         _PX_,
         _PY_,
         _PZ_,
         _P0_,
         _P1_,
         _P2_,
         _P3_,
         _P4_,
         _P5_,
         _P6_,
         _P7_,
         _P8_,
         _P9_,
         _P__,
         _P$_,
         _Qa_,
         _Qb_,
         _Qc_,
         _Qd_,
         _Qe_,
         _Qf_,
         _Qg_,
         _Qh_,
         _Qi_,
         _Qj_,
         _Qk_,
         _Ql_,
         _Qm_,
         _Qn_,
         _Qo_,
         _Qp_,
         _Qq_,
         _Qr_,
         _Qs_,
         _Qt_,
         _Qu_,
         _Qv_,
         _Qw_,
         _Qx_,
         _Qy_,
         _Qz_,
         _QA_,
         _QB_,
         _QC_,
         _QD_,
         _QE_,
         _QF_,
         _QG_,
         _QH_,
         _QI_,
         _QJ_,
         _QK_,
         _QL_,
         _QM_,
         _QN_,
         _QO_,
         _QP_,
         _QQ_,
         _QR_,
         _QS_,
         _QT_,
         _QU_,
         _QV_,
         _QW_,
         _QX_,
         _QY_,
         _QZ_,
         _Q0_,
         _Q1_,
         _Q2_,
         _Q3_,
         _Q4_,
         _Q5_,
         _Q6_,
         _Q7_,
         _Q8_,
         _Q9_,
         _Q__,
         _Q$_,
         _Ra_,
         _Rb_,
         _Rc_,
         _Rd_,
         _Re_,
         _Rf_,
         _Rg_,
         _Rh_,
         _Ri_,
         _Rj_,
         _Rk_,
         _Rl_,
         _Rm_,
         _Rn_,
         _Ro_,
         _Rp_,
         _Rq_,
         _Rr_,
         arg_type],
       _Rs_=Time[50],
       _So_=Timezone[31],
       _Rt_=_Rs_[3],
       _Ru_=_Rs_[4],
       _Rv_=_Rs_[5],
       _Rw_=_Rs_[6],
       _Rx_=_Rs_[7],
       _Ry_=_Rs_[8],
       _Rz_=_Rs_[9],
       _RA_=_Rs_[10],
       _RB_=_Rs_[11],
       _RC_=_Rs_[12],
       _RD_=_Rs_[13],
       _RE_=_Rs_[14],
       _RF_=_Rs_[15],
       _RG_=_Rs_[16],
       _RH_=_Rs_[17],
       _RI_=_Rs_[18],
       _RJ_=_Rs_[19],
       _RK_=_Rs_[20],
       _RL_=_Rs_[21],
       _RM_=_Rs_[22],
       _RN_=_Rs_[23],
       _RO_=_Rs_[24],
       _RP_=_Rs_[25],
       _RQ_=_Rs_[26],
       _RR_=Timezone[66],
       _RS_=Timezone[65],
       _RT_=Timezone[64],
       _RU_=Timezone[63],
       _RV_=Timezone[62],
       _RW_=Timezone[61],
       _RX_=Timezone[60],
       _RY_=Timezone[59],
       _RZ_=Timezone[58],
       _R0_=Timezone[57],
       _R1_=Timezone[56],
       _R2_=Timezone[55],
       _R3_=Timezone[54],
       _R4_=Timezone[53],
       _R5_=Timezone[52],
       _R6_=Timezone[51],
       _R7_=Timezone[50],
       _R8_=Timezone[49],
       _R9_=Timezone[48],
       _R__=Timezone[47],
       _R$_=Timezone[46],
       _Sa_=Timezone[45],
       _Sb_=Timezone[44],
       _Sc_=Timezone[43],
       _Sd_=Timezone[42],
       _Se_=Timezone[41],
       _Sf_=Timezone[40],
       _Sg_=Timezone[39],
       _Sh_=Timezone[38],
       _Si_=Timezone[37],
       _Sj_=Timezone[36],
       _Sk_=Timezone[35],
       _Sl_=Timezone[34],
       _Sm_=Timezone[33],
       _Sn_=Timezone[32],
       _Sp_=Timezone[30],
       _Sq_=Timezone[29],
       _Sr_=Timezone[28],
       _Ss_=Timezone[27],
       _St_=Timezone[26],
       _Su_=Timezone[25],
       _Sv_=Timezone[24],
       _Sw_=Timezone[23],
       _Sx_=Timezone[22],
       _Sy_=Timezone[21],
       arg_type$0=caml_call3(Core_kernel_Command[2][1],0,0,_So_),
       Zone=
        [0,
         _Rt_,
         _Ru_,
         _Rv_,
         _Rw_,
         _Rx_,
         _Ry_,
         _Rz_,
         _RA_,
         _RB_,
         _RC_,
         _RD_,
         _RE_,
         _RF_,
         _RG_,
         _RH_,
         _RI_,
         _RJ_,
         _RK_,
         _RL_,
         _RM_,
         _RN_,
         _RO_,
         _RP_,
         _RQ_,
         _Sy_,
         _Sx_,
         _Sw_,
         _Sv_,
         _Su_,
         _St_,
         _Ss_,
         _Sr_,
         _Sq_,
         _Sp_,
         _So_,
         _Sn_,
         _Sm_,
         _Sl_,
         _Sk_,
         _Sj_,
         _Si_,
         _Sh_,
         _Sg_,
         _Sf_,
         _Se_,
         _Sd_,
         _Sc_,
         _Sb_,
         _Sa_,
         _R$_,
         _R__,
         _R9_,
         _R8_,
         _R7_,
         _R6_,
         _R5_,
         _R4_,
         _R3_,
         _R2_,
         _R1_,
         _R0_,
         _RZ_,
         _RY_,
         _RX_,
         _RW_,
         _RV_,
         _RU_,
         _RT_,
         _RS_,
         _RR_,
         arg_type$0],
       _Sz_=Time[14],
       _Tp_=_Sz_[54],
       _Tr_=_Sz_[56],
       _TJ_=_Sz_[74],
       _TK_=_Sz_[75],
       _SA_=_Sz_[1],
       _SB_=_Sz_[2],
       _SC_=_Sz_[3],
       _SD_=_Sz_[4],
       _SE_=_Sz_[5],
       _SF_=_Sz_[6],
       _SG_=_Sz_[7],
       _SH_=_Sz_[8],
       _SI_=_Sz_[9],
       _SJ_=_Sz_[10],
       _SK_=_Sz_[11],
       _SL_=_Sz_[12],
       _SM_=_Sz_[13],
       _SN_=_Sz_[14],
       _SO_=_Sz_[15],
       _SP_=_Sz_[16],
       _SQ_=_Sz_[17],
       _SR_=_Sz_[18],
       _SS_=_Sz_[19],
       _ST_=_Sz_[20],
       _SU_=_Sz_[21],
       _SV_=_Sz_[22],
       _SW_=_Sz_[23],
       _SX_=_Sz_[24],
       _SY_=_Sz_[25],
       _SZ_=_Sz_[26],
       _S0_=_Sz_[27],
       _S1_=_Sz_[28],
       _S2_=_Sz_[29],
       _S3_=_Sz_[30],
       _S4_=_Sz_[31],
       _S5_=_Sz_[32],
       _S6_=_Sz_[33],
       _S7_=_Sz_[34],
       _S8_=_Sz_[35],
       _S9_=_Sz_[36],
       _S__=_Sz_[37],
       _S$_=_Sz_[38],
       _Ta_=_Sz_[39],
       _Tb_=_Sz_[40],
       _Tc_=_Sz_[41],
       _Td_=_Sz_[42],
       _Te_=_Sz_[43],
       _Tf_=_Sz_[44],
       _Tg_=_Sz_[45],
       _Th_=_Sz_[46],
       _Ti_=_Sz_[47],
       _Tj_=_Sz_[48],
       _Tk_=_Sz_[49],
       _Tl_=_Sz_[50],
       _Tm_=_Sz_[51],
       _Tn_=_Sz_[52],
       _To_=_Sz_[53],
       _Tq_=_Sz_[55],
       _Ts_=_Sz_[57],
       _Tt_=_Sz_[58],
       _Tu_=_Sz_[59],
       _Tv_=_Sz_[60],
       _Tw_=_Sz_[61],
       _Tx_=_Sz_[62],
       _Ty_=_Sz_[63],
       _Tz_=_Sz_[64],
       _TA_=_Sz_[65],
       _TB_=_Sz_[66],
       _TC_=_Sz_[67],
       _TD_=_Sz_[68],
       _TE_=_Sz_[69],
       _TF_=_Sz_[70],
       _TG_=_Sz_[71],
       _TH_=_Sz_[72],
       _TI_=_Sz_[73],
       _TL_=_Sz_[76],
       arg_type$1=caml_call3(Core_kernel_Command[2][1],0,0,_Tp_);
      function now(zone)
       {var _Wd_=caml_call1(Time[49],0);return caml_call2(Time[67],_Wd_,zone)}
      var
       _TM_=
        caml_call1
         (Bin_prot_Shape[8],
          [0,[0,cst_ofday,Time[14][5]],[0,[0,cst_zone,Zone[29]],0]]),
       _TN_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$11),0,_TM_],0],
       _TO_=caml_call1(Bin_prot_Shape[4][1],cst_src_core_time_ml_76_6),
       group=caml_call2(Bin_prot_Shape[6],_TO_,_TN_),
       _TP_=caml_call1(Bin_prot_Shape[2][1],cst_t$12),
       bin_shape_t=caml_call1(caml_call2(Bin_prot_Shape[14],group,_TP_),0);
      function bin_size_t(param)
       {var
         v2=param[2],
         v1=param[1],
         _Wb_=caml_call1(Time[14][1],v1),
         size=caml_call2(Bin_prot_Common[23],0,_Wb_),
         _Wc_=caml_call1(Zone[25],v2);
        return caml_call2(Bin_prot_Common[23],size,_Wc_)}
      function bin_write_t(buf,pos,param)
       {var v2=param[2],v1=param[1],pos$0=caml_call3(Time[14][2],buf,pos,v1);
        return caml_call3(Zone[26],buf,pos$0,v2)}
      var bin_writer_t=[0,bin_size_t,bin_write_t];
      function bin_read_t(buf,pos_ref,vint)
       {return caml_call2
                (Bin_prot_Common[19],
                 cst_src_core_time_ml_Make_Ofda,
                 pos_ref[1])}
      function bin_read_t$0(buf,pos_ref)
       {var
         v_ofday=caml_call2(Time[14][3],buf,pos_ref),
         v_zone=caml_call2(Zone[27],buf,pos_ref);
        return [0,v_ofday,v_zone]}
      var
       bin_reader_t=[0,bin_read_t$0,bin_read_t],
       bin_t=[0,bin_shape_t,bin_writer_t,bin_reader_t];
      function zone(r){return r[2]}
      function ofday(r){return r[1]}
      function compare(a_001,b_002)
       {if(caml_call2(Ppx_compare_lib[1],a_001,b_002))return 0;
        var n=caml_call2(Time[14][20],a_001[1],b_002[1]);
        return 0 === n?caml_call2(Zone[45],a_001[2],b_002[2]):n}
      function equal(a_003,b_004)
       {if(caml_call2(Ppx_compare_lib[1],a_003,b_004))return 1;
        var _Wa_=caml_call2(Time[14][19],a_003[1],b_004[1]);
        return _Wa_?caml_call2(Zone[44],a_003[2],b_004[2]):_Wa_}
      function hash_fold_t(hsv,arg)
       {var hsv$0=caml_call2(Time[14][35],hsv,arg[1]);
        return caml_call2(Zone[60],hsv$0,arg[2])}
      function hash(x)
       {var hsv=caml_call2(Base_Hash[11],0,0),_V$_=hash_fold_t(hsv,x);
        return caml_call1(Base_Hash[9],_V$_)}
      function sexp_of_t(t)
       {var
         v1$0=t[2],
         v0$0=t[1],
         v0=caml_call1(Time[14][10],v0$0),
         v1=caml_call1(Zone[34],v1$0);
        return [1,[0,v0,[0,v1,0]]]}
      function t_of_sexp(sexp)
       {var switch$0=0;
        if(1 === sexp[0])
         {var _V9_=sexp[1];
          if(_V9_)
           {var _V__=_V9_[2];
            if(_V__ && ! _V__[2])
             {var
               v1=_V__[1],
               v0=_V9_[1],
               v0$0=caml_call1(Time[14][9],v0),
               v1$0=caml_call1(Zone[33],v1),
               match=[0,v0$0,v1$0];
              switch$0 = 1}}}
        if(! switch$0)
         var match=caml_call3(Sexplib0_Sexp_conv_error[2],tp_loc$54,2,sexp);
        var zone=match[2],ofday=match[1];
        return [0,ofday,zone]}
      function to_time(t,date){return caml_call3(Time[62],t[2],date,t[1])}
      function create(ofday,zone){return [0,ofday,zone]}
      function create_local(ofday)
       {var
         _V6_=Zone[68],
         _V7_=caml_obj_tag(_V6_),
         _V8_=
          250 === _V7_
           ?_V6_[1]
           :246 === _V7_?caml_call1(CamlinternalLazy[2],_V6_):_V6_;
        return [0,ofday,_V8_]}
      function of_string(string)
       {var match=caml_call2(Core_kernel_String[56],string,32);
        if(match)
         {var _V4_=match[2];
          if(_V4_ && ! _V4_[2])
           {var zone=_V4_[1],ofday=match[1],_V5_=caml_call1(Zone[35],zone);
            return [0,caml_call1(Time[14][54],ofday),_V5_]}}
        return caml_call3(_cz_,_ws_,string,0)}
      function to_string(t)
       {var
         _V2_=[0,cst$25,[0,caml_call1(Zone[36],t[2]),0]],
         _V3_=[0,caml_call1(Time[14][55],t[1]),_V2_];
        return caml_call2(Core_kernel_String[26],0,_V3_)}
      var
       arg_type$2=caml_call3(Core_kernel_Command[2][1],0,0,of_string),
       _TQ_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$13),0,bin_shape_t],0],
       _TR_=caml_call1(Bin_prot_Shape[4][1],cst_src_core_time_ml_117_8),
       group$0=caml_call2(Bin_prot_Shape[6],_TR_,_TQ_),
       _TS_=caml_call1(Bin_prot_Shape[2][1],cst_t$14),
       bin_shape_t$0=caml_call1(caml_call2(Bin_prot_Shape[14],group$0,_TS_),0),
       bin_writer_t$0=[0,bin_size_t,bin_write_t],
       bin_reader_t$0=[0,bin_read_t$0,bin_read_t],
       bin_t$0=[0,bin_shape_t$0,bin_writer_t$0,bin_reader_t$0];
      function hash$0(x){return hash(x)}
      var
       include=caml_call1(Base_Pretty_printer[2],[0,module_name$0,to_string]),
       pp=include[1],
       _T1_=Time[76],
       _T6_=Time[69],
       _T8_=Time[67],
       _T$_=Time[64],
       _Ub_=Time[62],
       _Uq_=Time[46],
       _Uu_=Time[42],
       _UC_=Time[34],
       _UK_=Time[26],
       _UL_=Time[25],
       _U3_=Time[5],
       bin_read_t$1=Time[4],
       bin_read_t$2=Time[3],
       bin_write_t$0=Time[2],
       bin_size_t$0=Time[1],
       _TT_=Time[84],
       _TU_=Time[83],
       _TV_=Time[82],
       _TW_=Time[81],
       _TX_=Time[80],
       _TY_=Time[79],
       _TZ_=Time[78],
       _T0_=Time[77],
       _T2_=Time[75],
       _T3_=Time[74],
       _T4_=Time[71],
       _T5_=Time[70],
       _T7_=Time[68],
       _T9_=Time[66],
       _T__=Time[65],
       _Ua_=Time[63],
       _Uc_=Time[61],
       _Ud_=Time[60],
       _Ue_=Time[59],
       _Uf_=Time[58],
       _Ug_=Time[57],
       _Uh_=Time[56],
       _Ui_=Time[55],
       _Uj_=Time[54],
       _Uk_=Time[53],
       _Ul_=Time[52],
       _Um_=Time[51],
       _Un_=Time[49],
       _Uo_=Time[48],
       _Up_=Time[47],
       _Ur_=Time[45],
       _Us_=Time[44],
       _Ut_=Time[43],
       _Uv_=Time[41],
       _Uw_=Time[40],
       _Ux_=Time[39],
       _Uy_=Time[38],
       _Uz_=Time[37],
       _UA_=Time[36],
       _UB_=Time[35],
       _UD_=Time[33],
       _UE_=Time[32],
       _UF_=Time[31],
       _UG_=Time[30],
       _UH_=Time[29],
       _UI_=Time[28],
       _UJ_=Time[27],
       _UM_=Time[24],
       _UN_=Time[23],
       _UO_=Time[22],
       _UP_=Time[21],
       _UQ_=Time[20],
       _UR_=Time[19],
       _US_=Time[18],
       _UT_=Time[17],
       _UU_=Time[16],
       _UV_=Time[15],
       _UW_=Time[12],
       _UX_=Time[11],
       _UY_=Time[10],
       _UZ_=Time[9],
       _U0_=Time[8],
       _U1_=Time[7],
       _U2_=Time[6];
      function of_tm(tm,zone)
       {var
         tm_year=tm[6],
         tm_mon=tm[5],
         tm_mday=tm[4],
         tm_hour=tm[3],
         tm_min=tm[2],
         tm_sec=tm[1],
         _V1_=caml_call1(Core_kernel_Month[56],tm_mon + 1 | 0),
         date=caml_call3(include$13[44],tm_year + 1900 | 0,_V1_,tm_mday),
         ofday=caml_call7(_Tr_,[0,tm_hour],[0,tm_min],[0,tm_sec],0,0,0,0);
        return caml_call3(_Ub_,zone,date,ofday)}
      function of_date_ofday_zoned(date,ofday_zoned)
       {return to_time(ofday_zoned,date)}
      function to_date_ofday_zoned(t,zone)
       {var match=caml_call2(_T$_,t,zone),ofday=match[2],date=match[1];
        return [0,date,[0,ofday,zone]]}
      function to_ofday_zoned(t,zone)
       {var ofday=caml_call2(_T8_,t,zone);return [0,ofday,zone]}
      function of_string_fix_proto(utc,str)
       {try
         {var _VV_=caml_string_get(str,8),expect_length=21,expect_dash=8;
          if(caml_call2(Core_kernel_Char[43],_VV_,45))
           caml_call3(_cz_,_wu_,expect_dash,0);
          if(203307339 <= utc)
           var
            _VW_=Zone[68],
            _VX_=caml_obj_tag(_VW_),
            _VY_=
             250 === _VX_
              ?_VW_[1]
              :246 === _VX_?caml_call1(CamlinternalLazy[2],_VW_):_VW_,
            zone=_VY_;
          else
           var zone=Zone[4];
          if
           (caml_call2
             (Core_kernel_Int[108],caml_ml_string_length(str),expect_length))
           caml_call2(_cz_,_wv_,0);
          var
           _VZ_=caml_call3(_TJ_,[0,9],0,str),
           _V0_=caml_call3(_Ub_,zone,caml_call2(include$13[45],str,0),_VZ_);
          return _V0_}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          return caml_call4(_cF_,_wt_,str,caml_call1(Base_Exn[9],exn),0)}}
      function to_string_fix_proto(utc,t)
       {if(203307339 <= utc)
         var
          _VR_=Zone[68],
          _VS_=caml_obj_tag(_VR_),
          _VT_=
           250 === _VS_
            ?_VR_[1]
            :246 === _VS_?caml_call1(CamlinternalLazy[2],_VR_):_VR_,
          zone=_VT_;
        else
         var zone=Zone[4];
        var
         match=caml_call2(_T$_,t,zone),
         sec=match[2],
         date=match[1],
         _VU_=caml_call2(_n_,cst$26,caml_call1(_TK_,sec));
        return caml_call2(_n_,caml_call1(include$13[46],date),_VU_)}
      function format(t,s,zone)
       {var
         _VP_=caml_call2(Zone[22],zone,t),
         _VQ_=caml_call1(_Uq_[8],_VP_),
         epoch_time=caml_call1(Span[90],_VQ_);
        return runtime.core_time_ns_strftime
                (caml_call1(Caml_unix[100],epoch_time),s)}
      function parse(s,fmt,zone)
       {return of_tm(runtime.core_unix_strptime(fmt,s),zone)}
      function interruptible_pause(span)
       {var
         _VO_=caml_call2(Span[100],Span[72],100.),
         span$0=caml_call2(Span[22],span,_VO_),
         time_remaining=
          runtime.core_time_ns_nanosleep(caml_call1(Span[90],span$0));
        return caml_call2(Core_kernel_Float[124],time_remaining,0.)
                ?[0,-577460522,caml_call1(Span[80],time_remaining)]
                :17724}
      function pause(span)
       {var span$0=span;
        for(;;)
         {var match=interruptible_pause(span$0);
          if(typeof match === "number")return 0;
          var span$1=match[2],span$0=span$1;
          continue}}
      function pause_forever(param)
       {for(;;){pause(caml_call1(Span[86],1.));continue}}
      function to_string$0(t)
       {var
         _VL_=Zone[68],
         _VM_=caml_obj_tag(_VL_),
         _VN_=
          250 === _VM_
           ?_VL_[1]
           :246 === _VM_?caml_call1(CamlinternalLazy[2],_VL_):_VL_;
        return caml_call2(_T1_,t,_VN_)}
      function ensure_colon_in_offset(offset)
       {var _VH_=caml_string_get(offset,1);
        if(! caml_call2(Core_kernel_Char[40],_VH_,58))
         {var _VI_=caml_string_get(offset,2);
          if(! caml_call2(Core_kernel_Char[40],_VI_,58))
           {var offset_length=caml_ml_string_length(offset);
            if
             (!
              caml_call2(Core_kernel_Int[109],offset_length,3)
              &&
              !
              caml_call2(Core_kernel_Int[108],offset_length,4))
             {var
               _VJ_=
                [0,
                 cst$27,
                 [0,
                  caml_call3
                   (Core_kernel_String[87],
                    offset,
                    offset_length - 2 | 0,
                    offset_length),
                  0]],
               _VK_=
                [0,
                 caml_call3
                  (Core_kernel_String[87],offset,0,offset_length - 2 | 0),
                 _VJ_];
              return caml_call2(Core_kernel_String[26],0,_VK_)}
            return caml_call3(_cz_,_ww_,offset,0)}}
        return offset}
      var
       Time_string_not_absolute=
        [248,cst_Core_Core_time_Make_Time0_,caml_fresh_oo_id(0)];
      function _U4_(param)
       {if(param[1] === Time_string_not_absolute)
         {var v0=param[2],v0$0=caml_call1(_ge_,v0);
          return [1,[0,_wx_,[0,v0$0,0]]]}
        throw [0,Assert_failure,_wy_]}
      caml_call3(Sexplib0_Sexp_conv[51][2],0,Time_string_not_absolute,_U4_);
      function of_string_gen(if_no_timezone,s)
       {function default_zone(param)
         {if(typeof if_no_timezone === "number")
           {if(781116926 <= if_no_timezone)
             throw [0,Time_string_not_absolute,s];
            var _VF_=Zone[68],_VG_=caml_obj_tag(_VF_);
            return 250 === _VG_
                    ?_VF_[1]
                    :246 === _VG_?caml_call1(CamlinternalLazy[2],_VF_):_VF_}
          var zone=if_no_timezone[2];
          return zone}
        return caml_call3(_TV_,default_zone,Zone[67],s)}
      function of_string_abs(s){return of_string_gen(781116926,s)}
      function of_string$0(s){return of_string_gen(203307339,s)}
      var
       arg_type$3=caml_call3(Core_kernel_Command[2][1],0,0,of_string_abs),
       include$0=
        caml_call1(Base_Pretty_printer[2],[0,module_name$1,to_string$0]),
       sexp_zone=[0,Zone[68]],
       _U5_=include$0[1];
      function get_sexp_zone(param)
       {var _VD_=sexp_zone[1],_VE_=caml_obj_tag(_VD_);
        return 250 === _VE_
                ?_VD_[1]
                :246 === _VE_?caml_call1(CamlinternalLazy[2],_VD_):_VD_}
      function set_sexp_zone(zone){sexp_zone[1] = [250,zone];return 0}
      function t_of_sexp_gen(if_no_timezone,sexp)
       {try
         {if(0 === sexp[0])
           var datetime=sexp[1],_Vr_=of_string_gen(if_no_timezone,datetime);
          else
           {var _Vs_=sexp[1],switch$0=0;
            if(_Vs_)
             {var _Vt_=_Vs_[1];
              if(0 === _Vt_[0])
               {var _Vu_=_Vs_[2];
                if(_Vu_)
                 {var _Vv_=_Vu_[1],_Vw_=_Vt_[1];
                  if(0 === _Vv_[0])
                   {var _Vx_=_Vu_[2],_Vy_=_Vv_[1],switch$1=0;
                    if(_Vx_)
                     {var _Vz_=_Vx_[1];
                      if(0 === _Vz_[0] && ! _Vx_[2])
                       var
                        tz=_Vz_[1],
                        _VA_=caml_call1(_Tp_,_Vy_),
                        _VB_=caml_call1(include$13[19],_Vw_),
                        _VC_=caml_call3(_Ub_,caml_call1(Zone[67],tz),_VB_,_VA_);
                      else
                       switch$1 = 1}
                    else
                     var
                      _VC_=
                       of_string_gen
                        (if_no_timezone,
                         caml_call2(_n_,_Vw_,caml_call2(_n_,cst$28,_Vy_)));
                    if(! switch$1){var _Vr_=_VC_;switch$0 = 1}}}}}
            if(! switch$0)var _Vr_=caml_call2(_bk_,cst_Time_t_of_sexp,sexp)}
          return _Vr_}
        catch(e)
         {e = caml_wrap_exception(e);
          if(e[1] === _bj_)throw e;
          return caml_call2
                  (_bk_,caml_call2(_cV_,_wz_,caml_call1(Base_Exn[9],e)),sexp)}}
      function t_of_sexp$0(sexp)
       {var
         _Vo_=sexp_zone[1],
         _Vp_=caml_obj_tag(_Vo_),
         _Vq_=
          250 === _Vp_
           ?_Vo_[1]
           :246 === _Vp_?caml_call1(CamlinternalLazy[2],_Vo_):_Vo_;
        return t_of_sexp_gen([0,514999069,_Vq_],sexp)}
      function t_of_sexp_abs(sexp){return t_of_sexp_gen(781116926,sexp)}
      function sexp_of_t_abs(t,zone)
       {function _Vm_(s){return [0,s]}
        var _Vn_=caml_call2(Time[78],t,zone);
        return [1,caml_call2(Core_kernel_List[71],_Vn_,_Vm_)]}
      function sexp_of_t$0(t)
       {var
         _Vj_=sexp_zone[1],
         _Vk_=caml_obj_tag(_Vj_),
         _Vl_=
          250 === _Vk_
           ?_Vj_[1]
           :246 === _Vk_?caml_call1(CamlinternalLazy[2],_Vj_):_Vj_;
        return sexp_of_t_abs(t,_Vl_)}
      function sth(sexp)
       {function _Vh_(param)
         {var _Vi_=caml_call1(Core_kernel_Float[117],sexp);
          return caml_call1(_UK_,caml_call1(Span[80],_Vi_))}
        var match=caml_call1(Core_kernel_Option[57],_Vh_);
        if(match){var t=match[1];return t}
        return t_of_sexp$0(sexp)}
      var
       t_of_sexp$1=[0,sth]?sth:t_of_sexp$0,
       _U6_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$15),0,_U3_],0],
       _U7_=caml_call1(Bin_prot_Shape[4][1],cst_src_core_time_ml_316_8),
       group$1=caml_call2(Bin_prot_Shape[6],_U7_,_U6_),
       _U8_=caml_call1(Bin_prot_Shape[2][1],cst_t$16),
       bin_shape_t$1=caml_call1(caml_call2(Bin_prot_Shape[14],group$1,_U8_),0),
       bin_writer_t$1=[0,bin_size_t$0,bin_write_t$0],
       bin_reader_t$1=[0,bin_read_t$2,bin_read_t$1],
       bin_t$1=[0,bin_shape_t$1,bin_writer_t$1,bin_reader_t$1],
       Map=
        caml_call1
         (Core_kernel_Map[111],
          [0,
           bin_size_t$0,
           bin_write_t$0,
           bin_read_t$2,
           bin_read_t$1,
           bin_shape_t$1,
           bin_writer_t$1,
           bin_reader_t$1,
           bin_t$1,
           t_of_sexp$1,
           sexp_of_t$0,
           _Uu_]),
       Set=
        caml_call1
         (Core_kernel_Set[80],
          [0,
           bin_size_t$0,
           bin_write_t$0,
           bin_read_t$2,
           bin_read_t$1,
           bin_shape_t$1,
           bin_writer_t$1,
           bin_reader_t$1,
           bin_t$1,
           t_of_sexp$1,
           sexp_of_t$0,
           _Uu_]);
      function _U9_(param)
       {var
         _Vc_=caml_call1(_UL_,_T6_),
         _Vd_=caml_call1(Span[90],_Vc_),
         _Ve_=[1,[0,caml_call1(Core_kernel_Float[118],_Vd_),0]],
         _Vf_=caml_call1(Set[74],_Ve_),
         _Vg_=caml_call1(Set[58],[0,_T6_,0]);
        return caml_call2(Set[26],_Vg_,_Vf_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_Set_equal_Set_of_list_epoc,
        0,
        cst_src_core_time_ml$0,
        346,
        2,
        159,
        _U9_);
      var
       _U__=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$17),0,_U3_],0],
       _U$_=caml_call1(Bin_prot_Shape[4][1],cst_src_core_time_ml_354_6),
       group$2=caml_call2(Bin_prot_Shape[6],_U$_,_U__),
       _Va_=caml_call1(Bin_prot_Shape[2][1],cst_t$18),
       bin_shape_t$2=caml_call1(caml_call2(Bin_prot_Shape[14],group$2,_Va_),0),
       bin_writer_t$2=[0,bin_size_t$0,bin_write_t$0],
       bin_reader_t$2=[0,bin_read_t$2,bin_read_t$1],
       bin_t$2=[0,bin_shape_t$2,bin_writer_t$2,bin_reader_t$2];
      function hash$1(x){return caml_call1(_UY_,x)}
      var
       include$1=
        caml_call1
         (Core_kernel_Hashable[5],
          [0,
           _UZ_,
           bin_size_t$0,
           bin_write_t$0,
           bin_read_t$2,
           bin_read_t$1,
           bin_shape_t$2,
           bin_writer_t$2,
           bin_reader_t$2,
           bin_t$2,
           t_of_sexp$0,
           _UC_,
           sexp_of_t$0,
           hash$1]),
       hash_fold_t$0=include$1[1],
       hash$2=include$1[2],
       hashable=include$1[3],
       Table=include$1[4],
       Hash_set=include$1[5],
       Hash_queue=include$1[6],
       Exposed_for_tests=[0,ensure_colon_in_offset];
      return [0,
              Span,
              Zone,
              [0,
               _SA_,
               _SB_,
               _SC_,
               _SD_,
               _SE_,
               _SF_,
               _SG_,
               _SH_,
               _SI_,
               _SJ_,
               _SK_,
               _SL_,
               _SM_,
               _SN_,
               _SO_,
               _SP_,
               _SQ_,
               _SR_,
               _SS_,
               _ST_,
               _SU_,
               _SV_,
               _SW_,
               _SX_,
               _SY_,
               _SZ_,
               _S0_,
               _S1_,
               _S2_,
               _S3_,
               _S4_,
               _S5_,
               _S6_,
               _S7_,
               _S8_,
               _S9_,
               _S__,
               _S$_,
               _Ta_,
               _Tb_,
               _Tc_,
               _Td_,
               _Te_,
               _Tf_,
               _Tg_,
               _Th_,
               _Ti_,
               _Tj_,
               _Tk_,
               _Tl_,
               _Tm_,
               _Tn_,
               _To_,
               _Tp_,
               _Tq_,
               _Tr_,
               _Ts_,
               _Tt_,
               _Tu_,
               _Tv_,
               _Tw_,
               _Tx_,
               _Ty_,
               _Tz_,
               _TA_,
               _TB_,
               _TC_,
               _TD_,
               _TE_,
               _TF_,
               _TG_,
               _TH_,
               _TI_,
               _TJ_,
               _TK_,
               _TL_,
               arg_type$1,
               [0,
                bin_size_t,
                bin_write_t,
                bin_read_t$0,
                bin_read_t,
                bin_shape_t,
                bin_writer_t,
                bin_reader_t,
                bin_t,
                t_of_sexp,
                sexp_of_t,
                hash_fold_t,
                hash,
                pp,
                of_string,
                to_string,
                arg_type$2,
                create,
                create_local,
                ofday,
                zone,
                to_time,
                [0,
                 bin_size_t,
                 bin_write_t,
                 bin_read_t$0,
                 bin_read_t,
                 bin_shape_t$0,
                 bin_writer_t$0,
                 bin_reader_t$0,
                 bin_t$0,
                 t_of_sexp,
                 sexp_of_t,
                 compare,
                 equal,
                 hash_fold_t,
                 hash$0]],
               now],
              _UX_,
              _UW_,
              _UV_,
              _UN_,
              _UM_,
              _UL_,
              _UK_,
              _Uq_,
              _Up_,
              _Uo_,
              _Un_,
              _Um_,
              _Ul_,
              _Uk_,
              _Uj_,
              _Ui_,
              _Uh_,
              _Ug_,
              _Uf_,
              _Ue_,
              _Ud_,
              _Uc_,
              _Ub_,
              _Ua_,
              _T$_,
              _T__,
              _T9_,
              _T8_,
              _T7_,
              _T6_,
              _T5_,
              _T4_,
              _T3_,
              _T2_,
              _T1_,
              _T0_,
              _TZ_,
              _TY_,
              _TX_,
              _TW_,
              _TU_,
              _TT_,
              arg_type$3,
              bin_size_t$0,
              bin_write_t$0,
              bin_read_t$2,
              bin_read_t$1,
              _U3_,
              _U2_,
              _U1_,
              _U0_,
              t_of_sexp$0,
              sexp_of_t$0,
              of_string$0,
              to_string$0,
              _U5_,
              _UJ_,
              _UI_,
              _UH_,
              _UG_,
              _UF_,
              _UE_,
              _UD_,
              _UC_,
              _UB_,
              _UA_,
              _Uz_,
              _Uy_,
              _Ux_,
              _Uw_,
              _Uv_,
              _Ut_,
              _Us_,
              _Ur_,
              _Uu_,
              Map,
              Set,
              hash_fold_t$0,
              hash$2,
              hashable,
              Table,
              Hash_set,
              Hash_queue,
              get_sexp_zone,
              set_sexp_zone,
              _UU_,
              _UT_,
              _US_,
              _UR_,
              _UQ_,
              _UP_,
              _UO_,
              of_tm,
              of_date_ofday_zoned,
              to_date_ofday_zoned,
              to_ofday_zoned,
              to_string_fix_proto,
              of_string_fix_proto,
              of_string_abs,
              of_string_gen,
              t_of_sexp_abs,
              sexp_of_t_abs,
              pause,
              interruptible_pause,
              pause_forever,
              format,
              parse,
              Exposed_for_tests]}
    var Core_Core_time=[0,_wA_];
    caml_register_global(3018,Core_Core_time,"Core__Core_time");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Core_time_float);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$29);
    caml_call1(Expect_test_collector[4][1],cst_src_core_time_float_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$30,cst$29);
    var
     T=
      _wA_
       ([0,
         Core_kernel_Time_float[1],
         Core_kernel_Time_float[2],
         Core_kernel_Time_float[3],
         Core_kernel_Time_float[4],
         Core_kernel_Time_float[5],
         Core_kernel_Time_float[6],
         Core_kernel_Time_float[7],
         Core_kernel_Time_float[8],
         Core_kernel_Time_float[9],
         Core_kernel_Time_float[10],
         Core_kernel_Time_float[11],
         Core_kernel_Time_float[12],
         Core_kernel_Time_float[13],
         Core_kernel_Time_float[14],
         Core_kernel_Time_float[15],
         Core_kernel_Time_float[16],
         Core_kernel_Time_float[17],
         Core_kernel_Time_float[18],
         Core_kernel_Time_float[19],
         Core_kernel_Time_float[20],
         Core_kernel_Time_float[21],
         Core_kernel_Time_float[22],
         Core_kernel_Time_float[51],
         Core_kernel_Time_float[52],
         Core_kernel_Time_float[53],
         Core_kernel_Time_float[23],
         Core_kernel_Time_float[24],
         Core_kernel_Time_float[25],
         Core_kernel_Time_float[26],
         Core_kernel_Time_float[27],
         Core_kernel_Time_float[28],
         Core_kernel_Time_float[29],
         Core_kernel_Time_float[30],
         Core_kernel_Time_float[31],
         Core_kernel_Time_float[32],
         Core_kernel_Time_float[33],
         Core_kernel_Time_float[34],
         Core_kernel_Time_float[35],
         Core_kernel_Time_float[36],
         Core_kernel_Time_float[37],
         Core_kernel_Time_float[38],
         Core_kernel_Time_float[39],
         Core_kernel_Time_float[40],
         Core_kernel_Time_float[41],
         Core_kernel_Time_float[42],
         Core_kernel_Time_float[43],
         Core_kernel_Time_float[44],
         Core_kernel_Time_float[45],
         Core_kernel_Time_float[46],
         Core_kernel_Time_float[47],
         Core_kernel_Time_float[48],
         Core_kernel_Time_float[49]],
        [0,
         Core_kernel_Time_float[1],
         Core_kernel_Time_float[2],
         Core_kernel_Time_float[3],
         Core_kernel_Time_float[4],
         Core_kernel_Time_float[5],
         Core_kernel_Time_float[6],
         Core_kernel_Time_float[7],
         Core_kernel_Time_float[8],
         Core_kernel_Time_float[9],
         Core_kernel_Time_float[10],
         Core_kernel_Time_float[11],
         Core_kernel_Time_float[12],
         Core_kernel_Time_float[13],
         Core_kernel_Time_float[14],
         Core_kernel_Time_float[15],
         Core_kernel_Time_float[16],
         Core_kernel_Time_float[17],
         Core_kernel_Time_float[18],
         Core_kernel_Time_float[19],
         Core_kernel_Time_float[20],
         Core_kernel_Time_float[21],
         Core_kernel_Time_float[22],
         Core_kernel_Time_float[23],
         Core_kernel_Time_float[24],
         Core_kernel_Time_float[25],
         Core_kernel_Time_float[26],
         Core_kernel_Time_float[27],
         Core_kernel_Time_float[28],
         Core_kernel_Time_float[29],
         Core_kernel_Time_float[30],
         Core_kernel_Time_float[31],
         Core_kernel_Time_float[32],
         Core_kernel_Time_float[33],
         Core_kernel_Time_float[34],
         Core_kernel_Time_float[35],
         Core_kernel_Time_float[36],
         Core_kernel_Time_float[37],
         Core_kernel_Time_float[38],
         Core_kernel_Time_float[39],
         Core_kernel_Time_float[40],
         Core_kernel_Time_float[41],
         Core_kernel_Time_float[42],
         Core_kernel_Time_float[43],
         Core_kernel_Time_float[44],
         Core_kernel_Time_float[45],
         Core_kernel_Time_float[46],
         Core_kernel_Time_float[47],
         Core_kernel_Time_float[48],
         Core_kernel_Time_float[49],
         Core_kernel_Time_float[50],
         Core_kernel_Time_float[51],
         Core_kernel_Time_float[52],
         Core_kernel_Time_float[53],
         Core_kernel_Time_float[54],
         Core_kernel_Time_float[55],
         Core_kernel_Time_float[56],
         Core_kernel_Time_float[57],
         Core_kernel_Time_float[58],
         Core_kernel_Time_float[59],
         Core_kernel_Time_float[60],
         Core_kernel_Time_float[61],
         Core_kernel_Time_float[62],
         Core_kernel_Time_float[63],
         Core_kernel_Time_float[64],
         Core_kernel_Time_float[65],
         Core_kernel_Time_float[66],
         Core_kernel_Time_float[67],
         Core_kernel_Time_float[68],
         Core_kernel_Time_float[69],
         Core_kernel_Time_float[70],
         Core_kernel_Time_float[71],
         Core_kernel_Time_float[72],
         Core_kernel_Time_float[73],
         Core_kernel_Time_float[74],
         Core_kernel_Time_float[75],
         Core_kernel_Time_float[76],
         Core_kernel_Time_float[77],
         Core_kernel_Time_float[78],
         Core_kernel_Time_float[79],
         Core_kernel_Time_float[80],
         Core_kernel_Time_float[81],
         Core_kernel_Time_float[82],
         Core_kernel_Time_float[83],
         Core_kernel_Time_float[84]]),
     _wB_=Core_kernel_Time_float[5],
     _wC_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$19),0,_wB_],0],
     _wD_=caml_call1(Bin_prot_Shape[4][1],cst_src_core_time_float_ml_9_4),
     group$9=caml_call2(Bin_prot_Shape[6],_wD_,_wC_),
     _wE_=caml_call1(Bin_prot_Shape[2][1],cst_t$20),
     bin_shape_t$6=caml_call1(caml_call2(Bin_prot_Shape[14],group$9,_wE_),0),
     bin_size_t$3=Core_kernel_Time_float[1],
     bin_write_t$3=Core_kernel_Time_float[2],
     bin_writer_t$6=[0,bin_size_t$3,bin_write_t$3],
     bin_read_t$7=Core_kernel_Time_float[4],
     bin_read_t$8=Core_kernel_Time_float[3],
     bin_reader_t$6=[0,bin_read_t$8,bin_read_t$7],
     bin_t$6=[0,bin_shape_t$6,bin_writer_t$6,bin_reader_t$6],
     compare$15=Core_kernel_Time_float[34],
     hash_fold_t$3=Core_kernel_Time_float[9],
     func=Core_kernel_Time_float[10];
    function hash$4(x){return caml_call1(func,x)}
    var sexp_of_t$35=T[56];
    function t_of_sexp$25(sexp)
     {try
       {var float$0=caml_call1(Core_kernel_Float[117],sexp)}
      catch(_PJ_){return caml_call1(T[55],sexp)}
      var _PI_=caml_call1(Core_kernel_Time_float[13][80],float$0);
      return caml_call1(Core_kernel_Time_float[26],_PI_)}
    var
     include$14=
      caml_call1
       (Core_kernel_Hashable[5],
        [0,
         hash_fold_t$3,
         bin_size_t$3,
         bin_write_t$3,
         bin_read_t$8,
         bin_read_t$7,
         bin_shape_t$6,
         bin_writer_t$6,
         bin_reader_t$6,
         bin_t$6,
         t_of_sexp$25,
         compare$15,
         sexp_of_t$35,
         hash$4]),
     Table$1=include$14[4],
     Hash_set$1=include$14[5],
     Hash_queue$1=include$14[6],
     include$15=Core_kernel_Time_float[13],
     bin_size_t$4=include$15[1],
     bin_write_t$4=include$15[2],
     bin_read_t$9=include$15[3],
     bin_read_t$10=include$15[4],
     bin_shape_t$7=include$15[5],
     bin_writer_t$7=include$15[6],
     bin_reader_t$7=include$15[7],
     bin_t$7=include$15[8],
     t_of_sexp$26=include$15[9],
     sexp_of_t$36=include$15[10],
     typerep_of_t$0=include$15[11],
     typename_of_t$0=include$15[12],
     Parts=include$15[13],
     symbol$25=include$15[14],
     symbol$26=include$15[15],
     symbol$27=include$15[16],
     symbol$28=include$15[17],
     symbol$29=include$15[18],
     symbol$30=include$15[19],
     equal$4=include$15[20],
     compare$16=include$15[21],
     min$4=include$15[22],
     max$4=include$15[23],
     ascending$3=include$15[24],
     descending$3=include$15[25],
     between$3=include$15[26],
     clamp_exn$3=include$15[27],
     clamp$3=include$15[28],
     validate_lbound$3=include$15[29],
     validate_ubound$3=include$15[30],
     validate_bound$3=include$15[31],
     Replace_polymorphic_compare$3=include$15[32],
     comparator$6=include$15[33],
     Map$4=include$15[34],
     Set$4=include$15[35],
     validate_positive=include$15[36],
     validate_non_negative=include$15[37],
     validate_negative=include$15[38],
     validate_non_positive=include$15[39],
     is_positive=include$15[40],
     is_non_negative=include$15[41],
     is_negative=include$15[42],
     is_non_positive=include$15[43],
     sign=include$15[44],
     hash_fold_t$4=include$15[45],
     hash$5=include$15[46],
     hashable$1=include$15[47],
     Table$2=include$15[48],
     Hash_set$2=include$15[49],
     Hash_queue$2=include$15[50],
     pp=include$15[51],
     symbol$31=include$15[52],
     symbol$32=include$15[53],
     symbol$33=include$15[54],
     symbol$34=include$15[55],
     symbol$35=include$15[56],
     symbol$36=include$15[57],
     robustly_compare=include$15[58],
     quickcheck_generator=include$15[59],
     quickcheck_observer=include$15[60],
     quickcheck_shrinker=include$15[61],
     gen_incl=include$15[62],
     gen_uniform_incl=include$15[63],
     to_string$3=include$15[64],
     of_string$5=include$15[65],
     nanosecond=include$15[66],
     microsecond=include$15[67],
     millisecond=include$15[68],
     second=include$15[69],
     minute=include$15[70],
     hour=include$15[71],
     day=include$15[72],
     robust_comparison_tolerance=include$15[73],
     zero$0=include$15[74],
     create$3=include$15[75],
     to_parts=include$15[76],
     of_ns=include$15[77],
     of_us=include$15[78],
     of_ms=include$15[79],
     of_sec=include$15[80],
     of_int_sec=include$15[81],
     of_int32_seconds=include$15[82],
     of_int63_seconds=include$15[83],
     of_min=include$15[84],
     of_hr=include$15[85],
     of_day=include$15[86],
     to_ns=include$15[87],
     to_us=include$15[88],
     to_ms=include$15[89],
     to_sec=include$15[90],
     to_min=include$15[91],
     to_hr=include$15[92],
     to_day=include$15[93],
     to_int63_seconds_round_down_ex=include$15[94],
     to_proportional_float=include$15[95],
     symbol$37=include$15[96],
     symbol$38=include$15[97],
     abs=include$15[98],
     neg=include$15[99],
     scale=include$15[100],
     symbol$39=include$15[101],
     symbol$40=include$15[102],
     next=include$15[103],
     prev=include$15[104],
     to_short_string=include$15[105],
     to_unit_of_time=include$15[106],
     of_unit_of_time=include$15[107],
     to_string_hum$2=include$15[108],
     randomize=include$15[109],
     arg_type$2=T[1][110],
     Span=
      [0,
       bin_size_t$4,
       bin_write_t$4,
       bin_read_t$9,
       bin_read_t$10,
       bin_shape_t$7,
       bin_writer_t$7,
       bin_reader_t$7,
       bin_t$7,
       t_of_sexp$26,
       sexp_of_t$36,
       typerep_of_t$0,
       typename_of_t$0,
       Parts,
       symbol$25,
       symbol$26,
       symbol$27,
       symbol$28,
       symbol$29,
       symbol$30,
       equal$4,
       compare$16,
       min$4,
       max$4,
       ascending$3,
       descending$3,
       between$3,
       clamp_exn$3,
       clamp$3,
       validate_lbound$3,
       validate_ubound$3,
       validate_bound$3,
       Replace_polymorphic_compare$3,
       comparator$6,
       Map$4,
       Set$4,
       validate_positive,
       validate_non_negative,
       validate_negative,
       validate_non_positive,
       is_positive,
       is_non_negative,
       is_negative,
       is_non_positive,
       sign,
       hash_fold_t$4,
       hash$5,
       hashable$1,
       Table$2,
       Hash_set$2,
       Hash_queue$2,
       pp,
       symbol$31,
       symbol$32,
       symbol$33,
       symbol$34,
       symbol$35,
       symbol$36,
       robustly_compare,
       quickcheck_generator,
       quickcheck_observer,
       quickcheck_shrinker,
       gen_incl,
       gen_uniform_incl,
       to_string$3,
       of_string$5,
       nanosecond,
       microsecond,
       millisecond,
       second,
       minute,
       hour,
       day,
       robust_comparison_tolerance,
       zero$0,
       create$3,
       to_parts,
       of_ns,
       of_us,
       of_ms,
       of_sec,
       of_int_sec,
       of_int32_seconds,
       of_int63_seconds,
       of_min,
       of_hr,
       of_day,
       to_ns,
       to_us,
       to_ms,
       to_sec,
       to_min,
       to_hr,
       to_day,
       to_int63_seconds_round_down_ex,
       to_proportional_float,
       symbol$37,
       symbol$38,
       abs,
       neg,
       scale,
       symbol$39,
       symbol$40,
       next,
       prev,
       to_short_string,
       to_unit_of_time,
       of_unit_of_time,
       to_string_hum$2,
       randomize,
       arg_type$2],
     include$16=Core_kernel_Time_float[14],
     bin_size_t$5=include$16[1],
     bin_write_t$5=include$16[2],
     bin_read_t$11=include$16[3],
     bin_read_t$12=include$16[4],
     bin_shape_t$8=include$16[5],
     bin_writer_t$8=include$16[6],
     bin_reader_t$8=include$16[7],
     bin_t$8=include$16[8],
     t_of_sexp$27=include$16[9],
     sexp_of_t$37=include$16[10],
     typerep_of_t$1=include$16[11],
     typename_of_t$1=include$16[12],
     symbol$41=include$16[13],
     symbol$42=include$16[14],
     symbol$43=include$16[15],
     symbol$44=include$16[16],
     symbol$45=include$16[17],
     symbol$46=include$16[18],
     equal$5=include$16[19],
     compare$17=include$16[20],
     min$5=include$16[21],
     max$5=include$16[22],
     ascending$4=include$16[23],
     descending$4=include$16[24],
     between$4=include$16[25],
     clamp_exn$4=include$16[26],
     clamp$4=include$16[27],
     validate_lbound$4=include$16[28],
     validate_ubound$4=include$16[29],
     validate_bound$4=include$16[30],
     Replace_polymorphic_compare$4=include$16[31],
     comparator$7=include$16[32],
     Map$5=include$16[33],
     Set$5=include$16[34],
     hash_fold_t$5=include$16[35],
     hash$6=include$16[36],
     hashable$2=include$16[37],
     Table$3=include$16[38],
     Hash_set$3=include$16[39],
     Hash_queue$3=include$16[40],
     pp$0=include$16[41],
     symbol$47=include$16[42],
     symbol$48=include$16[43],
     symbol$49=include$16[44],
     symbol$50=include$16[45],
     symbol$51=include$16[46],
     symbol$52=include$16[47],
     robustly_compare$0=include$16[48],
     quickcheck_generator$0=include$16[49],
     quickcheck_observer$0=include$16[50],
     quickcheck_shrinker$0=include$16[51],
     gen_incl$0=include$16[52],
     gen_uniform_incl$0=include$16[53],
     of_string$6=include$16[54],
     to_string$4=include$16[55],
     create$4=include$16[56],
     to_parts$0=include$16[57],
     start_of_day=include$16[58],
     start_of_next_day=include$16[59],
     approximate_end_of_day=include$16[60],
     to_span_since_start_of_day=include$16[61],
     of_span_since_start_of_day_exn=include$16[62],
     of_span_since_start_of_day=include$16[63],
     span_since_start_of_day_is_val=include$16[64],
     of_span_since_start_of_day_unc=include$16[65],
     add$0=include$16[66],
     sub=include$16[67],
     next$0=include$16[68],
     prev$0=include$16[69],
     diff=include$16[70],
     small_diff=include$16[71],
     to_string_trimmed=include$16[72],
     to_sec_string=include$16[73],
     of_string_iso8601_extended=include$16[74],
     to_millisecond_string=include$16[75],
     to_millisec_string=include$16[76],
     now=T[3][79],
     arg_type$3=T[3][77],
     _wF_=T[2],
     arg_type$4=_wF_[71],
     init=_wF_[70],
     initialized_zones=_wF_[69],
     local=_wF_[68],
     find_exn=_wF_[67],
     find=_wF_[66],
     hashable$3=_wF_[62],
     hash$7=_wF_[61],
     hash_fold_t$6=_wF_[60],
     comparator$8=_wF_[57],
     validate_bound$5=_wF_[55],
     validate_ubound$5=_wF_[54],
     validate_lbound$5=_wF_[53],
     clamp$5=_wF_[52],
     clamp_exn$5=_wF_[51],
     between$5=_wF_[50],
     descending$5=_wF_[49],
     ascending$5=_wF_[48],
     max$6=_wF_[47],
     min$6=_wF_[46],
     equal$6=_wF_[44],
     symbol$53=_wF_[43],
     symbol$54=_wF_[42],
     symbol$55=_wF_[41],
     symbol$56=_wF_[40],
     symbol$57=_wF_[39],
     symbol$58=_wF_[38],
     pp$1=_wF_[37],
     to_string$5=_wF_[36],
     of_string$7=_wF_[35],
     t_of_sexp$28=_wF_[33],
     bin_t$9=_wF_[32],
     bin_reader_t$9=_wF_[31],
     bin_writer_t$9=_wF_[30],
     bin_shape_t$9=_wF_[29],
     bin_read_t$13=_wF_[28],
     bin_read_t$14=_wF_[27],
     bin_write_t$6=_wF_[26],
     bin_size_t$6=_wF_[25],
     include$17=Core_kernel_Time_float[50],
     sexp_of_t$38=include$17[1],
     compare$18=include$17[2],
     input_tz_file=include$17[3],
     likely_machine_zones=include$17[4],
     of_utc_offset=include$17[5],
     utc=include$17[6],
     name$3=include$17[7],
     original_filename=include$17[8],
     digest=include$17[9],
     reset_transition_cache=include$17[10],
     Index=include$17[11],
     index=include$17[12],
     index_of_date_and_ofday=include$17[13],
     index_offset_from_utc_exn=include$17[14],
     index_abbreviation_exn=include$17[15],
     index_has_prev_clock_shift=include$17[16],
     index_prev_clock_shift_time_ex=include$17[17],
     index_prev_clock_shift_amount_=include$17[18],
     index_has_next_clock_shift=include$17[19],
     index_next_clock_shift_time_ex=include$17[20],
     index_next_clock_shift_amount_=include$17[21],
     abbreviation=include$17[22],
     absolute_time_of_date_and_ofda=include$17[23],
     date_and_ofday_of_absolute_tim=include$17[24],
     next_clock_shift=include$17[25],
     prev_clock_shift=include$17[26],
     bin_size_t$7=T[47],
     bin_write_t$7=T[48],
     bin_read_t$15=T[49],
     bin_read_t$16=T[50],
     bin_shape_t$10=T[51],
     bin_writer_t$10=T[52],
     bin_reader_t$10=T[53],
     bin_t$10=T[54],
     t_of_sexp$29=T[55],
     sexp_of_t$39=T[56],
     compare$19=T[67],
     comparator$9=T[78],
     Map$6=T[79],
     Set$6=T[80],
     hash_fold_t$7=T[81],
     hash$8=T[82],
     t_of_sexp_abs=T[104],
     sexp_of_t_abs=T[105];
    function sexp_of_t$40(t){return caml_call2(sexp_of_t_abs,t,T[2][4])}
    var
     Map$7=
      caml_call1
       (Core_kernel_Map[111],
        [0,
         bin_size_t$7,
         bin_write_t$7,
         bin_read_t$15,
         bin_read_t$16,
         bin_shape_t$10,
         bin_writer_t$10,
         bin_reader_t$10,
         bin_t$10,
         t_of_sexp$29,
         sexp_of_t$40,
         comparator$9]),
     Set$7=
      caml_call1
       (Core_kernel_Set[80],
        [0,
         bin_size_t$7,
         bin_write_t$7,
         bin_read_t$15,
         bin_read_t$16,
         bin_shape_t$10,
         bin_writer_t$10,
         bin_reader_t$10,
         bin_t$10,
         t_of_sexp$29,
         sexp_of_t$40,
         comparator$9]),
     include$18=Core_kernel_Time_float[85][1][1],
     hash_fold_t$8=include$18[1],
     hash$9=include$18[2],
     bin_size_t$8=include$18[3],
     bin_write_t$8=include$18[4],
     bin_read_t$17=include$18[5],
     bin_read_t$18=include$18[6],
     bin_shape_t$11=include$18[7],
     bin_writer_t$11=include$18[8],
     bin_reader_t$11=include$18[9],
     bin_t$11=include$18[10],
     compare$20=include$18[11],
     t_of_sexp$30=include$18[12],
     sexp_of_t$41=include$18[13],
     comparator$10=T[78],
     include$19=
      caml_call1
       (Core_kernel_Comparable[21][1][1],
        [0,
         bin_size_t$8,
         bin_write_t$8,
         bin_read_t$17,
         bin_read_t$18,
         bin_shape_t$11,
         bin_writer_t$11,
         bin_reader_t$11,
         bin_t$11,
         compare$20,
         t_of_sexp$30,
         sexp_of_t$41,
         comparator$10]),
     Map$8=include$19[1],
     Set$8=include$19[2],
     include$20=Core_kernel_Ofday_float[77],
     V1=include$20[1],
     hash_fold_t$9=T[3][78][11],
     func$0=T[3][78][12];
    function hash$10(x){return caml_call1(func$0,x)}
    var
     _wG_=T[3][78][22][11],
     _wH_=
      caml_call1
       (Bin_prot_Shape[8],
        [0,
         [0,cst_ofday$0,Core_kernel_Ofday_float[77][1][5]],
         [0,[0,cst_zone$0,Timezone[67][1][5]],0]]),
     _wI_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$21),0,_wH_],0],
     _wJ_=caml_call1(Bin_prot_Shape[4][1],cst_src_core_time_float_ml_100),
     group$10=caml_call2(Bin_prot_Shape[6],_wJ_,_wI_),
     _wK_=caml_call1(Bin_prot_Shape[2][1],cst_t$22),
     bin_shape_t$12=caml_call1(caml_call2(Bin_prot_Shape[14],group$10,_wK_),0);
    function bin_size_t$9(param)
     {var
       v2=param[2],
       v1=param[1],
       _PG_=caml_call1(Core_kernel_Ofday_float[77][1][1],v1),
       size=caml_call2(Bin_prot_Common[23],0,_PG_),
       _PH_=caml_call1(Timezone[67][1][1],v2);
      return caml_call2(Bin_prot_Common[23],size,_PH_)}
    function bin_write_t$9(buf,pos,param)
     {var
       v2=param[2],
       v1=param[1],
       pos$0=caml_call3(Core_kernel_Ofday_float[77][1][2],buf,pos,v1);
      return caml_call3(Timezone[67][1][2],buf,pos$0,v2)}
    function bin_read_t$19(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_src_core_time_float_ml_Sta,pos_ref[1])}
    function bin_read_t$20(buf,pos_ref)
     {var
       v_ofday=caml_call2(Core_kernel_Ofday_float[77][1][3],buf,pos_ref),
       v_zone=caml_call2(Timezone[67][1][3],buf,pos_ref);
      return [0,v_ofday,v_zone]}
    function to_binable(t)
     {var _PF_=caml_call1(T[3][78][20],t);
      return [0,caml_call1(T[3][78][19],t),_PF_]}
    function of_binable(repr){return caml_call2(T[3][78][17],repr[1],repr[2])}
    var
     include$21=
      caml_call1
       (caml_call1
         (Core_kernel_Binable[6],
          [0,
           bin_shape_t$12,
           bin_size_t$9,
           bin_write_t$9,
           bin_read_t$20,
           bin_read_t$19]),
        [0,to_binable,of_binable]),
     bin_size_t$10=include$21[1],
     bin_write_t$10=include$21[2],
     bin_read_t$21=include$21[3],
     bin_read_t$22=include$21[4],
     bin_shape_t$13=include$21[5],
     bin_writer_t$12=include$21[6],
     bin_reader_t$12=include$21[7],
     bin_t$12=include$21[8];
    function sexp_of_t$42(t)
     {var
       v1$0=caml_call1(T[3][78][20],t),
       v0$0=caml_call1(T[3][78][19],t),
       v0=caml_call1(Core_kernel_Ofday_float[77][1][13],v0$0),
       v1=caml_call1(Timezone[67][1][13],v1$0);
      return [1,[0,v0,[0,v1,0]]]}
    function t_of_sexp$31(sexp)
     {var switch$0=0;
      if(1 === sexp[0])
       {var _PD_=sexp[1];
        if(_PD_)
         {var _PE_=_PD_[2];
          if(_PE_ && ! _PE_[2])
           {var
             v1=_PE_[1],
             v0=_PD_[1],
             v0$0=caml_call1(Core_kernel_Ofday_float[77][1][12],v0),
             v1$0=caml_call1(Timezone[67][1][12],v1),
             match=[0,v0$0,v1$0];
            switch$0 = 1}}}
      if(! switch$0)
       var match=caml_call3(Sexplib0_Sexp_conv_error[2],tp_loc$55,2,sexp);
      var zone=match[2],ofday=match[1];
      return caml_call2(T[3][78][17],ofday,zone)}
    var
     _wM_=T[109],
     _wT_=T[101],
     _wU_=T[100],
     _wZ_=T[88],
     _w0_=T[87],
     _w3_=T[56],
     _w4_=T[55],
     _w6_=Core_kernel_Time_float[84],
     _xn_=Core_kernel_Time_float[62],
     _xC_=Core_kernel_Time_float[45],
     _xD_=Core_kernel_Time_float[44],
     _xE_=Core_kernel_Time_float[43],
     _xF_=Core_kernel_Time_float[42],
     _xG_=Core_kernel_Time_float[41],
     _xH_=Core_kernel_Time_float[40],
     _xI_=Core_kernel_Time_float[39],
     _xJ_=Core_kernel_Time_float[38],
     _xK_=Core_kernel_Time_float[37],
     _xL_=Core_kernel_Time_float[36],
     _xM_=Core_kernel_Time_float[35],
     _xN_=Core_kernel_Time_float[34],
     _xO_=Core_kernel_Time_float[33],
     _xP_=Core_kernel_Time_float[32],
     _xQ_=Core_kernel_Time_float[31],
     _xR_=Core_kernel_Time_float[30],
     _xS_=Core_kernel_Time_float[29],
     _xT_=Core_kernel_Time_float[28],
     _xU_=Core_kernel_Time_float[27],
     _x8_=Core_kernel_Time_float[10],
     _x9_=Core_kernel_Time_float[9],
     _x__=Core_kernel_Time_float[8],
     _x$_=Core_kernel_Time_float[7],
     _ya_=Core_kernel_Time_float[6],
     _yb_=Core_kernel_Time_float[5],
     _yc_=Core_kernel_Time_float[4],
     _yd_=Core_kernel_Time_float[3],
     _ye_=Core_kernel_Time_float[2],
     _yf_=Core_kernel_Time_float[1],
     _wL_=T[110],
     _wN_=T[108],
     _wO_=T[107],
     _wP_=T[106],
     _wQ_=T[105],
     _wR_=T[104],
     _wS_=T[102],
     _wV_=T[99],
     _wW_=T[98],
     _wX_=T[97],
     _wY_=T[96],
     _w1_=T[83],
     _w2_=T[59],
     _w5_=T[46],
     _w7_=Core_kernel_Time_float[83],
     _w8_=Core_kernel_Time_float[81],
     _w9_=Core_kernel_Time_float[80],
     _w__=Core_kernel_Time_float[79],
     _w$_=Core_kernel_Time_float[78],
     _xa_=Core_kernel_Time_float[77],
     _xb_=Core_kernel_Time_float[76],
     _xc_=Core_kernel_Time_float[75],
     _xd_=Core_kernel_Time_float[74],
     _xe_=Core_kernel_Time_float[71],
     _xf_=Core_kernel_Time_float[70],
     _xg_=Core_kernel_Time_float[69],
     _xh_=Core_kernel_Time_float[68],
     _xi_=Core_kernel_Time_float[67],
     _xj_=Core_kernel_Time_float[66],
     _xk_=Core_kernel_Time_float[65],
     _xl_=Core_kernel_Time_float[64],
     _xm_=Core_kernel_Time_float[63],
     _xo_=Core_kernel_Time_float[61],
     _xp_=Core_kernel_Time_float[60],
     _xq_=Core_kernel_Time_float[59],
     _xr_=Core_kernel_Time_float[58],
     _xs_=Core_kernel_Time_float[57],
     _xt_=Core_kernel_Time_float[56],
     _xu_=Core_kernel_Time_float[55],
     _xv_=Core_kernel_Time_float[54],
     _xw_=Core_kernel_Time_float[53],
     _xx_=Core_kernel_Time_float[52],
     _xy_=Core_kernel_Time_float[51],
     _xz_=Core_kernel_Time_float[49],
     _xA_=Core_kernel_Time_float[48],
     _xB_=Core_kernel_Time_float[47],
     _xV_=Core_kernel_Time_float[26],
     _xW_=Core_kernel_Time_float[25],
     _xX_=Core_kernel_Time_float[24],
     _xY_=Core_kernel_Time_float[23],
     _xZ_=Core_kernel_Time_float[22],
     _x0_=Core_kernel_Time_float[21],
     _x1_=Core_kernel_Time_float[20],
     _x2_=Core_kernel_Time_float[19],
     _x3_=Core_kernel_Time_float[18],
     _x4_=Core_kernel_Time_float[17],
     _x5_=Core_kernel_Time_float[16],
     _x6_=Core_kernel_Time_float[12],
     _x7_=Core_kernel_Time_float[11],
     _yg_=T[58],
     _yh_=T[57],
     _yi_=T[103];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$31);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Core_time_float$0);
    var
     _yj_=Timezone[67],
     _yk_=_yj_[1],
     _yl_=Core_kernel_Span_float[110],
     _ym_=_yl_[3],
     _yn_=_yl_[2],
     _yo_=_yl_[1],
     _yp_=
      [0,
       [0,
        hash_fold_t$7,
        hash$8,
        bin_size_t$7,
        bin_write_t$7,
        bin_read_t$15,
        bin_read_t$16,
        bin_shape_t$10,
        bin_writer_t$10,
        bin_reader_t$10,
        bin_t$10,
        compare$19,
        t_of_sexp$29,
        sexp_of_t$39,
        comparator$9,
        [0,
         Map$6[103],
         Map$6[104],
         Map$6[105],
         Map$6[106],
         Map$6[107],
         Map$6[108],
         Map$6[109],
         Map$6[110],
         Map$6[3],
         Map$6[101],
         Map$6[102],
         Map$6[47]],
        [0,
         Set$6[76],
         Set$6[77],
         Set$6[78],
         Set$6[79],
         Set$6[80],
         Set$6[81],
         Set$6[82],
         Set$6[83],
         Set$6[3],
         Set$6[74],
         Set$6[75]]],
       [0,
        [0,
         bin_size_t$7,
         bin_write_t$7,
         bin_read_t$15,
         bin_read_t$16,
         bin_shape_t$10,
         bin_writer_t$10,
         bin_reader_t$10,
         bin_t$10,
         compare$19,
         t_of_sexp$29,
         sexp_of_t$40,
         comparator$9,
         [0,
          Map$7[103],
          Map$7[104],
          Map$7[105],
          Map$7[106],
          Map$7[107],
          Map$7[108],
          Map$7[109],
          Map$7[110],
          Map$7[3],
          Map$7[101],
          Map$7[102],
          Map$7[47]],
         [0,
          Set$7[76],
          Set$7[77],
          Set$7[78],
          Set$7[79],
          Set$7[80],
          Set$7[81],
          Set$7[82],
          Set$7[83],
          Set$7[3],
          Set$7[74],
          Set$7[75]]],
        [0,
         hash_fold_t$8,
         hash$9,
         bin_size_t$8,
         bin_write_t$8,
         bin_read_t$17,
         bin_read_t$18,
         bin_shape_t$11,
         bin_writer_t$11,
         bin_reader_t$11,
         bin_t$11,
         compare$20,
         t_of_sexp$30,
         sexp_of_t$41,
         comparator$10,
         Map$8,
         Set$8]],
       [0,
        [0,
         bin_size_t$7,
         bin_write_t$7,
         bin_read_t$15,
         bin_read_t$16,
         bin_shape_t$10,
         bin_writer_t$10,
         bin_reader_t$10,
         bin_t$10,
         compare$19,
         t_of_sexp_abs,
         sexp_of_t$39,
         comparator$9]],
       [0,
        [0,
         _yo_[12],
         _yo_[13],
         _yo_[3],
         _yo_[4],
         _yo_[5],
         _yo_[6],
         _yo_[7],
         _yo_[8],
         _yo_[9],
         _yo_[10],
         _yo_[11],
         _yo_[1],
         _yo_[2]],
        [0,
         _yn_[12],
         _yn_[13],
         _yn_[3],
         _yn_[4],
         _yn_[5],
         _yn_[6],
         _yn_[7],
         _yn_[8],
         _yn_[9],
         _yn_[10],
         _yn_[11],
         _yn_[1],
         _yn_[2]],
        [0,
         _ym_[12],
         _ym_[13],
         _ym_[3],
         _ym_[4],
         _ym_[5],
         _ym_[6],
         _ym_[7],
         _ym_[8],
         _ym_[9],
         _ym_[10],
         _ym_[11],
         _ym_[1],
         _ym_[2]]],
       [0,
        [0,
         V1[10],
         V1[11],
         V1[1],
         V1[2],
         V1[3],
         V1[4],
         V1[5],
         V1[6],
         V1[7],
         V1[8],
         V1[9],
         V1[12],
         V1[13]],
        [0,
         [0,
          hash_fold_t$9,
          hash$10,
          bin_size_t$10,
          bin_write_t$10,
          bin_read_t$21,
          bin_read_t$22,
          bin_shape_t$13,
          bin_writer_t$12,
          bin_reader_t$12,
          bin_t$12,
          _wG_,
          t_of_sexp$31,
          sexp_of_t$42]]],
       [0,
        [0,
         _yk_[1],
         _yk_[2],
         _yk_[3],
         _yk_[4],
         _yk_[5],
         _yk_[6],
         _yk_[7],
         _yk_[8],
         _yk_[9],
         _yk_[12],
         _yk_[13]],
        _yj_[2]]],
     _yq_=T[80],
     _yr_=T[79],
     _ys_=Core_kernel_Time_float[15],
     _yt_=
      [0,
       bin_size_t$5,
       bin_write_t$5,
       bin_read_t$11,
       bin_read_t$12,
       bin_shape_t$8,
       bin_writer_t$8,
       bin_reader_t$8,
       bin_t$8,
       t_of_sexp$27,
       sexp_of_t$37,
       typerep_of_t$1,
       typename_of_t$1,
       symbol$41,
       symbol$42,
       symbol$43,
       symbol$44,
       symbol$45,
       symbol$46,
       equal$5,
       compare$17,
       min$5,
       max$5,
       ascending$4,
       descending$4,
       between$4,
       clamp_exn$4,
       clamp$4,
       validate_lbound$4,
       validate_ubound$4,
       validate_bound$4,
       Replace_polymorphic_compare$4,
       comparator$7,
       Map$5,
       Set$5,
       hash_fold_t$5,
       hash$6,
       hashable$2,
       Table$3,
       Hash_set$3,
       Hash_queue$3,
       pp$0,
       symbol$47,
       symbol$48,
       symbol$49,
       symbol$50,
       symbol$51,
       symbol$52,
       robustly_compare$0,
       quickcheck_generator$0,
       quickcheck_observer$0,
       quickcheck_shrinker$0,
       gen_incl$0,
       gen_uniform_incl$0,
       of_string$6,
       to_string$4,
       create$4,
       to_parts$0,
       start_of_day,
       start_of_next_day,
       approximate_end_of_day,
       to_span_since_start_of_day,
       of_span_since_start_of_day_exn,
       of_span_since_start_of_day,
       span_since_start_of_day_is_val,
       of_span_since_start_of_day_unc,
       add$0,
       sub,
       next$0,
       prev$0,
       diff,
       small_diff,
       to_string_trimmed,
       to_sec_string,
       of_string_iso8601_extended,
       to_millisecond_string,
       to_millisec_string,
       arg_type$3,
       T[3][78],
       now],
     _yu_=
      [0,
       input_tz_file,
       likely_machine_zones,
       of_utc_offset,
       utc,
       name$3,
       original_filename,
       digest,
       reset_transition_cache,
       Index,
       index,
       index_of_date_and_ofday,
       index_offset_from_utc_exn,
       index_abbreviation_exn,
       index_has_prev_clock_shift,
       index_prev_clock_shift_time_ex,
       index_prev_clock_shift_amount_,
       index_has_next_clock_shift,
       index_next_clock_shift_time_ex,
       index_next_clock_shift_amount_,
       abbreviation,
       absolute_time_of_date_and_ofda,
       date_and_ofday_of_absolute_tim,
       next_clock_shift,
       prev_clock_shift,
       bin_size_t$6,
       bin_write_t$6,
       bin_read_t$14,
       bin_read_t$13,
       bin_shape_t$9,
       bin_writer_t$9,
       bin_reader_t$9,
       bin_t$9,
       t_of_sexp$28,
       sexp_of_t$38,
       of_string$7,
       to_string$5,
       pp$1,
       symbol$58,
       symbol$57,
       symbol$56,
       symbol$55,
       symbol$54,
       symbol$53,
       equal$6,
       compare$18,
       min$6,
       max$6,
       ascending$5,
       descending$5,
       between$5,
       clamp_exn$5,
       clamp$5,
       validate_lbound$5,
       validate_ubound$5,
       validate_bound$5,
       T[2][56],
       comparator$8,
       T[2][58],
       T[2][59],
       hash_fold_t$6,
       hash$7,
       hashable$3,
       T[2][63],
       T[2][64],
       T[2][65],
       find,
       find_exn,
       local,
       initialized_zones,
       init,
       arg_type$4],
     Core_Core_time_float=
      [0,
       Span,
       _yu_,
       _yt_,
       _x7_,
       _x6_,
       _ys_,
       _xY_,
       _xX_,
       _xW_,
       _xV_,
       Core_kernel_Time_float[46],
       _xB_,
       _xA_,
       _xz_,
       _xy_,
       _xx_,
       _xw_,
       _xv_,
       _xu_,
       _xt_,
       _xs_,
       _xr_,
       _xq_,
       _xp_,
       _xo_,
       _xn_,
       _xm_,
       _xl_,
       _xk_,
       _xj_,
       _xi_,
       _xh_,
       _xg_,
       _xf_,
       _xe_,
       _xd_,
       _xc_,
       _xb_,
       _xa_,
       _w$_,
       _w__,
       _w9_,
       _w8_,
       _w7_,
       _w6_,
       _w5_,
       _yf_,
       _ye_,
       _yd_,
       _yc_,
       _yb_,
       _ya_,
       _x$_,
       _x__,
       _w4_,
       _w3_,
       _yh_,
       _yg_,
       _w2_,
       _xU_,
       _xT_,
       _xS_,
       _xR_,
       _xQ_,
       _xP_,
       _xO_,
       _xN_,
       _xM_,
       _xL_,
       _xK_,
       _xJ_,
       _xI_,
       _xH_,
       _xG_,
       _xE_,
       _xD_,
       _xC_,
       _xF_,
       _yr_,
       _yq_,
       _x9_,
       _x8_,
       _w1_,
       Table$1,
       Hash_set$1,
       Hash_queue$1,
       _w0_,
       _wZ_,
       _x5_,
       _x4_,
       _x3_,
       _x2_,
       _x1_,
       _x0_,
       _xZ_,
       _wY_,
       _wX_,
       _wW_,
       _wV_,
       _wU_,
       _wT_,
       _wS_,
       _yi_,
       _wR_,
       _wQ_,
       _wP_,
       _wO_,
       _wN_,
       _wM_,
       _wL_,
       T[111],
       _yp_];
    caml_register_global(3022,Core_Core_time_float,"Core__Core_time_float");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Import_time);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$32);
    caml_call1(Expect_test_collector[4][1],cst_src_import_time_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$33,cst$30);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$34);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Import_time$0);
    var Core_Import_time=[0];
    caml_register_global(3023,Core_Import_time,"Core__Import_time");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Time_ns_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$35);
    caml_call1(Expect_test_collector[4][1],cst_src_time_ns_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$36,cst$31);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$37);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Time_ns_intf$0);
    var Core_Time_ns_intf=[0];
    caml_register_global(3024,Core_Time_ns_intf,"Core__Time_ns_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Time_common);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$38);
    caml_call1(Expect_test_collector[4][1],cst_src_time_common_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$39,cst$32);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$40);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Time_common$0);
    var Core_Time_common=[0];
    caml_register_global(3025,Core_Time_common,"Core__Time_common");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Core_time_ns);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$41);
    caml_call1(Expect_test_collector[4][1],cst_src_core_time_ns_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$42,cst$33);
    var
     arg_type$5=
      caml_call3(Core_kernel_Command[2][1],0,0,Core_kernel_Time_ns[1][65]),
     _yv_=Core_kernel_Time_ns[1][5],
     _yw_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$23),0,_yv_],0],
     _yx_=caml_call1(Bin_prot_Shape[4][1],cst_src_core_time_ns_ml_18_8),
     group$11=caml_call2(Bin_prot_Shape[6],_yx_,_yw_),
     _yy_=caml_call1(Bin_prot_Shape[2][1],cst_t$24),
     bin_shape_t$14=caml_call1(caml_call2(Bin_prot_Shape[14],group$11,_yy_),0),
     bin_size_t$11=Core_kernel_Time_ns[1][1],
     bin_write_t$11=Core_kernel_Time_ns[1][2],
     bin_writer_t$13=[0,bin_size_t$11,bin_write_t$11],
     bin_read_t$23=Core_kernel_Time_ns[1][4],
     bin_read_t$24=Core_kernel_Time_ns[1][3],
     bin_reader_t$13=[0,bin_read_t$24,bin_read_t$23],
     bin_t$13=[0,bin_shape_t$14,bin_writer_t$13,bin_reader_t$13],
     compare$21=Core_kernel_Time_ns[1][21],
     hash_fold_t$10=Core_kernel_Time_ns[1][45],
     func$1=Core_kernel_Time_ns[1][46];
    function hash$11(x){return caml_call1(func$1,x)}
    function sexp_of_t$43(t)
     {var _PC_=caml_call1(Core_kernel_Time_ns[1][133],t);
      return caml_call1(_yp_[4][1][13],_PC_)}
    function t_of_sexp$32(s)
     {var _PB_=caml_call1(_yp_[4][1][12],s);
      return caml_call1(Core_kernel_Time_ns[1][135],_PB_)}
    function of_int63_exn(t){return caml_call1(Core_kernel_Time_ns[1][126],t)}
    function to_int63(t){return caml_call1(Core_kernel_Time_ns[1][125],t)}
    var
     include$22=
      caml_call1(Core_kernel_Comparator[9][1][2],[0,compare$21,sexp_of_t$43]),
     comparator$11=include$22[1],
     include$23=Core_kernel_Time_ns[1],
     bin_size_t$12=include$23[1],
     bin_write_t$12=include$23[2],
     bin_read_t$25=include$23[3],
     bin_read_t$26=include$23[4],
     bin_shape_t$15=include$23[5],
     bin_writer_t$14=include$23[6],
     bin_reader_t$14=include$23[7],
     bin_t$14=include$23[8],
     t_of_sexp$33=include$23[9],
     sexp_of_t$44=include$23[10],
     typerep_of_t$2=include$23[11],
     typename_of_t$2=include$23[12],
     Parts$0=include$23[13],
     symbol$59=include$23[14],
     symbol$60=include$23[15],
     symbol$61=include$23[16],
     symbol$62=include$23[17],
     symbol$63=include$23[18],
     symbol$64=include$23[19],
     equal$7=include$23[20],
     compare$22=include$23[21],
     min$7=include$23[22],
     max$7=include$23[23],
     ascending$6=include$23[24],
     descending$6=include$23[25],
     between$6=include$23[26],
     clamp_exn$6=include$23[27],
     clamp$6=include$23[28],
     validate_lbound$6=include$23[29],
     validate_ubound$6=include$23[30],
     validate_bound$6=include$23[31],
     Replace_polymorphic_compare$5=include$23[32],
     comparator$12=include$23[33],
     Map$9=include$23[34],
     Set$9=include$23[35],
     validate_positive$0=include$23[36],
     validate_non_negative$0=include$23[37],
     validate_negative$0=include$23[38],
     validate_non_positive$0=include$23[39],
     is_positive$0=include$23[40],
     is_non_negative$0=include$23[41],
     is_negative$0=include$23[42],
     is_non_positive$0=include$23[43],
     sign$0=include$23[44],
     hash_fold_t$11=include$23[45],
     hashable$4=include$23[47],
     Table$4=include$23[48],
     Hash_set$4=include$23[49],
     Hash_queue$4=include$23[50],
     pp$2=include$23[51],
     symbol$65=include$23[52],
     symbol$66=include$23[53],
     symbol$67=include$23[54],
     symbol$68=include$23[55],
     symbol$69=include$23[56],
     symbol$70=include$23[57],
     robustly_compare$1=include$23[58],
     quickcheck_generator$1=include$23[59],
     quickcheck_observer$1=include$23[60],
     quickcheck_shrinker$1=include$23[61],
     gen_incl$1=include$23[62],
     gen_uniform_incl$1=include$23[63],
     to_string$6=include$23[64],
     of_string$8=include$23[65],
     nanosecond$0=include$23[66],
     microsecond$0=include$23[67],
     millisecond$0=include$23[68],
     second$0=include$23[69],
     minute$0=include$23[70],
     hour$0=include$23[71],
     day$0=include$23[72],
     robust_comparison_tolerance$0=include$23[73],
     zero$1=include$23[74],
     create$5=include$23[75],
     to_parts$1=include$23[76],
     of_ns$0=include$23[77],
     of_us$0=include$23[78],
     of_ms$0=include$23[79],
     of_sec$0=include$23[80],
     of_int_sec$0=include$23[81],
     of_int32_seconds$0=include$23[82],
     of_int63_seconds$0=include$23[83],
     of_min$0=include$23[84],
     of_hr$0=include$23[85],
     of_day$0=include$23[86],
     to_ns$0=include$23[87],
     to_us$0=include$23[88],
     to_ms$0=include$23[89],
     to_sec$0=include$23[90],
     to_min$0=include$23[91],
     to_hr$0=include$23[92],
     to_day$0=include$23[93],
     to_int63_seconds_round_down_ex$0=include$23[94],
     to_proportional_float$0=include$23[95],
     symbol$71=include$23[96],
     symbol$72=include$23[97],
     abs$0=include$23[98],
     neg$0=include$23[99],
     scale$0=include$23[100],
     symbol$73=include$23[101],
     symbol$74=include$23[102],
     next$1=include$23[103],
     prev$1=include$23[104],
     to_short_string$0=include$23[105],
     to_unit_of_time$0=include$23[106],
     of_unit_of_time$0=include$23[107],
     to_string_hum$3=include$23[108],
     randomize$0=include$23[109],
     of_sec_with_microsecond_precis=include$23[110],
     of_int_us=include$23[111],
     of_int_ms=include$23[112],
     to_int_us=include$23[113],
     to_int_ms=include$23[114],
     to_int_sec=include$23[115],
     min_value_representable=include$23[116],
     max_value_representable=include$23[117],
     min_value_for_1us_rounding=include$23[118],
     max_value_for_1us_rounding=include$23[119],
     min_value=include$23[120],
     max_value=include$23[121],
     scale_int=include$23[122],
     scale_int63=include$23[123],
     div=include$23[124],
     to_int63_ns=include$23[125],
     of_int63_ns=include$23[126],
     to_int_ns=include$23[127],
     of_int_ns=include$23[128],
     since_unix_epoch=include$23[129],
     random=include$23[130],
     to_span=include$23[131],
     of_span=include$23[132],
     to_span_float_round_nearest=include$23[133],
     to_span_float_round_nearest_mi=include$23[134],
     of_span_float_round_nearest=include$23[135],
     of_span_float_round_nearest_mi=include$23[136],
     Alternate_sexp=include$23[137];
    function hash$12(t)
     {var _PA_=caml_call1(Core_kernel_Time_ns[1][125],t);
      return caml_call1(Core_kernel_Int63[130],_PA_)}
    var
     _yz_=Core_kernel_Int63[98],
     _yA_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$25),0,_yz_],0],
     _yB_=caml_call1(Bin_prot_Shape[4][1],cst_src_core_time_ns_ml_43_4),
     group$12=caml_call2(Bin_prot_Shape[6],_yB_,_yA_),
     _yC_=caml_call1(Bin_prot_Shape[2][1],cst_t$26),
     bin_shape_t$16=caml_call1(caml_call2(Bin_prot_Shape[14],group$12,_yC_),0),
     bin_size_t$13=Core_kernel_Int63[94],
     bin_write_t$13=Core_kernel_Int63[95],
     bin_read_t$27=Core_kernel_Int63[97],
     bin_read_t$28=Core_kernel_Int63[96],
     compare$23=Core_kernel_Int63[114],
     hash_fold_t$12=Core_kernel_Int63[129],
     func$2=Core_kernel_Int63[130],
     Typename_of_t=caml_call1(Typerep_lib_Make_typename[1],[0,name$4]),
     typename_of_t$3=Typename_of_t[2],
     name_of_t=Typename_of_t[1],
     typerep_of_t$3=[9,[0,name_of_t,[0,Core_kernel_Int63[91]]]],
     _yD_=Core_kernel_Int63[64];
    function is_none(t){return caml_call2(Core_kernel_Int63[109],t,_yD_)}
    function is_some(t){return caml_call2(Core_kernel_Int63[112],t,_yD_)}
    function some_is_representable(span)
     {return is_some(caml_call1(to_int63_ns,span))}
    function some(span)
     {if(some_is_representable(span))return caml_call1(to_int63_ns,span);
      var
       _Py_=[0,[1,[0,_yE_,[0,caml_call1(sexp_of_t$44,span),0]]],0],
       _Pz_=
        [0,
         caml_call1(Sexplib0_Sexp_conv[7],cst_Span_Option_some_value_not),
         _Py_];
      return caml_call1
              (_cS_,
               [1,
                [0,
                 caml_call1
                  (Sexplib0_Sexp_conv[7],cst_src_core_time_ns_ml_51_24),
                 _Pz_]])}
    function value(t,default$0)
     {return is_none(t)?default$0:caml_call1(of_int63_ns,t)}
    function unchecked_value(t){return caml_call1(of_int63_ns,t)}
    function value_exn(t)
     {if(is_some(t))return unchecked_value(t);
      var
       _Px_=
        [0,caml_call1(Sexplib0_Sexp_conv[7],cst_Span_Option_value_exn_none),0];
      return caml_call1
              (_cS_,
               [1,
                [0,
                 caml_call1
                  (Sexplib0_Sexp_conv[7],cst_src_core_time_ns_ml_64_29),
                 _Px_]])}
    function of_option(param)
     {if(param){var t=param[1];return some(t)}return _yD_}
    function to_option(t){return is_none(t)?0:[0,caml_call1(of_int63_ns,t)]}
    var
     quickcheck_generator$2=
      caml_call2
       (Core_kernel_Quickcheck[1][60],
        quickcheck_generator$1,
        some_is_representable),
     quickcheck_shrinker$2=
      caml_call2
       (Base_quickcheck_Shrinker[28],
        quickcheck_shrinker$1,
        some_is_representable),
     quickcheck_generator$3=caml_call1(_a4_,quickcheck_generator$2),
     quickcheck_observer$2=caml_call1(_a6_,quickcheck_observer$1),
     quickcheck_shrinker$3=caml_call1(_a8_,quickcheck_shrinker$2),
     quickcheck_generator$4=
      caml_call2
       (Core_kernel_Quickcheck[1][10],quickcheck_generator$3,of_option),
     quickcheck_observer$3=
      caml_call2
       (Core_kernel_Quickcheck[2][18],quickcheck_observer$2,to_option),
     quickcheck_shrinker$4=
      caml_call3
       (Core_kernel_Quickcheck[3][6],
        quickcheck_shrinker$3,
        of_option,
        to_option),
     Optional_syntax=[0,is_none,unchecked_value],
     Optional_syntax$0=[0,Optional_syntax],
     _yF_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$27),0,bin_shape_t$16],0],
     _yG_=caml_call1(Bin_prot_Shape[4][1],cst_src_core_time_ns_ml_107_10),
     group$13=caml_call2(Bin_prot_Shape[6],_yG_,_yF_),
     _yH_=caml_call1(Bin_prot_Shape[2][1],cst_t$28),
     bin_shape_t$17=caml_call1(caml_call2(Bin_prot_Shape[14],group$13,_yH_),0),
     bin_writer_t$15=[0,bin_size_t$13,bin_write_t$13],
     bin_reader_t$15=[0,bin_read_t$28,bin_read_t$27],
     bin_t$15=[0,bin_shape_t$17,bin_writer_t$15,bin_reader_t$15];
    function sexp_of_t$45(t)
     {var _Pw_=to_option(t);
      return caml_call1(caml_call1(_fZ_,sexp_of_t$43),_Pw_)}
    function t_of_sexp$34(s)
     {return of_option(caml_call1(caml_call1(_f0_,t_of_sexp$32),s))}
    function of_int63_exn$0(i)
     {if(is_none(i))return _yD_;
      var span=caml_call1(of_int63_ns,i);
      if(some_is_representable(span))return caml_call1(to_int63_ns,span);
      throw [0,Assert_failure,_yI_]}
    function to_int63$0(t){return t}
    var
     include$24=
      caml_call1(Core_kernel_Comparator[9][1][2],[0,compare$23,sexp_of_t$45]),
     comparator$13=include$24[1],
     _yJ_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$29),0,bin_shape_t$16],0],
     _yK_=caml_call1(Bin_prot_Shape[4][1],cst_src_core_time_ns_ml_125_10),
     group$14=caml_call2(Bin_prot_Shape[6],_yK_,_yJ_),
     _yL_=caml_call1(Bin_prot_Shape[2][1],cst_t$30),
     bin_shape_t$18=caml_call1(caml_call2(Bin_prot_Shape[14],group$14,_yL_),0),
     bin_writer_t$16=[0,bin_size_t$13,bin_write_t$13],
     bin_reader_t$16=[0,bin_read_t$28,bin_read_t$27],
     bin_t$16=[0,bin_shape_t$18,bin_writer_t$16,bin_reader_t$16];
    function sexp_of_t$46(t)
     {if(is_none(t))
       var _Pu_=0;
      else
       var
        _Pv_=unchecked_value(t),
        _Pu_=[0,caml_call1(Core_kernel_Time_ns[87][2][1][13],_Pv_),0];
      return [1,_Pu_]}
    function t_of_sexp$35(sexp)
     {function fail(param)
       {return caml_call2(_bk_,cst_Time_ns_Span_Option_Stable,sexp)}
      if(0 === sexp[0])return fail(0);
      var list=sexp[1];
      if(list)
       {var _Pr_=list[1];
        if(0 === _Pr_[0] && ! list[2])
         {var x=_Pr_[1];
          try
           {var _Pt_=caml_call1(of_string$8,x),_Ps_=_Pt_}
          catch(exn)
           {exn = caml_wrap_exception(exn);
            var _Ps_=caml_call2(_bk_,caml_call1(Base_Exn[9],exn),sexp)}
          return some(_Ps_)}
        return fail(0)}
      return _yD_}
    function of_int63_exn$1(i){return i}
    function to_int63$1(t){return t}
    var
     include$25=
      caml_call1(Core_kernel_Comparator[9][1][2],[0,compare$23,sexp_of_t$46]),
     comparator$14=include$25[1],
     _yM_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$31),0,bin_shape_t$16],0],
     _yN_=caml_call1(Bin_prot_Shape[4][1],cst_src_core_time_ns_ml_156_8),
     group$15=caml_call2(Bin_prot_Shape[6],_yN_,_yM_),
     _yO_=caml_call1(Bin_prot_Shape[2][1],cst_t$32),
     bin_shape_t$19=caml_call1(caml_call2(Bin_prot_Shape[14],group$15,_yO_),0),
     bin_writer_t$17=[0,bin_size_t$13,bin_write_t$13],
     bin_reader_t$17=[0,bin_read_t$28,bin_read_t$27],
     bin_t$17=[0,bin_shape_t$19,bin_writer_t$17,bin_reader_t$17];
    function hash$13(x){return caml_call1(func$2,x)}
    var
     include$26=
      caml_call1(Core_kernel_Sexpable[1],[0,t_of_sexp$35,sexp_of_t$46]),
     of_string$9=include$26[1],
     to_string$7=include$26[2],
     _yP_=
      caml_call1
       (Core_kernel_Identifiable[2],
        [0,
         bin_size_t$13,
         bin_write_t$13,
         bin_read_t$28,
         bin_read_t$27,
         bin_shape_t$19,
         bin_writer_t$17,
         bin_reader_t$17,
         bin_t$17,
         compare$23,
         hash_fold_t$12,
         hash$13,
         t_of_sexp$35,
         sexp_of_t$46,
         of_string$9,
         to_string$7,
         module_name$2]),
     bin_size_t$14=_yP_[1],
     bin_write_t$14=_yP_[2],
     bin_read_t$29=_yP_[3],
     bin_read_t$30=_yP_[4],
     bin_shape_t$20=_yP_[5],
     bin_writer_t$18=_yP_[6],
     bin_reader_t$18=_yP_[7],
     bin_t$18=_yP_[8],
     t_of_sexp$36=_yP_[9],
     sexp_of_t$47=_yP_[10],
     of_string$10=_yP_[11],
     to_string$8=_yP_[12],
     pp$3=_yP_[13],
     ascending$7=_yP_[24],
     descending$7=_yP_[25],
     between$7=_yP_[26],
     clamp_exn$7=_yP_[27],
     clamp$7=_yP_[28],
     validate_lbound$7=_yP_[29],
     validate_ubound$7=_yP_[30],
     validate_bound$7=_yP_[31],
     Replace_polymorphic_compare$6=_yP_[32],
     comparator$15=_yP_[33],
     Map$10=_yP_[34],
     Set$10=_yP_[35],
     hash_fold_t$13=_yP_[36],
     func$3=_yP_[37],
     hashable$5=_yP_[38],
     Table$5=_yP_[39],
     Hash_set$5=_yP_[40],
     Hash_queue$5=_yP_[41],
     max$8=Core_kernel_Int63[116],
     min$8=Core_kernel_Int63[115],
     compare$24=Core_kernel_Int63[114],
     equal$8=Core_kernel_Int63[113],
     symbol$75=Core_kernel_Int63[112],
     symbol$76=Core_kernel_Int63[111],
     symbol$77=Core_kernel_Int63[110],
     symbol$78=Core_kernel_Int63[109],
     symbol$79=Core_kernel_Int63[108],
     symbol$80=Core_kernel_Int63[107],
     _yQ_=Core_kernel_Time_ns[85],
     _yS_=Core_kernel_Time_ns[83],
     _y2_=Core_kernel_Time_ns[73],
     _y3_=Core_kernel_Time_ns[72],
     _y4_=Core_kernel_Time_ns[71],
     _zb_=Core_kernel_Time_ns[62],
     _zj_=Core_kernel_Time_ns[54],
     _zr_=Core_kernel_Time_ns[46],
     _zx_=Core_kernel_Time_ns[38],
     _zA_=Core_kernel_Time_ns[35],
     _zC_=Core_kernel_Time_ns[33],
     compare$25=Core_kernel_Time_ns[22],
     bin_read_t$31=Core_kernel_Time_ns[10],
     bin_read_t$32=Core_kernel_Time_ns[9],
     bin_write_t$15=Core_kernel_Time_ns[8],
     bin_size_t$15=Core_kernel_Time_ns[7],
     hash_fold_t$14=Core_kernel_Time_ns[3],
     _yR_=Core_kernel_Time_ns[84],
     _yT_=Core_kernel_Time_ns[82],
     _yU_=Core_kernel_Time_ns[81],
     _yV_=Core_kernel_Time_ns[80],
     _yW_=Core_kernel_Time_ns[79],
     _yX_=Core_kernel_Time_ns[78],
     _yY_=Core_kernel_Time_ns[77],
     _yZ_=Core_kernel_Time_ns[76],
     _y0_=Core_kernel_Time_ns[75],
     _y1_=Core_kernel_Time_ns[74],
     _y5_=Core_kernel_Time_ns[70],
     _y6_=Core_kernel_Time_ns[69],
     _y7_=Core_kernel_Time_ns[68],
     _y8_=Core_kernel_Time_ns[67],
     _y9_=Core_kernel_Time_ns[66],
     _y__=Core_kernel_Time_ns[65],
     _y$_=Core_kernel_Time_ns[64],
     _za_=Core_kernel_Time_ns[63],
     _zc_=Core_kernel_Time_ns[61],
     _zd_=Core_kernel_Time_ns[60],
     _ze_=Core_kernel_Time_ns[59],
     _zf_=Core_kernel_Time_ns[58],
     _zg_=Core_kernel_Time_ns[57],
     _zh_=Core_kernel_Time_ns[56],
     _zi_=Core_kernel_Time_ns[55],
     _zk_=Core_kernel_Time_ns[53],
     _zl_=Core_kernel_Time_ns[52],
     _zm_=Core_kernel_Time_ns[51],
     _zn_=Core_kernel_Time_ns[50],
     _zo_=Core_kernel_Time_ns[49],
     _zp_=Core_kernel_Time_ns[48],
     _zq_=Core_kernel_Time_ns[47],
     _zs_=Core_kernel_Time_ns[45],
     _zt_=Core_kernel_Time_ns[44],
     _zu_=Core_kernel_Time_ns[41],
     _zv_=Core_kernel_Time_ns[40],
     _zw_=Core_kernel_Time_ns[39],
     _zy_=Core_kernel_Time_ns[37],
     _zz_=Core_kernel_Time_ns[36],
     _zB_=Core_kernel_Time_ns[34],
     _zD_=Core_kernel_Time_ns[32],
     _zE_=Core_kernel_Time_ns[31],
     _zF_=Core_kernel_Time_ns[30],
     _zG_=Core_kernel_Time_ns[29],
     _zH_=Core_kernel_Time_ns[28],
     _zI_=Core_kernel_Time_ns[27],
     _zJ_=Core_kernel_Time_ns[26],
     _zK_=Core_kernel_Time_ns[11],
     _zL_=Core_kernel_Time_ns[6],
     _zM_=Core_kernel_Time_ns[5],
     _zN_=Core_kernel_Time_ns[4];
    function interruptible_pause(t)
     {var
       t$0=caml_call2(min$7,t,caml_call2(scale$0,day$0,100.)),
       time_remaining=
        caml_call1
         (of_sec$0,runtime.core_time_ns_nanosleep(caml_call1(to_sec$0,t$0)));
      return caml_call2(symbol$62,time_remaining,zero$1)
              ?[0,-577460522,time_remaining]
              :17724}
    function pause$0(span)
     {var span$0=span;
      for(;;)
       {var match=interruptible_pause(span$0);
        if(typeof match === "number")return 0;
        var span$1=match[2],span$0=span$1;
        continue}}
    function pause_forever(param){for(;;){pause$0(day$0);continue}}
    function to_string$9(t)
     {var
       _Po_=_yu_[68],
       _Pp_=caml_obj_tag(_Po_),
       _Pq_=
        250 === _Pp_
         ?_Po_[1]
         :246 === _Pp_?caml_call1(CamlinternalLazy[2],_Po_):_Po_;
      return caml_call2(_zr_,t,_Pq_)}
    var
     Time_string_not_absolute=
      [248,cst_Core_Core_time_ns_Time_str,caml_fresh_oo_id(0)];
    function _zO_(param)
     {if(param[1] === Time_string_not_absolute)
       {var v0=param[2],v0$0=caml_call1(_ge_,v0);
        return [1,[0,_zP_,[0,v0$0,0]]]}
      throw [0,Assert_failure,_zQ_]}
    caml_call3(Sexplib0_Sexp_conv[51][2],0,Time_string_not_absolute,_zO_);
    function of_string_gen(if_no_timezone,s)
     {function default_zone(param)
       {if(typeof if_no_timezone === "number")
         {if(781116926 <= if_no_timezone)throw [0,Time_string_not_absolute,s];
          var _Pm_=_yu_[68],_Pn_=caml_obj_tag(_Pm_);
          return 250 === _Pn_
                  ?_Pm_[1]
                  :246 === _Pn_?caml_call1(CamlinternalLazy[2],_Pm_):_Pm_}
        var zone=if_no_timezone[2];
        return zone}
      return caml_call3(_zl_,default_zone,_yu_[67],s)}
    function of_string_abs(s){return of_string_gen(781116926,s)}
    function of_string$11(s){return of_string_gen(203307339,s)}
    var
     arg_type$6=caml_call3(Core_kernel_Command[2][1],0,0,of_string_abs),
     _zR_=Core_kernel_Time_ns[2],
     _AB_=_zR_[54],
     _AH_=_zR_[60],
     _AI_=_zR_[61],
     _AK_=_zR_[63],
     _AL_=_zR_[64],
     _zS_=_zR_[1],
     _zT_=_zR_[2],
     _zU_=_zR_[3],
     _zV_=_zR_[4],
     _zW_=_zR_[5],
     _zX_=_zR_[6],
     _zY_=_zR_[7],
     _zZ_=_zR_[8],
     _z0_=_zR_[9],
     _z1_=_zR_[10],
     _z2_=_zR_[11],
     _z3_=_zR_[12],
     _z4_=_zR_[13],
     _z5_=_zR_[14],
     _z6_=_zR_[15],
     _z7_=_zR_[16],
     _z8_=_zR_[17],
     _z9_=_zR_[18],
     _z__=_zR_[19],
     _z$_=_zR_[20],
     _Aa_=_zR_[21],
     _Ab_=_zR_[22],
     _Ac_=_zR_[23],
     _Ad_=_zR_[24],
     _Ae_=_zR_[25],
     _Af_=_zR_[26],
     _Ag_=_zR_[27],
     _Ah_=_zR_[28],
     _Ai_=_zR_[29],
     _Aj_=_zR_[30],
     _Ak_=_zR_[32],
     _Al_=_zR_[35],
     _Am_=_zR_[36],
     _An_=_zR_[37],
     _Ao_=_zR_[41],
     _Ap_=_zR_[42],
     _Aq_=_zR_[43],
     _Ar_=_zR_[44],
     _As_=_zR_[45],
     _At_=_zR_[46],
     _Au_=_zR_[47],
     _Av_=_zR_[48],
     _Aw_=_zR_[49],
     _Ax_=_zR_[50],
     _Ay_=_zR_[51],
     _Az_=_zR_[52],
     _AA_=_zR_[53],
     _AC_=_zR_[55],
     _AD_=_zR_[56],
     _AE_=_zR_[57],
     _AF_=_zR_[58],
     _AG_=_zR_[59],
     _AJ_=_zR_[62],
     _AM_=_zR_[65],
     _AN_=_zR_[66],
     _AO_=_zR_[67],
     _AP_=_zR_[68],
     _AQ_=_zR_[69],
     _AR_=_zR_[70],
     _AS_=_zR_[71],
     _AT_=_zR_[72],
     _AU_=_zR_[73],
     _AV_=_zR_[74],
     _AW_=_zR_[75],
     _AX_=_zR_[76],
     _AY_=_zR_[77],
     _AZ_=_zR_[78],
     _A0_=_zR_[79],
     arg_type$7=caml_call3(Core_kernel_Command[2][1],0,0,_AB_);
    function of_ofday(core)
     {return caml_call1
              (_AI_,
               caml_call1
                (of_span_float_round_nearest_mi,caml_call1(_yt_[61],core)))}
    function of_ofday_float_round_nearest(core)
     {return caml_call1
              (_AI_,
               caml_call1
                (of_span_float_round_nearest,caml_call1(_yt_[61],core)))}
    function to_ofday(t)
     {var _Pl_=caml_call1(to_span_float_round_nearest_mi,caml_call1(_AH_,t));
      return caml_call1(_yt_[62],_Pl_)}
    function to_ofday_float_round_nearest(t)
     {var _Pk_=caml_call1(to_span_float_round_nearest,caml_call1(_AH_,t));
      return caml_call1(_yt_[62],_Pk_)}
    function now$0(zone)
     {var time=caml_call1(_zb_,0);return caml_call2(_zx_,time,zone)}
    var
     _A1_=
      caml_call1
       (Bin_prot_Shape[8],
        [0,
         [0,cst_ofday$1,Core_kernel_Time_ns[2][5]],
         [0,[0,cst_zone$1,_yu_[29]],0]]),
     _A2_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$33),0,_A1_],0],
     _A3_=caml_call1(Bin_prot_Shape[4][1],cst_src_core_time_ns_ml_254_4),
     group$16=caml_call2(Bin_prot_Shape[6],_A3_,_A2_),
     _A4_=caml_call1(Bin_prot_Shape[2][1],cst_t$34),
     bin_shape_t$21=caml_call1(caml_call2(Bin_prot_Shape[14],group$16,_A4_),0);
    function bin_size_t$16(param)
     {var
       v2=param[2],
       v1=param[1],
       _Pi_=caml_call1(Core_kernel_Time_ns[2][1],v1),
       size=caml_call2(Bin_prot_Common[23],0,_Pi_),
       _Pj_=caml_call1(_yu_[25],v2);
      return caml_call2(Bin_prot_Common[23],size,_Pj_)}
    function bin_write_t$16(buf,pos,param)
     {var
       v2=param[2],
       v1=param[1],
       pos$0=caml_call3(Core_kernel_Time_ns[2][2],buf,pos,v1);
      return caml_call3(_yu_[26],buf,pos$0,v2)}
    var bin_writer_t$19=[0,bin_size_t$16,bin_write_t$16];
    function bin_read_t$33(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_src_core_time_ns_ml_Ofday_,pos_ref[1])}
    function bin_read_t$34(buf,pos_ref)
     {var
       v_ofday=caml_call2(Core_kernel_Time_ns[2][3],buf,pos_ref),
       v_zone=caml_call2(_yu_[27],buf,pos_ref);
      return [0,v_ofday,v_zone]}
    var
     bin_reader_t$19=[0,bin_read_t$34,bin_read_t$33],
     bin_t$19=[0,bin_shape_t$21,bin_writer_t$19,bin_reader_t$19];
    function zone(r){return r[2]}
    function ofday(r){return r[1]}
    function compare$26(a_011,b_012)
     {if(caml_call2(Ppx_compare_lib[1],a_011,b_012))return 0;
      var n=caml_call2(Core_kernel_Time_ns[2][20],a_011[1],b_012[1]);
      return 0 === n?caml_call2(_yu_[45],a_011[2],b_012[2]):n}
    function equal$9(a_013,b_014)
     {if(caml_call2(Ppx_compare_lib[1],a_013,b_014))return 1;
      var _Ph_=caml_call2(Core_kernel_Time_ns[2][19],a_013[1],b_014[1]);
      return _Ph_?caml_call2(_yu_[44],a_013[2],b_014[2]):_Ph_}
    function hash_fold_t$15(hsv,arg)
     {var hsv$0=caml_call2(Core_kernel_Time_ns[2][35],hsv,arg[1]);
      return caml_call2(_yu_[60],hsv$0,arg[2])}
    function hash$14(x)
     {var hsv=caml_call2(Base_Hash[11],0,0),_Pg_=hash_fold_t$15(hsv,x);
      return caml_call1(Base_Hash[9],_Pg_)}
    function sexp_of_t$48(t)
     {var
       v1$0=t[2],
       v0$0=t[1],
       v0=caml_call1(Core_kernel_Time_ns[2][10],v0$0),
       v1=caml_call1(_yu_[34],v1$0);
      return [1,[0,v0,[0,v1,0]]]}
    function t_of_sexp$37(sexp)
     {var switch$0=0;
      if(1 === sexp[0])
       {var _Pe_=sexp[1];
        if(_Pe_)
         {var _Pf_=_Pe_[2];
          if(_Pf_ && ! _Pf_[2])
           {var
             v1=_Pf_[1],
             v0=_Pe_[1],
             v0$0=caml_call1(Core_kernel_Time_ns[2][9],v0),
             v1$0=caml_call1(_yu_[33],v1),
             match=[0,v0$0,v1$0];
            switch$0 = 1}}}
      if(! switch$0)
       var match=caml_call3(Sexplib0_Sexp_conv_error[2],tp_loc$56,2,sexp);
      var zone=match[2],ofday=match[1];
      return [0,ofday,zone]}
    function to_time_ns(t,date){return caml_call3(_zC_,t[2],date,t[1])}
    function create$6(ofday,zone){return [0,ofday,zone]}
    function create_local(ofday)
     {var
       _Pb_=_yu_[68],
       _Pc_=caml_obj_tag(_Pb_),
       _Pd_=
        250 === _Pc_
         ?_Pb_[1]
         :246 === _Pc_?caml_call1(CamlinternalLazy[2],_Pb_):_Pb_;
      return [0,ofday,_Pd_]}
    function of_string$12(string)
     {var match=caml_call2(Core_kernel_String[56],string,32);
      if(match)
       {var _O$_=match[2];
        if(_O$_ && ! _O$_[2])
         {var zone=_O$_[1],ofday=match[1],_Pa_=caml_call1(_yu_[35],zone);
          return [0,caml_call1(Core_kernel_Time_ns[2][54],ofday),_Pa_]}}
      return caml_call3(_cz_,_A5_,string,0)}
    function to_string$10(t)
     {var
       _O9_=[0,cst$34,[0,caml_call1(_yu_[36],t[2]),0]],
       _O__=[0,caml_call1(Core_kernel_Time_ns[2][55],t[1]),_O9_];
      return caml_call2(Core_kernel_String[26],0,_O__)}
    var
     arg_type$8=caml_call3(Core_kernel_Command[2][1],0,0,of_string$12),
     _A6_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$35),0,bin_shape_t$21],0],
     _A7_=caml_call1(Bin_prot_Shape[4][1],cst_src_core_time_ns_ml_296_6),
     group$17=caml_call2(Bin_prot_Shape[6],_A7_,_A6_),
     _A8_=caml_call1(Bin_prot_Shape[2][1],cst_t$36),
     bin_shape_t$22=caml_call1(caml_call2(Bin_prot_Shape[14],group$17,_A8_),0),
     bin_writer_t$20=[0,bin_size_t$16,bin_write_t$16],
     bin_reader_t$20=[0,bin_read_t$34,bin_read_t$33],
     bin_t$20=[0,bin_shape_t$22,bin_writer_t$20,bin_reader_t$20];
    function hash$15(x){return hash$14(x)}
    var
     include$27=
      caml_call1(Base_Pretty_printer[2],[0,module_name$3,to_string$10]),
     pp$4=include$27[1];
    function hash$16(x){return hash$14(x)}
    var
     _A9_=
      caml_call1
       (Bin_prot_Shape[8],
        [0,
         [0,cst_ofday$2,Core_kernel_Time_ns[87][3][1][5]],
         [0,[0,cst_zone$2,Timezone[67][1][5]],0]]),
     _A__=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$37),0,_A9_],0],
     _A$_=caml_call1(Bin_prot_Shape[4][1],cst_src_core_time_ns_ml_312_10),
     group$18=caml_call2(Bin_prot_Shape[6],_A$_,_A__),
     _Ba_=caml_call1(Bin_prot_Shape[2][1],cst_t$38),
     bin_shape_t$23=caml_call1(caml_call2(Bin_prot_Shape[14],group$18,_Ba_),0);
    function bin_size_t$17(param)
     {var
       v2=param[2],
       v1=param[1],
       _O7_=caml_call1(Core_kernel_Time_ns[87][3][1][1],v1),
       size=caml_call2(Bin_prot_Common[23],0,_O7_),
       _O8_=caml_call1(Timezone[67][1][1],v2);
      return caml_call2(Bin_prot_Common[23],size,_O8_)}
    function bin_write_t$17(buf,pos,param)
     {var
       v2=param[2],
       v1=param[1],
       pos$0=caml_call3(Core_kernel_Time_ns[87][3][1][2],buf,pos,v1);
      return caml_call3(Timezone[67][1][2],buf,pos$0,v2)}
    function bin_read_t$35(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],
               cst_src_core_time_ns_ml_Ofday_$0,
               pos_ref[1])}
    function bin_read_t$36(buf,pos_ref)
     {var
       v_ofday=caml_call2(Core_kernel_Time_ns[87][3][1][3],buf,pos_ref),
       v_zone=caml_call2(Timezone[67][1][3],buf,pos_ref);
      return [0,v_ofday,v_zone]}
    function to_binable$0(t){return [0,t[1],t[2]]}
    function of_binable$0(repr){return [0,repr[1],repr[2]]}
    var
     include$28=
      caml_call1
       (caml_call1
         (Core_kernel_Binable[6],
          [0,
           bin_shape_t$23,
           bin_size_t$17,
           bin_write_t$17,
           bin_read_t$36,
           bin_read_t$35]),
        [0,to_binable$0,of_binable$0]),
     bin_size_t$18=include$28[1],
     bin_write_t$18=include$28[2],
     bin_read_t$37=include$28[3],
     bin_read_t$38=include$28[4],
     bin_shape_t$24=include$28[5],
     bin_writer_t$21=include$28[6],
     bin_reader_t$21=include$28[7],
     bin_t$21=include$28[8];
    function sexp_of_t$49(t)
     {var
       v1$0=t[2],
       v0$0=t[1],
       v0=caml_call1(Core_kernel_Time_ns[87][3][1][11],v0$0),
       v1=caml_call1(Timezone[67][1][13],v1$0);
      return [1,[0,v0,[0,v1,0]]]}
    function t_of_sexp$38(sexp)
     {var switch$0=0;
      if(1 === sexp[0])
       {var _O5_=sexp[1];
        if(_O5_)
         {var _O6_=_O5_[2];
          if(_O6_ && ! _O6_[2])
           {var
             v1=_O6_[1],
             v0=_O5_[1],
             v0$0=caml_call1(Core_kernel_Time_ns[87][3][1][10],v0),
             v1$0=caml_call1(Timezone[67][1][12],v1),
             match=[0,v0$0,v1$0];
            switch$0 = 1}}}
      if(! switch$0)
       var match=caml_call3(Sexplib0_Sexp_conv_error[2],tp_loc$57,2,sexp);
      var zone=match[2],ofday=match[1];
      return [0,ofday,zone]}
    var
     _Bb_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$39),0,bin_shape_t$20],0],
     _Bc_=caml_call1(Bin_prot_Shape[4][1],cst_src_core_time_ns_ml_343_4),
     group$19=caml_call2(Bin_prot_Shape[6],_Bc_,_Bb_),
     _Bd_=caml_call1(Bin_prot_Shape[2][1],cst_t$40),
     bin_shape_t$25=caml_call1(caml_call2(Bin_prot_Shape[14],group$19,_Bd_),0),
     Typename_of_t$0=caml_call1(Typerep_lib_Make_typename[1],[0,name$5]),
     typename_of_t$4=Typename_of_t$0[2],
     name_of_t$0=Typename_of_t$0[1],
     typerep_of_t$4=[9,[0,name_of_t$0,[0,typerep_of_t$3]]];
    function some$0(t){return some(caml_call1(_AH_,t))}
    function some_is_representable$0(t)
     {return some_is_representable(caml_call1(_AH_,t))}
    function value$0(t,default$0)
     {var match=is_some(t);
      return match?caml_call1(_AL_,unchecked_value(t)):default$0}
    function of_span_since_start_of_day$0(span)
     {return caml_call1(_AK_,span)?some(span):_yD_}
    function value_exn$0(t){return caml_call1(_AL_,value_exn(t))}
    function unchecked_value$0(t){return caml_call1(_AL_,unchecked_value(t))}
    function of_option$0(param)
     {if(param){var t=param[1];return some$0(t)}return _yD_}
    function to_option$0(t){return is_none(t)?0:[0,value_exn$0(t)]}
    var
     _Be_=
      caml_call2
       (Core_kernel_Quickcheck[1][60],
        Core_kernel_Time_ns[2][49],
        some_is_representable$0),
     _Bf_=caml_call1(Core_kernel_Option[61],_Be_),
     quickcheck_generator$5=
      caml_call2(Core_kernel_Quickcheck[1][10],_Bf_,of_option$0),
     _Bg_=
      caml_call2
       (Base_quickcheck_Shrinker[28],
        Core_kernel_Time_ns[2][51],
        some_is_representable$0),
     _Bh_=caml_call1(Core_kernel_Option[63],_Bg_),
     quickcheck_shrinker$5=
      caml_call3(Core_kernel_Quickcheck[3][6],_Bh_,of_option$0,to_option$0),
     Optional_syntax$1=[0,is_none,unchecked_value$0],
     Optional_syntax$2=[0,Optional_syntax$1],
     _Bi_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$41),0,bin_shape_t$25],0],
     _Bj_=caml_call1(Bin_prot_Shape[4][1],cst_src_core_time_ns_ml_405_10),
     group$20=caml_call2(Bin_prot_Shape[6],_Bj_,_Bi_),
     _Bk_=caml_call1(Bin_prot_Shape[2][1],cst_t$42),
     bin_shape_t$26=caml_call1(caml_call2(Bin_prot_Shape[14],group$20,_Bk_),0),
     bin_writer_t$22=[0,bin_size_t$14,bin_write_t$14],
     bin_reader_t$22=[0,bin_read_t$29,bin_read_t$30],
     bin_t$22=[0,bin_shape_t$26,bin_writer_t$22,bin_reader_t$22];
    function sexp_of_t$50(t)
     {var _O4_=to_option$0(t);
      return caml_call1
              (caml_call1(_fZ_,Core_kernel_Time_ns[87][3][1][11]),_O4_)}
    function t_of_sexp$39(s)
     {return of_option$0
              (caml_call1
                (caml_call1(_f0_,Core_kernel_Time_ns[87][3][1][10]),s))}
    function to_int63$2(t){return t}
    function of_int63_exn$2(t){return of_int63_exn$0(t)}
    var
     include$29=
      caml_call1(Core_kernel_Comparator[9][1][2],[0,compare$24,sexp_of_t$50]),
     comparator$16=include$29[1],
     _Bl_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$43),0,bin_shape_t$25],0],
     _Bm_=caml_call1(Bin_prot_Shape[4][1],cst_src_core_time_ns_ml_423_8),
     group$21=caml_call2(Bin_prot_Shape[6],_Bm_,_Bl_),
     _Bn_=caml_call1(Bin_prot_Shape[2][1],cst_t$44),
     bin_shape_t$27=caml_call1(caml_call2(Bin_prot_Shape[14],group$21,_Bn_),0),
     bin_writer_t$23=[0,bin_size_t$14,bin_write_t$14],
     bin_reader_t$23=[0,bin_read_t$29,bin_read_t$30],
     bin_t$23=[0,bin_shape_t$27,bin_writer_t$23,bin_reader_t$23];
    function hash$17(x){return caml_call1(func$3,x)}
    var
     include$30=
      caml_call1(Core_kernel_Sexpable[1],[0,t_of_sexp$39,sexp_of_t$50]),
     of_string$13=include$30[1],
     to_string$11=include$30[2],
     _Bo_=
      caml_call1
       (Core_kernel_Identifiable[2],
        [0,
         bin_size_t$14,
         bin_write_t$14,
         bin_read_t$29,
         bin_read_t$30,
         bin_shape_t$27,
         bin_writer_t$23,
         bin_reader_t$23,
         bin_t$23,
         compare$24,
         hash_fold_t$13,
         hash$17,
         t_of_sexp$39,
         sexp_of_t$50,
         of_string$13,
         to_string$11,
         module_name$4]),
     bin_size_t$19=_Bo_[1],
     bin_write_t$19=_Bo_[2],
     bin_read_t$39=_Bo_[3],
     bin_read_t$40=_Bo_[4],
     bin_shape_t$28=_Bo_[5],
     bin_writer_t$24=_Bo_[6],
     bin_reader_t$24=_Bo_[7],
     bin_t$24=_Bo_[8],
     t_of_sexp$40=_Bo_[9],
     sexp_of_t$51=_Bo_[10],
     of_string$14=_Bo_[11],
     to_string$12=_Bo_[12],
     pp$5=_Bo_[13],
     ascending$8=_Bo_[24],
     descending$8=_Bo_[25],
     between$8=_Bo_[26],
     clamp_exn$8=_Bo_[27],
     clamp$8=_Bo_[28],
     validate_lbound$8=_Bo_[29],
     validate_ubound$8=_Bo_[30],
     validate_bound$8=_Bo_[31],
     Replace_polymorphic_compare$7=_Bo_[32],
     comparator$17=_Bo_[33],
     Map$11=_Bo_[34],
     Set$11=_Bo_[35],
     hash_fold_t$16=_Bo_[36],
     hash$18=_Bo_[37],
     hashable$6=_Bo_[38],
     Table$6=_Bo_[39],
     Hash_set$6=_Bo_[40],
     Hash_queue$6=_Bo_[41];
    function t_of_sexp_gen(if_no_timezone,sexp)
     {try
       {if(0 === sexp[0])
         var datetime=sexp[1],_OS_=of_string_gen(if_no_timezone,datetime);
        else
         {var _OT_=sexp[1],switch$0=0;
          if(_OT_)
           {var _OU_=_OT_[1];
            if(0 === _OU_[0])
             {var _OV_=_OT_[2];
              if(_OV_)
               {var _OW_=_OV_[1],_OX_=_OU_[1];
                if(0 === _OW_[0])
                 {var _OY_=_OV_[2],_OZ_=_OW_[1],switch$1=0;
                  if(_OY_)
                   {var _O0_=_OY_[1];
                    if(0 === _O0_[0] && ! _OY_[2])
                     var
                      tz=_O0_[1],
                      _O1_=caml_call1(_AB_,_OZ_),
                      _O2_=caml_call1(include$13[19],_OX_),
                      _O3_=caml_call3(_zC_,caml_call1(_yu_[67],tz),_O2_,_O1_);
                    else
                     switch$1 = 1}
                  else
                   var
                    _O3_=
                     of_string_gen
                      (if_no_timezone,
                       caml_call2(_n_,_OX_,caml_call2(_n_,cst$35,_OZ_)));
                  if(! switch$1){var _OS_=_O3_;switch$0 = 1}}}}}
          if(! switch$0)var _OS_=caml_call2(_bk_,cst_Time_t_of_sexp$0,sexp)}
        return _OS_}
      catch(e)
       {e = caml_wrap_exception(e);
        if(e[1] === _bj_)throw e;
        return caml_call2
                (_bk_,caml_call2(_cV_,_Bp_,caml_call1(Base_Exn[9],e)),sexp)}}
    function t_of_sexp$41(sexp)
     {return t_of_sexp_gen([0,514999069,caml_call1(_w0_,0)],sexp)}
    function t_of_sexp_abs$0(sexp){return t_of_sexp_gen(781116926,sexp)}
    function sexp_of_t_abs$0(t,zone)
     {function _OQ_(s){return [0,s]}
      var _OR_=caml_call2(Core_kernel_Time_ns[48],t,zone);
      return [1,caml_call2(Core_kernel_List[71],_OR_,_OQ_)]}
    function sexp_of_t$52(t){return sexp_of_t_abs$0(t,caml_call1(_w0_,0))}
    function of_date_ofday_zoned(date,ofday_zoned)
     {return to_time_ns(ofday_zoned,date)}
    function to_date_ofday_zoned(t,zone)
     {var match=caml_call2(_zA_,t,zone),ofday=match[2],date=match[1];
      return [0,date,[0,ofday,zone]]}
    function to_ofday_zoned(t,zone)
     {var ofday=caml_call2(_zx_,t,zone);return [0,ofday,zone]}
    var
     _Bq_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$45),0,_zK_],0],
     _Br_=caml_call1(Bin_prot_Shape[4][1],cst_src_core_time_ns_ml_480_6),
     group$22=caml_call2(Bin_prot_Shape[6],_Br_,_Bq_),
     _Bs_=caml_call1(Bin_prot_Shape[2][1],cst_t$46),
     bin_shape_t$29=caml_call1(caml_call2(Bin_prot_Shape[14],group$22,_Bs_),0),
     bin_writer_t$25=[0,bin_size_t$15,bin_write_t$15],
     bin_reader_t$25=[0,bin_read_t$32,bin_read_t$31],
     bin_t$25=[0,bin_shape_t$29,bin_writer_t$25,bin_reader_t$25];
    function hash$19(x){return caml_call1(_zN_,x)}
    function of_int63_exn$3(t)
     {return caml_call1(_y3_,caml_call1(of_int63_ns,t))}
    function to_int63$3(t){return caml_call1(_y2_,t)}
    var
     Comparator=
      caml_call1(Core_kernel_Comparator[9][1][2],[0,compare$25,sexp_of_t$52]),
     comparator$18=Comparator[1],
     include$31=
      caml_call1
       (Core_kernel_Comparable[21][1][1],
        [0,
         bin_size_t$15,
         bin_write_t$15,
         bin_read_t$32,
         bin_read_t$31,
         bin_shape_t$29,
         bin_writer_t$25,
         bin_reader_t$25,
         bin_t$25,
         compare$25,
         t_of_sexp$41,
         sexp_of_t$52,
         comparator$18]),
     Map$12=include$31[1],
     Set$12=include$31[2],
     _Bt_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$47),0,bin_shape_t$20],0],
     _Bu_=caml_call1(Bin_prot_Shape[4][1],cst_src_core_time_ns_ml_499_2),
     group$23=caml_call2(Bin_prot_Shape[6],_Bu_,_Bt_),
     _Bv_=caml_call1(Bin_prot_Shape[2][1],cst_t$48),
     bin_shape_t$30=caml_call1(caml_call2(Bin_prot_Shape[14],group$23,_Bv_),0),
     Typename_of_t$1=caml_call1(Typerep_lib_Make_typename[1],[0,name$6]),
     typename_of_t$5=Typename_of_t$1[2],
     name_of_t$1=Typename_of_t$1[1],
     typerep_of_t$5=[9,[0,name_of_t$1,[0,typerep_of_t$3]]];
    function some$1(time){return some(caml_call1(_y4_,time))}
    function some_is_representable$1(time)
     {return some_is_representable(caml_call1(_y4_,time))}
    function value$1(t,default$0)
     {return caml_call1(_y3_,value(t,caml_call1(_y4_,default$0)))}
    function value_exn$1(t){return caml_call1(_y3_,value_exn(t))}
    function unchecked_value$1(t){return caml_call1(_y3_,unchecked_value(t))}
    function of_option$1(param)
     {if(param){var t=param[1];return some$1(t)}return _yD_}
    function to_option$1(t){return is_none(t)?0:[0,value_exn$1(t)]}
    var
     Optional_syntax$3=[0,is_none,unchecked_value$1],
     Optional_syntax$4=[0,Optional_syntax$3],
     _Bw_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$49),0,bin_shape_t$30],0],
     _Bx_=caml_call1(Bin_prot_Shape[4][1],cst_src_core_time_ns_ml_527_8),
     group$24=caml_call2(Bin_prot_Shape[6],_Bx_,_Bw_),
     _By_=caml_call1(Bin_prot_Shape[2][1],cst_t$50),
     bin_shape_t$31=caml_call1(caml_call2(Bin_prot_Shape[14],group$24,_By_),0),
     bin_writer_t$26=[0,bin_size_t$14,bin_write_t$14],
     bin_reader_t$26=[0,bin_read_t$29,bin_read_t$30],
     bin_t$26=[0,bin_shape_t$31,bin_writer_t$26,bin_reader_t$26];
    function sexp_of_t$53(t)
     {var _OP_=to_option$1(t);
      return caml_call1(caml_call1(_fZ_,sexp_of_t$52),_OP_)}
    function t_of_sexp$42(s)
     {return of_option$1(caml_call1(caml_call1(_f0_,t_of_sexp$41),s))}
    function to_int63$4(t){return t}
    function of_int63_exn$4(t){return of_int63_exn$0(t)}
    var
     include$32=
      caml_call1(Core_kernel_Comparator[9][1][2],[0,compare$24,sexp_of_t$53]),
     comparator$19=include$32[1],
     _Bz_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$51),0,bin_shape_t$30],0],
     _BA_=caml_call1(Bin_prot_Shape[4][1],cst_src_core_time_ns_ml_544_6),
     group$25=caml_call2(Bin_prot_Shape[6],_BA_,_Bz_),
     _BB_=caml_call1(Bin_prot_Shape[2][1],cst_t$52),
     bin_shape_t$32=caml_call1(caml_call2(Bin_prot_Shape[14],group$25,_BB_),0),
     bin_writer_t$27=[0,bin_size_t$14,bin_write_t$14],
     bin_reader_t$27=[0,bin_read_t$29,bin_read_t$30],
     bin_t$27=[0,bin_shape_t$32,bin_writer_t$27,bin_reader_t$27];
    function hash$20(x){return caml_call1(func$3,x)}
    var
     include$33=
      caml_call1(Core_kernel_Sexpable[1],[0,t_of_sexp$42,sexp_of_t$53]),
     of_string$15=include$33[1],
     to_string$13=include$33[2],
     _BC_=
      caml_call1
       (Core_kernel_Identifiable[2],
        [0,
         bin_size_t$14,
         bin_write_t$14,
         bin_read_t$29,
         bin_read_t$30,
         bin_shape_t$32,
         bin_writer_t$27,
         bin_reader_t$27,
         bin_t$27,
         compare$24,
         hash_fold_t$13,
         hash$20,
         t_of_sexp$42,
         sexp_of_t$53,
         of_string$15,
         to_string$13,
         module_name$5]),
     bin_size_t$20=_BC_[1],
     bin_write_t$20=_BC_[2],
     bin_read_t$41=_BC_[3],
     bin_read_t$42=_BC_[4],
     bin_shape_t$33=_BC_[5],
     bin_writer_t$28=_BC_[6],
     bin_reader_t$28=_BC_[7],
     bin_t$28=_BC_[8],
     t_of_sexp$43=_BC_[9],
     sexp_of_t$54=_BC_[10],
     of_string$16=_BC_[11],
     to_string$14=_BC_[12],
     pp$6=_BC_[13],
     ascending$9=_BC_[24],
     descending$9=_BC_[25],
     between$9=_BC_[26],
     clamp_exn$9=_BC_[27],
     clamp$9=_BC_[28],
     validate_lbound$9=_BC_[29],
     validate_ubound$9=_BC_[30],
     validate_bound$9=_BC_[31],
     Replace_polymorphic_compare$8=_BC_[32],
     comparator$20=_BC_[33],
     Map$13=_BC_[34],
     Set$13=_BC_[35],
     hash_fold_t$17=_BC_[36],
     hash$21=_BC_[37],
     hashable$7=_BC_[38],
     Table$7=_BC_[39],
     Hash_set$7=_BC_[40],
     Hash_queue$7=_BC_[41];
    function to_string_fix_proto(zone,t)
     {return caml_call2(_wU_,zone,caml_call1(_yS_,t))}
    function of_string_fix_proto(zone,s)
     {return caml_call1(_yQ_,caml_call2(_wT_,zone,s))}
    var
     _BD_=
      caml_call1
       (Core_kernel_Identifiable[4],
        [0,
         bin_size_t$15,
         bin_write_t$15,
         bin_read_t$32,
         bin_read_t$31,
         bin_shape_t$29,
         bin_writer_t$25,
         bin_reader_t$25,
         bin_t$25,
         compare$25,
         hash_fold_t$14,
         hash$19,
         t_of_sexp$41,
         sexp_of_t$52,
         comparator$18,
         of_string$11,
         to_string$9,
         module_name$6]),
     bin_size_t$21=_BD_[1],
     bin_write_t$21=_BD_[2],
     bin_read_t$43=_BD_[3],
     bin_read_t$44=_BD_[4],
     bin_shape_t$34=_BD_[5],
     bin_writer_t$29=_BD_[6],
     bin_reader_t$29=_BD_[7],
     bin_t$29=_BD_[8],
     t_of_sexp$44=_BD_[9],
     sexp_of_t$55=_BD_[10],
     of_string$17=_BD_[11],
     to_string$15=_BD_[12],
     pp$7=_BD_[13],
     ascending$10=_BD_[24],
     descending$10=_BD_[25],
     between$10=_BD_[26],
     clamp_exn$10=_BD_[27],
     clamp$10=_BD_[28],
     validate_lbound$10=_BD_[29],
     validate_ubound$10=_BD_[30],
     validate_bound$10=_BD_[31],
     Replace_polymorphic_compare$9=_BD_[32],
     comparator$21=_BD_[33],
     Map$14=_BD_[34],
     Set$14=_BD_[35],
     hash_fold_t$18=_BD_[36],
     hash$22=_BD_[37],
     hashable$8=_BD_[38],
     Table$8=_BD_[39],
     Hash_set$8=_BD_[40],
     Hash_queue$8=_BD_[41],
     max$9=Core_kernel_Time_ns[24],
     min$9=Core_kernel_Time_ns[23],
     compare$27=Core_kernel_Time_ns[22],
     equal$10=Core_kernel_Time_ns[21],
     symbol$81=Core_kernel_Time_ns[20],
     symbol$82=Core_kernel_Time_ns[19],
     symbol$83=Core_kernel_Time_ns[18],
     symbol$84=Core_kernel_Time_ns[17],
     symbol$85=Core_kernel_Time_ns[16],
     symbol$86=Core_kernel_Time_ns[15],
     include$34=Core_kernel_Time_ns[87][3],
     V1$0=include$34[1];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$43);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Core_time_ns$0);
    var
     _BE_=
      [0,
       [0,
        bin_size_t$15,
        bin_write_t$15,
        bin_read_t$32,
        bin_read_t$31,
        bin_shape_t$29,
        bin_writer_t$25,
        bin_reader_t$25,
        bin_t$25,
        compare$25,
        t_of_sexp$41,
        sexp_of_t$52,
        comparator$18,
        to_int63$3,
        of_int63_exn$3,
        Map$12,
        Set$12],
       Core_kernel_Time_ns[87][1],
       [0,
        [0,
         bin_size_t$14,
         bin_write_t$14,
         bin_read_t$29,
         bin_read_t$30,
         bin_shape_t$31,
         bin_writer_t$26,
         bin_reader_t$26,
         bin_t$26,
         compare$24,
         t_of_sexp$42,
         sexp_of_t$53,
         comparator$19,
         to_int63$4,
         of_int63_exn$4]],
       [0,
        [0,
         hash_fold_t$10,
         hash$11,
         bin_size_t$11,
         bin_write_t$11,
         bin_read_t$24,
         bin_read_t$23,
         bin_shape_t$14,
         bin_writer_t$13,
         bin_reader_t$13,
         bin_t$13,
         compare$21,
         t_of_sexp$32,
         sexp_of_t$43,
         comparator$11,
         to_int63,
         of_int63_exn],
        Core_kernel_Time_ns[87][2][1],
        [0,
         [0,
          bin_size_t$13,
          bin_write_t$13,
          bin_read_t$28,
          bin_read_t$27,
          bin_shape_t$17,
          bin_writer_t$15,
          bin_reader_t$15,
          bin_t$15,
          compare$23,
          t_of_sexp$34,
          sexp_of_t$45,
          comparator$13,
          to_int63$0,
          of_int63_exn$0],
         [0,
          bin_size_t$13,
          bin_write_t$13,
          bin_read_t$28,
          bin_read_t$27,
          bin_shape_t$18,
          bin_writer_t$16,
          bin_reader_t$16,
          bin_t$16,
          compare$23,
          t_of_sexp$35,
          sexp_of_t$46,
          comparator$14,
          to_int63$1,
          of_int63_exn$1]]],
       [0,
        V1$0,
        [0,
         [0,
          hash_fold_t$15,
          hash$16,
          bin_size_t$18,
          bin_write_t$18,
          bin_read_t$37,
          bin_read_t$38,
          bin_shape_t$24,
          bin_writer_t$21,
          bin_reader_t$21,
          bin_t$21,
          compare$26,
          t_of_sexp$38,
          sexp_of_t$49]],
        [0,
         [0,
          bin_size_t$14,
          bin_write_t$14,
          bin_read_t$29,
          bin_read_t$30,
          bin_shape_t$26,
          bin_writer_t$22,
          bin_reader_t$22,
          bin_t$22,
          compare$24,
          t_of_sexp$39,
          sexp_of_t$50,
          comparator$16,
          to_int63$2,
          of_int63_exn$2]]]],
     _BF_=
      [0,
       _zS_,
       _zT_,
       _zU_,
       _zV_,
       _zW_,
       _zX_,
       _zY_,
       _zZ_,
       _z0_,
       _z1_,
       _z2_,
       _z3_,
       _z4_,
       _z5_,
       _z6_,
       _z7_,
       _z8_,
       _z9_,
       _z__,
       _z$_,
       _Aa_,
       _Ab_,
       _Ac_,
       _Ad_,
       _Ae_,
       _Af_,
       _Ag_,
       _Ah_,
       _Ai_,
       _Aj_,
       _Ak_,
       _Al_,
       _Am_,
       _An_,
       _Ao_,
       _Ap_,
       _Aq_,
       _Ar_,
       _As_,
       _At_,
       _Au_,
       _Av_,
       _Aw_,
       _Ax_,
       _Ay_,
       _Az_,
       _AA_,
       _AB_,
       _AC_,
       _AD_,
       _AE_,
       _AF_,
       _AG_,
       _AH_,
       _AI_,
       _AJ_,
       _AK_,
       _AL_,
       _AM_,
       _AN_,
       _AO_,
       _AP_,
       _AQ_,
       _AR_,
       _AS_,
       _AT_,
       _AU_,
       _AV_,
       _AW_,
       _AX_,
       _AY_,
       _AZ_,
       _A0_,
       arg_type$7,
       now$0,
       to_ofday,
       of_ofday,
       to_ofday_float_round_nearest,
       to_ofday,
       of_ofday_float_round_nearest,
       of_ofday,
       [0,
        bin_size_t$16,
        bin_write_t$16,
        bin_read_t$34,
        bin_read_t$33,
        bin_shape_t$21,
        bin_writer_t$19,
        bin_reader_t$19,
        bin_t$19,
        t_of_sexp$37,
        sexp_of_t$48,
        hash_fold_t$15,
        hash$14,
        pp$4,
        of_string$12,
        to_string$10,
        arg_type$8,
        create$6,
        create_local,
        ofday,
        zone,
        to_time_ns,
        [0,
         bin_size_t$16,
         bin_write_t$16,
         bin_read_t$34,
         bin_read_t$33,
         bin_shape_t$22,
         bin_writer_t$20,
         bin_reader_t$20,
         bin_t$20,
         t_of_sexp$37,
         sexp_of_t$48,
         compare$26,
         equal$9,
         hash_fold_t$15,
         hash$15]],
       [0,
        typerep_of_t$4,
        typename_of_t$4,
        _yD_,
        some$0,
        some_is_representable$0,
        is_none,
        is_some,
        value$0,
        value_exn$0,
        unchecked_value$0,
        to_option$0,
        of_option$0,
        Optional_syntax$2,
        bin_size_t$19,
        bin_write_t$19,
        bin_read_t$39,
        bin_read_t$40,
        bin_shape_t$28,
        bin_writer_t$24,
        bin_reader_t$24,
        bin_t$24,
        t_of_sexp$40,
        sexp_of_t$51,
        of_string$14,
        to_string$12,
        pp$5,
        symbol$80,
        symbol$79,
        symbol$78,
        symbol$77,
        symbol$76,
        symbol$75,
        equal$8,
        compare$24,
        min$8,
        max$8,
        ascending$8,
        descending$8,
        between$8,
        clamp_exn$8,
        clamp$8,
        validate_lbound$8,
        validate_ubound$8,
        validate_bound$8,
        Replace_polymorphic_compare$7,
        comparator$17,
        Map$11,
        Set$11,
        hash_fold_t$16,
        hash$18,
        hashable$6,
        Table$6,
        Hash_set$6,
        Hash_queue$6,
        quickcheck_generator$5,
        quickcheck_observer$3,
        quickcheck_shrinker$5,
        [0,
         [0,
          bin_size_t$14,
          bin_write_t$14,
          bin_read_t$29,
          bin_read_t$30,
          bin_shape_t$26,
          bin_writer_t$22,
          bin_reader_t$22,
          bin_t$22,
          compare$24,
          t_of_sexp$39,
          sexp_of_t$50,
          comparator$16,
          to_int63$2,
          of_int63_exn$2]],
        of_span_since_start_of_day$0]],
     Core_Core_time_ns=
      [0,
       _zM_,
       _zL_,
       Core_kernel_Time_ns[25],
       _zJ_,
       _zI_,
       _zH_,
       _zG_,
       _zF_,
       _zE_,
       _zD_,
       _zC_,
       _zB_,
       _zA_,
       _zz_,
       _zy_,
       _zx_,
       _zw_,
       _zv_,
       _zu_,
       _zt_,
       _zs_,
       _zr_,
       _zq_,
       _zp_,
       _zo_,
       _zn_,
       _zm_,
       _zk_,
       _zj_,
       _zi_,
       _zh_,
       _zg_,
       _zf_,
       _ze_,
       _zd_,
       _zc_,
       _zb_,
       _za_,
       _y$_,
       _y__,
       _y9_,
       _y8_,
       _y7_,
       _y6_,
       _y5_,
       _y4_,
       _y3_,
       _y2_,
       _y1_,
       _y0_,
       _yZ_,
       _yY_,
       _yX_,
       _yW_,
       _yV_,
       _yU_,
       _yT_,
       _yS_,
       _yR_,
       _yQ_,
       Core_kernel_Time_ns[86],
       [0,
        bin_size_t$12,
        bin_write_t$12,
        bin_read_t$25,
        bin_read_t$26,
        bin_shape_t$15,
        bin_writer_t$14,
        bin_reader_t$14,
        bin_t$14,
        t_of_sexp$33,
        sexp_of_t$44,
        typerep_of_t$2,
        typename_of_t$2,
        Parts$0,
        symbol$59,
        symbol$60,
        symbol$61,
        symbol$62,
        symbol$63,
        symbol$64,
        equal$7,
        compare$22,
        min$7,
        max$7,
        ascending$6,
        descending$6,
        between$6,
        clamp_exn$6,
        clamp$6,
        validate_lbound$6,
        validate_ubound$6,
        validate_bound$6,
        Replace_polymorphic_compare$5,
        comparator$12,
        Map$9,
        Set$9,
        hash_fold_t$11,
        hash$12,
        hashable$4,
        Table$4,
        Hash_set$4,
        Hash_queue$4,
        pp$2,
        quickcheck_generator$1,
        quickcheck_observer$1,
        quickcheck_shrinker$1,
        gen_incl$1,
        gen_uniform_incl$1,
        to_string$6,
        of_string$8,
        nanosecond$0,
        microsecond$0,
        millisecond$0,
        second$0,
        minute$0,
        hour$0,
        day$0,
        robust_comparison_tolerance$0,
        zero$1,
        create$5,
        to_parts$1,
        of_ns$0,
        of_us$0,
        of_ms$0,
        of_sec$0,
        of_int_sec$0,
        of_int32_seconds$0,
        of_int63_seconds$0,
        of_min$0,
        of_hr$0,
        of_day$0,
        to_ns$0,
        to_us$0,
        to_ms$0,
        to_sec$0,
        to_min$0,
        to_hr$0,
        to_day$0,
        to_int63_seconds_round_down_ex$0,
        to_proportional_float$0,
        symbol$71,
        symbol$72,
        abs$0,
        neg$0,
        scale$0,
        symbol$73,
        symbol$74,
        next$1,
        prev$1,
        to_short_string$0,
        to_unit_of_time$0,
        of_unit_of_time$0,
        to_string_hum$3,
        randomize$0,
        of_sec_with_microsecond_precis,
        of_int_us,
        of_int_ms,
        to_int_us,
        to_int_ms,
        to_int_sec,
        min_value_representable,
        max_value_representable,
        min_value_for_1us_rounding,
        max_value_for_1us_rounding,
        min_value,
        max_value,
        scale_int,
        scale_int63,
        div,
        to_int63_ns,
        of_int63_ns,
        to_int_ns,
        of_int_ns,
        since_unix_epoch,
        random,
        to_span,
        of_span,
        to_span_float_round_nearest,
        to_span_float_round_nearest_mi,
        of_span_float_round_nearest,
        of_span_float_round_nearest_mi,
        Alternate_sexp,
        validate_positive$0,
        validate_non_negative$0,
        validate_negative$0,
        validate_non_positive$0,
        is_positive$0,
        is_non_negative$0,
        is_negative$0,
        is_non_positive$0,
        sign$0,
        arg_type$5,
        symbol$65,
        symbol$66,
        symbol$67,
        symbol$68,
        symbol$69,
        symbol$70,
        robustly_compare$1,
        [0,
         [0,
          hash_fold_t$10,
          hash$11,
          bin_size_t$11,
          bin_write_t$11,
          bin_read_t$24,
          bin_read_t$23,
          bin_shape_t$14,
          bin_writer_t$13,
          bin_reader_t$13,
          bin_t$13,
          compare$21,
          t_of_sexp$32,
          sexp_of_t$43,
          comparator$11,
          to_int63,
          of_int63_exn],
         Core_kernel_Time_ns[87][2][1]],
        [0,
         typerep_of_t$3,
         typename_of_t$3,
         _yD_,
         some,
         some_is_representable,
         is_none,
         is_some,
         value,
         value_exn,
         unchecked_value,
         to_option,
         of_option,
         Optional_syntax$0,
         bin_size_t$14,
         bin_write_t$14,
         bin_read_t$29,
         bin_read_t$30,
         bin_shape_t$20,
         bin_writer_t$18,
         bin_reader_t$18,
         bin_t$18,
         t_of_sexp$36,
         sexp_of_t$47,
         of_string$10,
         to_string$8,
         pp$3,
         symbol$80,
         symbol$79,
         symbol$78,
         symbol$77,
         symbol$76,
         symbol$75,
         equal$8,
         compare$24,
         min$8,
         max$8,
         ascending$7,
         descending$7,
         between$7,
         clamp_exn$7,
         clamp$7,
         validate_lbound$7,
         validate_ubound$7,
         validate_bound$7,
         Replace_polymorphic_compare$6,
         comparator$15,
         Map$10,
         Set$10,
         hash_fold_t$13,
         func$3,
         hashable$5,
         Table$5,
         Hash_set$5,
         Hash_queue$5,
         quickcheck_generator$4,
         quickcheck_observer$3,
         quickcheck_shrinker$4,
         [0,
          [0,
           bin_size_t$13,
           bin_write_t$13,
           bin_read_t$28,
           bin_read_t$27,
           bin_shape_t$17,
           bin_writer_t$15,
           bin_reader_t$15,
           bin_t$15,
           compare$23,
           t_of_sexp$34,
           sexp_of_t$45,
           comparator$13,
           to_int63$0,
           of_int63_exn$0],
          [0,
           bin_size_t$13,
           bin_write_t$13,
           bin_read_t$28,
           bin_read_t$27,
           bin_shape_t$18,
           bin_writer_t$16,
           bin_reader_t$16,
           bin_t$16,
           compare$23,
           t_of_sexp$35,
           sexp_of_t$46,
           comparator$14,
           to_int63$1,
           of_int63_exn$1]]]],
       arg_type$6,
       [0,
        typerep_of_t$5,
        typename_of_t$5,
        _yD_,
        some$1,
        some_is_representable$1,
        is_none,
        is_some,
        value$1,
        value_exn$1,
        unchecked_value$1,
        to_option$1,
        of_option$1,
        Optional_syntax$4,
        bin_size_t$20,
        bin_write_t$20,
        bin_read_t$41,
        bin_read_t$42,
        bin_shape_t$33,
        bin_writer_t$28,
        bin_reader_t$28,
        bin_t$28,
        t_of_sexp$43,
        sexp_of_t$54,
        of_string$16,
        to_string$14,
        pp$6,
        symbol$80,
        symbol$79,
        symbol$78,
        symbol$77,
        symbol$76,
        symbol$75,
        equal$8,
        compare$24,
        min$8,
        max$8,
        ascending$9,
        descending$9,
        between$9,
        clamp_exn$9,
        clamp$9,
        validate_lbound$9,
        validate_ubound$9,
        validate_bound$9,
        Replace_polymorphic_compare$8,
        comparator$20,
        Map$13,
        Set$13,
        hash_fold_t$17,
        hash$21,
        hashable$7,
        Table$7,
        Hash_set$7,
        Hash_queue$7,
        quickcheck_generator$4,
        quickcheck_observer$3,
        quickcheck_shrinker$4,
        [0,
         [0,
          bin_size_t$14,
          bin_write_t$14,
          bin_read_t$29,
          bin_read_t$30,
          bin_shape_t$31,
          bin_writer_t$26,
          bin_reader_t$26,
          bin_t$26,
          compare$24,
          t_of_sexp$42,
          sexp_of_t$53,
          comparator$19,
          to_int63$4,
          of_int63_exn$4]]],
       _BF_,
       bin_size_t$21,
       bin_write_t$21,
       bin_read_t$43,
       bin_read_t$44,
       bin_shape_t$34,
       bin_writer_t$29,
       bin_reader_t$29,
       bin_t$29,
       t_of_sexp$44,
       sexp_of_t$55,
       of_string$17,
       to_string$15,
       pp$7,
       symbol$86,
       symbol$85,
       symbol$84,
       symbol$83,
       symbol$82,
       symbol$81,
       equal$10,
       compare$27,
       min$9,
       max$9,
       ascending$10,
       descending$10,
       between$10,
       clamp_exn$10,
       clamp$10,
       validate_lbound$10,
       validate_ubound$10,
       validate_bound$10,
       Replace_polymorphic_compare$9,
       comparator$21,
       Map$14,
       Set$14,
       hash_fold_t$18,
       hash$22,
       hashable$8,
       Table$8,
       Hash_set$8,
       Hash_queue$8,
       _yu_,
       _w0_,
       _wZ_,
       t_of_sexp_abs$0,
       sexp_of_t_abs$0,
       of_date_ofday_zoned,
       to_date_ofday_zoned,
       to_ofday_zoned,
       to_string_fix_proto,
       of_string_fix_proto,
       of_string_abs,
       of_string_gen,
       pause$0,
       interruptible_pause,
       pause_forever,
       _BE_];
    caml_register_global(3030,Core_Core_time_ns,"Core__Core_time_ns");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Interval_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$44);
    caml_call1(Expect_test_collector[4][1],cst_src_interval_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$45,cst$36);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$46);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Interval_intf$0);
    var Core_Interval_intf=[0];
    caml_register_global(3031,Core_Interval_intf,"Core__Interval_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Interval);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$47);
    caml_call1(Expect_test_collector[4][1],cst_src_interval_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$48,cst$37);
    var
     _BH_=caml_call1(Bin_prot_Shape[3][1],cst_a),
     _BI_=caml_call1(Bin_prot_Shape[4][1],cst_src_interval_ml_11_27),
     _BJ_=[0,caml_call2(Bin_prot_Shape[15],_BI_,_BH_),0],
     _BK_=caml_call1(Bin_prot_Shape[3][1],cst_a$0),
     _BL_=caml_call1(Bin_prot_Shape[4][1],cst_src_interval_ml_11_22),
     _BM_=
      [0,
       [0,cst_Interval,[0,caml_call2(Bin_prot_Shape[15],_BL_,_BK_),_BJ_]],
       _BG_],
     _BN_=caml_call1(Bin_prot_Shape[9],_BM_),
     _BO_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$1),0],
     _BP_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$53),_BO_,_BN_],0],
     _BQ_=caml_call1(Bin_prot_Shape[4][1],cst_src_interval_ml_10_6),
     group$26=caml_call2(Bin_prot_Shape[6],_BQ_,_BP_);
    function t_of_sexp$45(of_a,sexp)
     {if(0 === sexp[0])
       {var _OK_=sexp[1],switch$0=0;
        if(caml_string_notequal(_OK_,cst_Empty))
         {var switch$1=0;
          if(caml_string_notequal(_OK_,cst_Interval$0))
           if(caml_string_notequal(_OK_,cst_empty))
            {if(caml_string_notequal(_OK_,cst_interval))
              {switch$0 = 1;switch$1 = 1}}
           else
            switch$1 = 1;
          if(! switch$1)
           return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$58,sexp)}
        if(! switch$0)return 0}
      else
       {var _OL_=sexp[1];
        if(! _OL_)
         return caml_call2(Sexplib0_Sexp_conv_error[7],tp_loc$58,sexp);
        var _OM_=_OL_[1];
        if(0 !== _OM_[0])
         return caml_call2(Sexplib0_Sexp_conv_error[6],tp_loc$58,sexp);
        var _ON_=_OM_[1],switch$2=0;
        if(caml_string_notequal(_ON_,cst_Empty$0))
         {var switch$3=0;
          if(caml_string_notequal(_ON_,cst_Interval$1))
           if(caml_string_notequal(_ON_,cst_empty$0))
            {if(caml_string_notequal(_ON_,cst_interval$0))
              {switch$2 = 1;switch$3 = 1}}
           else
            switch$3 = 1;
          if(! switch$3)
           {var sexp_args=_OL_[2];
            if(sexp_args)
             {var _OO_=sexp_args[2];
              if(_OO_ && ! _OO_[2])
               {var
                 v1=_OO_[1],
                 v0=sexp_args[1],
                 v0$0=caml_call1(of_a,v0),
                 v1$0=caml_call1(of_a,v1);
                return [0,v0$0,v1$0]}}
            return caml_call3(Sexplib0_Sexp_conv_error[4],tp_loc$58,_ON_,sexp)}}
        if(! switch$2)
         return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$58,sexp)}
      return caml_call2(Sexplib0_Sexp_conv_error[8],tp_loc$58,sexp)}
    function interval(v0,v1){return [0,v0,v1]}
    var
     interval$0=[0,cst_Interval$2,0,interval],
     empty$3=[0,cst_Empty$1,1,0],
     empty$2=0;
    function fold$5(init,interval_fun,empty_fun)
     {return caml_call2
              (empty_fun,caml_call2(interval_fun,init,interval$0),empty$3)}
    function iter$5(interval_fun,empty_fun)
     {caml_call1(interval_fun,interval$0);
      return caml_call1(empty_fun,empty$3)}
    function map$5(t,interval_fun,empty_fun)
     {if(t)
       {var v1=t[2],v0=t[1];return caml_call3(interval_fun,interval$0,v0,v1)}
      return caml_call1(empty_fun,empty$3)}
    function make_matcher(interval_fun,empty_fun,compile_acc)
     {var
       match=caml_call2(interval_fun,interval$0,compile_acc),
       compile_acc$0=match[2],
       interval_gen=match[1],
       match$0=caml_call2(empty_fun,empty$3,compile_acc$0),
       compile_acc$1=match$0[2],
       empty_gen=match$0[1];
      function _OH_(param){return interval_gen}
      function _OI_(param){return caml_call1(empty_gen,0)}
      return [0,function(_OJ_){return map$5(_OJ_,_OH_,_OI_)},compile_acc$1]}
    function to_rank(param){return param?0:1}
    function to_name(param){return param?cst_Interval$3:cst_Empty$2}
    var
     Variants=
      [0,
       interval$0,
       empty$3,
       fold$5,
       iter$5,
       map$5,
       make_matcher,
       to_rank,
       to_name,
       descriptions];
    function compare$28(cmp_a,a_001,b_002)
     {if(caml_call2(Ppx_compare_lib[1],a_001,b_002))return 0;
      if(a_001)
       {var _OG_=a_001[1];
        if(b_002)
         {var
           b_006=b_002[2],
           b_004=b_002[1],
           a_005=a_001[2],
           n=caml_call2(cmp_a,_OG_,b_004);
          return 0 === n?caml_call2(cmp_a,a_005,b_006):n}
        return -1}
      return b_002?1:0}
    function hash_fold_t$19(hash_fold_a,hsv,arg)
     {if(arg)
       {var
         a1=arg[2],
         a0=arg[1],
         hsv$0=caml_call2(Base_Hash[3],hsv,0),
         hsv$1=caml_call2(hash_fold_a,hsv$0,a0);
        return caml_call2(hash_fold_a,hsv$1,a1)}
      return caml_call2(Base_Hash[3],hsv,1)}
    var
     _BU_=caml_call1(Bin_prot_Shape[3][1],cst_a$2),
     _BV_=caml_call1(Bin_prot_Shape[4][1],cst_src_interval_ml_15_25),
     a=caml_call2(Bin_prot_Shape[15],_BV_,_BU_),
     _BR_=caml_call1(Bin_prot_Shape[2][1],cst_t$54),
     _BS_=caml_call1(caml_call2(Bin_prot_Shape[14],group$26,_BR_),[0,a,0]),
     _BW_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$3),0],
     _BX_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_interval$1),_BW_,_BS_],0],
     _BY_=caml_call1(Bin_prot_Shape[4][1],cst_src_interval_ml_15_6),
     group$27=caml_call2(Bin_prot_Shape[6],_BY_,_BX_);
    function bin_shape_interval(a)
     {var _OF_=caml_call1(Bin_prot_Shape[2][1],cst_interval$2);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$27,_OF_),[0,a,0])}
    function bin_size_interval(size_of_a,v)
     {if(v)
       {var
         v2=v[2],
         v1=v[1],
         _OD_=caml_call1(size_of_a,v1),
         size=caml_call2(Bin_prot_Common[23],1,_OD_),
         _OE_=caml_call1(size_of_a,v2);
        return caml_call2(Bin_prot_Common[23],size,_OE_)}
      return 1}
    function bin_write_interval(write_a,buf,pos$1,v)
     {if(v)
       {var
         v2=v[2],
         v1=v[1],
         pos=caml_call3(Bin_prot_Write[30],buf,pos$1,0),
         pos$0=caml_call3(write_a,buf,pos,v1);
        return caml_call3(write_a,buf,pos$0,v2)}
      return caml_call3(Bin_prot_Write[30],buf,pos$1,1)}
    function bin_read_interval(of_a,buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_src_interval_ml_Stable_V1_,pos_ref[1])}
    function bin_read_interval$0(of_a,buf,pos_ref)
     {var match=caml_call2(Bin_prot_Read[29],buf,pos_ref);
      if(0 === match)
       {var
         arg_1=caml_call2(of_a,buf,pos_ref),
         arg_2=caml_call2(of_a,buf,pos_ref);
        return [0,arg_1,arg_2]}
      return 1 === match?0:caml_call2(Bin_prot_Common[18],_BT_,pos_ref[1])}
    function compare_interval(cmp_a,a_007,b_008)
     {return compare$28
              (function(a_009,b_010){return caml_call2(cmp_a,a_009,b_010)},
               a_007,
               b_008)}
    function t_of_sexp$46(a_of_sexp,sexp)
     {try
       {var _OB_=t_of_sexp$45(a_of_sexp,sexp);return _OB_}
      catch(_OC_)
       {if(1 === sexp[0])
         {var _Oy_=sexp[1];
          if(! _Oy_)return 0;
          var _Oz_=_Oy_[2];
          if(_Oz_ && ! _Oz_[2])
           {var ub=_Oz_[1],lb=_Oy_[1],_OA_=caml_call1(a_of_sexp,ub);
            return [0,caml_call1(a_of_sexp,lb),_OA_]}}
        return caml_call2(_bk_,cst_Interval_t_of_sexp_expecte,sexp)}}
    function sexp_of_t$56(sexp_of_a,t)
     {if(t)
       {var ub=t[2],lb=t[1],_Ox_=[0,caml_call1(sexp_of_a,ub),0];
        return [1,[0,caml_call1(sexp_of_a,lb),_Ox_]]}
      return _BZ_}
    var
     _B0_=caml_call1(Bin_prot_Shape[3][1],cst_a$4),
     _B1_=caml_call1(Bin_prot_Shape[4][1],cst_src_interval_ml_36_16),
     _B2_=bin_shape_interval(caml_call2(Bin_prot_Shape[15],_B1_,_B0_)),
     _B3_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$5),0],
     _B4_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$55),_B3_,_B2_],0],
     _B5_=caml_call1(Bin_prot_Shape[4][1],cst_src_interval_ml_36_4),
     group$28=caml_call2(Bin_prot_Shape[6],_B5_,_B4_);
    function bin_shape_t$35(a)
     {var _Ow_=caml_call1(Bin_prot_Shape[2][1],cst_t$56);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$28,_Ow_),[0,a,0])}
    function bin_size_t$22(size_of_a,v){return bin_size_interval(size_of_a,v)}
    function bin_write_t$22(write_a,buf,pos,v)
     {return bin_write_interval(write_a,buf,pos,v)}
    function bin_writer_t$30(bin_writer_a)
     {function _Os_(v)
       {var _Ot_=bin_writer_a[2];
        return function(_Ou_,_Ov_){return bin_write_t$22(_Ot_,v,_Ou_,_Ov_)}}
      return [0,function(v){return bin_size_t$22(bin_writer_a[1],v)},_Os_]}
    function bin_read_t$45(of_a,buf,pos_ref,vint)
     {return bin_read_interval(of_a,buf,pos_ref,vint)}
    function bin_read_t$46(of_a,buf,pos_ref)
     {return bin_read_interval$0(of_a,buf,pos_ref)}
    function bin_reader_t$30(bin_reader_a)
     {function _Or_(buf,pos_ref,vtag)
       {return bin_read_t$45(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$46(bin_reader_a[1],buf,pos_ref)},
              _Or_]}
    function bin_t$30(bin_a)
     {var _Op_=bin_reader_t$30(bin_a[3]),_Oq_=bin_writer_t$30(bin_a[2]);
      return [0,bin_shape_t$35(bin_a[1]),_Oq_,_Op_]}
    function compare$29(cmp_a,a_011,b_012)
     {return compare_interval
              (function(a_013,b_014){return caml_call2(cmp_a,a_013,b_014)},
               a_011,
               b_012)}
    function t_of_sexp$47(t){return t_of_sexp$46(_ec_,t)}
    function sexp_of_t$57(v){return sexp_of_t$56(_eb_,v)}
    var
     _B6_=bin_shape_interval(_d1_),
     _B7_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$57),0,_B6_],0],
     _B8_=caml_call1(Bin_prot_Shape[4][1],cst_src_interval_ml_40_8),
     group$29=caml_call2(Bin_prot_Shape[6],_B8_,_B7_),
     _B9_=caml_call1(Bin_prot_Shape[2][1],cst_t$58),
     bin_shape_t$36=caml_call1(caml_call2(Bin_prot_Shape[14],group$29,_B9_),0);
    function bin_size_t$23(v){return bin_size_interval(_d2_,v)}
    function bin_write_t$23(buf,pos,v)
     {return bin_write_interval(_d3_,buf,pos,v)}
    var bin_writer_t$31=[0,bin_size_t$23,bin_write_t$23];
    function bin_read_t$47(buf,pos_ref,vint)
     {return bin_read_interval(_d5_,buf,pos_ref,vint)}
    function bin_read_t$48(buf,pos_ref)
     {return bin_read_interval$0(_d5_,buf,pos_ref)}
    var
     bin_reader_t$31=[0,bin_read_t$48,bin_read_t$47],
     bin_t$31=[0,bin_shape_t$36,bin_writer_t$31,bin_reader_t$31];
    function compare$30(a_015,b_016)
     {return compare_interval
              (function(a_017,b_018){return caml_call2(_d9_,a_017,b_018)},
               a_015,
               b_016)}
    var
     include$35=
      caml_call1(Core_kernel_Comparator[9][1][2],[0,compare$30,sexp_of_t$57]),
     comparator$22=include$35[1];
    function t_of_sexp$48(t){return t_of_sexp$46(file_perm_of_sexp,t)}
    function sexp_of_t$58(v){return sexp_of_t$56(_es_,v)}
    var
     _B__=bin_shape_interval(_eg_),
     _B$_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$59),0,_B__],0],
     _Ca_=caml_call1(Bin_prot_Shape[4][1],cst_src_interval_ml_48_8),
     group$30=caml_call2(Bin_prot_Shape[6],_Ca_,_B$_),
     _Cb_=caml_call1(Bin_prot_Shape[2][1],cst_t$60),
     bin_shape_t$37=caml_call1(caml_call2(Bin_prot_Shape[14],group$30,_Cb_),0);
    function bin_size_t$24(v){return bin_size_interval(_eh_,v)}
    function bin_write_t$24(buf,pos,v)
     {return bin_write_interval(_ei_,buf,pos,v)}
    var bin_writer_t$32=[0,bin_size_t$24,bin_write_t$24];
    function bin_read_t$49(buf,pos_ref,vint)
     {return bin_read_interval(_ek_,buf,pos_ref,vint)}
    function bin_read_t$50(buf,pos_ref)
     {return bin_read_interval$0(_ek_,buf,pos_ref)}
    var
     bin_reader_t$32=[0,bin_read_t$50,bin_read_t$49],
     bin_t$32=[0,bin_shape_t$37,bin_writer_t$32,bin_reader_t$32];
    function compare$31(a_019,b_020)
     {return compare_interval
              (function(a_021,b_022){return caml_call2(_eo_,a_021,b_022)},
               a_019,
               b_020)}
    var
     include$36=
      caml_call1(Core_kernel_Comparator[9][1][2],[0,compare$31,sexp_of_t$58]),
     comparator$23=include$36[1];
    function t_of_sexp$49(t){return t_of_sexp$46(_yp_[1][12],t)}
    function sexp_of_t$59(v){return sexp_of_t$56(_yp_[1][13],v)}
    var
     _Cc_=bin_shape_interval(_yp_[1][7]),
     _Cd_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$61),0,_Cc_],0],
     _Ce_=caml_call1(Bin_prot_Shape[4][1],cst_src_interval_ml_56_8),
     group$31=caml_call2(Bin_prot_Shape[6],_Ce_,_Cd_),
     _Cf_=caml_call1(Bin_prot_Shape[2][1],cst_t$62),
     bin_shape_t$38=caml_call1(caml_call2(Bin_prot_Shape[14],group$31,_Cf_),0);
    function bin_size_t$25(v){return bin_size_interval(_yp_[1][3],v)}
    function bin_write_t$25(buf,pos,v)
     {return bin_write_interval(_yp_[1][4],buf,pos,v)}
    var bin_writer_t$33=[0,bin_size_t$25,bin_write_t$25];
    function bin_read_t$51(buf,pos_ref,vint)
     {return bin_read_interval(_yp_[1][5],buf,pos_ref,vint)}
    function bin_read_t$52(buf,pos_ref)
     {return bin_read_interval$0(_yp_[1][5],buf,pos_ref)}
    var
     bin_reader_t$33=[0,bin_read_t$52,bin_read_t$51],
     bin_t$33=[0,bin_shape_t$38,bin_writer_t$33,bin_reader_t$33];
    function compare$32(a_023,b_024)
     {return compare_interval
              (function(a_025,b_026)
                {return caml_call2(_yp_[1][11],a_025,b_026)},
               a_023,
               b_024)}
    var
     include$37=
      caml_call1(Core_kernel_Comparator[9][1][2],[0,compare$32,sexp_of_t$59]),
     comparator$24=include$37[1];
    function t_of_sexp$50(t){return t_of_sexp$46(_BE_[1][10],t)}
    function sexp_of_t$60(v){return sexp_of_t$56(_BE_[1][11],v)}
    var
     _Cg_=bin_shape_interval(_BE_[1][5]),
     _Ch_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$63),0,_Cg_],0],
     _Ci_=caml_call1(Bin_prot_Shape[4][1],cst_src_interval_ml_64_8),
     group$32=caml_call2(Bin_prot_Shape[6],_Ci_,_Ch_),
     _Cj_=caml_call1(Bin_prot_Shape[2][1],cst_t$64),
     bin_shape_t$39=caml_call1(caml_call2(Bin_prot_Shape[14],group$32,_Cj_),0);
    function bin_size_t$26(v){return bin_size_interval(_BE_[1][1],v)}
    function bin_write_t$26(buf,pos,v)
     {return bin_write_interval(_BE_[1][2],buf,pos,v)}
    var bin_writer_t$34=[0,bin_size_t$26,bin_write_t$26];
    function bin_read_t$53(buf,pos_ref,vint)
     {return bin_read_interval(_BE_[1][3],buf,pos_ref,vint)}
    function bin_read_t$54(buf,pos_ref)
     {return bin_read_interval$0(_BE_[1][3],buf,pos_ref)}
    var
     bin_reader_t$34=[0,bin_read_t$54,bin_read_t$53],
     bin_t$34=[0,bin_shape_t$39,bin_writer_t$34,bin_reader_t$34];
    function compare$33(a_027,b_028)
     {return compare_interval
              (function(a_029,b_030)
                {return caml_call2(_BE_[1][9],a_029,b_030)},
               a_027,
               b_028)}
    var
     include$38=
      caml_call1(Core_kernel_Comparator[9][1][2],[0,compare$33,sexp_of_t$60]),
     comparator$25=include$38[1];
    function t_of_sexp$51(t){return t_of_sexp$46(_yp_[5][1][12],t)}
    function sexp_of_t$61(v){return sexp_of_t$56(_yp_[5][1][13],v)}
    var
     _Ck_=bin_shape_interval(_yp_[5][1][7]),
     _Cl_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$65),0,_Ck_],0],
     _Cm_=caml_call1(Bin_prot_Shape[4][1],cst_src_interval_ml_73_8),
     group$33=caml_call2(Bin_prot_Shape[6],_Cm_,_Cl_),
     _Cn_=caml_call1(Bin_prot_Shape[2][1],cst_t$66),
     bin_shape_t$40=caml_call1(caml_call2(Bin_prot_Shape[14],group$33,_Cn_),0);
    function bin_size_t$27(v){return bin_size_interval(_yp_[5][1][3],v)}
    function bin_write_t$27(buf,pos,v)
     {return bin_write_interval(_yp_[5][1][4],buf,pos,v)}
    var bin_writer_t$35=[0,bin_size_t$27,bin_write_t$27];
    function bin_read_t$55(buf,pos_ref,vint)
     {return bin_read_interval(_yp_[5][1][5],buf,pos_ref,vint)}
    function bin_read_t$56(buf,pos_ref)
     {return bin_read_interval$0(_yp_[5][1][5],buf,pos_ref)}
    var
     bin_reader_t$35=[0,bin_read_t$56,bin_read_t$55],
     bin_t$35=[0,bin_shape_t$40,bin_writer_t$35,bin_reader_t$35];
    function compare$34(a_031,b_032)
     {return compare_interval
              (function(a_033,b_034)
                {return caml_call2(_yp_[5][1][11],a_033,b_034)},
               a_031,
               b_032)}
    var
     include$39=
      caml_call1(Core_kernel_Comparator[9][1][2],[0,compare$34,sexp_of_t$61]),
     comparator$26=include$39[1];
    function to_float(t){return t}
    function to_int$0(t){return t}
    function to_ofday$0(t){return t}
    function to_time(t){return t}
    function Raw_make(T)
     {var
       compare=T[1],
       symbol=T[2],
       symbol$0=T[3],
       symbol$1=T[4],
       symbol$2=T[5],
       symbol$3=T[6],
       symbol$4=T[7];
      function max(x,y){return caml_call2(T[2],x,y)?x:y}
      function min(x,y){return caml_call2(T[3],x,y)?x:y}
      var
       T$0=
        [0,
         compare,
         symbol,
         symbol$0,
         symbol$1,
         symbol$2,
         symbol$3,
         symbol$4,
         max,
         min],
       empty=0;
      function is_malformed(param)
       {if(param){var y=param[2],x=param[1];return caml_call2(T$0[5],x,y)}
        return 0}
      function empty_cvt(i)
       {if(i){var y=i[2],x=i[1];return caml_call2(T$0[5],x,y)?0:i}return 0}
      function create(x,y){return empty_cvt([0,x,y])}
      function intersect(i1,match)
       {if(i1 && match)
         {var
           u2=match[2],
           l2=match[1],
           u1=i1[2],
           l1=i1[1],
           _Oo_=caml_call2(T$0[9],u1,u2);
          return empty_cvt([0,caml_call2(T$0[8],l1,l2),_Oo_])}
        return 0}
      function is_empty(param){return param?0:1}
      function is_empty_or_singleton(param)
       {if(param){var y=param[2],x=param[1];return caml_call2(T$0[4],x,y)}
        return 1}
      function bounds(param)
       {if(param){var u=param[2],l=param[1];return [0,[0,l,u]]}return 0}
      function lbound(param){if(param){var l=param[1];return [0,l]}return 0}
      function ubound(param){if(param){var u=param[2];return [0,u]}return 0}
      function bounds_exn(param)
       {if(param){var u=param[2],l=param[1];return [0,l,u]}
        return caml_call1(_a_,cst_Interval_bounds_exn_empty_)}
      function lbound_exn(param)
       {if(param){var l=param[1];return l}
        return caml_call1(_a_,cst_Interval_lbound_exn_empty_)}
      function ubound_exn(param)
       {if(param){var u=param[2];return u}
        return caml_call1(_a_,cst_Interval_ubound_exn_empty_)}
      function compare_value(i,x)
       {if(i)
         {var u=i[2],l=i[1];
          return caml_call2(T$0[6],x,l)
                  ?-1014551919
                  :caml_call2(T$0[5],x,u)?774323965:186340235}
        return -412019054}
      function contains(i,x){return 186340235 === compare_value(i,x)?1:0}
      function bound(i,x)
       {if(i)
         {var
           u=i[2],
           l=i[1],
           bounded_value=caml_call2(T$0[6],x,l)?l:caml_call2(T$0[6],u,x)?u:x;
          return [0,bounded_value]}
        return 0}
      function is_superset(i1,i2)
       {if(i1)
         {if(i2)
           {var
             u2=i2[2],
             l2=i2[1],
             u1=i1[2],
             l1=i1[1],
             _On_=caml_call2(T$0[3],l1,l2);
            return _On_?caml_call2(T$0[2],u1,u2):_On_}}
        else
         if(i2)return 0;
        return 1}
      function is_subset(i1,i2){return is_superset(i2,i1)}
      function map(t,f)
       {if(t)
         {var u=t[2],l=t[1],_Om_=caml_call1(f,u);
          return empty_cvt([0,caml_call1(f,l),_Om_])}
        return 0}
      function interval_compare(t1,t2)
       {if(t1)
         {var _Ok_=t1[2],_Ol_=t1[1];
          if(t2)
           {var u2=t2[2],l2=t2[1],c=caml_call2(T$0[1],_Ol_,l2);
            return caml_call2(Core_kernel_Int[110],c,0)
                    ?c
                    :caml_call2(T$0[1],_Ok_,u2)}
          return 1}
        return t2?-1:0}
      function are_disjoint_gen(are_disjoint,intervals)
       {var intervals$0=caml_call1(Core_kernel_Array[48],intervals);
        try
         {var
           _Oc_=caml_call1(Core_kernel_Array[18],intervals$0) - 1 | 0,
           _Ob_=0;
          if(! (_Oc_ < 0))
           {var i=_Ob_;
            for(;;)
             {var
               _Oe_=i + 1 | 0,
               _Of_=caml_call1(Core_kernel_Array[18],intervals$0) - 1 | 0;
              if(! (_Of_ < _Oe_))
               {var j=_Oe_;
                for(;;)
                 {var _Oh_=caml_check_bound(intervals$0,j)[1 + j];
                  if
                   (1
                    -
                    caml_call2
                     (are_disjoint,caml_check_bound(intervals$0,i)[1 + i],_Oh_))
                   throw _c_;
                  var _Oi_=j + 1 | 0;
                  if(_Of_ !== j){var j=_Oi_;continue}
                  break}}
              var _Og_=i + 1 | 0;
              if(_Oc_ !== i){var i=_Og_;continue}
              break}}
          var _Od_=1;
          return _Od_}
        catch(_Oj_)
         {_Oj_ = caml_wrap_exception(_Oj_);
          if(_Oj_ === _c_)return 0;
          throw _Oj_}}
      function are_disjoint(intervals)
       {return are_disjoint_gen
                (function(i1,i2){return is_empty(intersect(i1,i2))},intervals)}
      function are_disjoint_as_open_intervals(intervals)
       {return are_disjoint_gen
                (function(i1,i2)
                  {return is_empty_or_singleton(intersect(i1,i2))},
                 intervals)}
      function list_intersect(ilist1,ilist2)
       {var
         _N__=1 - are_disjoint(ilist1),
         _N$_=_N__ || 1 - are_disjoint(ilist2);
        if(_N$_)caml_call1(_a_,cst_Interval_list_intersect_no);
        var pairs=caml_call2(Core_kernel_List[133],ilist1,ilist2);
        function _Oa_(param)
         {var i2=param[2],i1=param[1],i=intersect(i1,i2);
          return is_empty(i)?0:[0,i]}
        return caml_call2(Core_kernel_List[119],pairs,_Oa_)}
      function half_open_intervals_are_a_part(intervals)
       {function _N6_(x){return 1 - is_empty(x)}
        var
         intervals$0=caml_call2(Core_kernel_List[50],intervals,_N6_),
         intervals$1=
          caml_call2(Core_kernel_List[58],intervals$0,interval_compare);
        if(intervals$1)
         {var xs=intervals$1[2],x=intervals$1[1],a=x,param=xs;
          for(;;)
           {if(param)
             {var
               tl=param[2],
               b=param[1],
               _N7_=lbound_exn(b),
               _N8_=ubound_exn(a),
               _N9_=caml_call2(T$0[4],_N8_,_N7_);
              if(_N9_){var a=b,param=tl;continue}
              return _N9_}
            return 1}}
        return 1}
      function convex_hull(intervals)
       {function _N3_(i1,i2)
         {var match=bounds(i1),match$0=bounds(i2);
          if(match)
           {if(match$0)
             {var
               _N4_=match$0[1],
               u2=_N4_[2],
               l2=_N4_[1],
               match$1=match[1],
               u1=match$1[2],
               l1=match$1[1],
               _N5_=caml_call2(T$0[8],u1,u2);
              return create(caml_call2(T$0[9],l1,l2),_N5_)}
            return i1}
          return i2}
        return caml_call3(Core_kernel_List[10],intervals,empty,_N3_)}
      var
       Interval=
        [0,
         empty,
         is_malformed,
         empty_cvt,
         create,
         intersect,
         is_empty,
         is_empty_or_singleton,
         bounds,
         lbound,
         ubound,
         bounds_exn,
         lbound_exn,
         ubound_exn,
         compare_value,
         contains,
         bound,
         is_superset,
         is_subset,
         map,
         interval_compare,
         are_disjoint_gen,
         are_disjoint,
         are_disjoint_as_open_intervals,
         list_intersect,
         half_open_intervals_are_a_part,
         convex_hull];
      function create_from_intervals(intervals)
       {function _NZ_(i){return 1 - caml_call1(Interval[6],i)}
        var intervals$0=caml_call2(Core_kernel_List[50],intervals,_NZ_);
        function lb(i){return caml_call1(Interval[12],i)}
        function _N0_(i$0,i)
         {var _N1_=lb(i),_N2_=lb(i$0);return caml_call2(T$0[1],_N2_,_N1_)}
        var intervals$1=caml_call2(Core_kernel_List[58],intervals$0,_N0_);
        return caml_call1(Interval[22],intervals$1)
                ?intervals$1
                :caml_call1(_b_,cst_Interval_set_create_interv)}
      function create$0(pair_list)
       {function _NY_(param)
         {var ubound=param[2],lbound=param[1];
          return caml_call2(Interval[4],lbound,ubound)}
        var intervals=caml_call2(Core_kernel_List[71],pair_list,_NY_);
        return create_from_intervals(intervals)}
      function contains_set(container,contained)
       {function _NW_(contained_interval)
         {function _NX_(container_interval)
           {return caml_call2
                    (Interval[17],container_interval,contained_interval)}
          return caml_call2(Core_kernel_List[13],container,_NX_)}
        return caml_call2(Core_kernel_List[14],contained,_NW_)}
      function contains$0(t,x)
       {function _NV_(interval){return caml_call2(Interval[15],interval,x)}
        return caml_call2(Core_kernel_List[13],t,_NV_)}
      function ubound_exn$0(t)
       {if(t)
         {var _NU_=caml_call1(Core_kernel_List[103],t);
          return caml_call1(Interval[13],_NU_)}
        return caml_call1(_a_,cst_Interval_set_ubound_called)}
      function lbound_exn$0(t)
       {if(t)
         {var _NT_=caml_call1(Core_kernel_List[63],t);
          return caml_call1(Interval[12],_NT_)}
        return caml_call1(_a_,cst_Interval_set_lbound_called)}
      function ubound$0(t)
       {var match=caml_call1(Core_kernel_List[102],t);
        if(match)
         {var i=match[1],match$0=caml_call1(Interval[10],i);
          if(match$0){var x=match$0[1];return [0,x]}
          throw [0,Assert_failure,_Co_]}
        return 0}
      function lbound$0(t)
       {var match=caml_call1(Core_kernel_List[61],t);
        if(match)
         {var i=match[1],match$0=caml_call1(Interval[9],i);
          if(match$0){var x=match$0[1];return [0,x]}
          throw [0,Assert_failure,_Cp_]}
        return 0}
      var
       Set=
        [0,
         create_from_intervals,
         create$0,
         contains_set,
         contains$0,
         ubound_exn$0,
         lbound_exn$0,
         ubound$0,
         lbound$0];
      return [0,T$0,Interval,Set]}
    var
     _Cq_=caml_call1(Bin_prot_Shape[3][1],cst_a$6),
     _Cr_=caml_call1(Bin_prot_Shape[4][1],cst_src_interval_ml_309_12),
     _Cs_=bin_shape_interval(caml_call2(Bin_prot_Shape[15],_Cr_,_Cq_)),
     _Ct_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$7),0],
     _Cu_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$67),_Ct_,_Cs_],0],
     _Cv_=caml_call1(Bin_prot_Shape[4][1],cst_src_interval_ml_309_0),
     group$34=caml_call2(Bin_prot_Shape[6],_Cv_,_Cu_);
    function bin_shape_t$41(a)
     {var _NS_=caml_call1(Bin_prot_Shape[2][1],cst_t$68);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$34,_NS_),[0,a,0])}
    function bin_size_t$28(size_of_a,v){return bin_size_interval(size_of_a,v)}
    function bin_write_t$28(write_a,buf,pos,v)
     {return bin_write_interval(write_a,buf,pos,v)}
    function bin_writer_t$36(bin_writer_a)
     {function _NO_(v)
       {var _NP_=bin_writer_a[2];
        return function(_NQ_,_NR_){return bin_write_t$28(_NP_,v,_NQ_,_NR_)}}
      return [0,function(v){return bin_size_t$28(bin_writer_a[1],v)},_NO_]}
    function bin_read_t$57(of_a,buf,pos_ref,vint)
     {return bin_read_interval(of_a,buf,pos_ref,vint)}
    function bin_read_t$58(of_a,buf,pos_ref)
     {return bin_read_interval$0(of_a,buf,pos_ref)}
    function bin_reader_t$36(bin_reader_a)
     {function _NN_(buf,pos_ref,vtag)
       {return bin_read_t$57(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$58(bin_reader_a[1],buf,pos_ref)},
              _NN_]}
    function bin_t$36(bin_a)
     {var _NL_=bin_reader_t$36(bin_a[3]),_NM_=bin_writer_t$36(bin_a[2]);
      return [0,bin_shape_t$41(bin_a[1]),_NM_,_NL_]}
    function compare$35(cmp_a,a_035,b_036)
     {return compare_interval
              (function(a_037,b_038){return caml_call2(cmp_a,a_037,b_038)},
               a_035,
               b_036)}
    var
     C=
      Raw_make
       ([0,
         caml_compare,
         runtime.caml_greaterequal,
         runtime.caml_lessequal,
         caml_equal,
         runtime.caml_greaterthan,
         runtime.caml_lessthan,
         runtime.caml_notequal]),
     _Cw_=C[2],
     _Cx_=_Cw_[1],
     _Cy_=_Cw_[2],
     _Cz_=_Cw_[4],
     _CA_=_Cw_[5],
     _CB_=_Cw_[6],
     _CC_=_Cw_[7],
     _CD_=_Cw_[8],
     _CE_=_Cw_[9],
     _CF_=_Cw_[10],
     _CG_=_Cw_[11],
     _CH_=_Cw_[12],
     _CI_=_Cw_[13],
     _CJ_=_Cw_[14],
     _CK_=_Cw_[15],
     _CL_=_Cw_[16],
     _CM_=_Cw_[17],
     _CN_=_Cw_[18],
     _CO_=_Cw_[19],
     _CP_=_Cw_[22],
     _CQ_=_Cw_[23],
     _CR_=_Cw_[24],
     _CS_=_Cw_[25],
     _CT_=_Cw_[26];
    function t_of_sexp$52(a_of_sexp,s)
     {var t=t_of_sexp$46(a_of_sexp,s);
      if(caml_call1(_Cy_,t))caml_call2(_bk_,cst_Interval_t_of_sexp_error_m,s);
      return t}
    var
     _CU_=caml_call1(Bin_prot_Shape[3][1],cst_a$8),
     _CV_=caml_call1(Bin_prot_Shape[4][1],cst_src_interval_ml_326_14),
     _CW_=
      caml_call1
       (_fh_,bin_shape_interval(caml_call2(Bin_prot_Shape[15],_CV_,_CU_))),
     _CX_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$9),0],
     _CY_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$69),_CX_,_CW_],0],
     _CZ_=caml_call1(Bin_prot_Shape[4][1],cst_src_interval_ml_326_2),
     group$35=caml_call2(Bin_prot_Shape[6],_CZ_,_CY_);
    function bin_shape_t$42(a)
     {var _NK_=caml_call1(Bin_prot_Shape[2][1],cst_t$70);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$35,_NK_),[0,a,0])}
    function bin_size_t$29(size_of_a,v)
     {return caml_call2
              (_fi_,
               function(_NJ_){return bin_size_interval(size_of_a,_NJ_)},
               v)}
    function bin_write_t$29(write_a,buf,pos,v)
     {return caml_call3
              (caml_call1
                (_fj_,
                 function(_NG_,_NH_,_NI_)
                  {return bin_write_interval(write_a,_NG_,_NH_,_NI_)}),
               buf,
               pos,
               v)}
    function bin_writer_t$37(bin_writer_a)
     {function _NC_(v)
       {var _ND_=bin_writer_a[2];
        return function(_NE_,_NF_){return bin_write_t$29(_ND_,v,_NE_,_NF_)}}
      return [0,function(v){return bin_size_t$29(bin_writer_a[1],v)},_NC_]}
    function bin_read_t$59(of_a,buf,pos_ref,vint)
     {return caml_call3
              (caml_call1
                (_fm_,
                 function(_NA_,_NB_)
                  {return bin_read_interval$0(of_a,_NA_,_NB_)}),
               buf,
               pos_ref,
               vint)}
    function bin_read_t$60(of_a,buf,pos_ref)
     {return caml_call2
              (caml_call1
                (_fl_,
                 function(_Ny_,_Nz_)
                  {return bin_read_interval$0(of_a,_Ny_,_Nz_)}),
               buf,
               pos_ref)}
    function bin_reader_t$37(bin_reader_a)
     {function _Nx_(buf,pos_ref,vtag)
       {return bin_read_t$59(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$60(bin_reader_a[1],buf,pos_ref)},
              _Nx_]}
    function bin_t$37(bin_a)
     {var _Nv_=bin_reader_t$37(bin_a[3]),_Nw_=bin_writer_t$37(bin_a[2]);
      return [0,bin_shape_t$42(bin_a[1]),_Nw_,_Nv_]}
    function t_of_sexp$53(of_a,t)
     {return caml_call2(_ft_,function(_Nu_){return t_of_sexp$46(of_a,_Nu_)},t)}
    function sexp_of_t$62(of_a,v)
     {return caml_call2(_fs_,function(_Nt_){return sexp_of_t$56(of_a,_Nt_)},v)}
    var
     include$40=C[3],
     create_from_intervals=include$40[1],
     create$7=include$40[2],
     contains_set=include$40[3],
     contains=include$40[4],
     ubound_exn=include$40[5],
     lbound_exn=include$40[6],
     ubound=include$40[7],
     lbound=include$40[8];
    function Make$0(Bound)
     {var
       _Nh_=bin_shape_interval(Bound[5]),
       _Ni_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$71),0,_Nh_],0],
       _Nj_=caml_call1(Bin_prot_Shape[4][1],cst_src_interval_ml_335_2),
       group=caml_call2(Bin_prot_Shape[6],_Nj_,_Ni_),
       _Nk_=caml_call1(Bin_prot_Shape[2][1],cst_t$72),
       bin_shape_t=caml_call1(caml_call2(Bin_prot_Shape[14],group,_Nk_),0);
      function bin_size_interval$0(v){return bin_size_interval(Bound[1],v)}
      function bin_write_interval$0(buf,pos,v)
       {return bin_write_interval(Bound[2],buf,pos,v)}
      var bin_writer_t=[0,bin_size_interval$0,bin_write_interval$0];
      function bin_read_interval$1(buf,pos_ref,vint)
       {return bin_read_interval(Bound[3],buf,pos_ref,vint)}
      function bin_read_interval$2(buf,pos_ref)
       {return bin_read_interval$0(Bound[3],buf,pos_ref)}
      var
       bin_reader_t=[0,bin_read_interval$2,bin_read_interval$1],
       bin_t=[0,bin_shape_t,bin_writer_t,bin_reader_t];
      function interval_of_sexp(t){return t_of_sexp$46(Bound[9],t)}
      function sexp_of_interval(v){return sexp_of_t$56(Bound[10],v)}
      function compare(a_045,b_046)
       {return compare_interval
                (function(a_047,b_048)
                  {return caml_call2(Bound[20],a_047,b_048)},
                 a_045,
                 b_046)}
      function hash_fold_t(hsv,arg){return hash_fold_t$19(Bound[11],hsv,arg)}
      function hash(x)
       {var hsv=caml_call2(Base_Hash[11],0,0),_Ns_=hash_fold_t(hsv,x);
        return caml_call1(Base_Hash[9],_Ns_)}
      var
       _Nl_=
        [0,
         [0,caml_call1(Bin_prot_Shape[2][1],cst_interval$3),0,bin_shape_t],
         0],
       _Nm_=caml_call1(Bin_prot_Shape[4][1],cst_src_interval_ml_336_2),
       group$0=caml_call2(Bin_prot_Shape[6],_Nm_,_Nl_),
       _Nn_=caml_call1(Bin_prot_Shape[2][1],cst_interval$4),
       bin_shape_interval$0=
        caml_call1(caml_call2(Bin_prot_Shape[14],group$0,_Nn_),0),
       bin_writer_interval=[0,bin_size_interval$0,bin_write_interval$0],
       bin_reader_interval=[0,bin_read_interval$2,bin_read_interval$1],
       bin_interval=
        [0,bin_shape_interval$0,bin_writer_interval,bin_reader_interval],
       compare$0=Bound[20],
       symbol=Bound[18],
       symbol$0=Bound[17],
       symbol$1=Bound[16],
       symbol$2=Bound[15],
       symbol$3=Bound[14],
       symbol$4=Bound[13],
       C=
        Raw_make
         ([0,compare$0,symbol$4,symbol$3,symbol$2,symbol$1,symbol$0,symbol]),
       include=C[2],
       empty=include[1],
       is_malformed=include[2],
       empty_cvt=include[3],
       create=include[4],
       intersect=include[5],
       is_empty=include[6],
       is_empty_or_singleton=include[7],
       bounds=include[8],
       lbound=include[9],
       ubound=include[10],
       bounds_exn=include[11],
       lbound_exn=include[12],
       ubound_exn=include[13],
       compare_value=include[14],
       contains=include[15],
       bound=include[16],
       is_superset=include[17],
       is_subset=include[18],
       map=include[19],
       interval_compare=include[20],
       are_disjoint_gen=include[21],
       are_disjoint=include[22],
       are_disjoint_as_open_intervals=include[23],
       list_intersect=include[24],
       half_open_intervals_are_a_part=include[25],
       convex_hull=include[26];
      function to_poly(t){return t}
      function t_of_sexp(s)
       {var t=interval_of_sexp(s);
        return caml_call1(is_malformed,t)
                ?caml_call3(_cz_,_C0_,caml_call1(Core_kernel_Sexp[81],s),0)
                :t}
      function t_of_sexp$0(t){return caml_call2(_ft_,interval_of_sexp,t)}
      function sexp_of_t(v){return caml_call2(_fs_,sexp_of_interval,v)}
      var
       _No_=caml_call1(_fh_,bin_shape_interval$0),
       _Np_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$73),0,_No_],0],
       _Nq_=caml_call1(Bin_prot_Shape[4][1],cst_src_interval_ml_359_4),
       group$1=caml_call2(Bin_prot_Shape[6],_Nq_,_Np_),
       _Nr_=caml_call1(Bin_prot_Shape[2][1],cst_t$74),
       bin_shape_t$0=caml_call1(caml_call2(Bin_prot_Shape[14],group$1,_Nr_),0);
      function bin_size_t(v){return caml_call2(_fi_,bin_size_interval$0,v)}
      function bin_write_t(buf,pos,v)
       {return caml_call3(caml_call1(_fj_,bin_write_interval$0),buf,pos,v)}
      var bin_writer_t$0=[0,bin_size_t,bin_write_t];
      function bin_read_t(buf,pos_ref,vint)
       {return caml_call3
                (caml_call1(_fm_,bin_read_interval$2),buf,pos_ref,vint)}
      function bin_read_t$0(buf,pos_ref)
       {return caml_call2(caml_call1(_fl_,bin_read_interval$2),buf,pos_ref)}
      var
       bin_reader_t$0=[0,bin_read_t$0,bin_read_t],
       bin_t$0=[0,bin_shape_t$0,bin_writer_t$0,bin_reader_t$0],
       include$0=C[3],
       create_from_intervals=include$0[1],
       create$0=include$0[2],
       contains_set=include$0[3],
       contains$0=include$0[4],
       ubound_exn$0=include$0[5],
       lbound_exn$0=include$0[6],
       ubound$0=include$0[7],
       lbound$0=include$0[8];
      function to_poly$0(t){return t}
      var
       Set=
        [0,
         t_of_sexp$0,
         sexp_of_t,
         bin_shape_t$0,
         bin_size_t,
         bin_write_t,
         bin_writer_t$0,
         bin_read_t,
         bin_read_t$0,
         bin_reader_t$0,
         bin_t$0,
         create_from_intervals,
         create$0,
         contains_set,
         contains$0,
         ubound_exn$0,
         lbound_exn$0,
         ubound$0,
         lbound$0,
         to_poly$0];
      return [0,
              bin_shape_t,
              bin_size_interval$0,
              bin_write_interval$0,
              bin_writer_t,
              bin_read_interval$1,
              bin_read_interval$2,
              bin_reader_t,
              bin_t,
              sexp_of_interval,
              compare,
              hash_fold_t,
              hash,
              bin_shape_interval$0,
              bin_size_interval$0,
              bin_write_interval$0,
              bin_writer_interval,
              bin_read_interval$1,
              bin_read_interval$2,
              bin_reader_interval,
              bin_interval,
              interval_of_sexp,
              sexp_of_interval,
              C,
              empty,
              is_malformed,
              empty_cvt,
              create,
              intersect,
              is_empty,
              is_empty_or_singleton,
              bounds,
              lbound,
              ubound,
              bounds_exn,
              lbound_exn,
              ubound_exn,
              compare_value,
              contains,
              bound,
              is_superset,
              is_subset,
              map,
              interval_compare,
              are_disjoint_gen,
              are_disjoint,
              are_disjoint_as_open_intervals,
              list_intersect,
              half_open_intervals_are_a_part,
              convex_hull,
              to_poly,
              t_of_sexp,
              Set]}
    var
     _C1_=Core_kernel_Float[142],
     _C2_=_C1_[1],
     _C3_=Core_kernel_Float[141],
     _C4_=_C3_[1],
     Float=
      Make$0
       ([0,
         Core_kernel_Float[109],
         Core_kernel_Float[110],
         Core_kernel_Float[111],
         Core_kernel_Float[112],
         Core_kernel_Float[113],
         Core_kernel_Float[114],
         Core_kernel_Float[115],
         Core_kernel_Float[116],
         Core_kernel_Float[117],
         Core_kernel_Float[118],
         Core_kernel_Float[143],
         Core_kernel_Float[144],
         Core_kernel_Float[121],
         Core_kernel_Float[122],
         Core_kernel_Float[123],
         Core_kernel_Float[124],
         Core_kernel_Float[125],
         Core_kernel_Float[126],
         Core_kernel_Float[127],
         Core_kernel_Float[128],
         Core_kernel_Float[129],
         Core_kernel_Float[130],
         Core_kernel_Float[131],
         Core_kernel_Float[132],
         Core_kernel_Float[133],
         Core_kernel_Float[134],
         Core_kernel_Float[135],
         Core_kernel_Float[140],
         Core_kernel_Float[136],
         Core_kernel_Float[137],
         Core_kernel_Float[138],
         Core_kernel_Float[139],
         [0,
          [0,_C4_[9],_C4_[10],_C4_[11]],
          _C3_[2],
          _C3_[3],
          _C3_[4],
          _C3_[5],
          _C3_[6],
          _C3_[7],
          _C3_[8],
          _C3_[9],
          _C3_[10],
          _C3_[11],
          _C3_[12],
          _C3_[13],
          _C3_[14],
          _C3_[15],
          _C3_[16],
          _C3_[17],
          _C3_[18],
          _C3_[19],
          _C3_[20],
          _C3_[21],
          _C3_[22],
          _C3_[23],
          _C3_[24],
          _C3_[25],
          _C3_[26],
          _C3_[27],
          _C3_[28],
          _C3_[29],
          _C3_[30],
          _C3_[31],
          _C3_[32],
          _C3_[33],
          _C3_[34],
          _C3_[35],
          _C3_[36],
          _C3_[37],
          _C3_[38],
          _C3_[39],
          _C3_[40],
          _C3_[41],
          _C3_[42],
          _C3_[43],
          _C3_[44],
          _C3_[45],
          _C3_[46],
          _C3_[47],
          _C3_[48],
          _C3_[49],
          _C3_[50],
          _C3_[51],
          _C3_[52],
          _C3_[53],
          _C3_[54],
          _C3_[55],
          _C3_[56],
          _C3_[57],
          _C3_[58],
          _C3_[59],
          _C3_[60],
          _C3_[61],
          _C3_[62],
          _C3_[63],
          _C3_[64],
          _C3_[65],
          _C3_[66],
          _C3_[67],
          _C3_[68],
          _C3_[69],
          _C3_[70],
          _C3_[71],
          _C3_[72],
          _C3_[73],
          _C3_[74],
          _C3_[75],
          _C3_[76],
          _C3_[77],
          _C3_[78],
          _C3_[79],
          _C3_[80],
          _C3_[81],
          _C3_[82],
          _C3_[83],
          _C3_[84],
          _C3_[85],
          _C3_[86],
          _C3_[87],
          _C3_[88],
          _C3_[89],
          _C3_[90],
          _C3_[91],
          _C3_[92],
          _C3_[93],
          _C3_[94],
          _C3_[95],
          _C3_[96],
          _C3_[97],
          _C3_[98],
          _C3_[99],
          _C3_[100],
          _C3_[101],
          _C3_[102]],
         [0,
          [0,_C2_[1],_C2_[2],_C2_[11]],
          _C1_[2],
          _C1_[3],
          _C1_[4],
          _C1_[5],
          _C1_[6],
          _C1_[7],
          _C1_[8],
          _C1_[9],
          _C1_[10],
          _C1_[11],
          _C1_[12],
          _C1_[13],
          _C1_[14],
          _C1_[15],
          _C1_[16],
          _C1_[17],
          _C1_[18],
          _C1_[19],
          _C1_[20],
          _C1_[21],
          _C1_[22],
          _C1_[23],
          _C1_[24],
          _C1_[25],
          _C1_[26],
          _C1_[27],
          _C1_[28],
          _C1_[29],
          _C1_[30],
          _C1_[31],
          _C1_[32],
          _C1_[33],
          _C1_[34],
          _C1_[35],
          _C1_[36],
          _C1_[37],
          _C1_[38],
          _C1_[39],
          _C1_[40],
          _C1_[41],
          _C1_[42],
          _C1_[43],
          _C1_[44],
          _C1_[45],
          _C1_[46],
          _C1_[47],
          _C1_[48],
          _C1_[49],
          _C1_[50],
          _C1_[51],
          _C1_[52],
          _C1_[53],
          _C1_[54],
          _C1_[55],
          _C1_[56],
          _C1_[57],
          _C1_[58],
          _C1_[59],
          _C1_[60],
          _C1_[61],
          _C1_[62],
          _C1_[63],
          _C1_[64],
          _C1_[65],
          _C1_[66],
          _C1_[67],
          _C1_[68],
          _C1_[69],
          _C1_[70],
          _C1_[71],
          _C1_[72],
          _C1_[73],
          _C1_[74],
          _C1_[75]]]),
     _C5_=_yt_[34],
     _C6_=_C5_[1],
     _C7_=_yt_[33],
     _C8_=_C7_[1],
     Ofday=
      Make$0
       ([0,
         _yt_[1],
         _yt_[2],
         _yt_[3],
         _yt_[4],
         _yt_[5],
         _yt_[6],
         _yt_[7],
         _yt_[8],
         _yt_[9],
         _yt_[10],
         _yt_[35],
         _yt_[36],
         _yt_[13],
         _yt_[14],
         _yt_[15],
         _yt_[16],
         _yt_[17],
         _yt_[18],
         _yt_[19],
         _yt_[20],
         _yt_[21],
         _yt_[22],
         _yt_[23],
         _yt_[24],
         _yt_[25],
         _yt_[26],
         _yt_[27],
         _yt_[32],
         _yt_[28],
         _yt_[29],
         _yt_[30],
         _yt_[31],
         [0,
          [0,_C8_[9],_C8_[10],_C8_[11]],
          _C7_[2],
          _C7_[3],
          _C7_[4],
          _C7_[5],
          _C7_[6],
          _C7_[7],
          _C7_[8],
          _C7_[9],
          _C7_[10],
          _C7_[11],
          _C7_[12],
          _C7_[13],
          _C7_[14],
          _C7_[15],
          _C7_[16],
          _C7_[17],
          _C7_[18],
          _C7_[19],
          _C7_[20],
          _C7_[21],
          _C7_[22],
          _C7_[23],
          _C7_[24],
          _C7_[25],
          _C7_[26],
          _C7_[27],
          _C7_[28],
          _C7_[29],
          _C7_[30],
          _C7_[31],
          _C7_[32],
          _C7_[33],
          _C7_[34],
          _C7_[35],
          _C7_[36],
          _C7_[37],
          _C7_[38],
          _C7_[39],
          _C7_[40],
          _C7_[41],
          _C7_[42],
          _C7_[43],
          _C7_[44],
          _C7_[45],
          _C7_[46],
          _C7_[47],
          _C7_[48],
          _C7_[49],
          _C7_[50],
          _C7_[51],
          _C7_[52],
          _C7_[53],
          _C7_[54],
          _C7_[55],
          _C7_[56],
          _C7_[57],
          _C7_[58],
          _C7_[59],
          _C7_[60],
          _C7_[61],
          _C7_[62],
          _C7_[63],
          _C7_[64],
          _C7_[65],
          _C7_[66],
          _C7_[67],
          _C7_[68],
          _C7_[69],
          _C7_[70],
          _C7_[71],
          _C7_[72],
          _C7_[73],
          _C7_[74],
          _C7_[75],
          _C7_[76],
          _C7_[77],
          _C7_[78],
          _C7_[79],
          _C7_[80],
          _C7_[81],
          _C7_[82],
          _C7_[83],
          _C7_[84],
          _C7_[85],
          _C7_[86],
          _C7_[87],
          _C7_[88],
          _C7_[89],
          _C7_[90],
          _C7_[91],
          _C7_[92],
          _C7_[93],
          _C7_[94],
          _C7_[95],
          _C7_[96],
          _C7_[97],
          _C7_[98],
          _C7_[99],
          _C7_[100],
          _C7_[101],
          _C7_[102]],
         [0,
          [0,_C6_[1],_C6_[2],_C6_[11]],
          _C5_[2],
          _C5_[3],
          _C5_[4],
          _C5_[5],
          _C5_[6],
          _C5_[7],
          _C5_[8],
          _C5_[9],
          _C5_[10],
          _C5_[11],
          _C5_[12],
          _C5_[13],
          _C5_[14],
          _C5_[15],
          _C5_[16],
          _C5_[17],
          _C5_[18],
          _C5_[19],
          _C5_[20],
          _C5_[21],
          _C5_[22],
          _C5_[23],
          _C5_[24],
          _C5_[25],
          _C5_[26],
          _C5_[27],
          _C5_[28],
          _C5_[29],
          _C5_[30],
          _C5_[31],
          _C5_[32],
          _C5_[33],
          _C5_[34],
          _C5_[35],
          _C5_[36],
          _C5_[37],
          _C5_[38],
          _C5_[39],
          _C5_[40],
          _C5_[41],
          _C5_[42],
          _C5_[43],
          _C5_[44],
          _C5_[45],
          _C5_[46],
          _C5_[47],
          _C5_[48],
          _C5_[49],
          _C5_[50],
          _C5_[51],
          _C5_[52],
          _C5_[53],
          _C5_[54],
          _C5_[55],
          _C5_[56],
          _C5_[57],
          _C5_[58],
          _C5_[59],
          _C5_[60],
          _C5_[61],
          _C5_[62],
          _C5_[63],
          _C5_[64],
          _C5_[65],
          _C5_[66],
          _C5_[67],
          _C5_[68],
          _C5_[69],
          _C5_[70],
          _C5_[71],
          _C5_[72],
          _C5_[73],
          _C5_[74],
          _C5_[75]]]),
     _C9_=Core_kernel_Time_ns[2][34],
     _C__=_C9_[1],
     _C$_=Core_kernel_Time_ns[2][33],
     _Da_=_C$_[1],
     Ofday_ns=
      Make$0
       ([0,
         _BF_[1],
         _BF_[2],
         _BF_[3],
         _BF_[4],
         _BF_[5],
         _BF_[6],
         _BF_[7],
         _BF_[8],
         _BF_[9],
         _BF_[10],
         _BF_[32],
         _BF_[33],
         _BF_[13],
         _BF_[14],
         _BF_[15],
         _BF_[16],
         _BF_[17],
         _BF_[18],
         _BF_[19],
         _BF_[20],
         _BF_[21],
         _BF_[22],
         _BF_[23],
         _BF_[24],
         _BF_[25],
         _BF_[26],
         _BF_[27],
         _BF_[31],
         _BF_[28],
         _BF_[29],
         _BF_[30],
         Core_kernel_Time_ns[2][31],
         [0,
          [0,_Da_[9],_Da_[10],_Da_[11]],
          _C$_[2],
          _C$_[3],
          _C$_[4],
          _C$_[5],
          _C$_[6],
          _C$_[7],
          _C$_[8],
          _C$_[9],
          _C$_[10],
          _C$_[11],
          _C$_[12],
          _C$_[13],
          _C$_[14],
          _C$_[15],
          _C$_[16],
          _C$_[17],
          _C$_[18],
          _C$_[19],
          _C$_[20],
          _C$_[21],
          _C$_[22],
          _C$_[23],
          _C$_[24],
          _C$_[25],
          _C$_[26],
          _C$_[27],
          _C$_[28],
          _C$_[29],
          _C$_[30],
          _C$_[31],
          _C$_[32],
          _C$_[33],
          _C$_[34],
          _C$_[35],
          _C$_[36],
          _C$_[37],
          _C$_[38],
          _C$_[39],
          _C$_[40],
          _C$_[41],
          _C$_[42],
          _C$_[43],
          _C$_[44],
          _C$_[45],
          _C$_[46],
          _C$_[47],
          _C$_[48],
          _C$_[49],
          _C$_[50],
          _C$_[51],
          _C$_[52],
          _C$_[53],
          _C$_[54],
          _C$_[55],
          _C$_[56],
          _C$_[57],
          _C$_[58],
          _C$_[59],
          _C$_[60],
          _C$_[61],
          _C$_[62],
          _C$_[63],
          _C$_[64],
          _C$_[65],
          _C$_[66],
          _C$_[67],
          _C$_[68],
          _C$_[69],
          _C$_[70],
          _C$_[71],
          _C$_[72],
          _C$_[73],
          _C$_[74],
          _C$_[75],
          _C$_[76],
          _C$_[77],
          _C$_[78],
          _C$_[79],
          _C$_[80],
          _C$_[81],
          _C$_[82],
          _C$_[83],
          _C$_[84],
          _C$_[85],
          _C$_[86],
          _C$_[87],
          _C$_[88],
          _C$_[89],
          _C$_[90],
          _C$_[91],
          _C$_[92],
          _C$_[93],
          _C$_[94],
          _C$_[95],
          _C$_[96],
          _C$_[97],
          _C$_[98],
          _C$_[99],
          _C$_[100],
          _C$_[101],
          _C$_[102]],
         [0,
          [0,_C__[1],_C__[2],_C__[11]],
          _C9_[2],
          _C9_[3],
          _C9_[4],
          _C9_[5],
          _C9_[6],
          _C9_[7],
          _C9_[8],
          _C9_[9],
          _C9_[10],
          _C9_[11],
          _C9_[12],
          _C9_[13],
          _C9_[14],
          _C9_[15],
          _C9_[16],
          _C9_[17],
          _C9_[18],
          _C9_[19],
          _C9_[20],
          _C9_[21],
          _C9_[22],
          _C9_[23],
          _C9_[24],
          _C9_[25],
          _C9_[26],
          _C9_[27],
          _C9_[28],
          _C9_[29],
          _C9_[30],
          _C9_[31],
          _C9_[32],
          _C9_[33],
          _C9_[34],
          _C9_[35],
          _C9_[36],
          _C9_[37],
          _C9_[38],
          _C9_[39],
          _C9_[40],
          _C9_[41],
          _C9_[42],
          _C9_[43],
          _C9_[44],
          _C9_[45],
          _C9_[46],
          _C9_[47],
          _C9_[48],
          _C9_[49],
          _C9_[50],
          _C9_[51],
          _C9_[52],
          _C9_[53],
          _C9_[54],
          _C9_[55],
          _C9_[56],
          _C9_[57],
          _C9_[58],
          _C9_[59],
          _C9_[60],
          _C9_[61],
          _C9_[62],
          _C9_[63],
          _C9_[64],
          _C9_[65],
          _C9_[66],
          _C9_[67],
          _C9_[68],
          _C9_[69],
          _C9_[70],
          _C9_[71],
          _C9_[72],
          _C9_[73],
          _C9_[74],
          _C9_[75]]]),
     _Db_=Core_kernel_Int[126],
     _Dc_=_Db_[1],
     _Dd_=Core_kernel_Int[125],
     _De_=_Dd_[1],
     include$41=
      Make$0
       ([0,
         Core_kernel_Int[92],
         Core_kernel_Int[93],
         Core_kernel_Int[94],
         Core_kernel_Int[95],
         Core_kernel_Int[96],
         Core_kernel_Int[97],
         Core_kernel_Int[98],
         Core_kernel_Int[99],
         Core_kernel_Int[100],
         Core_kernel_Int[101],
         Core_kernel_Int[127],
         Core_kernel_Int[128],
         Core_kernel_Int[105],
         Core_kernel_Int[106],
         Core_kernel_Int[107],
         Core_kernel_Int[108],
         Core_kernel_Int[109],
         Core_kernel_Int[110],
         Core_kernel_Int[111],
         Core_kernel_Int[112],
         Core_kernel_Int[113],
         Core_kernel_Int[114],
         Core_kernel_Int[115],
         Core_kernel_Int[116],
         Core_kernel_Int[117],
         Core_kernel_Int[118],
         Core_kernel_Int[119],
         Core_kernel_Int[124],
         Core_kernel_Int[120],
         Core_kernel_Int[121],
         Core_kernel_Int[122],
         Core_kernel_Int[123],
         [0,
          [0,_De_[9],_De_[10],_De_[11]],
          _Dd_[2],
          _Dd_[3],
          _Dd_[4],
          _Dd_[5],
          _Dd_[6],
          _Dd_[7],
          _Dd_[8],
          _Dd_[9],
          _Dd_[10],
          _Dd_[11],
          _Dd_[12],
          _Dd_[13],
          _Dd_[14],
          _Dd_[15],
          _Dd_[16],
          _Dd_[17],
          _Dd_[18],
          _Dd_[19],
          _Dd_[20],
          _Dd_[21],
          _Dd_[22],
          _Dd_[23],
          _Dd_[24],
          _Dd_[25],
          _Dd_[26],
          _Dd_[27],
          _Dd_[28],
          _Dd_[29],
          _Dd_[30],
          _Dd_[31],
          _Dd_[32],
          _Dd_[33],
          _Dd_[34],
          _Dd_[35],
          _Dd_[36],
          _Dd_[37],
          _Dd_[38],
          _Dd_[39],
          _Dd_[40],
          _Dd_[41],
          _Dd_[42],
          _Dd_[43],
          _Dd_[44],
          _Dd_[45],
          _Dd_[46],
          _Dd_[47],
          _Dd_[48],
          _Dd_[49],
          _Dd_[50],
          _Dd_[51],
          _Dd_[52],
          _Dd_[53],
          _Dd_[54],
          _Dd_[55],
          _Dd_[56],
          _Dd_[57],
          _Dd_[58],
          _Dd_[59],
          _Dd_[60],
          _Dd_[61],
          _Dd_[62],
          _Dd_[63],
          _Dd_[64],
          _Dd_[65],
          _Dd_[66],
          _Dd_[67],
          _Dd_[68],
          _Dd_[69],
          _Dd_[70],
          _Dd_[71],
          _Dd_[72],
          _Dd_[73],
          _Dd_[74],
          _Dd_[75],
          _Dd_[76],
          _Dd_[77],
          _Dd_[78],
          _Dd_[79],
          _Dd_[80],
          _Dd_[81],
          _Dd_[82],
          _Dd_[83],
          _Dd_[84],
          _Dd_[85],
          _Dd_[86],
          _Dd_[87],
          _Dd_[88],
          _Dd_[89],
          _Dd_[90],
          _Dd_[91],
          _Dd_[92],
          _Dd_[93],
          _Dd_[94],
          _Dd_[95],
          _Dd_[96],
          _Dd_[97],
          _Dd_[98],
          _Dd_[99],
          _Dd_[100],
          _Dd_[101],
          _Dd_[102]],
         [0,
          [0,_Dc_[1],_Dc_[2],_Dc_[11]],
          _Db_[2],
          _Db_[3],
          _Db_[4],
          _Db_[5],
          _Db_[6],
          _Db_[7],
          _Db_[8],
          _Db_[9],
          _Db_[10],
          _Db_[11],
          _Db_[12],
          _Db_[13],
          _Db_[14],
          _Db_[15],
          _Db_[16],
          _Db_[17],
          _Db_[18],
          _Db_[19],
          _Db_[20],
          _Db_[21],
          _Db_[22],
          _Db_[23],
          _Db_[24],
          _Db_[25],
          _Db_[26],
          _Db_[27],
          _Db_[28],
          _Db_[29],
          _Db_[30],
          _Db_[31],
          _Db_[32],
          _Db_[33],
          _Db_[34],
          _Db_[35],
          _Db_[36],
          _Db_[37],
          _Db_[38],
          _Db_[39],
          _Db_[40],
          _Db_[41],
          _Db_[42],
          _Db_[43],
          _Db_[44],
          _Db_[45],
          _Db_[46],
          _Db_[47],
          _Db_[48],
          _Db_[49],
          _Db_[50],
          _Db_[51],
          _Db_[52],
          _Db_[53],
          _Db_[54],
          _Db_[55],
          _Db_[56],
          _Db_[57],
          _Db_[58],
          _Db_[59],
          _Db_[60],
          _Db_[61],
          _Db_[62],
          _Db_[63],
          _Db_[64],
          _Db_[65],
          _Db_[66],
          _Db_[67],
          _Db_[68],
          _Db_[69],
          _Db_[70],
          _Db_[71],
          _Db_[72],
          _Db_[73],
          _Db_[74],
          _Db_[75]]]),
     bin_shape_t$43=include$41[1],
     bin_size_t$30=include$41[2],
     bin_write_t$30=include$41[3],
     bin_writer_t$38=include$41[4],
     bin_read_t$61=include$41[5],
     bin_read_t$62=include$41[6],
     bin_reader_t$38=include$41[7],
     bin_t$38=include$41[8],
     sexp_of_t$63=include$41[9],
     compare$36=include$41[10],
     hash_fold_t$20=include$41[11],
     hash$23=include$41[12],
     empty$4=include$41[24],
     create$8=include$41[27],
     intersect$0=include$41[28],
     is_empty$0=include$41[29],
     is_empty_or_singleton=include$41[30],
     bounds=include$41[31],
     lbound$0=include$41[32],
     ubound$0=include$41[33],
     bounds_exn=include$41[34],
     lbound_exn$0=include$41[35],
     ubound_exn$0=include$41[36],
     compare_value=include$41[37],
     contains$0=include$41[38],
     bound=include$41[39],
     is_superset=include$41[40],
     is_subset$1=include$41[41],
     map$6=include$41[42],
     are_disjoint$0=include$41[45],
     are_disjoint_as_open_intervals=include$41[46],
     list_intersect=include$41[47],
     half_open_intervals_are_a_part=include$41[48],
     convex_hull=include$41[49],
     to_poly=include$41[50],
     t_of_sexp$54=include$41[51],
     Set$15=include$41[52];
    function length(t)
     {if(t)
       {var hi=t[2],lo=t[1],len=(1 + hi | 0) - lo | 0;
        if(caml_call2(Core_kernel_Int[123][5],len,0))
         caml_call5(_cB_,0,_Df_,cst_interval_length_not_repres,t,sexp_of_t$63);
        return len}
      return 0}
    function get$1(t,i)
     {function fail(param)
       {return caml_call5
                (_cB_,
                 0,
                 _Dg_,
                 cst_index_out_of_bounds,
                 [0,i,t],
                 function(param)
                  {var
                    v1=param[2],
                    v0=param[1],
                    v0$0=caml_call1(_es_,v0),
                    v1$0=caml_call1(sexp_of_t$63,v1);
                   return [1,[0,v0$0,[0,v1$0,0]]]})}
      if(t)
       {var hi=t[2],lo=t[1];
        if(caml_call2(Core_kernel_Int[123][5],i,0))fail(0);
        var
         x=lo + i | 0,
         _Nf_=caml_call2(Core_kernel_Int[123][5],x,lo),
         _Ng_=_Nf_ || caml_call2(Core_kernel_Int[123][4],x,hi);
        if(_Ng_)fail(0);
        return x}
      return fail(0)}
    function iter$6(t,f)
     {if(t)
       {var hi=t[2],lo=t[1];
        if(! (hi < lo))
         {var x=lo;
          for(;;)
           {caml_call1(f,x);
            var _Ne_=x + 1 | 0;
            if(hi !== x){var x=_Ne_;continue}
            break}}
        return 0}
      return 0}
    function fold$6(t,init,f)
     {if(t)
       {var hi=t[2],lo$1=t[1],lo=lo$1,acc=init;
        for(;;)
         {if(caml_call2(Core_kernel_Int[123][3],lo,hi))
           return caml_call2(f,acc,hi);
          var acc$0=caml_call2(f,acc,lo),lo$0=lo + 1 | 0,lo=lo$0,acc=acc$0;
          continue}}
      return init}
    var
     iter$7=[0,-198771759,iter$6],
     length$0=[0,-198771759,length],
     For_container=
      caml_call1
       (Base_Container[17],
        [0,[0,Core_kernel_Int[111]],fold$6,iter$7,length$0]),
     exists$5=For_container[8],
     for_all$5=For_container[9],
     sum=For_container[11],
     count=For_container[10],
     find$0=For_container[12],
     find_map=For_container[13],
     to_list$5=For_container[14],
     to_array=For_container[15],
     fold_result=For_container[6],
     fold_until=For_container[7];
    function min_elt(t,compare)
     {return caml_call2(_cL_,compare,Core_kernel_Int[112])
              ?caml_call1(lbound$0,t)
              :caml_call2(For_container[16],t,compare)}
    function max_elt(t,compare)
     {return caml_call2(_cL_,compare,Core_kernel_Int[112])
              ?caml_call1(ubound$0,t)
              :caml_call2(For_container[17],t,compare)}
    function mem(t,x)
     {return caml_call2(_cL_,Core_kernel_Int[123][7],Core_kernel_Int[111])
              ?caml_call2(contains$0,t,x)
              :caml_call2(For_container[1],t,x)}
    var
     For_binary_search=
      caml_call1(Base_Binary_searchable[1],[0,get$1,length]);
    function binary_search(pos,len,t,compare,which,elt)
     {function _Nc_(x){return x - caml_call1(lbound_exn$0,t) | 0}
      var
       zero_based_pos=caml_call2(Core_kernel_Option[39],pos,_Nc_),
       zero_based_result=
        caml_call6
         (For_binary_search[1],zero_based_pos,len,t,compare,which,elt);
      function _Nd_(x){return x + caml_call1(lbound_exn$0,t) | 0}
      return caml_call2(Core_kernel_Option[39],zero_based_result,_Nd_)}
    function binary_search_segmented(pos,len,t,segment_of,which)
     {function _Na_(x){return x - caml_call1(lbound_exn$0,t) | 0}
      var
       zero_based_pos=caml_call2(Core_kernel_Option[39],pos,_Na_),
       zero_based_result=
        caml_call5(For_binary_search[2],zero_based_pos,len,t,segment_of,which);
      function _Nb_(x){return x + caml_call1(lbound_exn$0,t) | 0}
      return caml_call2(Core_kernel_Option[39],zero_based_result,_Nb_)}
    var Private$2=[0,get$1];
    function Make_time(Time)
     {var
       include=
        Make$0
         ([0,
           Time[1],
           Time[2],
           Time[3],
           Time[4],
           Time[5],
           Time[6],
           Time[7],
           Time[8],
           Time[9],
           Time[10],
           Time[11],
           Time[12],
           Time[13],
           Time[14],
           Time[15],
           Time[16],
           Time[17],
           Time[18],
           Time[19],
           Time[20],
           Time[21],
           Time[22],
           Time[23],
           Time[24],
           Time[25],
           Time[26],
           Time[27],
           Time[28],
           Time[29],
           Time[30],
           Time[31],
           Time[32],
           Time[33],
           Time[34]]),
       bin_shape_t=include[1],
       bin_size_t=include[2],
       bin_write_t=include[3],
       bin_writer_t=include[4],
       bin_read_t=include[5],
       bin_read_t$0=include[6],
       bin_reader_t=include[7],
       bin_t=include[8],
       sexp_of_t=include[9],
       compare=include[10],
       hash_fold_t=include[11],
       hash=include[12],
       bin_shape_interval=include[13],
       bin_size_interval=include[14],
       bin_write_interval=include[15],
       bin_writer_interval=include[16],
       bin_read_interval=include[17],
       bin_read_interval$0=include[18],
       bin_reader_interval=include[19],
       bin_interval=include[20],
       interval_of_sexp=include[21],
       sexp_of_interval=include[22],
       C=include[23],
       empty=include[24],
       is_malformed=include[25],
       empty_cvt=include[26],
       create=include[27],
       intersect=include[28],
       is_empty=include[29],
       is_empty_or_singleton=include[30],
       bounds=include[31],
       lbound=include[32],
       ubound=include[33],
       bounds_exn=include[34],
       lbound_exn=include[35],
       ubound_exn=include[36],
       compare_value=include[37],
       contains=include[38],
       bound=include[39],
       is_superset=include[40],
       is_subset=include[41],
       map=include[42],
       interval_compare=include[43],
       are_disjoint_gen=include[44],
       are_disjoint=include[45],
       are_disjoint_as_open_intervals=include[46],
       list_intersect=include[47],
       half_open_intervals_are_a_part=include[48],
       convex_hull=include[49],
       to_poly=include[50],
       t_of_sexp=include[51],
       Set=include[52];
      function create_ending_after(zone,param,now)
       {var close_ofday=param[2],open_ofday=param[1];
        if(zone)
         var z=zone[1],zone$0=z;
        else
         var
          _M9_=Time[36][1],
          _M__=caml_obj_tag(_M9_),
          _M$_=
           250 === _M__
            ?_M9_[1]
            :246 === _M__?caml_call1(CamlinternalLazy[2],_M9_):_M9_,
          zone$0=_M$_;
        var
         close_time=caml_call4(Time[37],476625469,now,close_ofday,zone$0),
         open_time=caml_call4(Time[37],141996408,close_time,open_ofday,zone$0);
        return caml_call2(create,open_time,close_time)}
      function create_ending_before(zone,param,ubound)
       {var close_ofday=param[2],open_ofday=param[1];
        if(zone)
         var z=zone[1],zone$0=z;
        else
         var
          _M6_=Time[36][1],
          _M7_=caml_obj_tag(_M6_),
          _M8_=
           250 === _M7_
            ?_M6_[1]
            :246 === _M7_?caml_call1(CamlinternalLazy[2],_M6_):_M6_,
          zone$0=_M8_;
        var
         close_time=caml_call4(Time[37],141996408,ubound,close_ofday,zone$0),
         open_time=caml_call4(Time[37],141996408,close_time,open_ofday,zone$0);
        return caml_call2(create,open_time,close_time)}
      return [0,
              bin_shape_t,
              bin_size_t,
              bin_write_t,
              bin_writer_t,
              bin_read_t,
              bin_read_t$0,
              bin_reader_t,
              bin_t,
              sexp_of_t,
              compare,
              hash_fold_t,
              hash,
              bin_shape_interval,
              bin_size_interval,
              bin_write_interval,
              bin_writer_interval,
              bin_read_interval,
              bin_read_interval$0,
              bin_reader_interval,
              bin_interval,
              interval_of_sexp,
              sexp_of_interval,
              C,
              empty,
              is_malformed,
              empty_cvt,
              create,
              intersect,
              is_empty,
              is_empty_or_singleton,
              bounds,
              lbound,
              ubound,
              bounds_exn,
              lbound_exn,
              ubound_exn,
              compare_value,
              contains,
              bound,
              is_superset,
              is_subset,
              map,
              interval_compare,
              are_disjoint_gen,
              are_disjoint,
              are_disjoint_as_open_intervals,
              list_intersect,
              half_open_intervals_are_a_part,
              convex_hull,
              to_poly,
              t_of_sexp,
              Set,
              create_ending_after,
              create_ending_before]}
    var
     _Dh_=_yq_[1],
     _Di_=_yr_[1],
     Time=
      Make_time
       ([0,
         _yf_,
         _ye_,
         _yd_,
         _yc_,
         _yb_,
         _ya_,
         _x$_,
         _x__,
         _w4_,
         _w3_,
         _x9_,
         _x8_,
         _xU_,
         _xT_,
         _xS_,
         _xR_,
         _xQ_,
         _xP_,
         _xO_,
         _xN_,
         _xM_,
         _xL_,
         _xK_,
         _xJ_,
         _xI_,
         _xH_,
         _xG_,
         _xF_,
         _xE_,
         _xD_,
         _xC_,
         _ys_,
         [0,
          [0,_Di_[9],_Di_[10],_Di_[11]],
          _yr_[2],
          _yr_[3],
          _yr_[4],
          _yr_[5],
          _yr_[6],
          _yr_[7],
          _yr_[8],
          _yr_[9],
          _yr_[10],
          _yr_[11],
          _yr_[12],
          _yr_[13],
          _yr_[14],
          _yr_[15],
          _yr_[16],
          _yr_[17],
          _yr_[18],
          _yr_[19],
          _yr_[20],
          _yr_[21],
          _yr_[22],
          _yr_[23],
          _yr_[24],
          _yr_[25],
          _yr_[26],
          _yr_[27],
          _yr_[28],
          _yr_[29],
          _yr_[30],
          _yr_[31],
          _yr_[32],
          _yr_[33],
          _yr_[34],
          _yr_[35],
          _yr_[36],
          _yr_[37],
          _yr_[38],
          _yr_[39],
          _yr_[40],
          _yr_[41],
          _yr_[42],
          _yr_[43],
          _yr_[44],
          _yr_[45],
          _yr_[46],
          _yr_[47],
          _yr_[48],
          _yr_[49],
          _yr_[50],
          _yr_[51],
          _yr_[52],
          _yr_[53],
          _yr_[54],
          _yr_[55],
          _yr_[56],
          _yr_[57],
          _yr_[58],
          _yr_[59],
          _yr_[60],
          _yr_[61],
          _yr_[62],
          _yr_[63],
          _yr_[64],
          _yr_[65],
          _yr_[66],
          _yr_[67],
          _yr_[68],
          _yr_[69],
          _yr_[70],
          _yr_[71],
          _yr_[72],
          _yr_[73],
          _yr_[74],
          _yr_[75],
          _yr_[76],
          _yr_[77],
          _yr_[78],
          _yr_[79],
          _yr_[80],
          _yr_[81],
          _yr_[82],
          _yr_[83],
          _yr_[84],
          _yr_[85],
          _yr_[86],
          _yr_[87],
          _yr_[88],
          _yr_[89],
          _yr_[90],
          _yr_[91],
          _yr_[92],
          _yr_[93],
          _yr_[94],
          _yr_[95],
          _yr_[96],
          _yr_[97],
          _yr_[98],
          _yr_[99],
          _yr_[100],
          _yr_[101],
          _yr_[102]],
         [0,
          [0,_Dh_[1],_Dh_[2],_Dh_[11]],
          _yq_[2],
          _yq_[3],
          _yq_[4],
          _yq_[5],
          _yq_[6],
          _yq_[7],
          _yq_[8],
          _yq_[9],
          _yq_[10],
          _yq_[11],
          _yq_[12],
          _yq_[13],
          _yq_[14],
          _yq_[15],
          _yq_[16],
          _yq_[17],
          _yq_[18],
          _yq_[19],
          _yq_[20],
          _yq_[21],
          _yq_[22],
          _yq_[23],
          _yq_[24],
          _yq_[25],
          _yq_[26],
          _yq_[27],
          _yq_[28],
          _yq_[29],
          _yq_[30],
          _yq_[31],
          _yq_[32],
          _yq_[33],
          _yq_[34],
          _yq_[35],
          _yq_[36],
          _yq_[37],
          _yq_[38],
          _yq_[39],
          _yq_[40],
          _yq_[41],
          _yq_[42],
          _yq_[43],
          _yq_[44],
          _yq_[45],
          _yq_[46],
          _yq_[47],
          _yq_[48],
          _yq_[49],
          _yq_[50],
          _yq_[51],
          _yq_[52],
          _yq_[53],
          _yq_[54],
          _yq_[55],
          _yq_[56],
          _yq_[57],
          _yq_[58],
          _yq_[59],
          _yq_[60],
          _yq_[61],
          _yq_[62],
          _yq_[63],
          _yq_[64],
          _yq_[65],
          _yq_[66],
          _yq_[67],
          _yq_[68],
          _yq_[69],
          _yq_[70],
          _yq_[71],
          _yq_[72],
          _yq_[73],
          _yq_[74],
          _yq_[75]],
         [0],
         [0,_yu_[68]],
         _w6_]),
     _Dj_=Set$14[1],
     _Dk_=Map$14[1],
     Time_ns=
      Make_time
       ([0,
         bin_size_t$21,
         bin_write_t$21,
         bin_read_t$43,
         bin_read_t$44,
         bin_shape_t$34,
         bin_writer_t$29,
         bin_reader_t$29,
         bin_t$29,
         t_of_sexp$44,
         sexp_of_t$55,
         hash_fold_t$18,
         hash$22,
         symbol$86,
         symbol$85,
         symbol$84,
         symbol$83,
         symbol$82,
         symbol$81,
         equal$10,
         compare$27,
         min$9,
         max$9,
         ascending$10,
         descending$10,
         between$10,
         clamp_exn$10,
         clamp$10,
         comparator$21,
         validate_lbound$10,
         validate_ubound$10,
         validate_bound$10,
         Replace_polymorphic_compare$9,
         [0,
          [0,_Dk_[9],_Dk_[10],_Dk_[11]],
          Map$14[2],
          Map$14[3],
          Map$14[4],
          Map$14[5],
          Map$14[6],
          Map$14[7],
          Map$14[8],
          Map$14[9],
          Map$14[10],
          Map$14[11],
          Map$14[12],
          Map$14[13],
          Map$14[14],
          Map$14[15],
          Map$14[16],
          Map$14[17],
          Map$14[18],
          Map$14[19],
          Map$14[20],
          Map$14[21],
          Map$14[22],
          Map$14[23],
          Map$14[24],
          Map$14[25],
          Map$14[26],
          Map$14[27],
          Map$14[28],
          Map$14[29],
          Map$14[30],
          Map$14[31],
          Map$14[32],
          Map$14[33],
          Map$14[34],
          Map$14[35],
          Map$14[36],
          Map$14[37],
          Map$14[38],
          Map$14[39],
          Map$14[40],
          Map$14[41],
          Map$14[42],
          Map$14[43],
          Map$14[44],
          Map$14[45],
          Map$14[46],
          Map$14[47],
          Map$14[48],
          Map$14[49],
          Map$14[50],
          Map$14[51],
          Map$14[52],
          Map$14[53],
          Map$14[54],
          Map$14[55],
          Map$14[56],
          Map$14[57],
          Map$14[58],
          Map$14[59],
          Map$14[60],
          Map$14[61],
          Map$14[62],
          Map$14[63],
          Map$14[64],
          Map$14[65],
          Map$14[66],
          Map$14[67],
          Map$14[68],
          Map$14[69],
          Map$14[70],
          Map$14[71],
          Map$14[72],
          Map$14[73],
          Map$14[74],
          Map$14[75],
          Map$14[76],
          Map$14[77],
          Map$14[78],
          Map$14[79],
          Map$14[80],
          Map$14[81],
          Map$14[82],
          Map$14[83],
          Map$14[84],
          Map$14[85],
          Map$14[86],
          Map$14[87],
          Map$14[88],
          Map$14[89],
          Map$14[90],
          Map$14[91],
          Map$14[92],
          Map$14[93],
          Map$14[94],
          Map$14[95],
          Map$14[96],
          Map$14[97],
          Map$14[98],
          Map$14[99],
          Map$14[100],
          Map$14[101],
          Map$14[102]],
         [0,
          [0,_Dj_[1],_Dj_[2],_Dj_[11]],
          Set$14[2],
          Set$14[3],
          Set$14[4],
          Set$14[5],
          Set$14[6],
          Set$14[7],
          Set$14[8],
          Set$14[9],
          Set$14[10],
          Set$14[11],
          Set$14[12],
          Set$14[13],
          Set$14[14],
          Set$14[15],
          Set$14[16],
          Set$14[17],
          Set$14[18],
          Set$14[19],
          Set$14[20],
          Set$14[21],
          Set$14[22],
          Set$14[23],
          Set$14[24],
          Set$14[25],
          Set$14[26],
          Set$14[27],
          Set$14[28],
          Set$14[29],
          Set$14[30],
          Set$14[31],
          Set$14[32],
          Set$14[33],
          Set$14[34],
          Set$14[35],
          Set$14[36],
          Set$14[37],
          Set$14[38],
          Set$14[39],
          Set$14[40],
          Set$14[41],
          Set$14[42],
          Set$14[43],
          Set$14[44],
          Set$14[45],
          Set$14[46],
          Set$14[47],
          Set$14[48],
          Set$14[49],
          Set$14[50],
          Set$14[51],
          Set$14[52],
          Set$14[53],
          Set$14[54],
          Set$14[55],
          Set$14[56],
          Set$14[57],
          Set$14[58],
          Set$14[59],
          Set$14[60],
          Set$14[61],
          Set$14[62],
          Set$14[63],
          Set$14[64],
          Set$14[65],
          Set$14[66],
          Set$14[67],
          Set$14[68],
          Set$14[69],
          Set$14[70],
          Set$14[71],
          Set$14[72],
          Set$14[73],
          Set$14[74],
          Set$14[75]],
         [0],
         [0,_yu_[68]],
         _zj_]);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$49);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Interval$0);
    var
     _Dl_=
      [0,
       [0,
        bin_shape_t$35,
        bin_size_t$22,
        bin_write_t$22,
        bin_read_t$46,
        bin_read_t$45,
        bin_writer_t$30,
        bin_reader_t$30,
        bin_t$30,
        compare$29,
        t_of_sexp$46,
        sexp_of_t$56,
        [0,
         bin_size_t$23,
         bin_write_t$23,
         bin_read_t$48,
         bin_read_t$47,
         bin_shape_t$36,
         bin_writer_t$31,
         bin_reader_t$31,
         bin_t$31,
         compare$30,
         t_of_sexp$47,
         sexp_of_t$57,
         comparator$22],
        [0,
         bin_size_t$24,
         bin_write_t$24,
         bin_read_t$50,
         bin_read_t$49,
         bin_shape_t$37,
         bin_writer_t$32,
         bin_reader_t$32,
         bin_t$32,
         compare$31,
         t_of_sexp$48,
         sexp_of_t$58,
         comparator$23],
        [0,
         bin_size_t$25,
         bin_write_t$25,
         bin_read_t$52,
         bin_read_t$51,
         bin_shape_t$38,
         bin_writer_t$33,
         bin_reader_t$33,
         bin_t$33,
         compare$32,
         t_of_sexp$49,
         sexp_of_t$59,
         comparator$24],
        [0,
         bin_size_t$26,
         bin_write_t$26,
         bin_read_t$54,
         bin_read_t$53,
         bin_shape_t$39,
         bin_writer_t$34,
         bin_reader_t$34,
         bin_t$34,
         compare$33,
         t_of_sexp$50,
         sexp_of_t$60,
         comparator$25],
        [0,
         bin_size_t$27,
         bin_write_t$27,
         bin_read_t$56,
         bin_read_t$55,
         bin_shape_t$40,
         bin_writer_t$35,
         bin_reader_t$35,
         bin_t$35,
         compare$34,
         t_of_sexp$51,
         sexp_of_t$61,
         comparator$26],
        [0,
         compare$28,
         interval,
         empty$2,
         Variants,
         to_float,
         to_int$0,
         to_ofday$0,
         to_time]]];
    function _Dm_(_M3_)
     {var _M4_=Make$0(_M3_),_M5_=_M4_[52];
      return [0,
              _M4_[2],
              _M4_[3],
              _M4_[6],
              _M4_[5],
              _M4_[1],
              _M4_[4],
              _M4_[7],
              _M4_[8],
              _M4_[51],
              _M4_[9],
              _M4_[10],
              _M4_[11],
              _M4_[12],
              _M4_[24],
              _M4_[28],
              _M4_[29],
              _M4_[30],
              _M4_[31],
              _M4_[32],
              _M4_[33],
              _M4_[34],
              _M4_[35],
              _M4_[36],
              _M4_[49],
              _M4_[38],
              _M4_[37],
              _M4_[39],
              _M4_[40],
              _M4_[41],
              _M4_[42],
              _M4_[45],
              _M4_[46],
              _M4_[47],
              _M4_[48],
              _M4_[27],
              _M4_[50],
              [0,
               _M5_[4],
               _M5_[5],
               _M5_[8],
               _M5_[7],
               _M5_[3],
               _M5_[6],
               _M5_[9],
               _M5_[10],
               _M5_[1],
               _M5_[2],
               _M5_[12],
               _M5_[11],
               _M5_[14],
               _M5_[13],
               _M5_[15],
               _M5_[16],
               _M5_[17],
               _M5_[18],
               _M5_[19]]]}
    var
     _Dn_=Float[52],
     _Do_=Time_ns[52],
     _Dp_=Time[52],
     _Dq_=Ofday_ns[52],
     _Dr_=Ofday[52],
     Core_Interval=
      [0,
       bin_shape_t$41,
       bin_size_t$28,
       bin_write_t$28,
       bin_read_t$58,
       bin_read_t$57,
       bin_writer_t$36,
       bin_reader_t$36,
       bin_t$36,
       t_of_sexp$52,
       sexp_of_t$56,
       compare$35,
       hash_fold_t$19,
       _Cz_,
       _Cx_,
       _CA_,
       _CB_,
       _CC_,
       _CD_,
       _CE_,
       _CF_,
       _CG_,
       _CH_,
       _CI_,
       _CT_,
       _CK_,
       _CJ_,
       _CL_,
       _CM_,
       _CN_,
       _CO_,
       _CP_,
       _CQ_,
       _CR_,
       _CS_,
       [0,
        bin_shape_t$42,
        bin_size_t$29,
        bin_write_t$29,
        bin_read_t$60,
        bin_read_t$59,
        bin_writer_t$37,
        bin_reader_t$37,
        bin_t$37,
        t_of_sexp$53,
        sexp_of_t$62,
        create$7,
        create_from_intervals,
        contains,
        contains_set,
        ubound_exn,
        lbound_exn,
        ubound,
        lbound],
       [0,
        Ofday[2],
        Ofday[3],
        Ofday[6],
        Ofday[5],
        Ofday[1],
        Ofday[4],
        Ofday[7],
        Ofday[8],
        Ofday[51],
        Ofday[9],
        Ofday[10],
        Ofday[11],
        Ofday[12],
        Ofday[24],
        Ofday[28],
        Ofday[29],
        Ofday[30],
        Ofday[31],
        Ofday[32],
        Ofday[33],
        Ofday[34],
        Ofday[35],
        Ofday[36],
        Ofday[49],
        Ofday[38],
        Ofday[37],
        Ofday[39],
        Ofday[40],
        Ofday[41],
        Ofday[42],
        Ofday[45],
        Ofday[46],
        Ofday[47],
        Ofday[48],
        Ofday[27],
        Ofday[50],
        [0,
         _Dr_[4],
         _Dr_[5],
         _Dr_[8],
         _Dr_[7],
         _Dr_[3],
         _Dr_[6],
         _Dr_[9],
         _Dr_[10],
         _Dr_[1],
         _Dr_[2],
         _Dr_[12],
         _Dr_[11],
         _Dr_[14],
         _Dr_[13],
         _Dr_[15],
         _Dr_[16],
         _Dr_[17],
         _Dr_[18],
         _Dr_[19]]],
       [0,
        Ofday_ns[2],
        Ofday_ns[3],
        Ofday_ns[6],
        Ofday_ns[5],
        Ofday_ns[1],
        Ofday_ns[4],
        Ofday_ns[7],
        Ofday_ns[8],
        Ofday_ns[51],
        Ofday_ns[9],
        Ofday_ns[10],
        Ofday_ns[11],
        Ofday_ns[12],
        Ofday_ns[24],
        Ofday_ns[28],
        Ofday_ns[29],
        Ofday_ns[30],
        Ofday_ns[31],
        Ofday_ns[32],
        Ofday_ns[33],
        Ofday_ns[34],
        Ofday_ns[35],
        Ofday_ns[36],
        Ofday_ns[49],
        Ofday_ns[38],
        Ofday_ns[37],
        Ofday_ns[39],
        Ofday_ns[40],
        Ofday_ns[41],
        Ofday_ns[42],
        Ofday_ns[45],
        Ofday_ns[46],
        Ofday_ns[47],
        Ofday_ns[48],
        Ofday_ns[27],
        Ofday_ns[50],
        [0,
         _Dq_[4],
         _Dq_[5],
         _Dq_[8],
         _Dq_[7],
         _Dq_[3],
         _Dq_[6],
         _Dq_[9],
         _Dq_[10],
         _Dq_[1],
         _Dq_[2],
         _Dq_[12],
         _Dq_[11],
         _Dq_[14],
         _Dq_[13],
         _Dq_[15],
         _Dq_[16],
         _Dq_[17],
         _Dq_[18],
         _Dq_[19]]],
       [0,
        Time[2],
        Time[3],
        Time[6],
        Time[5],
        Time[1],
        Time[4],
        Time[7],
        Time[8],
        Time[51],
        Time[9],
        Time[10],
        Time[11],
        Time[12],
        Time[24],
        Time[28],
        Time[29],
        Time[30],
        Time[31],
        Time[32],
        Time[33],
        Time[34],
        Time[35],
        Time[36],
        Time[49],
        Time[38],
        Time[37],
        Time[39],
        Time[40],
        Time[41],
        Time[42],
        Time[45],
        Time[46],
        Time[47],
        Time[48],
        Time[27],
        Time[50],
        [0,
         _Dp_[4],
         _Dp_[5],
         _Dp_[8],
         _Dp_[7],
         _Dp_[3],
         _Dp_[6],
         _Dp_[9],
         _Dp_[10],
         _Dp_[1],
         _Dp_[2],
         _Dp_[12],
         _Dp_[11],
         _Dp_[14],
         _Dp_[13],
         _Dp_[15],
         _Dp_[16],
         _Dp_[17],
         _Dp_[18],
         _Dp_[19]],
        Time[53],
        Time[54]],
       [0,
        Time_ns[2],
        Time_ns[3],
        Time_ns[6],
        Time_ns[5],
        Time_ns[1],
        Time_ns[4],
        Time_ns[7],
        Time_ns[8],
        Time_ns[51],
        Time_ns[9],
        Time_ns[10],
        Time_ns[11],
        Time_ns[12],
        Time_ns[24],
        Time_ns[28],
        Time_ns[29],
        Time_ns[30],
        Time_ns[31],
        Time_ns[32],
        Time_ns[33],
        Time_ns[34],
        Time_ns[35],
        Time_ns[36],
        Time_ns[49],
        Time_ns[38],
        Time_ns[37],
        Time_ns[39],
        Time_ns[40],
        Time_ns[41],
        Time_ns[42],
        Time_ns[45],
        Time_ns[46],
        Time_ns[47],
        Time_ns[48],
        Time_ns[27],
        Time_ns[50],
        [0,
         _Do_[4],
         _Do_[5],
         _Do_[8],
         _Do_[7],
         _Do_[3],
         _Do_[6],
         _Do_[9],
         _Do_[10],
         _Do_[1],
         _Do_[2],
         _Do_[12],
         _Do_[11],
         _Do_[14],
         _Do_[13],
         _Do_[15],
         _Do_[16],
         _Do_[17],
         _Do_[18],
         _Do_[19]],
        Time_ns[53],
        Time_ns[54]],
       [0,
        Float[2],
        Float[3],
        Float[6],
        Float[5],
        Float[1],
        Float[4],
        Float[7],
        Float[8],
        Float[51],
        Float[9],
        Float[10],
        Float[11],
        Float[12],
        Float[24],
        Float[28],
        Float[29],
        Float[30],
        Float[31],
        Float[32],
        Float[33],
        Float[34],
        Float[35],
        Float[36],
        Float[49],
        Float[38],
        Float[37],
        Float[39],
        Float[40],
        Float[41],
        Float[42],
        Float[45],
        Float[46],
        Float[47],
        Float[48],
        Float[27],
        Float[50],
        [0,
         _Dn_[4],
         _Dn_[5],
         _Dn_[8],
         _Dn_[7],
         _Dn_[3],
         _Dn_[6],
         _Dn_[9],
         _Dn_[10],
         _Dn_[1],
         _Dn_[2],
         _Dn_[12],
         _Dn_[11],
         _Dn_[14],
         _Dn_[13],
         _Dn_[15],
         _Dn_[16],
         _Dn_[17],
         _Dn_[18],
         _Dn_[19]]],
       [0,
        bin_size_t$30,
        bin_write_t$30,
        bin_read_t$62,
        bin_read_t$61,
        bin_shape_t$43,
        bin_writer_t$38,
        bin_reader_t$38,
        bin_t$38,
        t_of_sexp$54,
        sexp_of_t$63,
        compare$36,
        hash_fold_t$20,
        hash$23,
        empty$4,
        intersect$0,
        is_empty_or_singleton,
        bounds,
        lbound$0,
        ubound$0,
        bounds_exn,
        lbound_exn$0,
        ubound_exn$0,
        convex_hull,
        contains$0,
        compare_value,
        bound,
        is_superset,
        is_subset$1,
        map$6,
        are_disjoint$0,
        are_disjoint_as_open_intervals,
        list_intersect,
        half_open_intervals_are_a_part,
        create$8,
        to_poly,
        [0,
         Set$15[4],
         Set$15[5],
         Set$15[8],
         Set$15[7],
         Set$15[3],
         Set$15[6],
         Set$15[9],
         Set$15[10],
         Set$15[1],
         Set$15[2],
         Set$15[12],
         Set$15[11],
         Set$15[14],
         Set$15[13],
         Set$15[15],
         Set$15[16],
         Set$15[17],
         Set$15[18],
         Set$15[19]],
        mem,
        length,
        is_empty$0,
        iter$6,
        fold$6,
        fold_result,
        fold_until,
        exists$5,
        for_all$5,
        count,
        sum,
        find$0,
        find_map,
        to_list$5,
        to_array,
        min_elt,
        max_elt,
        binary_search,
        binary_search_segmented,
        Private$2],
       _Dm_,
       _Dl_];
    caml_register_global(3034,Core_Interval,"Core__Interval");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Stable);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$50);
    caml_call1(Expect_test_collector[4][1],cst_src_stable_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$51,cst$38);
    var
     _Ds_=Core_kernel_Stable[388],
     _Dt_=Core_kernel_Stable[387],
     _Du_=Core_kernel_Stable[386],
     _Dv_=Core_kernel_Stable[385],
     _Dw_=Core_kernel_Stable[384],
     _Dx_=Core_kernel_Stable[383],
     _Dy_=Core_kernel_Stable[382],
     _Dz_=Core_kernel_Stable[381],
     _DA_=Core_kernel_Stable[380],
     _DB_=Core_kernel_Stable[379],
     _DC_=Core_kernel_Stable[378],
     _DD_=Core_kernel_Stable[377],
     _DE_=Core_kernel_Stable[376],
     _DF_=Core_kernel_Stable[375],
     _DG_=Core_kernel_Stable[374],
     _DH_=Core_kernel_Stable[373],
     _DI_=Core_kernel_Stable[372],
     _DJ_=Core_kernel_Stable[371],
     _DK_=Core_kernel_Stable[370],
     _DL_=Core_kernel_Stable[369],
     _DM_=Core_kernel_Stable[368],
     _DN_=Core_kernel_Stable[367],
     _DO_=Core_kernel_Stable[366],
     _DP_=Core_kernel_Stable[365],
     _DQ_=Core_kernel_Stable[364],
     _DR_=Core_kernel_Stable[363],
     _DS_=Core_kernel_Stable[362],
     _DT_=Core_kernel_Stable[361],
     _DU_=Core_kernel_Stable[360],
     _DV_=Core_kernel_Stable[359],
     _DW_=Core_kernel_Stable[358],
     _DX_=Core_kernel_Stable[357],
     _DY_=Core_kernel_Stable[356],
     _DZ_=Core_kernel_Stable[355],
     _D0_=Core_kernel_Stable[354],
     _D1_=Core_kernel_Stable[353],
     _D2_=Core_kernel_Stable[352],
     _D3_=Core_kernel_Stable[351],
     _D4_=Core_kernel_Stable[350],
     _D5_=Core_kernel_Stable[349],
     _D6_=Core_kernel_Stable[348],
     _D7_=Core_kernel_Stable[347],
     _D8_=Core_kernel_Stable[346],
     _D9_=Core_kernel_Stable[345],
     _D__=Core_kernel_Stable[344],
     _D$_=Core_kernel_Stable[343],
     _Ea_=Core_kernel_Stable[342],
     _Eb_=Core_kernel_Stable[341],
     _Ec_=Core_kernel_Stable[340],
     _Ed_=Core_kernel_Stable[339],
     _Ee_=Core_kernel_Stable[338],
     _Ef_=Core_kernel_Stable[337],
     _Eg_=Core_kernel_Stable[336],
     _Eh_=Core_kernel_Stable[335],
     _Ei_=Core_kernel_Stable[334],
     _Ej_=Core_kernel_Stable[333],
     _Ek_=Core_kernel_Stable[332],
     _El_=Core_kernel_Stable[331],
     _Em_=Core_kernel_Stable[330],
     _En_=Core_kernel_Stable[329],
     _Eo_=Core_kernel_Stable[328],
     _Ep_=Core_kernel_Stable[327],
     _Eq_=Core_kernel_Stable[326],
     _Er_=Core_kernel_Stable[325],
     _Es_=Core_kernel_Stable[324],
     _Et_=Core_kernel_Stable[323],
     _Eu_=Core_kernel_Stable[322],
     _Ev_=Core_kernel_Stable[321],
     _Ew_=Core_kernel_Stable[320],
     _Ex_=Core_kernel_Stable[319],
     _Ey_=Core_kernel_Stable[318],
     _Ez_=Core_kernel_Stable[317],
     _EA_=Core_kernel_Stable[316],
     _EB_=Core_kernel_Stable[315],
     _EC_=Core_kernel_Stable[314],
     _ED_=Core_kernel_Stable[313],
     _EE_=Core_kernel_Stable[312],
     _EF_=Core_kernel_Stable[311],
     _EG_=Core_kernel_Stable[310],
     _EH_=Core_kernel_Stable[309],
     _EI_=Core_kernel_Stable[308],
     _EJ_=Core_kernel_Stable[307],
     _EK_=Core_kernel_Stable[306],
     _EL_=Core_kernel_Stable[305],
     _EM_=Core_kernel_Stable[304],
     _EN_=Core_kernel_Stable[303],
     _EO_=Core_kernel_Stable[302],
     _EP_=Core_kernel_Stable[301],
     _EQ_=Core_kernel_Stable[300],
     _ER_=Core_kernel_Stable[299],
     _ES_=Core_kernel_Stable[298],
     _ET_=Core_kernel_Stable[297],
     _EU_=Core_kernel_Stable[296],
     _EV_=Core_kernel_Stable[295],
     _EW_=Core_kernel_Stable[294],
     _EX_=Core_kernel_Stable[293],
     _EY_=Core_kernel_Stable[292],
     _EZ_=Core_kernel_Stable[291],
     _E0_=Core_kernel_Stable[290],
     _E1_=Core_kernel_Stable[289],
     _E2_=Core_kernel_Stable[288],
     _E3_=Core_kernel_Stable[287],
     _E4_=Core_kernel_Stable[286],
     _E5_=Core_kernel_Stable[285],
     _E6_=Core_kernel_Stable[284],
     _E7_=Core_kernel_Stable[283],
     _E8_=Core_kernel_Stable[282],
     _E9_=Core_kernel_Stable[281],
     _E__=Core_kernel_Stable[280],
     _E$_=Core_kernel_Stable[279],
     _Fa_=Core_kernel_Stable[278],
     _Fb_=Core_kernel_Stable[277],
     _Fc_=Core_kernel_Stable[276],
     _Fd_=Core_kernel_Stable[275],
     _Fe_=Core_kernel_Stable[274],
     _Ff_=Core_kernel_Stable[273],
     _Fg_=Core_kernel_Stable[272],
     _Fh_=Core_kernel_Stable[271],
     _Fi_=Core_kernel_Stable[270],
     _Fj_=Core_kernel_Stable[269],
     _Fk_=Core_kernel_Stable[268],
     _Fl_=Core_kernel_Stable[267],
     _Fm_=Core_kernel_Stable[266],
     _Fn_=Core_kernel_Stable[265],
     _Fo_=Core_kernel_Stable[264],
     _Fp_=Core_kernel_Stable[263],
     _Fq_=Core_kernel_Stable[262],
     _Fr_=Core_kernel_Stable[261],
     _Fs_=Core_kernel_Stable[260],
     _Ft_=Core_kernel_Stable[259],
     _Fu_=Core_kernel_Stable[258],
     _Fv_=Core_kernel_Stable[257],
     _Fw_=Core_kernel_Stable[256],
     _Fx_=Core_kernel_Stable[255],
     _Fy_=Core_kernel_Stable[254],
     _Fz_=Core_kernel_Stable[253],
     _FA_=Core_kernel_Stable[252],
     _FB_=Core_kernel_Stable[251],
     _FC_=Core_kernel_Stable[250],
     _FD_=Core_kernel_Stable[249],
     _FE_=Core_kernel_Stable[248],
     _FF_=Core_kernel_Stable[247],
     _FG_=Core_kernel_Stable[246],
     _FH_=Core_kernel_Stable[245],
     _FI_=Core_kernel_Stable[244],
     _FJ_=Core_kernel_Stable[243],
     _FK_=Core_kernel_Stable[242],
     _FL_=Core_kernel_Stable[241],
     _FM_=Core_kernel_Stable[240],
     _FN_=Core_kernel_Stable[239],
     _FO_=Core_kernel_Stable[238],
     _FP_=Core_kernel_Stable[237],
     _FQ_=Core_kernel_Stable[236],
     _FR_=Core_kernel_Stable[235],
     _FS_=Core_kernel_Stable[234],
     _FT_=Core_kernel_Stable[233],
     _FU_=Core_kernel_Stable[232],
     _FV_=Core_kernel_Stable[231],
     _FW_=Core_kernel_Stable[230],
     _FX_=Core_kernel_Stable[229],
     _FY_=Core_kernel_Stable[228],
     _FZ_=Core_kernel_Stable[227],
     _F0_=Core_kernel_Stable[226],
     _F1_=Core_kernel_Stable[225],
     _F2_=Core_kernel_Stable[224],
     _F3_=Core_kernel_Stable[223],
     _F4_=Core_kernel_Stable[222],
     _F5_=Core_kernel_Stable[221],
     _F6_=Core_kernel_Stable[220],
     _F7_=Core_kernel_Stable[219],
     _F8_=Core_kernel_Stable[218],
     _F9_=Core_kernel_Stable[217],
     _F__=Core_kernel_Stable[216],
     _F$_=Core_kernel_Stable[215],
     _Ga_=Core_kernel_Stable[214],
     _Gb_=Core_kernel_Stable[213],
     _Gc_=Core_kernel_Stable[212],
     _Gd_=Core_kernel_Stable[211],
     _Ge_=Core_kernel_Stable[210],
     _Gf_=Core_kernel_Stable[209],
     _Gg_=Core_kernel_Stable[208],
     _Gh_=Core_kernel_Stable[207],
     _Gi_=Core_kernel_Stable[206],
     _Gj_=Core_kernel_Stable[205],
     _Gk_=Core_kernel_Stable[204],
     _Gl_=Core_kernel_Stable[203],
     _Gm_=Core_kernel_Stable[202],
     _Gn_=Core_kernel_Stable[201],
     _Go_=Core_kernel_Stable[200],
     _Gp_=Core_kernel_Stable[199],
     _Gq_=Core_kernel_Stable[198],
     _Gr_=Core_kernel_Stable[197],
     _Gs_=Core_kernel_Stable[196],
     _Gt_=Core_kernel_Stable[195],
     _Gu_=Core_kernel_Stable[194],
     _Gv_=Core_kernel_Stable[193],
     _Gw_=Core_kernel_Stable[192],
     _Gx_=Core_kernel_Stable[191],
     _Gy_=Core_kernel_Stable[190],
     _Gz_=Core_kernel_Stable[189],
     _GA_=Core_kernel_Stable[188],
     _GB_=Core_kernel_Stable[187],
     _GC_=Core_kernel_Stable[186],
     _GD_=Core_kernel_Stable[185],
     _GE_=Core_kernel_Stable[184],
     _GF_=Core_kernel_Stable[183],
     _GG_=Core_kernel_Stable[182],
     _GH_=Core_kernel_Stable[181],
     _GI_=Core_kernel_Stable[180],
     _GJ_=Core_kernel_Stable[179],
     _GK_=Core_kernel_Stable[178],
     _GL_=Core_kernel_Stable[177],
     _GM_=Core_kernel_Stable[176],
     _GN_=Core_kernel_Stable[175],
     _GO_=Core_kernel_Stable[174],
     _GP_=Core_kernel_Stable[173],
     _GQ_=Core_kernel_Stable[172],
     _GR_=Core_kernel_Stable[171],
     _GS_=Core_kernel_Stable[170],
     _GT_=Core_kernel_Stable[169],
     _GU_=Core_kernel_Stable[168],
     _GV_=Core_kernel_Stable[167],
     _GW_=Core_kernel_Stable[166],
     _GX_=Core_kernel_Stable[165],
     _GY_=Core_kernel_Stable[164],
     _GZ_=Core_kernel_Stable[163],
     _G0_=Core_kernel_Stable[162],
     _G1_=Core_kernel_Stable[161],
     _G2_=Core_kernel_Stable[160],
     _G3_=Core_kernel_Stable[159],
     _G4_=Core_kernel_Stable[158],
     _G5_=Core_kernel_Stable[157],
     _G6_=Core_kernel_Stable[156],
     _G7_=Core_kernel_Stable[155],
     _G8_=Core_kernel_Stable[154],
     _G9_=Core_kernel_Stable[153],
     _G__=Core_kernel_Stable[152],
     _G$_=Core_kernel_Stable[151],
     _Ha_=Core_kernel_Stable[150],
     _Hb_=Core_kernel_Stable[149],
     _Hc_=Core_kernel_Stable[148],
     _Hd_=Core_kernel_Stable[147],
     _He_=Core_kernel_Stable[146],
     _Hf_=Core_kernel_Stable[145],
     _Hg_=Core_kernel_Stable[144],
     _Hh_=Core_kernel_Stable[143],
     _Hi_=Core_kernel_Stable[142],
     _Hj_=Core_kernel_Stable[141],
     _Hk_=Core_kernel_Stable[140],
     _Hl_=Core_kernel_Stable[139],
     _Hm_=Core_kernel_Stable[138],
     _Hn_=Core_kernel_Stable[137],
     _Ho_=Core_kernel_Stable[136],
     _Hp_=Core_kernel_Stable[135],
     _Hq_=Core_kernel_Stable[134],
     _Hr_=Core_kernel_Stable[133],
     _Hs_=Core_kernel_Stable[132],
     _Ht_=Core_kernel_Stable[131],
     _Hu_=Core_kernel_Stable[130],
     _Hv_=Core_kernel_Stable[129],
     _Hw_=Core_kernel_Stable[128],
     _Hx_=Core_kernel_Stable[127],
     _Hy_=Core_kernel_Stable[126],
     _Hz_=Core_kernel_Stable[125],
     _HA_=Core_kernel_Stable[124],
     _HB_=Core_kernel_Stable[123],
     _HC_=Core_kernel_Stable[122],
     _HD_=Core_kernel_Stable[121],
     _HE_=Core_kernel_Stable[120],
     _HF_=Core_kernel_Stable[119],
     _HG_=Core_kernel_Stable[118],
     _HH_=Core_kernel_Stable[117],
     _HI_=Core_kernel_Stable[116],
     _HJ_=Core_kernel_Stable[115],
     _HK_=Core_kernel_Stable[114],
     _HL_=Core_kernel_Stable[113],
     _HM_=Core_kernel_Stable[112],
     _HN_=Core_kernel_Stable[111],
     _HO_=Core_kernel_Stable[110],
     _HP_=Core_kernel_Stable[109],
     _HQ_=Core_kernel_Stable[108],
     _HR_=Core_kernel_Stable[107],
     _HS_=Core_kernel_Stable[106],
     _HT_=Core_kernel_Stable[105],
     _HU_=Core_kernel_Stable[104],
     _HV_=Core_kernel_Stable[103],
     _HW_=Core_kernel_Stable[102],
     _HX_=Core_kernel_Stable[101],
     _HY_=Core_kernel_Stable[100],
     _HZ_=Core_kernel_Stable[99],
     _H0_=Core_kernel_Stable[98],
     _H1_=Core_kernel_Stable[97],
     _H2_=Core_kernel_Stable[96],
     _H3_=Core_kernel_Stable[95],
     _H4_=Core_kernel_Stable[94],
     _H5_=Core_kernel_Stable[93],
     _H6_=Core_kernel_Stable[92],
     _H7_=Core_kernel_Stable[91],
     _H8_=Core_kernel_Stable[90],
     _H9_=Core_kernel_Stable[89],
     _H__=Core_kernel_Stable[88],
     _H$_=Core_kernel_Stable[87],
     _Ia_=Core_kernel_Stable[86],
     _Ib_=Core_kernel_Stable[85],
     _Ic_=Core_kernel_Stable[84],
     _Id_=Core_kernel_Stable[83],
     _Ie_=Core_kernel_Stable[82],
     _If_=Core_kernel_Stable[81],
     _Ig_=Core_kernel_Stable[80],
     _Ih_=Core_kernel_Stable[79],
     _Ii_=Core_kernel_Stable[78],
     _Ij_=Core_kernel_Stable[77],
     _Ik_=Core_kernel_Stable[76],
     _Il_=Core_kernel_Stable[75],
     _Im_=Core_kernel_Stable[74],
     _In_=Core_kernel_Stable[73],
     _Io_=Core_kernel_Stable[72],
     _Ip_=Core_kernel_Stable[71],
     _Iq_=Core_kernel_Stable[70],
     _Ir_=Core_kernel_Stable[69],
     _Is_=Core_kernel_Stable[68],
     _It_=Core_kernel_Stable[67],
     _Iu_=Core_kernel_Stable[66],
     _Iv_=Core_kernel_Stable[65],
     _Iw_=Core_kernel_Stable[64],
     _Ix_=Core_kernel_Stable[63],
     _Iy_=Core_kernel_Stable[62],
     _Iz_=Core_kernel_Stable[61],
     _IA_=Core_kernel_Stable[60],
     _IB_=Core_kernel_Stable[59],
     _IC_=Core_kernel_Stable[58],
     _ID_=Core_kernel_Stable[57],
     _IE_=Core_kernel_Stable[56],
     _IF_=Core_kernel_Stable[55],
     _IG_=Core_kernel_Stable[54],
     _IH_=Core_kernel_Stable[53],
     _II_=Core_kernel_Stable[52],
     _IJ_=Core_kernel_Stable[51],
     _IK_=Core_kernel_Stable[50],
     _IL_=Core_kernel_Stable[49],
     _IM_=Core_kernel_Stable[48],
     _IN_=Core_kernel_Stable[47],
     _IO_=Core_kernel_Stable[46],
     _IP_=Core_kernel_Stable[45],
     _IQ_=Core_kernel_Stable[44],
     _IR_=Core_kernel_Stable[41],
     _IS_=Core_kernel_Stable[40],
     _IT_=Core_kernel_Stable[39],
     _IU_=Core_kernel_Stable[38],
     _IV_=Core_kernel_Stable[37],
     _IW_=Core_kernel_Stable[36],
     _IX_=Core_kernel_Stable[35],
     _IY_=Core_kernel_Stable[34],
     _IZ_=Core_kernel_Stable[33],
     _I0_=Core_kernel_Stable[32],
     _I1_=Core_kernel_Stable[31],
     _I2_=Core_kernel_Stable[30],
     _I3_=Core_kernel_Stable[29],
     _I4_=Core_kernel_Stable[28],
     _I5_=Core_kernel_Stable[27],
     _I6_=Core_kernel_Stable[26],
     _I7_=Core_kernel_Stable[25],
     _I8_=Core_kernel_Stable[24],
     _I9_=Core_kernel_Stable[23],
     _I__=Core_kernel_Stable[22],
     _I$_=Core_kernel_Stable[21],
     _Ja_=Core_kernel_Stable[20],
     _Jb_=Core_kernel_Stable[19],
     _Jc_=Core_kernel_Stable[18],
     _Jd_=Core_kernel_Stable[17],
     _Je_=Core_kernel_Stable[16],
     _Jf_=Core_kernel_Stable[15],
     _Jg_=Core_kernel_Stable[14],
     _Jh_=Core_kernel_Stable[13],
     _Ji_=Core_kernel_Stable[12],
     _Jj_=Core_kernel_Stable[11],
     _Jk_=Core_kernel_Stable[10],
     _Jl_=Core_kernel_Stable[9],
     _Jm_=Core_kernel_Stable[8],
     _Jn_=Core_kernel_Stable[7],
     _Jo_=Core_kernel_Stable[6],
     _Jp_=Core_kernel_Stable[5],
     _Jq_=Core_kernel_Stable[4],
     _Jr_=Core_kernel_Stable[3],
     _Js_=Core_kernel_Stable[2],
     _Jt_=Core_kernel_Stable[1];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$52);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Stable$0);
    var
     Core_Stable=
      [0,
       _Jt_,
       _Js_,
       _Jr_,
       _Jq_,
       _Jp_,
       _Jo_,
       _Jn_,
       _Jm_,
       _Jl_,
       _Jk_,
       _Jj_,
       _Ji_,
       _Jh_,
       _Jg_,
       _Jf_,
       _Je_,
       _Jd_,
       _Jc_,
       _Jb_,
       _Ja_,
       _I$_,
       _I__,
       _I9_,
       _I8_,
       _I7_,
       _I6_,
       _I5_,
       _I4_,
       _I3_,
       _I2_,
       _I1_,
       _I0_,
       _IZ_,
       _IY_,
       _IX_,
       _IW_,
       _IV_,
       _IU_,
       _IT_,
       _IS_,
       _IR_,
       _IQ_,
       _IP_,
       _IO_,
       _IN_,
       _IM_,
       _IL_,
       _IK_,
       _IJ_,
       _II_,
       _IH_,
       _IG_,
       _IF_,
       _IE_,
       _ID_,
       _IC_,
       _IB_,
       _IA_,
       _Iz_,
       _Iy_,
       _Ix_,
       _Iw_,
       _Iv_,
       _Iu_,
       _It_,
       _Is_,
       _Ir_,
       _Iq_,
       _Ip_,
       _Io_,
       _In_,
       _Im_,
       _Il_,
       _Ik_,
       _Ij_,
       _Ii_,
       _Ih_,
       _Ig_,
       _If_,
       _Ie_,
       _Id_,
       _Ic_,
       _Ib_,
       _Ia_,
       _H$_,
       _H__,
       _H9_,
       _H8_,
       _H7_,
       _H6_,
       _H5_,
       _H4_,
       _H3_,
       _H2_,
       _H1_,
       _H0_,
       _HZ_,
       _HY_,
       _HX_,
       _HW_,
       _HV_,
       _HU_,
       _HT_,
       _HS_,
       _HR_,
       _HQ_,
       _HP_,
       _HO_,
       _HN_,
       _HM_,
       _HL_,
       _HK_,
       _HJ_,
       _HI_,
       _HH_,
       _HG_,
       _HF_,
       _HE_,
       _HD_,
       _HC_,
       _HB_,
       _HA_,
       _Hz_,
       _Hy_,
       _Hx_,
       _Hw_,
       _Hv_,
       _Hu_,
       _Ht_,
       _Hs_,
       _Hr_,
       _Hq_,
       _Hp_,
       _Ho_,
       _Hn_,
       _Hm_,
       _Hl_,
       _Hk_,
       _Hj_,
       _Hi_,
       _Hh_,
       _Hg_,
       _Hf_,
       _He_,
       _Hd_,
       _Hc_,
       _Hb_,
       _Ha_,
       _G$_,
       _G__,
       _G9_,
       _G8_,
       _G7_,
       _G6_,
       _G5_,
       _G4_,
       _G3_,
       _G2_,
       _G1_,
       _G0_,
       _GZ_,
       _GY_,
       _GX_,
       _GW_,
       _GV_,
       _GU_,
       _GT_,
       _GS_,
       _GR_,
       _GQ_,
       _GP_,
       _GO_,
       _GN_,
       _GM_,
       _GL_,
       _GK_,
       _GJ_,
       _GI_,
       _GH_,
       _GG_,
       _GF_,
       _GE_,
       _GD_,
       _GC_,
       _GB_,
       _GA_,
       _Gz_,
       _Gy_,
       _Gx_,
       _Gw_,
       _Gv_,
       _Gu_,
       _Gt_,
       _Gs_,
       _Gr_,
       _Gq_,
       _Gp_,
       _Go_,
       _Gn_,
       _Gm_,
       _Gl_,
       _Gk_,
       _Gj_,
       _Gi_,
       _Gh_,
       _Gg_,
       _Gf_,
       _Ge_,
       _Gd_,
       _Gc_,
       _Gb_,
       _Ga_,
       _F$_,
       _F__,
       _F9_,
       _F8_,
       _F7_,
       _F6_,
       _F5_,
       _F4_,
       _F3_,
       _F2_,
       _F1_,
       _F0_,
       _FZ_,
       _FY_,
       _FX_,
       _FW_,
       _FV_,
       _FU_,
       _FT_,
       _FS_,
       _FR_,
       _FQ_,
       _FP_,
       _FO_,
       _FN_,
       _FM_,
       _FL_,
       _FK_,
       _FJ_,
       _FI_,
       _FH_,
       _FG_,
       _FF_,
       _FE_,
       _FD_,
       _FC_,
       _FB_,
       _FA_,
       _Fz_,
       _Fy_,
       _Fx_,
       _Fw_,
       _Fv_,
       _Fu_,
       _Ft_,
       _Fs_,
       _Fr_,
       _Fq_,
       _Fp_,
       _Fo_,
       _Fn_,
       _Fm_,
       _Fl_,
       _Fk_,
       _Fj_,
       _Fi_,
       _Fh_,
       _Fg_,
       _Ff_,
       _Fe_,
       _Fd_,
       _Fc_,
       _Fb_,
       _Fa_,
       _E$_,
       _E__,
       _E9_,
       _E8_,
       _E7_,
       _E6_,
       _E5_,
       _E4_,
       _E3_,
       _E2_,
       _E1_,
       _E0_,
       _EZ_,
       _EY_,
       _EX_,
       _EW_,
       _EV_,
       _EU_,
       _ET_,
       _ES_,
       _ER_,
       _EQ_,
       _EP_,
       _EO_,
       _EN_,
       _EM_,
       _EL_,
       _EK_,
       _EJ_,
       _EI_,
       _EH_,
       _EG_,
       _EF_,
       _EE_,
       _ED_,
       _EC_,
       _EB_,
       _EA_,
       _Ez_,
       _Ey_,
       _Ex_,
       _Ew_,
       _Ev_,
       _Eu_,
       _Et_,
       _Es_,
       _Er_,
       _Eq_,
       _Ep_,
       _Eo_,
       _En_,
       _Em_,
       _El_,
       _Ek_,
       _Ej_,
       _Ei_,
       _Eh_,
       _Eg_,
       _Ef_,
       _Ee_,
       _Ed_,
       _Ec_,
       _Eb_,
       _Ea_,
       _D$_,
       _D__,
       _D9_,
       _D8_,
       _D7_,
       _D6_,
       _D5_,
       _D4_,
       _D3_,
       _D2_,
       _D1_,
       _D0_,
       _DZ_,
       _DY_,
       _DX_,
       _DW_,
       _DV_,
       _DU_,
       _DT_,
       _DS_,
       _DR_,
       _DQ_,
       _DP_,
       _DO_,
       _DN_,
       _DM_,
       _DL_,
       _DK_,
       _DJ_,
       _DI_,
       _DH_,
       _DG_,
       _DF_,
       _DE_,
       _DD_,
       _DC_,
       _DB_,
       _DA_,
       _Dz_,
       _Dy_,
       _Dx_,
       _Dw_,
       _Dv_,
       _Du_,
       _Dt_,
       _Ds_];
    caml_register_global(3036,Core_Stable,"Core__Stable");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Core_thread);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$53);
    caml_call1(Expect_test_collector[4][1],cst_src_core_thread_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$54,cst$39);
    var
     _Ju_=[0,0],
     _Jx_=include$42[3],
     _JA_=include$42[7],
     _Jv_=include$42[1],
     _Jw_=include$42[2],
     _Jy_=include$42[4],
     _Jz_=include$42[6],
     _JB_=include$42[8],
     _JC_=include$42[9],
     _JD_=include$42[10],
     _JE_=include$42[11],
     _JF_=include$42[14],
     _JG_=include$42[15],
     _JH_=include$42[16];
    function sexp_of_t$64(t)
     {var _M2_=[0,[1,[0,_JI_,[0,caml_call1(_es_,caml_call1(_Jx_,t)),0]]],0];
      return [1,[0,caml_call1(Sexplib0_Sexp_conv[7],cst_thread),_M2_]]}
    var create_should_raise=[0,0];
    function create$9(on_uncaught_exn,f,arg)
     {if(create_should_raise[1])
       caml_call1
        (_cS_,
         caml_call1(Sexplib0_Sexp_conv[7],cst_Thread_create_requested_to));
      _Ju_[1] = 1;
      function f$0(arg)
       {var exit=890699316 <= on_uncaught_exn?0:1;
        function _M1_(param){return caml_call1(f,arg)}
        return caml_call2(Base_Exn[13],exit,_M1_)}
      return caml_call2(_Jv_,f$0,arg)}
    function threads_have_been_created(param){return _Ju_[1]}
    function wait_signal(sigs)
     {return caml_call1
              (_JH_,caml_call2(Core_kernel_List[71],sigs,to_caml_int))}
    function sigmask(cmd,sigs)
     {var
       cmd$0=-18967500 === cmd?2:4150146 <= cmd?0:1,
       sigs$0=caml_call2(Core_kernel_List[71],sigs,to_caml_int),
       _M0_=caml_call2(_JG_,cmd$0,sigs$0);
      return caml_call2(Core_kernel_List[71],_M0_,of_caml_int)}
    function num_threads(param)
     {try
       {var
         _MW_=
          caml_call2
           (_n_,
            cst_proc,
            caml_call2
             (_n_,caml_call1(_r_,caml_call1(Caml_unix[17],0)),cst_status)),
         param$1=caml_call2(Stdio_In_channel[24],0,_MW_),
         param$0=param$1;
        for(;;)
         {if(param$0)
           {var xs=param$0[2],line=param$0[1];
            if(! caml_call2(Core_kernel_String[51],line,cst_Threads))
             {var param$0=xs;continue}
            try
             {var
               _MU_=caml_call2(Core_kernel_String[52],line,58)[2],
               _MV_=
                [0,
                 runtime.caml_int_of_string
                  (caml_call2(Core_kernel_String[63],0,_MU_))],
               _MX_=_MV_}
            catch(_MZ_){var _MX_=0}}
          else
           var _MX_=0;
          return _MX_}}
      catch(_MY_){return 0}}
    function block_forever(param)
     {var _MS_=caml_call1(Event[1],0),_MT_=caml_call1(Event[3],_MS_);
      return caml_call1(Event[9],_MT_)}
    function not_supported(name)
     {var _MR_=caml_call2(_cV_,_JJ_,name);
      return caml_call1(Core_kernel_Error[11],_MR_)}
    var
     setaffinity_self_exn=[1,not_supported(cst_pthread_setaffinity_np)],
     getaffinity_self_exn=[1,not_supported(cst_pthread_getaffinity_np)],
     For_testing=[0,create_should_raise];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$55);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Core_thread$0);
    var
     Core_Core_thread=
      [0,
       sexp_of_t$64,
       create$9,
       _Jw_,
       _Jx_,
       _Jy_,
       _Jz_,
       _JA_,
       _JB_,
       _JC_,
       _JD_,
       _JE_,
       _JF_,
       sigmask,
       wait_signal,
       threads_have_been_created,
       num_threads,
       block_forever,
       setaffinity_self_exn,
       getaffinity_self_exn,
       For_testing];
    caml_register_global(3039,Core_Core_thread,"Core__Core_thread");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Core_date_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$56);
    caml_call1(Expect_test_collector[4][1],cst_src_core_date_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$57,cst$40);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$58);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Core_date_intf$0);
    var Core_Core_date_intf=[0];
    caml_register_global(3040,Core_Core_date_intf,"Core__Core_date_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Core_date);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$59);
    caml_call1(Expect_test_collector[4][1],cst_src_core_date_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$60,cst$41);
    var
     _Kp_=include$13[44],
     _JK_=include$13[1],
     _JL_=include$13[2],
     _JM_=include$13[3],
     _JN_=include$13[4],
     _JO_=include$13[5],
     _JP_=include$13[6],
     _JQ_=include$13[7],
     _JR_=include$13[8],
     _JS_=include$13[9],
     _JT_=include$13[10],
     _JU_=include$13[11],
     _JV_=include$13[12],
     _JW_=include$13[13],
     _JX_=include$13[14],
     _JY_=include$13[15],
     _JZ_=include$13[16],
     _J0_=include$13[17],
     _J1_=include$13[18],
     _J2_=include$13[19],
     _J3_=include$13[20],
     _J4_=include$13[21],
     _J5_=include$13[22],
     _J6_=include$13[23],
     _J7_=include$13[24],
     _J8_=include$13[25],
     _J9_=include$13[26],
     _J__=include$13[27],
     _J$_=include$13[28],
     _Ka_=include$13[29],
     _Kb_=include$13[30],
     _Kc_=include$13[31],
     _Kd_=include$13[32],
     _Ke_=include$13[33],
     _Kf_=include$13[34],
     _Kg_=include$13[35],
     _Kh_=include$13[36],
     _Ki_=include$13[37],
     _Kj_=include$13[38],
     _Kk_=include$13[39],
     _Kl_=include$13[40],
     _Km_=include$13[41],
     _Kn_=include$13[42],
     _Ko_=include$13[43],
     _Kq_=include$13[45],
     _Kr_=include$13[46],
     _Ks_=include$13[47],
     _Kt_=include$13[48],
     _Ku_=include$13[49],
     _Kv_=include$13[50],
     _Kw_=include$13[51],
     _Kx_=include$13[52],
     _Ky_=include$13[53],
     _Kz_=include$13[54],
     _KA_=include$13[55],
     _KB_=include$13[56],
     _KC_=include$13[57],
     _KD_=include$13[58],
     _KE_=include$13[59],
     _KF_=include$13[60],
     _KG_=include$13[61],
     _KH_=include$13[62],
     _KI_=include$13[63],
     _KJ_=include$13[64],
     _KK_=include$13[65],
     _KL_=include$13[66],
     _KM_=include$13[67],
     _KN_=include$13[68],
     _KO_=include$13[69],
     _KP_=include$13[70],
     _KQ_=include$13[71],
     _KR_=include$13[72],
     _KS_=include$13[73],
     _KT_=include$13[74],
     _KU_=include$13[75],
     _KV_=include$13[76],
     _KW_=include$13[77],
     _KX_=include$13[78],
     _KY_=include$13[79],
     _KZ_=include$13[80],
     _K0_=include$13[81],
     _K1_=include$13[82],
     _K2_=include$13[83],
     _K3_=include$13[84],
     _K4_=include$13[85],
     _K5_=include$13[86],
     _K6_=include$13[87],
     _K7_=include$13[88],
     _K8_=include$13[89],
     _K9_=include$13[90],
     _K__=include$13[91],
     _K$_=include$13[92];
    function of_tm(tm)
     {var _MP_=tm[4],_MQ_=caml_call1(Core_kernel_Month[56],tm[5] + 1 | 0);
      return caml_call3(_Kp_,tm[6] + 1900 | 0,_MQ_,_MP_)}
    function format(date,pat)
     {var
       zone=caml_call1(_cC_,_yu_[68]),
       time=caml_call3(_xn_,zone,date,_yt_[58]);
      return caml_call3(_wM_,time,pat,zone)}
    function parse(fmt,s){return of_tm(runtime.core_unix_strptime(fmt,s))}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$61);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Core_date$0);
    var
     Core_Core_date=
      [0,
       _JK_,
       _JL_,
       _JM_,
       _JN_,
       _JO_,
       _JP_,
       _JQ_,
       _JR_,
       _JS_,
       _JT_,
       _JU_,
       _JV_,
       _JW_,
       _JX_,
       _JY_,
       _JZ_,
       _J0_,
       _J1_,
       _J2_,
       _J3_,
       _J4_,
       _J5_,
       _J6_,
       _J7_,
       _J8_,
       _J9_,
       _J__,
       _J$_,
       _Ka_,
       _Kb_,
       _Kc_,
       _Kd_,
       _Ke_,
       _Kf_,
       _Kg_,
       _Kh_,
       _Ki_,
       _Kj_,
       _Kk_,
       _Kl_,
       _Km_,
       _Kn_,
       _Ko_,
       _Kp_,
       _Kq_,
       _Kr_,
       _Ks_,
       _Kt_,
       _Ku_,
       _Kv_,
       _Kw_,
       _Kx_,
       _Ky_,
       _Kz_,
       _KA_,
       _KB_,
       _KC_,
       _KD_,
       _KE_,
       _KF_,
       _KG_,
       _KH_,
       _KI_,
       _KJ_,
       _KK_,
       _KL_,
       _KM_,
       _KN_,
       _KO_,
       _KP_,
       _KQ_,
       _KR_,
       _KS_,
       _KT_,
       _KU_,
       _KV_,
       _KW_,
       _KX_,
       _KY_,
       _KZ_,
       _K0_,
       _K1_,
       _K2_,
       _K3_,
       _K4_,
       _K5_,
       _K6_,
       _K7_,
       _K8_,
       _K9_,
       _K__,
       _K$_,
       format,
       parse,
       of_tm];
    caml_register_global(3041,Core_Core_date,"Core__Core_date");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Core_command);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$62);
    caml_call1(Expect_test_collector[4][1],cst_src_core_command_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$63,cst$42);
    var
     exit=Core_kernel_Command[16],
     summary=Core_kernel_Command[14],
     of_lazy=Core_kernel_Command[13],
     exec$0=Core_kernel_Command[12],
     lazy_group=Core_kernel_Command[11],
     group$36=Core_kernel_Command[10],
     basic=Core_kernel_Command[9],
     basic_spec=Core_kernel_Command[8],
     For_unix=
      caml_call1
       (Core_kernel_Command[18][7],
        [0,
         [0,Version_util[1],Version_util[8]],
         [0],
         [0,create$9,_JA_],
         [0,_w3_],
         [0,
          [0],
          [0],
          [0],
          getpid,
          close,
          open_process_in,
          close_process_in,
          in_channel_of_descr,
          putenv,
          unsetenv,
          unsafe_getenv,
          exec,
          [0],
          create_process_env,
          wait]]),
     run=For_unix[3],
     shape=For_unix[1],
     include$43=Core_kernel_Command[17],
     summary$0=include$43[2],
     help_recursive=include$43[3],
     get_flag_names=include$43[4],
     run$0=For_unix[4],
     include$44=Core_kernel_Command[15],
     fully_forced=include$44[1],
     get_summary=include$44[2],
     help_text=For_unix[2],
     Shape=[0,fully_forced,get_summary,help_text];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$64);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Core_command$0);
    var
     _La_=Core_kernel_Command[18][4],
     Core_Core_command=
      [0,
       Core_kernel_Command[1],
       Core_kernel_Command[2],
       Core_kernel_Command[3],
       Core_kernel_Command[4],
       Core_kernel_Command[5],
       Core_kernel_Command[6],
       Core_kernel_Command[7],
       basic_spec,
       basic,
       group$36,
       lazy_group,
       exec$0,
       of_lazy,
       summary,
       exit,
       Core_kernel_Command[18],
       Core_kernel_Command[19],
       run,
       [0,_La_[2],_La_[3],_La_[4]],
       Shape,
       shape,
       [0,summary$0,help_recursive,get_flag_names,run$0]];
    caml_register_global(3043,Core_Core_command,"Core__Core_command");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Core_caml);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$65);
    caml_call1(Expect_test_collector[4][1],cst_src_core_caml_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$66,cst$43);
    var
     _Lb_=include$2[1],
     _Lc_=include$2[2],
     _Ld_=include$2[3],
     _Le_=include$2[4],
     _Lf_=include$2[5],
     _Lg_=include$2[6],
     _Lh_=include$2[7],
     _Li_=include$2[8],
     _Lj_=include$2[9],
     _Lk_=include$2[10],
     _Ll_=include$2[11],
     _Lm_=include$2[12],
     _Ln_=include$2[13],
     _Lo_=include$2[14],
     _Lp_=include$2[15],
     _Lq_=include$2[16],
     _Lr_=include$2[17],
     _Ls_=include$2[18],
     _Lt_=include$2[19],
     _Lu_=include$2[20],
     _Lv_=include$2[21],
     _Lw_=include$2[22],
     _Lx_=include$2[23],
     _Ly_=include$2[24],
     _Lz_=include$2[25],
     _LA_=include$2[26],
     _LB_=include$2[27],
     _LC_=include$2[28],
     _LD_=include$2[29],
     _LE_=include$2[30],
     _LF_=include$2[31],
     _LG_=include$2[32],
     _LH_=include$2[33],
     _LI_=include$2[34],
     _LJ_=include$2[35],
     _LK_=include$2[36],
     _LL_=include$2[37],
     _LM_=include$2[38],
     _LN_=include$2[39],
     _LO_=include$2[40],
     _LP_=include$2[41],
     _LQ_=include$2[42],
     _LR_=include$2[43],
     _LS_=include$2[44],
     _LT_=include$2[45],
     _LU_=include$2[46],
     _LV_=include$2[47],
     _LW_=include$2[48],
     _LX_=include$2[49],
     _LY_=include$2[50],
     _LZ_=include$2[51],
     _L0_=include$2[52],
     _L1_=include$2[53],
     _L2_=include$2[54],
     _L3_=include$2[55],
     _L4_=include$2[56],
     _L5_=include$2[57],
     _L6_=include$2[58],
     _L7_=include$2[59],
     _L8_=include$2[60],
     _L9_=include$2[61],
     _L__=include$2[62],
     _L$_=include$2[63],
     _Ma_=include$2[64],
     _Mb_=include$2[65],
     _Mc_=include$2[66],
     _Md_=include$2[67],
     _Me_=include$2[68],
     _Mf_=include$2[69],
     _Mg_=include$2[70],
     _Mh_=include$2[71],
     _Mi_=include$2[72],
     _Mj_=include$2[73],
     _Mk_=include$2[74],
     _Ml_=include$2[75],
     _Mm_=include$2[76],
     _Mn_=include$2[77],
     _Mo_=include$2[78],
     _Mp_=include$2[79],
     _Mq_=include$2[80],
     _Mr_=include$2[81],
     _Ms_=include$2[82],
     _Mt_=include$2[83],
     _Mu_=include$2[84],
     _Mv_=include$2[85],
     _Mw_=include$2[86],
     _Mx_=include$2[87],
     _My_=include$2[88],
     _Mz_=include$2[89],
     _MA_=include$2[90],
     _MB_=include$2[91],
     _MC_=include$2[92],
     _MD_=include$2[93],
     _ME_=include$2[94],
     _MF_=include$2[95],
     _MG_=include$2[96],
     _MH_=include$2[97],
     _MI_=include$2[98],
     _MJ_=include$2[99],
     _MK_=include$2[100],
     _ML_=include$2[101],
     _MM_=include$2[102],
     _MN_=include$2[103];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$67);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Core_caml$0);
    var
     Core_Core_caml=
      [0,
       _Lb_,
       _Lc_,
       _Ld_,
       _Le_,
       _Lf_,
       _Lg_,
       _Lh_,
       _Li_,
       _Lj_,
       _Lk_,
       _Ll_,
       _Lm_,
       _Ln_,
       _Lo_,
       _Lp_,
       _Lq_,
       _Lr_,
       _Ls_,
       _Lt_,
       _Lu_,
       _Lv_,
       _Lw_,
       _Lx_,
       _Ly_,
       _Lz_,
       _LA_,
       _LB_,
       _LC_,
       _LD_,
       _LE_,
       _LF_,
       _LG_,
       _LH_,
       _LI_,
       _LJ_,
       _LK_,
       _LL_,
       _LM_,
       _LN_,
       _LO_,
       _LP_,
       _LQ_,
       _LR_,
       _LS_,
       _LT_,
       _LU_,
       _LV_,
       _LW_,
       _LX_,
       _LY_,
       _LZ_,
       _L0_,
       _L1_,
       _L2_,
       _L3_,
       _L4_,
       _L5_,
       _L6_,
       _L7_,
       _L8_,
       _L9_,
       _L__,
       _L$_,
       _Ma_,
       _Mb_,
       _Mc_,
       _Md_,
       _Me_,
       _Mf_,
       _Mg_,
       _Mh_,
       _Mi_,
       _Mj_,
       _Mk_,
       _Ml_,
       _Mm_,
       _Mn_,
       _Mo_,
       _Mp_,
       _Mq_,
       _Mr_,
       _Ms_,
       _Mt_,
       _Mu_,
       _Mv_,
       _Mw_,
       _Mx_,
       _My_,
       _Mz_,
       _MA_,
       _MB_,
       _MC_,
       _MD_,
       _ME_,
       _MF_,
       _MG_,
       _MH_,
       _MI_,
       _MJ_,
       _MK_,
       _ML_,
       _MM_,
       _MN_];
    caml_register_global(3044,Core_Core_caml,"Core__Core_caml");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$68);
    caml_call1(Expect_test_collector[4][1],cst_src_core_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$69,cst$44);
    var
     invalid_arg=include[2],
     failwith=include[3],
     Exit$0=include[4],
     abs$1=include[5],
     max_int=include[6],
     min_int=include[7],
     lnot=include[8],
     infinity=include[9],
     neg_infinity=include[10],
     nan=include[11],
     max_float=include[12],
     min_float=include[13],
     epsilon_float=include[14],
     symbol$87=include[15],
     char_of_int=include[16],
     string_of_bool=include[17],
     bool_of_string=include[18],
     string_of_int=include[19],
     string_of_float=include[20],
     stdin$0=include[21],
     stdout$0=include[22],
     stderr$0=include[23],
     print_char=include[24],
     print_string=include[25],
     print_bytes=include[26],
     print_int=include[27],
     print_float=include[28],
     print_endline=include[29],
     print_newline=include[30],
     prerr_char=include[31],
     prerr_string=include[32],
     prerr_bytes=include[33],
     prerr_int=include[34],
     prerr_float=include[35],
     prerr_endline=include[36],
     prerr_newline=include[37],
     read_line=include[38],
     read_int=include[39],
     read_float=include[40],
     open_out=include[41],
     open_out_bin=include[42],
     open_out_gen=include[43],
     flush=include[44],
     flush_all=include[45],
     output_char=include[46],
     output_string=include[47],
     output_bytes=include[48],
     output=include[49],
     output_substring=include[50],
     output_byte=include[51],
     output_binary_int=include[52],
     output_value=include[53],
     seek_out=include[54],
     pos_out=include[55],
     out_channel_length=include[56],
     close_out=include[57],
     close_out_noerr=include[58],
     set_binary_mode_out=include[59],
     open_in=include[60],
     open_in_bin=include[61],
     open_in_gen=include[62],
     input_char=include[63],
     input_line=include[64],
     input=include[65],
     really_input=include[66],
     really_input_string=include[67],
     input_byte=include[68],
     input_binary_int=include[69],
     input_value=include[70],
     seek_in=include[71],
     pos_in=include[72],
     in_channel_length=include[73],
     close_in=include[74],
     close_in_noerr=include[75],
     set_binary_mode_in=include[76],
     LargeFile=include[77],
     string_of_format=include[78],
     symbol$88=include[79],
     exit$0=include[80],
     at_exit=include[81],
     valid_float_lexem=include[82],
     unsafe_really_input=include[83],
     do_at_exit=include[84],
     symbol$89=include[85],
     symbol$90=include[86],
     symbol$91=include[87],
     symbol$92=include[88],
     symbol$93=include[89],
     symbol$94=include[90],
     equal$11=include[91],
     compare$37=include[92],
     min$10=include[93],
     max$10=include[94],
     quickcheck_generator_unit=include[95],
     quickcheck_generator_bool=include[96],
     quickcheck_generator_char=include[97],
     quickcheck_generator_string=include[98],
     quickcheck_generator_int=include[99],
     quickcheck_generator_int32=include[100],
     quickcheck_generator_int64=include[101],
     quickcheck_generator_nativeint=include[102],
     quickcheck_generator_float=include[103],
     quickcheck_observer_unit=include[104],
     quickcheck_observer_bool=include[105],
     quickcheck_observer_char=include[106],
     quickcheck_observer_string=include[107],
     quickcheck_observer_int=include[108],
     quickcheck_observer_int32=include[109],
     quickcheck_observer_int64=include[110],
     quickcheck_observer_nativeint=include[111],
     quickcheck_observer_float=include[112],
     quickcheck_shrinker_unit=include[113],
     quickcheck_shrinker_bool=include[114],
     quickcheck_shrinker_char=include[115],
     quickcheck_shrinker_string=include[116],
     quickcheck_shrinker_int=include[117],
     quickcheck_shrinker_int32=include[118],
     quickcheck_shrinker_int64=include[119],
     quickcheck_shrinker_nativeint=include[120],
     quickcheck_shrinker_float=include[121],
     quickcheck_generator_option=include[122],
     quickcheck_generator_list=include[123],
     quickcheck_observer_option=include[124],
     quickcheck_observer_list=include[125],
     quickcheck_shrinker_option=include[126],
     quickcheck_shrinker_list=include[127],
     symbol$95=include[128],
     sexp_of_bigstring=include[129],
     bigstring_of_sexp=include[130],
     sexp_of_mat=include[131],
     mat_of_sexp=include[132],
     sexp_of_vec=include[133],
     vec_of_sexp=include[134],
     sexp_of_opaque=include[135],
     opaque_of_sexp=include[136],
     sexp_of_pair=include[137],
     pair_of_sexp=include[138],
     Of_sexp_error=include[139],
     of_sexp_error=include[140],
     of_sexp_error_exn=include[141],
     symbol$96=include[142],
     sexp_of_never_returns=include[143],
     never_returns=include[144],
     bin_shape_read=include[145],
     bin_size_read=include[146],
     bin_write_read=include[147],
     bin_writer_read=include[148],
     bin_read_read=include[149],
     bin_read_read$0=include[150],
     bin_reader_read=include[151],
     bin_read=include[152],
     compare_read=include[153],
     hash_fold_read=include[154],
     hash_read=include[155],
     sexp_of_read=include[156],
     read_of_sexp=include[157],
     compare_write=include[158],
     hash_fold_write=include[159],
     hash_write=include[160],
     sexp_of_write=include[161],
     write_of_sexp=include[162],
     bin_shape_immutable=include[163],
     bin_size_immutable=include[164],
     bin_write_immutable=include[165],
     bin_writer_immutable=include[166],
     bin_read_immutable=include[167],
     bin_read_immutable$0=include[168],
     bin_reader_immutable=include[169],
     bin_immutable=include[170],
     compare_immutable=include[171],
     hash_fold_immutable=include[172],
     hash_immutable=include[173],
     sexp_of_immutable=include[174],
     immutable_of_sexp=include[175],
     bin_shape_read_write=include[176],
     bin_size_read_write=include[177],
     bin_write_read_write=include[178],
     bin_writer_read_write=include[179],
     bin_read_read_write=include[180],
     bin_read_read_write$0=include[181],
     bin_reader_read_write=include[182],
     bin_read_write=include[183],
     compare_read_write=include[184],
     hash_fold_read_write=include[185],
     hash_read_write=include[186],
     sexp_of_read_write=include[187],
     read_write_of_sexp=include[188],
     bin_shape_perms=include[189],
     bin_size_perms=include[190],
     bin_write_perms=include[191],
     bin_writer_perms=include[192],
     bin_read_perms=include[193],
     bin_read_perms$0=include[194],
     bin_reader_perms=include[195],
     bin_perms=include[196],
     compare_perms=include[197],
     hash_fold_perms=include[198],
     sexp_of_perms=include[199],
     perms_of_sexp=include[200],
     is_ok$0=include[201],
     is_error$0=include[202],
     Bug=include[203],
     C_malloc_exn=include[204],
     Finally=include[205],
     fst3=include[206],
     snd3=include[207],
     trd3=include[208],
     uw=include[209],
     symbol$97=include[210],
     symbol$98=include[211],
     symbol$99=include[212],
     symbol$100=include[213],
     bprintf=include[214],
     const$0=include[215],
     eprintf=include[216],
     error=include[217],
     error_s=include[218],
     failwithf=include[219],
     failwithp=include[220],
     failwiths=include[221],
     force=include[222],
     fprintf=include[223],
     ident=include[224],
     invalid_argf=include[225],
     ifprintf=include[226],
     is_none$0=include[227],
     is_some$0=include[228],
     ksprintf=include[229],
     ok_exn=include[230],
     phys_equal=include[231],
     phys_same=include[232],
     print_s=include[233],
     eprint_s=include[234],
     printf=include[235],
     protect=include[236],
     protectx=include[237],
     raise_s=include[238],
     round=include[239],
     symbol$101=include[240],
     sprintf$0=include[241],
     stage=include[242],
     unstage=include[243],
     with_return=include[244],
     with_return_option=include[245],
     Typerep=include[246],
     typerep_of_int63=include[247],
     value_tuple0=include[248],
     typerep_of_function=include[249],
     typerep_of_tuple0=include[250],
     typerep_of_tuple2=include[251],
     typerep_of_tuple3=include[252],
     typerep_of_tuple4=include[253],
     typerep_of_tuple5=include[254],
     typename_of_int63=include[255],
     typename_of_function=include[256],
     typename_of_tuple0=include[257],
     typename_of_tuple2=include[258],
     typename_of_tuple3=include[259],
     typename_of_tuple4=include[260],
     typename_of_tuple5=include[261],
     bin_shape_array=include[262],
     bin_size_array=include[263],
     bin_write_array=include[264],
     bin_writer_array=include[265],
     bin_read_array=include[266],
     bin_read_array$0=include[267],
     bin_reader_array=include[268],
     bin_array=include[269],
     compare_array=include[270],
     equal_array=include[271],
     sexp_of_array=include[272],
     array_of_sexp=include[273],
     array_sexp_grammar=include[274],
     typerep_of_array=include[275],
     typename_of_array=include[276],
     bin_shape_bool=include[277],
     bin_size_bool=include[278],
     bin_write_bool=include[279],
     bin_writer_bool=include[280],
     bin_read_bool=include[281],
     bin_read_bool$0=include[282],
     bin_reader_bool=include[283],
     bin_bool=include[284],
     compare_bool=include[285],
     equal_bool=include[286],
     hash_fold_bool=include[287],
     hash_bool=include[288],
     sexp_of_bool=include[289],
     bool_of_sexp=include[290],
     bool_sexp_grammar=include[291],
     typerep_of_bool=include[292],
     typename_of_bool=include[293],
     bin_shape_char=include[294],
     bin_size_char=include[295],
     bin_write_char=include[296],
     bin_writer_char=include[297],
     bin_read_char=include[298],
     bin_read_char$0=include[299],
     bin_reader_char=include[300],
     bin_char=include[301],
     compare_char=include[302],
     equal_char=include[303],
     hash_fold_char=include[304],
     hash_char=include[305],
     sexp_of_char=include[306],
     char_of_sexp=include[307],
     char_sexp_grammar=include[308],
     typerep_of_char=include[309],
     typename_of_char=include[310],
     bin_shape_float=include[311],
     bin_size_float=include[312],
     bin_write_float=include[313],
     bin_writer_float=include[314],
     bin_read_float=include[315],
     bin_read_float$0=include[316],
     bin_reader_float=include[317],
     bin_float=include[318],
     compare_float=include[319],
     equal_float=include[320],
     hash_fold_float=include[321],
     hash_float=include[322],
     sexp_of_float=include[323],
     float_of_sexp=include[324],
     float_sexp_grammar=include[325],
     typerep_of_float=include[326],
     typename_of_float=include[327],
     bin_shape_int=include[328],
     bin_size_int=include[329],
     bin_write_int=include[330],
     bin_writer_int=include[331],
     bin_read_int=include[332],
     bin_read_int$0=include[333],
     bin_reader_int=include[334],
     bin_int=include[335],
     compare_int=include[336],
     equal_int=include[337],
     hash_fold_int=include[338],
     hash_int=include[339],
     sexp_of_int=include[340],
     int_of_sexp=include[341],
     int_sexp_grammar=include[342],
     typerep_of_int=include[343],
     typename_of_int=include[344],
     bin_shape_int32=include[345],
     bin_size_int32=include[346],
     bin_write_int32=include[347],
     bin_writer_int32=include[348],
     bin_read_int32=include[349],
     bin_read_int32$0=include[350],
     bin_reader_int32=include[351],
     bin_int32=include[352],
     compare_int32=include[353],
     equal_int32=include[354],
     hash_fold_int32=include[355],
     hash_int32=include[356],
     sexp_of_int32=include[357],
     int32_of_sexp=include[358],
     int32_sexp_grammar=include[359],
     typerep_of_int32=include[360],
     typename_of_int32=include[361],
     bin_shape_int64=include[362],
     bin_size_int64=include[363],
     bin_write_int64=include[364],
     bin_writer_int64=include[365],
     bin_read_int64=include[366],
     bin_read_int64$0=include[367],
     bin_reader_int64=include[368],
     bin_int64=include[369],
     compare_int64=include[370],
     equal_int64=include[371],
     hash_fold_int64=include[372],
     hash_int64=include[373],
     sexp_of_int64=include[374],
     int64_of_sexp=include[375],
     int64_sexp_grammar=include[376],
     typerep_of_int64=include[377],
     typename_of_int64=include[378],
     bin_shape_lazy_t=include[379],
     bin_size_lazy_t=include[380],
     bin_write_lazy_t=include[381],
     bin_writer_lazy_t=include[382],
     bin_read_lazy_t=include[383],
     bin_read_lazy_t$0=include[384],
     bin_reader_lazy_t=include[385],
     bin_lazy_t=include[386],
     compare_lazy_t=include[387],
     hash_fold_lazy_t=include[388],
     sexp_of_lazy_t=include[389],
     lazy_t_of_sexp=include[390],
     lazy_t_sexp_grammar=include[391],
     typerep_of_lazy_t=include[392],
     typename_of_lazy_t=include[393],
     bin_shape_list=include[394],
     bin_size_list=include[395],
     bin_write_list=include[396],
     bin_writer_list=include[397],
     bin_read_list=include[398],
     bin_read_list$0=include[399],
     bin_reader_list=include[400],
     bin_list=include[401],
     compare_list=include[402],
     equal_list=include[403],
     hash_fold_list=include[404],
     sexp_of_list=include[405],
     list_of_sexp=include[406],
     list_sexp_grammar=include[407],
     typerep_of_list=include[408],
     typename_of_list=include[409],
     bin_shape_nativeint=include[410],
     bin_size_nativeint=include[411],
     bin_write_nativeint=include[412],
     bin_writer_nativeint=include[413],
     bin_read_nativeint=include[414],
     bin_read_nativeint$0=include[415],
     bin_reader_nativeint=include[416],
     bin_nativeint=include[417],
     compare_nativeint=include[418],
     equal_nativeint=include[419],
     hash_fold_nativeint=include[420],
     hash_nativeint=include[421],
     sexp_of_nativeint=include[422],
     nativeint_of_sexp=include[423],
     nativeint_sexp_grammar=include[424],
     typerep_of_nativeint=include[425],
     typename_of_nativeint=include[426],
     bin_shape_option=include[427],
     bin_size_option=include[428],
     bin_write_option=include[429],
     bin_writer_option=include[430],
     bin_read_option=include[431],
     bin_read_option$0=include[432],
     bin_reader_option=include[433],
     bin_option=include[434],
     compare_option=include[435],
     equal_option=include[436],
     hash_fold_option=include[437],
     sexp_of_option=include[438],
     option_of_sexp=include[439],
     option_sexp_grammar=include[440],
     typerep_of_option=include[441],
     typename_of_option=include[442],
     bin_shape_string=include[443],
     bin_size_string=include[444],
     bin_write_string=include[445],
     bin_writer_string=include[446],
     bin_read_string=include[447],
     bin_read_string$0=include[448],
     bin_reader_string=include[449],
     bin_string=include[450],
     compare_string=include[451],
     equal_string=include[452],
     hash_fold_string=include[453],
     hash_string=include[454],
     sexp_of_string=include[455],
     string_of_sexp=include[456],
     string_sexp_grammar=include[457],
     typerep_of_string=include[458],
     typename_of_string=include[459],
     bin_shape_bytes=include[460],
     bin_size_bytes=include[461],
     bin_write_bytes=include[462],
     bin_writer_bytes=include[463],
     bin_read_bytes=include[464],
     bin_read_bytes$0=include[465],
     bin_reader_bytes=include[466],
     bin_bytes=include[467],
     compare_bytes=include[468],
     equal_bytes=include[469],
     sexp_of_bytes=include[470],
     bytes_of_sexp=include[471],
     bytes_sexp_grammar=include[472],
     typerep_of_bytes=include[473],
     typename_of_bytes=include[474],
     bin_shape_ref=include[475],
     bin_size_ref=include[476],
     bin_write_ref=include[477],
     bin_writer_ref=include[478],
     bin_read_ref=include[479],
     bin_read_ref$0=include[480],
     bin_reader_ref=include[481],
     bin_ref=include[482],
     compare_ref=include[483],
     equal_ref=include[484],
     sexp_of_ref=include[485],
     ref_of_sexp=include[486],
     ref_sexp_grammar=include[487],
     typerep_of_ref=include[488],
     typename_of_ref=include[489],
     bin_shape_unit=include[490],
     bin_size_unit=include[491],
     bin_write_unit=include[492],
     bin_writer_unit=include[493],
     bin_read_unit=include[494],
     bin_read_unit$0=include[495],
     bin_reader_unit=include[496],
     bin_unit=include[497],
     compare_unit=include[498],
     equal_unit=include[499],
     hash_fold_unit=include[500],
     hash_unit=include[501],
     sexp_of_unit=include[502],
     unit_of_sexp=include[503],
     unit_sexp_grammar=include[504],
     typerep_of_unit=include[505],
     typename_of_unit=include[506],
     bin_shape_float_array=include[507],
     bin_size_float_array=include[508],
     bin_write_float_array=include[509],
     bin_writer_float_array=include[510],
     bin_read_float_array=include[511],
     bin_read_float_array$0=include[512],
     bin_reader_float_array=include[513],
     bin_float_array=include[514],
     compare_float_array=include[515],
     sexp_of_float_array=include[516],
     float_array_of_sexp=include[517],
     float_array_sexp_grammar=include[518],
     typerep_of_float_array=include[519],
     typename_of_float_array=include[520],
     sexp_of_exn=include[521],
     bin_shape_sexp_array=include[522],
     bin_size_sexp_array=include[523],
     bin_write_sexp_array=include[524],
     bin_writer_sexp_array=include[525],
     bin_read_sexp_array=include[526],
     bin_read_sexp_array$0=include[527],
     bin_reader_sexp_array=include[528],
     bin_sexp_array=include[529],
     compare_sexp_array=include[530],
     Typename_of_sexp_array=include[531],
     typename_of_sexp_array=include[532],
     typerep_of_sexp_array=include[533],
     bin_shape_sexp_bool=include[534],
     bin_size_sexp_bool=include[535],
     bin_write_sexp_bool=include[536],
     bin_writer_sexp_bool=include[537],
     bin_read_sexp_bool=include[538],
     bin_read_sexp_bool$0=include[539],
     bin_reader_sexp_bool=include[540],
     bin_sexp_bool=include[541],
     compare_sexp_bool=include[542],
     hash_fold_sexp_bool=include[543],
     hash_sexp_bool=include[544],
     Typename_of_sexp_bool=include[545],
     typename_of_sexp_bool=include[546],
     typerep_of_sexp_bool=include[547],
     bin_shape_sexp_list=include[548],
     bin_size_sexp_list=include[549],
     bin_write_sexp_list=include[550],
     bin_writer_sexp_list=include[551],
     bin_read_sexp_list=include[552],
     bin_read_sexp_list$0=include[553],
     bin_reader_sexp_list=include[554],
     bin_sexp_list=include[555],
     compare_sexp_list=include[556],
     hash_fold_sexp_list=include[557],
     Typename_of_sexp_list=include[558],
     typename_of_sexp_list=include[559],
     typerep_of_sexp_list=include[560],
     bin_shape_sexp_option=include[561],
     bin_size_sexp_option=include[562],
     bin_write_sexp_option=include[563],
     bin_writer_sexp_option=include[564],
     bin_read_sexp_option=include[565],
     bin_read_sexp_option$0=include[566],
     bin_reader_sexp_option=include[567],
     bin_sexp_option=include[568],
     compare_sexp_option=include[569],
     hash_fold_sexp_option=include[570],
     Typename_of_sexp_option=include[571],
     typename_of_sexp_option=include[572],
     typerep_of_sexp_option=include[573],
     bin_shape_sexp_opaque=include[574],
     bin_size_sexp_opaque=include[575],
     bin_write_sexp_opaque=include[576],
     bin_writer_sexp_opaque=include[577],
     bin_read_sexp_opaque=include[578],
     bin_read_sexp_opaque$0=include[579],
     bin_reader_sexp_opaque=include[580],
     bin_sexp_opaque=include[581],
     compare_sexp_opaque=include[582],
     hash_fold_sexp_opaque=include[583],
     Typename_of_sexp_opaque=include[584],
     typename_of_sexp_opaque=include[585],
     typerep_of_sexp_opaque=include[586],
     Not_found=include[587],
     Not_found_s=include[588],
     am_running_inline_test=include[589],
     am_running_test=include[590],
     does_raise=include[591],
     Core_kernel_private=include[593],
     Mutex=[0],
     _MO_=Span[80];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$70);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core$0);
    var
     Core$0=
      [0,
       invalid_arg,
       failwith,
       Exit$0,
       abs$1,
       max_int,
       min_int,
       lnot,
       infinity,
       neg_infinity,
       nan,
       max_float,
       min_float,
       epsilon_float,
       symbol$87,
       char_of_int,
       string_of_bool,
       bool_of_string,
       string_of_int,
       string_of_float,
       stdin$0,
       stdout$0,
       stderr$0,
       print_char,
       print_string,
       print_bytes,
       print_int,
       print_float,
       print_endline,
       print_newline,
       prerr_char,
       prerr_string,
       prerr_bytes,
       prerr_int,
       prerr_float,
       prerr_endline,
       prerr_newline,
       read_line,
       read_int,
       read_float,
       open_out,
       open_out_bin,
       open_out_gen,
       flush,
       flush_all,
       output_char,
       output_string,
       output_bytes,
       output,
       output_substring,
       output_byte,
       output_binary_int,
       output_value,
       seek_out,
       pos_out,
       out_channel_length,
       close_out,
       close_out_noerr,
       set_binary_mode_out,
       open_in,
       open_in_bin,
       open_in_gen,
       input_char,
       input_line,
       input,
       really_input,
       really_input_string,
       input_byte,
       input_binary_int,
       input_value,
       seek_in,
       pos_in,
       in_channel_length,
       close_in,
       close_in_noerr,
       set_binary_mode_in,
       LargeFile,
       string_of_format,
       symbol$88,
       exit$0,
       at_exit,
       valid_float_lexem,
       unsafe_really_input,
       do_at_exit,
       symbol$89,
       symbol$90,
       symbol$91,
       symbol$92,
       symbol$93,
       symbol$94,
       equal$11,
       compare$37,
       min$10,
       max$10,
       quickcheck_generator_unit,
       quickcheck_generator_bool,
       quickcheck_generator_char,
       quickcheck_generator_string,
       quickcheck_generator_int,
       quickcheck_generator_int32,
       quickcheck_generator_int64,
       quickcheck_generator_nativeint,
       quickcheck_generator_float,
       quickcheck_observer_unit,
       quickcheck_observer_bool,
       quickcheck_observer_char,
       quickcheck_observer_string,
       quickcheck_observer_int,
       quickcheck_observer_int32,
       quickcheck_observer_int64,
       quickcheck_observer_nativeint,
       quickcheck_observer_float,
       quickcheck_shrinker_unit,
       quickcheck_shrinker_bool,
       quickcheck_shrinker_char,
       quickcheck_shrinker_string,
       quickcheck_shrinker_int,
       quickcheck_shrinker_int32,
       quickcheck_shrinker_int64,
       quickcheck_shrinker_nativeint,
       quickcheck_shrinker_float,
       quickcheck_generator_option,
       quickcheck_generator_list,
       quickcheck_observer_option,
       quickcheck_observer_list,
       quickcheck_shrinker_option,
       quickcheck_shrinker_list,
       symbol$95,
       sexp_of_bigstring,
       bigstring_of_sexp,
       sexp_of_mat,
       mat_of_sexp,
       sexp_of_vec,
       vec_of_sexp,
       sexp_of_opaque,
       opaque_of_sexp,
       sexp_of_pair,
       pair_of_sexp,
       Of_sexp_error,
       of_sexp_error,
       of_sexp_error_exn,
       symbol$96,
       sexp_of_never_returns,
       never_returns,
       bin_shape_read,
       bin_size_read,
       bin_write_read,
       bin_writer_read,
       bin_read_read,
       bin_read_read$0,
       bin_reader_read,
       bin_read,
       compare_read,
       hash_fold_read,
       hash_read,
       sexp_of_read,
       read_of_sexp,
       compare_write,
       hash_fold_write,
       hash_write,
       sexp_of_write,
       write_of_sexp,
       bin_shape_immutable,
       bin_size_immutable,
       bin_write_immutable,
       bin_writer_immutable,
       bin_read_immutable,
       bin_read_immutable$0,
       bin_reader_immutable,
       bin_immutable,
       compare_immutable,
       hash_fold_immutable,
       hash_immutable,
       sexp_of_immutable,
       immutable_of_sexp,
       bin_shape_read_write,
       bin_size_read_write,
       bin_write_read_write,
       bin_writer_read_write,
       bin_read_read_write,
       bin_read_read_write$0,
       bin_reader_read_write,
       bin_read_write,
       compare_read_write,
       hash_fold_read_write,
       hash_read_write,
       sexp_of_read_write,
       read_write_of_sexp,
       bin_shape_perms,
       bin_size_perms,
       bin_write_perms,
       bin_writer_perms,
       bin_read_perms,
       bin_read_perms$0,
       bin_reader_perms,
       bin_perms,
       compare_perms,
       hash_fold_perms,
       sexp_of_perms,
       perms_of_sexp,
       is_ok$0,
       is_error$0,
       Bug,
       C_malloc_exn,
       Finally,
       fst3,
       snd3,
       trd3,
       uw,
       symbol$97,
       symbol$98,
       symbol$99,
       symbol$100,
       bprintf,
       const$0,
       eprintf,
       error,
       error_s,
       failwithf,
       failwithp,
       failwiths,
       force,
       fprintf,
       ident,
       invalid_argf,
       ifprintf,
       is_none$0,
       is_some$0,
       ksprintf,
       ok_exn,
       phys_equal,
       phys_same,
       print_s,
       eprint_s,
       printf,
       protect,
       protectx,
       raise_s,
       round,
       symbol$101,
       sprintf$0,
       stage,
       unstage,
       with_return,
       with_return_option,
       Typerep,
       typerep_of_int63,
       value_tuple0,
       typerep_of_function,
       typerep_of_tuple0,
       typerep_of_tuple2,
       typerep_of_tuple3,
       typerep_of_tuple4,
       typerep_of_tuple5,
       typename_of_int63,
       typename_of_function,
       typename_of_tuple0,
       typename_of_tuple2,
       typename_of_tuple3,
       typename_of_tuple4,
       typename_of_tuple5,
       bin_shape_array,
       bin_size_array,
       bin_write_array,
       bin_writer_array,
       bin_read_array,
       bin_read_array$0,
       bin_reader_array,
       bin_array,
       compare_array,
       equal_array,
       sexp_of_array,
       array_of_sexp,
       array_sexp_grammar,
       typerep_of_array,
       typename_of_array,
       bin_shape_bool,
       bin_size_bool,
       bin_write_bool,
       bin_writer_bool,
       bin_read_bool,
       bin_read_bool$0,
       bin_reader_bool,
       bin_bool,
       compare_bool,
       equal_bool,
       hash_fold_bool,
       hash_bool,
       sexp_of_bool,
       bool_of_sexp,
       bool_sexp_grammar,
       typerep_of_bool,
       typename_of_bool,
       bin_shape_char,
       bin_size_char,
       bin_write_char,
       bin_writer_char,
       bin_read_char,
       bin_read_char$0,
       bin_reader_char,
       bin_char,
       compare_char,
       equal_char,
       hash_fold_char,
       hash_char,
       sexp_of_char,
       char_of_sexp,
       char_sexp_grammar,
       typerep_of_char,
       typename_of_char,
       bin_shape_float,
       bin_size_float,
       bin_write_float,
       bin_writer_float,
       bin_read_float,
       bin_read_float$0,
       bin_reader_float,
       bin_float,
       compare_float,
       equal_float,
       hash_fold_float,
       hash_float,
       sexp_of_float,
       float_of_sexp,
       float_sexp_grammar,
       typerep_of_float,
       typename_of_float,
       bin_shape_int,
       bin_size_int,
       bin_write_int,
       bin_writer_int,
       bin_read_int,
       bin_read_int$0,
       bin_reader_int,
       bin_int,
       compare_int,
       equal_int,
       hash_fold_int,
       hash_int,
       sexp_of_int,
       int_of_sexp,
       int_sexp_grammar,
       typerep_of_int,
       typename_of_int,
       bin_shape_int32,
       bin_size_int32,
       bin_write_int32,
       bin_writer_int32,
       bin_read_int32,
       bin_read_int32$0,
       bin_reader_int32,
       bin_int32,
       compare_int32,
       equal_int32,
       hash_fold_int32,
       hash_int32,
       sexp_of_int32,
       int32_of_sexp,
       int32_sexp_grammar,
       typerep_of_int32,
       typename_of_int32,
       bin_shape_int64,
       bin_size_int64,
       bin_write_int64,
       bin_writer_int64,
       bin_read_int64,
       bin_read_int64$0,
       bin_reader_int64,
       bin_int64,
       compare_int64,
       equal_int64,
       hash_fold_int64,
       hash_int64,
       sexp_of_int64,
       int64_of_sexp,
       int64_sexp_grammar,
       typerep_of_int64,
       typename_of_int64,
       bin_shape_lazy_t,
       bin_size_lazy_t,
       bin_write_lazy_t,
       bin_writer_lazy_t,
       bin_read_lazy_t,
       bin_read_lazy_t$0,
       bin_reader_lazy_t,
       bin_lazy_t,
       compare_lazy_t,
       hash_fold_lazy_t,
       sexp_of_lazy_t,
       lazy_t_of_sexp,
       lazy_t_sexp_grammar,
       typerep_of_lazy_t,
       typename_of_lazy_t,
       bin_shape_list,
       bin_size_list,
       bin_write_list,
       bin_writer_list,
       bin_read_list,
       bin_read_list$0,
       bin_reader_list,
       bin_list,
       compare_list,
       equal_list,
       hash_fold_list,
       sexp_of_list,
       list_of_sexp,
       list_sexp_grammar,
       typerep_of_list,
       typename_of_list,
       bin_shape_nativeint,
       bin_size_nativeint,
       bin_write_nativeint,
       bin_writer_nativeint,
       bin_read_nativeint,
       bin_read_nativeint$0,
       bin_reader_nativeint,
       bin_nativeint,
       compare_nativeint,
       equal_nativeint,
       hash_fold_nativeint,
       hash_nativeint,
       sexp_of_nativeint,
       nativeint_of_sexp,
       nativeint_sexp_grammar,
       typerep_of_nativeint,
       typename_of_nativeint,
       bin_shape_option,
       bin_size_option,
       bin_write_option,
       bin_writer_option,
       bin_read_option,
       bin_read_option$0,
       bin_reader_option,
       bin_option,
       compare_option,
       equal_option,
       hash_fold_option,
       sexp_of_option,
       option_of_sexp,
       option_sexp_grammar,
       typerep_of_option,
       typename_of_option,
       bin_shape_string,
       bin_size_string,
       bin_write_string,
       bin_writer_string,
       bin_read_string,
       bin_read_string$0,
       bin_reader_string,
       bin_string,
       compare_string,
       equal_string,
       hash_fold_string,
       hash_string,
       sexp_of_string,
       string_of_sexp,
       string_sexp_grammar,
       typerep_of_string,
       typename_of_string,
       bin_shape_bytes,
       bin_size_bytes,
       bin_write_bytes,
       bin_writer_bytes,
       bin_read_bytes,
       bin_read_bytes$0,
       bin_reader_bytes,
       bin_bytes,
       compare_bytes,
       equal_bytes,
       sexp_of_bytes,
       bytes_of_sexp,
       bytes_sexp_grammar,
       typerep_of_bytes,
       typename_of_bytes,
       bin_shape_ref,
       bin_size_ref,
       bin_write_ref,
       bin_writer_ref,
       bin_read_ref,
       bin_read_ref$0,
       bin_reader_ref,
       bin_ref,
       compare_ref,
       equal_ref,
       sexp_of_ref,
       ref_of_sexp,
       ref_sexp_grammar,
       typerep_of_ref,
       typename_of_ref,
       bin_shape_unit,
       bin_size_unit,
       bin_write_unit,
       bin_writer_unit,
       bin_read_unit,
       bin_read_unit$0,
       bin_reader_unit,
       bin_unit,
       compare_unit,
       equal_unit,
       hash_fold_unit,
       hash_unit,
       sexp_of_unit,
       unit_of_sexp,
       unit_sexp_grammar,
       typerep_of_unit,
       typename_of_unit,
       bin_shape_float_array,
       bin_size_float_array,
       bin_write_float_array,
       bin_writer_float_array,
       bin_read_float_array,
       bin_read_float_array$0,
       bin_reader_float_array,
       bin_float_array,
       compare_float_array,
       sexp_of_float_array,
       float_array_of_sexp,
       float_array_sexp_grammar,
       typerep_of_float_array,
       typename_of_float_array,
       sexp_of_exn,
       bin_shape_sexp_array,
       bin_size_sexp_array,
       bin_write_sexp_array,
       bin_writer_sexp_array,
       bin_read_sexp_array,
       bin_read_sexp_array$0,
       bin_reader_sexp_array,
       bin_sexp_array,
       compare_sexp_array,
       Typename_of_sexp_array,
       typename_of_sexp_array,
       typerep_of_sexp_array,
       bin_shape_sexp_bool,
       bin_size_sexp_bool,
       bin_write_sexp_bool,
       bin_writer_sexp_bool,
       bin_read_sexp_bool,
       bin_read_sexp_bool$0,
       bin_reader_sexp_bool,
       bin_sexp_bool,
       compare_sexp_bool,
       hash_fold_sexp_bool,
       hash_sexp_bool,
       Typename_of_sexp_bool,
       typename_of_sexp_bool,
       typerep_of_sexp_bool,
       bin_shape_sexp_list,
       bin_size_sexp_list,
       bin_write_sexp_list,
       bin_writer_sexp_list,
       bin_read_sexp_list,
       bin_read_sexp_list$0,
       bin_reader_sexp_list,
       bin_sexp_list,
       compare_sexp_list,
       hash_fold_sexp_list,
       Typename_of_sexp_list,
       typename_of_sexp_list,
       typerep_of_sexp_list,
       bin_shape_sexp_option,
       bin_size_sexp_option,
       bin_write_sexp_option,
       bin_writer_sexp_option,
       bin_read_sexp_option,
       bin_read_sexp_option$0,
       bin_reader_sexp_option,
       bin_sexp_option,
       compare_sexp_option,
       hash_fold_sexp_option,
       Typename_of_sexp_option,
       typename_of_sexp_option,
       typerep_of_sexp_option,
       bin_shape_sexp_opaque,
       bin_size_sexp_opaque,
       bin_write_sexp_opaque,
       bin_writer_sexp_opaque,
       bin_read_sexp_opaque,
       bin_read_sexp_opaque$0,
       bin_reader_sexp_opaque,
       bin_sexp_opaque,
       compare_sexp_opaque,
       hash_fold_sexp_opaque,
       Typename_of_sexp_opaque,
       typename_of_sexp_opaque,
       typerep_of_sexp_opaque,
       Not_found,
       Not_found_s,
       am_running_inline_test,
       am_running_test,
       does_raise,
       Core_kernel_private,
       Mutex,
       _MO_,
       _ko_];
    caml_register_global(3045,Core$0,"Core");
    return}
  (function(){return this}()));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiJjb3JlLmNtYS5qcyIsInNvdXJjZVJvb3QiOiIiLCJuYW1lcyI6W10sInNvdXJjZXMiOltdLCJtYXBwaW5ncyI6Ijs7SSIsInNvdXJjZXNDb250ZW50IjpbXX0=
