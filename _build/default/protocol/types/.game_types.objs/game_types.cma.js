(function(joo_global_object)
   {"use strict";
    var
     runtime=joo_global_object.jsoo_runtime,
     caml_register_global=runtime.caml_register_global,
     caml_string_notequal=runtime.caml_string_notequal,
     caml_string_of_jsbytes=runtime.caml_string_of_jsbytes;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    var
     global_data=runtime.caml_get_global_data(),
     cst_Game_types_Username=caml_string_of_jsbytes("Game_types__Username"),
     cst_game_types=caml_string_of_jsbytes("game_types"),
     cst_protocol_types_username_ml=
      caml_string_of_jsbytes("protocol/types/username.ml"),
     cst=caml_string_of_jsbytes(""),
     cst_game_types$0=caml_string_of_jsbytes("game_types"),
     cst_game_types$1=caml_string_of_jsbytes("game_types"),
     cst_Game_types_Username$0=caml_string_of_jsbytes("Game_types__Username"),
     cst_Robber=caml_string_of_jsbytes("Robber"),
     cst_Seer=caml_string_of_jsbytes("Seer"),
     cst_robber=caml_string_of_jsbytes("robber"),
     cst_seer=caml_string_of_jsbytes("seer"),
     cst_Robber$0=caml_string_of_jsbytes("Robber"),
     cst_Seer$0=caml_string_of_jsbytes("Seer"),
     cst_robber$0=caml_string_of_jsbytes("robber"),
     cst_seer$0=caml_string_of_jsbytes("seer"),
     cst_Game_types_Card=caml_string_of_jsbytes("Game_types__Card"),
     cst_game_types$2=caml_string_of_jsbytes("game_types"),
     cst_protocol_types_card_ml=
      caml_string_of_jsbytes("protocol/types/card.ml"),
     cst$0=caml_string_of_jsbytes(""),
     cst_game_types$3=caml_string_of_jsbytes("game_types"),
     tp_loc=caml_string_of_jsbytes("protocol/types/card.ml.T.t"),
     cst_game_types$4=caml_string_of_jsbytes("game_types"),
     cst_Game_types_Card$0=caml_string_of_jsbytes("Game_types__Card"),
     Ppx_module_timer_runtime=global_data.Ppx_module_timer_runtime,
     Ppx_bench_lib_Benchmark_accumu=
      global_data.Ppx_bench_lib__Benchmark_accumulator,
     Expect_test_collector=global_data.Expect_test_collector,
     Ppx_inline_test_lib_Runtime=global_data.Ppx_inline_test_lib__Runtime,
     include=global_data.Core_kernel__String,
     Sexplib0_Sexp_conv_error=global_data.Sexplib0__Sexp_conv_error,
     Base_Hash=global_data.Base__Hash,
     Core_kernel_Comparable=global_data.Core_kernel__Comparable,
     Core_kernel_Hashable=global_data.Core_kernel__Hashable,
     Game_types=[0];
    caml_register_global(25,Game_types,"Game_types");
    caml_call1(Ppx_module_timer_runtime[4],cst_Game_types_Username);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_game_types);
    caml_call1(Expect_test_collector[4][1],cst_protocol_types_username_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_game_types$0,cst);
    var
     _a_=include[1],
     _b_=include[2],
     _c_=include[3],
     _d_=include[4],
     _e_=include[5],
     _f_=include[6],
     _g_=include[7],
     _h_=include[8],
     _i_=include[9],
     _j_=include[10],
     _k_=include[11],
     _l_=include[12],
     _m_=include[13],
     _n_=include[14],
     _o_=include[15],
     _p_=include[16],
     _q_=include[17],
     _r_=include[18],
     _s_=include[19],
     _t_=include[20],
     _u_=include[21],
     _v_=include[22],
     _w_=include[23],
     _x_=include[24],
     _y_=include[25],
     _z_=include[26],
     _A_=include[27],
     _B_=include[28],
     _C_=include[29],
     _D_=include[30],
     _E_=include[31],
     _F_=include[32],
     _G_=include[33],
     _H_=include[34],
     _I_=include[35],
     _J_=include[36],
     _K_=include[37],
     _L_=include[38],
     _M_=include[39],
     _N_=include[40],
     _O_=include[41],
     _P_=include[42],
     _Q_=include[43],
     _R_=include[44],
     _S_=include[45],
     _T_=include[46],
     _U_=include[47],
     _V_=include[48],
     _W_=include[49],
     _X_=include[50],
     _Y_=include[51],
     _Z_=include[52],
     ___=include[53],
     _$_=include[54],
     _aa_=include[55],
     _ab_=include[56],
     _ac_=include[57],
     _ad_=include[58],
     _ae_=include[59],
     _af_=include[60],
     _ag_=include[61],
     _ah_=include[62],
     _ai_=include[63],
     _aj_=include[64],
     _ak_=include[65],
     _al_=include[66],
     _am_=include[67],
     _an_=include[68],
     _ao_=include[69],
     _ap_=include[70],
     _aq_=include[71],
     _ar_=include[72],
     _as_=include[73],
     _at_=include[74],
     _au_=include[75],
     _av_=include[76],
     _aw_=include[77],
     _ax_=include[78],
     _ay_=include[79],
     _az_=include[80],
     _aA_=include[81],
     _aB_=include[82],
     _aC_=include[83],
     _aD_=include[84],
     _aE_=include[85],
     _aF_=include[86],
     _aG_=include[87],
     _aH_=include[88],
     _aI_=include[89],
     _aJ_=include[90],
     _aK_=include[91],
     _aL_=include[92],
     _aM_=include[93],
     _aN_=include[94],
     _aO_=include[95],
     _aP_=include[96],
     _aQ_=include[97],
     _aR_=include[98],
     _aS_=include[99],
     _aT_=include[100],
     _aU_=include[101],
     _aV_=include[102],
     _aW_=include[103],
     _aX_=include[104],
     _aY_=include[105],
     _aZ_=include[106],
     _a0_=include[107],
     _a1_=include[108],
     _a2_=include[109],
     _a3_=include[110],
     _a4_=include[111],
     _a5_=include[112],
     _a6_=include[113],
     _a7_=include[114],
     _a8_=include[115],
     _a9_=include[116],
     _a__=include[117],
     _a$_=include[118],
     _ba_=include[119],
     _bb_=include[120],
     _bc_=include[121],
     _bd_=include[122],
     _be_=include[123],
     _bf_=include[124],
     _bg_=include[125],
     _bh_=include[126],
     _bi_=include[127],
     _bj_=include[128],
     _bk_=include[129],
     _bl_=include[130],
     _bm_=include[131],
     _bn_=include[132],
     _bo_=include[133],
     _bp_=include[134],
     _bq_=include[135],
     _br_=include[136],
     _bs_=include[137],
     _bt_=include[138],
     _bu_=include[139],
     _bv_=include[140];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_game_types$1);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Game_types_Username$0);
    var
     Game_types_Username=
      [0,
       _a_,
       _b_,
       _c_,
       _d_,
       _e_,
       _f_,
       _g_,
       _h_,
       _i_,
       _j_,
       _k_,
       _l_,
       _m_,
       _n_,
       _o_,
       _p_,
       _q_,
       _r_,
       _s_,
       _t_,
       _u_,
       _v_,
       _w_,
       _x_,
       _y_,
       _z_,
       _A_,
       _B_,
       _C_,
       _D_,
       _E_,
       _F_,
       _G_,
       _H_,
       _I_,
       _J_,
       _K_,
       _L_,
       _M_,
       _N_,
       _O_,
       _P_,
       _Q_,
       _R_,
       _S_,
       _T_,
       _U_,
       _V_,
       _W_,
       _X_,
       _Y_,
       _Z_,
       ___,
       _$_,
       _aa_,
       _ab_,
       _ac_,
       _ad_,
       _ae_,
       _af_,
       _ag_,
       _ah_,
       _ai_,
       _aj_,
       _ak_,
       _al_,
       _am_,
       _an_,
       _ao_,
       _ap_,
       _aq_,
       _ar_,
       _as_,
       _at_,
       _au_,
       _av_,
       _aw_,
       _ax_,
       _ay_,
       _az_,
       _aA_,
       _aB_,
       _aC_,
       _aD_,
       _aE_,
       _aF_,
       _aG_,
       _aH_,
       _aI_,
       _aJ_,
       _aK_,
       _aL_,
       _aM_,
       _aN_,
       _aO_,
       _aP_,
       _aQ_,
       _aR_,
       _aS_,
       _aT_,
       _aU_,
       _aV_,
       _aW_,
       _aX_,
       _aY_,
       _aZ_,
       _a0_,
       _a1_,
       _a2_,
       _a3_,
       _a4_,
       _a5_,
       _a6_,
       _a7_,
       _a8_,
       _a9_,
       _a__,
       _a$_,
       _ba_,
       _bb_,
       _bc_,
       _bd_,
       _be_,
       _bf_,
       _bg_,
       _bh_,
       _bi_,
       _bj_,
       _bk_,
       _bl_,
       _bm_,
       _bn_,
       _bo_,
       _bp_,
       _bq_,
       _br_,
       _bs_,
       _bt_,
       _bu_,
       _bv_];
    caml_register_global(31,Game_types_Username,"Game_types__Username");
    caml_call1(Ppx_module_timer_runtime[4],cst_Game_types_Card);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_game_types$2);
    caml_call1(Expect_test_collector[4][1],cst_protocol_types_card_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_game_types$3,cst$0);
    var
     compare=runtime.caml_int_compare,
     _bw_=[0,caml_string_of_jsbytes("Seer")],
     _bx_=[0,caml_string_of_jsbytes("Robber")];
    function hash_fold_t(hsv,arg)
     {return arg?caml_call2(Base_Hash[3],hsv,1):caml_call2(Base_Hash[3],hsv,0)}
    function hash(x)
     {var hsv=caml_call2(Base_Hash[11],0,0),_b5_=hash_fold_t(hsv,x);
      return caml_call1(Base_Hash[9],_b5_)}
    function t_of_sexp(sexp)
     {if(0 === sexp[0])
       {var _b1_=sexp[1],switch$0=0;
        if(caml_string_notequal(_b1_,cst_Robber))
         {var switch$1=0;
          if(caml_string_notequal(_b1_,cst_Seer))
           if(caml_string_notequal(_b1_,cst_robber))
            {if(caml_string_notequal(_b1_,cst_seer))
              {switch$0 = 1;switch$1 = 1}}
           else
            switch$1 = 1;
          if(! switch$1)return 1}
        if(! switch$0)return 0}
      else
       {var _b2_=sexp[1];
        if(! _b2_)return caml_call2(Sexplib0_Sexp_conv_error[7],tp_loc,sexp);
        var _b3_=_b2_[1];
        if(0 !== _b3_[0])
         return caml_call2(Sexplib0_Sexp_conv_error[6],tp_loc,sexp);
        var _b4_=_b3_[1],switch$2=0;
        if(caml_string_notequal(_b4_,cst_Robber$0))
         {var switch$3=0;
          if(caml_string_notequal(_b4_,cst_Seer$0))
           if(caml_string_notequal(_b4_,cst_robber$0))
            {if(caml_string_notequal(_b4_,cst_seer$0))
              {switch$2 = 1;switch$3 = 1}}
           else
            switch$3 = 1;
          if(! switch$3)
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc,sexp)}
        if(! switch$2)
         return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc,sexp)}
      return caml_call2(Sexplib0_Sexp_conv_error[8],tp_loc,sexp)}
    function sexp_of_t(param){return param?_bw_:_bx_}
    var
     _by_=
      caml_call1(Core_kernel_Comparable[8],[0,compare,t_of_sexp,sexp_of_t]),
     _bz_=_by_[1],
     _bA_=_by_[2],
     _bB_=_by_[3],
     _bC_=_by_[4],
     _bD_=_by_[5],
     _bE_=_by_[6],
     _bF_=_by_[7],
     _bG_=_by_[9],
     _bH_=_by_[10],
     _bI_=_by_[11],
     _bJ_=_by_[12],
     _bK_=_by_[13],
     _bL_=_by_[14],
     _bM_=_by_[15],
     _bN_=_by_[16],
     _bO_=_by_[17],
     _bP_=_by_[18],
     _bQ_=_by_[19],
     _bR_=_by_[20],
     _bS_=_by_[21],
     _bT_=_by_[22],
     include$0=
      caml_call1
       (Core_kernel_Hashable[3],
        [0,hash_fold_t,t_of_sexp,compare,sexp_of_t,hash]),
     _bU_=include$0[1],
     _bV_=include$0[2],
     _bW_=include$0[3],
     _bX_=include$0[4],
     _bY_=include$0[5],
     _bZ_=include$0[6],
     _b0_=include$0[7];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_game_types$4);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Game_types_Card$0);
    var
     Game_types_Card=
      [0,
       t_of_sexp,
       sexp_of_t,
       _bz_,
       _bA_,
       _bB_,
       _bC_,
       _bD_,
       _bE_,
       _bF_,
       _bG_,
       _bH_,
       _bI_,
       _bJ_,
       _bK_,
       _bL_,
       _bM_,
       _bN_,
       _bO_,
       _bP_,
       _bQ_,
       _bR_,
       _bS_,
       _bT_,
       _bU_,
       _bV_,
       _bW_,
       _bX_,
       _bY_,
       _bZ_,
       _b0_];
    caml_register_global(36,Game_types_Card,"Game_types__Card");
    return}
  (function(){return this}()));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiIuZ2FtZV90eXBlcy5vYmpzL2dhbWVfdHlwZXMuY21hLmpzIiwic291cmNlUm9vdCI6IiIsIm5hbWVzIjpbInRwX2xvYyIsImNvbXBhcmUiLCJoYXNoX2ZvbGRfdCIsImhzdiIsImFyZyIsImhhc2giLCJ4IiwidF9vZl9zZXhwIiwic2V4cCIsInNleHBfb2ZfdCJdLCJzb3VyY2VzIjpbIi9Vc2Vycy9qdmFuYnJpZXNlbi9pbmNyLWRvbS13ZXJld29sZi9fYnVpbGQvZGVmYXVsdC9wcm90b2NvbC90eXBlcy9jYXJkLm1sIiwiL1VzZXJzL2p2YW5icmllc2VuL2luY3ItZG9tLXdlcmV3b2xmL19idWlsZC9kZWZhdWx0L3Byb3RvY29sL3R5cGVzL3VzZXJuYW1lLm1sIl0sIm1hcHBpbmdzIjoiOztJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7S0FHRUE7Ozs7Ozs7Ozs7Ozs7Ozs7O0lDSEY7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBQTBCOzs7O0lBQTFCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJREFBOztJQ0FBO0tEQUE7OzthQUdFRTtNLE9BQUFFLElBQWdCLHdCQUFoQkQsT0FBUyx3QkFBVEE7SUFIRixTQUdFRTs7MENBQXVEO0lBSHpELFNBR0VFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztnRUFBdUQ7SUFIekQsU0FHRUUsdUNBQXVEO0lBSHpEOzs4Q0FHRVI7S0FIRjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O1dBR0VDO0tBSEY7Ozs7Ozs7SUFReUI7Ozs7SUFSekI7OztPQUdFSzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztVIiwic291cmNlc0NvbnRlbnQiOlsib3BlbiBDb3JlX2tlcm5lbFxuXG5tb2R1bGUgVCA9IHN0cnVjdFxuICB0eXBlIHQgPSBSb2JiZXIgfCBTZWVyIFtAQGRlcml2aW5nIGNvbXBhcmUsIGhhc2gsIHNleHBdXG5lbmRcblxuaW5jbHVkZSBUXG5pbmNsdWRlIENvbXBhcmFibGUuTWFrZSAoVClcbmluY2x1ZGUgSGFzaGFibGUuTWFrZSAoVClcbiIsImluY2x1ZGUgQ29yZV9rZXJuZWwuU3RyaW5nXG4iXX0=
